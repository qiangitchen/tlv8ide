{
  "!name": "webidl",
  "!define": {
    "ScrollFrameDataEntry": {
      "key": "string",
      "value": "string"
    },
    "ScrollFrameData": {
      "scrollId": "number",
      "entries": "[ScrollFrameDataEntry]"
    },
    "APZBucket": {
      "sequenceNumber": "number",
      "scrollFrames": "[ScrollFrameData]"
    },
    "APZTestData": {
      "paints": "[APZBucket]",
      "repaintRequests": "[APZBucket]"
    },
    "FrameUniformity": {
      "layerAddress": "number",
      "frameUniformity": "number"
    },
    "FrameUniformityResults": {
      "layerUniformities": "[FrameUniformity]"
    },
    "AbstractWorker": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker",
      "!doc": "The AbstractWorker interface of the Web Workers API abstracts properties and methods common to all kind of workers, being Worker or SharedWorker.",
      "onerror": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
        "!doc": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker."
      }
    },
    "Animatable": {
      "getAnimations": "fn() -> [Animation]"
    },
    "AnimationEffectTimingProperties": {
      "delay": "number",
      "endDelay": "number",
      "fill": "FillMode",
      "iterationStart": "number",
      "iterations": "number",
      "duration": "number|string",
      "direction": "PlaybackDirection",
      "easing": "string"
    },
    "ComputedTimingProperties": {
      "endTime": "number",
      "activeDuration": "number",
      "localTime": "number",
      "progress": "number",
      "currentIteration": "number"
    },
    "AnimationEventInit": {
      "animationName": "string",
      "elapsedTime": "number",
      "pseudoElement": "string"
    },
    "AnimationPlaybackEventInit": {
      "currentTime": "number",
      "timelineTime": "number"
    },
    "AppInfo": {
      "path": "string",
      "isCoreApp": "bool"
    },
    "AppNotificationServiceOptions": {
      "textClickable": "bool",
      "manifestURL": "string",
      "id": "string",
      "dbId": "string",
      "dir": "string",
      "lang": "string",
      "tag": "string",
      "data": "string",
      "mozbehavior": "NotificationBehavior"
    },
    "InstallParameters": {
      "receipts": "[string]",
      "categories": "[string]"
    },
    "LanguageDesc": {
      "target": "string",
      "revision": "number",
      "name": "string"
    },
    "DOMApplicationsRegistry": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry",
      "!doc": "Provides support for installing, managing, and controlling Open Web apps in a browser. Currently implemented as navigator.mozApps.",
      "mgmt": {
        "!type": "DOMApplicationsManager",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry/mgmt",
        "!doc": "The DOMApplicationsRegistry.mgmt read-only is an object implementing the DOMApplicationsManager interface that exposes functions that let dashboards manage and launch apps on a user's behalf."
      },
      "install": {
        "!type": "fn(url: string, params?: InstallParameters) -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry/install",
        "!doc": "Triggers the installation of an app. During the installation process, the app is validated and the user is prompted to approve the installation."
      },
      "installPackage": {
        "!type": "fn(url: string, params?: InstallParameters) -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry/installPackage",
        "!doc": "Installs a packaged app."
      },
      "getSelf": {
        "!type": "fn() -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry/getSelf",
        "!doc": "Returns information about the calling app, if any. You can use this to determine if an app is installed (i.e. if it is running in the browser, or in a separate app context.)"
      },
      "getInstalled": {
        "!type": "fn() -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry/getInstalled",
        "!doc": "Get a list of all installed apps from this origin. For example, if you call this on the Firefox Marketplace, you will get the list of apps installed by the Firefox Marketplace."
      },
      "checkInstalled": {
        "!type": "fn(manifestUrl: string) -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMApplicationsRegistry/checkInstalled",
        "!doc": "Gets information about the given app. This can be used to determine if the app is installed."
      },
      "getAdditionalLanguages": "fn() -> +Promise",
      "getLocalizationResource": "fn(language: string, version: string, path: string, dataType: LocaleResourceType) -> +Promise[value=?]"
    },
    "ArchiveReaderOptions": {
      "encoding": "string"
    },
    "AudioNodePassThrough": {
      "passThrough": "bool"
    },
    "AutocompleteErrorEventInit": {
      "reason": "AutoCompleteErrorReason"
    },
    "AutocompleteInfo": {
      "section": "string",
      "addressType": "string",
      "contactType": "string",
      "fieldName": "string"
    },
    "BeforeAfterKeyboardEventInit": {
      "embeddedCancelled": "bool"
    },
    "BlobPropertyBag": {
      "type": "string",
      "endings": "EndingTypes"
    },
    "BlobEventInit": {
      "data": "+Blob"
    },
    "MediaMetaData": {
      "title": "string",
      "artist": "string",
      "album": "string",
      "mediaNumber": "number",
      "totalMediaCount": "number",
      "duration": "number"
    },
    "MediaPlayStatus": {
      "duration": "number",
      "position": "number",
      "playStatus": "string"
    },
    "BluetoothAdapterEventInit": {
      "adapter": "BluetoothAdapter",
      "address": "string"
    },
    "BluetoothAttributeEventInit": {
      "attrs": "[string]"
    },
    "BluetoothDeviceEventInit": {
      "device": "BluetoothDevice",
      "address": "string"
    },
    "BluetoothGattAttributeEventInit": {
      "address": "string",
      "requestId": "number",
      "characteristic": "BluetoothGattCharacteristic",
      "descriptor": "BluetoothGattDescriptor",
      "value": "+ArrayBuffer",
      "needResponse": "bool"
    },
    "GattCharacteristicProperties": {
      "broadcast": "bool",
      "read": "bool",
      "writeNoResponse": "bool",
      "write": "bool",
      "notify": "bool",
      "indicate": "bool",
      "signedWrite": "bool",
      "extendedProps": "bool"
    },
    "GattPermissions": {
      "read": "bool",
      "readEncrypted": "bool",
      "readEncryptedMITM": "bool",
      "write": "bool",
      "writeEncrypted": "bool",
      "writeEncryptedMITM": "bool",
      "writeSigned": "bool",
      "writeSignedMITM": "bool"
    },
    "BluetoothGattCharacteristicEventInit": {
      "characteristic": "BluetoothGattCharacteristic"
    },
    "BluetoothGattServiceInit": {
      "isPrimary": "bool",
      "uuid": "string"
    },
    "BluetoothLeDeviceEventInit": {
      "device": "BluetoothDevice",
      "rssi": "number",
      "scanRecord": "+ArrayBuffer"
    },
    "BluetoothMapFolderListingEventInit": {
      "maxListCount": "number",
      "listStartOffset": "number",
      "handle": "BluetoothMapRequestHandle"
    },
    "BluetoothMapGetMessageEventInit": {
      "hasAttachment": "bool",
      "charset": "FilterCharset",
      "handle": "BluetoothMapRequestHandle"
    },
    "BluetoothMapMessageUpdateEventInit": {
      "instanceId": "number",
      "handle": "BluetoothMapRequestHandle"
    },
    "BluetoothMapMessagesListingEventInit": {
      "maxListCount": "number",
      "listStartOffset": "number",
      "subjectLength": "number",
      "parameterMask": "[ParameterMask]",
      "filterMessageType": "MessageType",
      "filterPeriodBegin": "string",
      "filterPeriodEnd": "string",
      "filterReadStatus": "ReadStatus",
      "filterRecipient": "string",
      "filterOriginator": "string",
      "filterPriority": "Priority",
      "handle": "BluetoothMapRequestHandle"
    },
    "BluetoothMapSendMessageEventInit": {
      "recipient": "string",
      "messageBody": "string",
      "retry": "number",
      "handle": "BluetoothMapRequestHandle"
    },
    "BluetoothMapSetMessageStatusEventInit": {
      "handleId": "number",
      "statusIndicator": "StatusIndicators",
      "statusValue": "bool",
      "handle": "BluetoothMapRequestHandle"
    },
    "BluetoothObexAuthEventInit": {
      "userId": "string",
      "handle": "BluetoothObexAuthHandle"
    },
    "BluetoothPairingEventInit": {
      "deviceName": "string",
      "handle": "BluetoothPairingHandle"
    },
    "BluetoothPhonebookPullingEventInit": {
      "name": "string",
      "format": "vCardVersion",
      "propSelector": "[vCardProperties]",
      "maxListCount": "number",
      "listStartOffset": "number",
      "vcardSelector": "[vCardProperties]",
      "vcardSelectorOperator": "vCardSelectorOp",
      "handle": "BluetoothPbapRequestHandle"
    },
    "BluetoothStatusChangedEventInit": {
      "address": "string",
      "status": "bool"
    },
    "BluetoothVCardListingEventInit": {
      "name": "string",
      "order": "vCardOrderType",
      "searchValue": "string",
      "searchKey": "vCardSearchKeyType",
      "maxListCount": "number",
      "listStartOffset": "number",
      "vcardSelector": "[vCardProperties]",
      "vcardSelectorOperator": "vCardSelectorOp",
      "handle": "BluetoothPbapRequestHandle"
    },
    "BluetoothVCardPullingEventInit": {
      "name": "string",
      "format": "vCardVersion",
      "propSelector": "[vCardProperties]",
      "handle": "BluetoothPbapRequestHandle"
    },
    "BrowserElementDownloadOptions": {
      "filename": "string",
      "referrer": "string"
    },
    "BrowserElementExecuteScriptOptions": {
      "url": "string",
      "origin": "string"
    },
    "BrowserElement": {
      "setVisible": "fn(visible: bool)",
      "getVisible": "fn() -> DOMRequest",
      "setActive": "fn(active: bool)",
      "getActive": "fn() -> bool",
      "addNextPaintListener": "fn(listener: fn())",
      "removeNextPaintListener": "fn(listener: fn())",
      "sendMouseEvent": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)",
      "sendTouchEvent": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)",
      "goBack": "fn()",
      "goForward": "fn()",
      "reload": "fn(hardReload?: bool)",
      "stop": "fn()",
      "download": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest",
      "purgeHistory": "fn() -> DOMRequest",
      "getScreenshot": "fn(width: number, height: number, mimeType?: string) -> DOMRequest",
      "zoom": "fn(zoom: number)",
      "getCanGoBack": "fn() -> DOMRequest",
      "getCanGoForward": "fn() -> DOMRequest",
      "getContentDimensions": "fn() -> DOMRequest",
      "setInputMethodActive": "fn(isActive: bool) -> DOMRequest",
      "setNFCFocus": "fn(isFocus: bool)",
      "findAll": "fn(searchString: string, caseSensitivity: BrowserFindCaseSensitivity)",
      "findNext": "fn(direction: BrowserFindDirection)",
      "clearMatch": "fn()",
      "executeScript": "fn(script: string, options?: BrowserElementExecuteScriptOptions) -> DOMRequest",
      "getStructuredData": "fn() -> DOMRequest",
      "getWebManifest": "fn() -> DOMRequest",
      "allowedAudioChannels": "[BrowserElementAudioChannel]",
      "mute": "fn()",
      "unmute": "fn()",
      "getMuted": "fn() -> DOMRequest",
      "setVolume": "fn(volume: number)",
      "getVolume": "fn() -> DOMRequest"
    },
    "BrowserElementCommon": {
      "setVisible": "fn(visible: bool)",
      "getVisible": "fn() -> DOMRequest",
      "setActive": "fn(active: bool)",
      "getActive": "fn() -> bool",
      "addNextPaintListener": "fn(listener: fn())",
      "removeNextPaintListener": "fn(listener: fn())"
    },
    "BrowserElementPrivileged": {
      "sendMouseEvent": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)",
      "sendTouchEvent": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)",
      "goBack": "fn()",
      "goForward": "fn()",
      "reload": "fn(hardReload?: bool)",
      "stop": "fn()",
      "download": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest",
      "purgeHistory": "fn() -> DOMRequest",
      "getScreenshot": "fn(width: number, height: number, mimeType?: string) -> DOMRequest",
      "zoom": "fn(zoom: number)",
      "getCanGoBack": "fn() -> DOMRequest",
      "getCanGoForward": "fn() -> DOMRequest",
      "getContentDimensions": "fn() -> DOMRequest",
      "setInputMethodActive": "fn(isActive: bool) -> DOMRequest",
      "setNFCFocus": "fn(isFocus: bool)",
      "findAll": "fn(searchString: string, caseSensitivity: BrowserFindCaseSensitivity)",
      "findNext": "fn(direction: BrowserFindDirection)",
      "clearMatch": "fn()",
      "executeScript": "fn(script: string, options?: BrowserElementExecuteScriptOptions) -> DOMRequest",
      "getStructuredData": "fn() -> DOMRequest",
      "getWebManifest": "fn() -> DOMRequest",
      "allowedAudioChannels": "[BrowserElementAudioChannel]",
      "mute": "fn()",
      "unmute": "fn()",
      "getMuted": "fn() -> DOMRequest",
      "setVolume": "fn(volume: number)",
      "getVolume": "fn() -> DOMRequest"
    },
    "OpenWindowEventDetail": {
      "url": "string",
      "name": "string",
      "features": "string",
      "frameElement": "Node"
    },
    "DOMWindowResizeEventDetail": {
      "width": "number",
      "height": "number"
    },
    "CFStateChangeEventInit": {
      "action": "number",
      "reason": "number",
      "number": "string",
      "timeSeconds": "number",
      "serviceClass": "number"
    },
    "CSP": {
      "referrer": "[string]"
    },
    "CSPPolicies": {},
    "CSPReportProperties": {
      "referrer": "string"
    },
    "CSPReport": {},
    "CSSToken": {
      "tokenType": "CSSTokenType",
      "startOffset": "number",
      "endOffset": "number",
      "number": "number",
      "hasSign": "bool",
      "isInteger": "bool",
      "text": "string"
    },
    "CacheQueryOptions": {
      "ignoreSearch": "bool",
      "ignoreMethod": "bool",
      "ignoreVary": "bool",
      "cacheName": "string"
    },
    "CacheBatchOperation": {
      "type": "string",
      "request": "+Request",
      "response": "+Response",
      "options": "CacheQueryOptions"
    },
    "CallEventInit": {
      "call": "TelephonyCall"
    },
    "CallGroupErrorEventInit": {
      "name": "string",
      "message": "string"
    },
    "CallsList": {
      "item": "fn(index: number) -> TelephonyCall",
      "length": "number",
      "<i>": "TelephonyCall"
    },
    "CameraClosedEventInit": {
      "reason": "string"
    },
    "CameraConfigurationEventInit": {
      "mode": "CameraMode",
      "recorderProfile": "string",
      "previewSize": "DOMRectReadOnly",
      "pictureSize": "DOMRectReadOnly"
    },
    "CameraRegion": {
      "top": "number",
      "left": "number",
      "bottom": "number",
      "right": "number",
      "weight": "number"
    },
    "CameraPosition": {
      "latitude": "number",
      "longitude": "number",
      "altitude": "number",
      "timestamp": "number"
    },
    "CameraPictureOptions": {
      "pictureSize": "CameraSize",
      "fileFormat": "string",
      "rotation": "number",
      "position": "CameraPosition",
      "dateTime": "number"
    },
    "CameraStartRecordingOptions": {
      "rotation": "number",
      "maxFileSizeBytes": "number",
      "maxVideoLengthMs": "number",
      "autoEnableLowLightTorch": "bool",
      "createPoster": "bool"
    },
    "CameraDetectedFaceInit": {
      "id": "number",
      "score": "number",
      "bounds": "CameraRegion",
      "hasLeftEye": "bool",
      "leftEye": "DOMPointInit",
      "hasRightEye": "bool",
      "rightEye": "DOMPointInit",
      "hasMouth": "bool",
      "mouth": "DOMPointInit"
    },
    "CameraFacesDetectedEventInit": {
      "faces": "[+CameraDetectedFace]"
    },
    "CameraSize": {
      "width": "number",
      "height": "number"
    },
    "CameraConfiguration": {
      "mode": "CameraMode",
      "previewSize": "CameraSize",
      "pictureSize": "CameraSize",
      "recorderProfile": "string"
    },
    "CameraStateChangeEventInit": {
      "newState": "string"
    },
    "CameraGetPromiseData": {
      "camera": "CameraControl",
      "configuration": "CameraConfiguration"
    },
    "ContextAttributes2D": {
      "willReadFrequently": "bool",
      "alpha": "bool"
    },
    "HitRegionOptions": {
      "path": "+Path2D",
      "id": "string",
      "control": "HTMLElement"
    },
    "CanvasImageSource": "+HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap",
    "CanvasDrawingStyles": {
      "lineWidth": "number",
      "lineCap": "string",
      "lineJoin": "string",
      "miterLimit": "number",
      "setLineDash": "fn(segments: [number])",
      "getLineDash": "fn() -> [number]",
      "lineDashOffset": "number",
      "font": "string",
      "textAlign": "string",
      "textBaseline": "string"
    },
    "CanvasPathMethods": {
      "closePath": "fn()",
      "moveTo": "fn(x: number, y: number)",
      "lineTo": "fn(x: number, y: number)",
      "quadraticCurveTo": "fn(cpx: number, cpy: number, x: number, y: number)",
      "bezierCurveTo": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)",
      "arcTo": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)",
      "rect": "fn(x: number, y: number, w: number, h: number)",
      "arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)"
    },
    "CaretStateChangedEventInit": {
      "collapsed": "bool",
      "boundingClientRect": "DOMRectReadOnly",
      "reason": "CaretChangedReason",
      "caretVisible": "bool",
      "caretVisuallyVisible": "bool",
      "selectionVisible": "bool",
      "selectionEditable": "bool",
      "selectedTextContent": "string"
    },
    "ChildNode": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChildNode",
      "!doc": "The ChildNode interface contains methods that are particular to Node objects that can have a parent.",
      "remove": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
        "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
      }
    },
    "NonDocumentTypeChildNode": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode",
      "!doc": "The NonDocumentTypeChildNode interface contains methods that are particular to Node objects that can have a parent, but not suitable for DocumentType.",
      "previousElementSibling": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
        "!doc": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list."
      },
      "nextElementSibling": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
        "!doc": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list."
      }
    },
    "OriginAttributesDictionary": {
      "appId": "number",
      "userContextId": "number",
      "inBrowser": "bool",
      "addonId": "string",
      "signedPkg": "string"
    },
    "OriginAttributesPatternDictionary": {
      "appId": "number",
      "userContextId": "number",
      "inBrowser": "bool",
      "addonId": "string",
      "signedPkg": "string"
    },
    "ClientQueryOptions": {
      "includeUncontrolled": "bool",
      "type": "ClientType"
    },
    "ClipboardEventInit": {
      "data": "string",
      "dataType": "string"
    },
    "CloseEventInit": {
      "wasClean": "bool",
      "code": "number",
      "reason": "string"
    },
    "ConsoleEvent": {
      "ID": "number|string",
      "innerID": "number|string",
      "level": "string",
      "filename": "string",
      "lineNumber": "number",
      "columnNumber": "number",
      "functionName": "string",
      "timeStamp": "number",
      "arguments": "[?]",
      "styles": "[?]",
      "private": "bool",
      "groupName": "string",
      "timer": "?",
      "counter": "?"
    },
    "ConsoleProfileEvent": {
      "action": "string",
      "arguments": "[?]"
    },
    "ConsoleStackEntry": {
      "filename": "string",
      "lineNumber": "number",
      "columnNumber": "number",
      "functionName": "string",
      "language": "number",
      "asyncCause": "string"
    },
    "ConsoleTimerStart": {
      "name": "string",
      "started": "number"
    },
    "ConsoleTimerEnd": {
      "name": "string",
      "duration": "number"
    },
    "ConsoleTimerError": {
      "error": "string"
    },
    "ConsoleCounter": {
      "label": "string",
      "count": "number"
    },
    "ConsoleCounterError": {
      "error": "string"
    },
    "ConstrainLongRange": {
      "min": "number",
      "max": "number",
      "exact": "number",
      "ideal": "number"
    },
    "ConstrainDoubleRange": {
      "min": "number",
      "max": "number",
      "exact": "number",
      "ideal": "number"
    },
    "ConstrainBooleanParameters": {
      "exact": "bool",
      "ideal": "bool"
    },
    "ConstrainDOMStringParameters": {
      "exact": "string|[string]",
      "ideal": "string|[string]"
    },
    "ContactAddress": {
      "type": "[string]",
      "streetAddress": "string",
      "locality": "string",
      "region": "string",
      "postalCode": "string",
      "countryName": "string",
      "pref": "bool"
    },
    "ContactField": {
      "type": "[string]",
      "value": "string",
      "pref": "bool"
    },
    "ContactTelField": {
      "carrier": "string"
    },
    "ContactProperties": {
      "bday": "Date",
      "anniversary": "Date",
      "sex": "string",
      "genderIdentity": "string",
      "photo": "[+Blob]",
      "adr": "[ContactAddress]",
      "email": "[ContactField]",
      "url": "[ContactField]",
      "impp": "[ContactField]",
      "tel": "[ContactTelField]",
      "name": "[string]",
      "honorificPrefix": "[string]",
      "givenName": "[string]",
      "phoneticGivenName": "[string]",
      "additionalName": "[string]",
      "familyName": "[string]",
      "phoneticFamilyName": "[string]",
      "honorificSuffix": "[string]",
      "nickname": "[string]",
      "category": "[string]",
      "org": "[string]",
      "jobTitle": "[string]",
      "note": "[string]",
      "key": "[string]"
    },
    "ContactFindSortOptions": {
      "sortBy": "string",
      "sortOrder": "string"
    },
    "ContactFindOptions": {
      "filterValue": "string",
      "filterOp": "string",
      "filterBy": "?",
      "filterLimit": "number"
    },
    "ContactManager": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager",
      "!doc": "The ContactManager interface is used to access and manage the contact available on the device.",
      "!proto": "EventTarget",
      "find": {
        "!type": "fn(options?: ContactFindOptions) -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/find",
        "!doc": "The find method is used to retrieve a limited list of contacts from the device's contact database. This method is best suited to access a small data set, where getAll() is better suited for a large data set."
      },
      "getAll": {
        "!type": "fn(options?: ContactFindSortOptions) -> DOMCursor",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/getAll",
        "!doc": "The getAll method is used to access a sorted list of contact from the device's contact database. This method is best suited to access a large data set, where find() is better suited for a small data set."
      },
      "clear": {
        "!type": "fn() -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/clear",
        "!doc": "The clear method is used to remove ALL the contacts from the device's contact database."
      },
      "save": {
        "!type": "fn(contact: +mozContact) -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/save",
        "!doc": "The save method is used to store a contact inside the device's contact database. If the contact is already in the database (based on its id), it is updated, otherwise it is created."
      },
      "remove": {
        "!type": "fn(contactOrId: +mozContact) -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/remove",
        "!doc": "The remove method is used to delete a contact from the device's contact database."
      },
      "getRevision": {
        "!type": "fn() -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/getRevision",
        "!doc": "The getRevision method is used to retrieve the revision number of the device's contact database."
      },
      "getCount": {
        "!type": "fn() -> DOMRequest",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/getCount",
        "!doc": "The getCount method is used to retrieve the total number of contacts available inside the device's contact database."
      },
      "oncontactchange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ContactManager/oncontactchange",
        "!doc": "Specifies an event listener to receive contactchange events. These events occur when a contact is added, updated, or removed from the device's contact database."
      }
    },
    "ContainerBoxObject": {
      "!proto": "BoxObject",
      "docShell": "nsIDocShell"
    },
    "Coordinates": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates",
      "!doc": "The Coordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.",
      "latitude": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/latitude",
        "!doc": "The Coordinates.latitude read-only property is a double representing the latitude of the position in decimal degrees."
      },
      "longitude": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/longitude",
        "!doc": "The Coordinates.longitude read-only property is a double representing the longitude of the position in decimal degrees."
      },
      "altitude": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/altitude",
        "!doc": "The Coordinates.altitude read-only property is a double representing the altitude of the position in meters, relative to sea level. This value is null if the implementation cannot provide this data."
      },
      "accuracy": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/accuracy",
        "!doc": "The Coordinates.accuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the Coordinates.latitude and Coordinates.longitude properties expressed in meters."
      },
      "altitudeAccuracy": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/altitudeAccuracy",
        "!doc": "The Coordinates.altitudeAccuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the altitude expressed in meters. This value is null if the implementation doesn't support measuring altitude."
      },
      "heading": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/heading",
        "!doc": "The Coordinates.heading read-only property is a double representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading due north the device is. 0 degrees represents true true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If Coordinates.speed is 0, heading is NaN. If the device is not able to provide heading information, this value is null."
      },
      "speed": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Coordinates/speed",
        "!doc": "The Coordinates.speed read-only property is a double representing the velocity of the device in meters per second. This value is null if the implementation is not able to measure it."
      }
    },
    "GlobalCrypto": {
      "crypto": "Crypto"
    },
    "CustomEventInit": {
      "detail": "?"
    },
    "ExceptionMembers": {
      "message": "string",
      "result": "number",
      "name": "string",
      "filename": "string",
      "lineNumber": "number",
      "columnNumber": "number",
      "location": "StackFrame",
      "data": "nsISupports",
      "stack": "string"
    },
    "Exception": {
      "message": "string",
      "result": "number",
      "name": "string",
      "filename": "string",
      "lineNumber": "number",
      "columnNumber": "number",
      "location": "StackFrame",
      "data": "nsISupports",
      "stack": "string"
    },
    "DOMPointInit": {
      "x": "number",
      "y": "number",
      "z": "number",
      "w": "number"
    },
    "DOMRequestShared": {
      "readyState": "DOMRequestReadyState",
      "result": "?",
      "error": "+DOMError",
      "onsuccess": "fn(+Event)",
      "onerror": "fn(+Event)"
    },
    "DOMTransactionEventInit": {
      "transactions": "?"
    },
    "DataErrorEventInit": {
      "message": "string"
    },
    "DataStoreKey": "string|number",
    "DataStoreTask": {
      "revisionId": "string",
      "operation": "DataStoreOperation",
      "id": "DataStoreKey",
      "data": "?"
    },
    "DataStoreRevisionData": {
      "revisionId": "string",
      "objectId": "number",
      "operation": "string"
    },
    "DataStoreChangeEventInit": {
      "revisionId": "string",
      "id": "DataStoreKey",
      "operation": "string",
      "owner": "string"
    },
    "DeviceLightEventInit": {
      "value": "number"
    },
    "DeviceAcceleration": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration",
      "!doc": "A DeviceAcceleration object provides information about the amount of acceleration the device is experiencing along all three axes.",
      "x": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration/x",
        "!doc": "This read-only property indicates the amount of acceleration that occurred along the X axis in a DeviceAcceleration object."
      },
      "y": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration/y",
        "!doc": "This read-only property indicates the amount of acceleration that occurred along the Y axis in a DeviceAcceleration object."
      },
      "z": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration/z",
        "!doc": "This read-only property indicates the amount of acceleration that occurred along the Z axis in a DeviceAcceleration object."
      }
    },
    "DeviceRotationRate": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate",
      "!doc": "A DeviceRotationRate object provides information about the rate at which the device is rotating around all three axes.",
      "alpha": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate/alpha",
        "!doc": "This property indicates the rate of rotation around the Z axis -- in degrees per second -- in a DeviceRotationRate object."
      },
      "beta": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate/beta",
        "!doc": "This property indicates the rate of rotation around the X axis -- in degrees per second -- in a DeviceRotationRate object."
      },
      "gamma": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate/gamma",
        "!doc": "This property indicates the rate of rotation around the Y axis -- in degrees per second -- in a DeviceRotationRate object."
      }
    },
    "DeviceAccelerationInit": {
      "x": "number",
      "y": "number",
      "z": "number"
    },
    "DeviceRotationRateInit": {
      "alpha": "number",
      "beta": "number",
      "gamma": "number"
    },
    "DeviceMotionEventInit": {
      "acceleration": "DeviceAccelerationInit",
      "accelerationIncludingGravity": "DeviceAccelerationInit",
      "rotationRate": "DeviceRotationRateInit",
      "interval": "number"
    },
    "DeviceOrientationEventInit": {
      "alpha": "number",
      "beta": "number",
      "gamma": "number",
      "absolute": "bool"
    },
    "DeviceProximityEventInit": {
      "value": "number",
      "min": "number",
      "max": "number"
    },
    "DeviceStorageEnumerationParameters": {
      "since": "Date"
    },
    "DeviceStorageAreaChangedEventInit": {
      "operation": "DeviceStorageAreaChangedEventOperation",
      "storageName": "string"
    },
    "DeviceStorageChangeEventInit": {
      "path": "string",
      "reason": "string"
    },
    "CreateFileOptions": {
      "ifExists": "CreateIfExistsMode",
      "data": "string|+Blob|+ArrayBuffer|ArrayBufferView"
    },
    "NodeId": "number",
    "NodeSize": "number",
    "DownloadEventInit": {
      "download": "DOMDownload"
    },
    "DOMDownloadManager": {
      "!proto": "EventTarget",
      "getDownloads": "fn() -> +Promise",
      "remove": "fn(download: DOMDownload) -> +Promise[value=DOMDownload]",
      "clearAllDone": "fn()",
      "adoptDownload": "fn(download?: AdoptDownloadDict) -> +Promise[value=DOMDownload]",
      "ondownloadstart": "fn(+Event)"
    },
    "AdoptDownloadDict": {
      "url": "string",
      "storageName": "string",
      "storagePath": "string",
      "contentType": "string",
      "startTime": "Date"
    },
    "DragEventInit": {
      "dataTransfer": "DataTransfer"
    },
    "ScrollIntoViewOptions": {
      "block": "ScrollLogicalPosition"
    },
    "RequestFullscreenOptions": {
      "vrDisplay": "HMDVRDevice"
    },
    "ErrorEventInit": {
      "message": "string",
      "filename": "string",
      "lineno": "number",
      "colno": "number",
      "error": "?"
    },
    "EventInit": {
      "bubbles": "bool",
      "cancelable": "bool"
    },
    "EventHandler": "fn(event: +Event)",
    "OnBeforeUnloadEventHandler": "fn(event: +Event)",
    "OnErrorEventHandler": "fn(event: +Event, source?: string, lineno?: number, column?: number, error?: ?)",
    "GlobalEventHandlers": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers",
      "!doc": "The GlobalEventHandlers interface describes the event handlers common to several interfaces like HTMLElement, Document, Window, or WorkerGlobalScope for Web Workers. Each of these interfaces can implement more event handlers.",
      "onabort": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
        "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
      },
      "onblur": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
        "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
      },
      "onfocus": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
        "!doc": "The onfocus property returns the onFocus event handler code on the current element."
      },
      "oncanplay": "fn(+Event)",
      "oncanplaythrough": "fn(+Event)",
      "onchange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
        "!doc": "The onchange property sets and returns the event handler for the change event."
      },
      "onclick": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
        "!doc": "The onclick property returns the click event handler code on the current element."
      },
      "oncontextmenu": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
        "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
      },
      "ondblclick": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
        "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
      },
      "ondrag": "fn(+Event)",
      "ondragend": "fn(+Event)",
      "ondragenter": "fn(+Event)",
      "ondragleave": "fn(+Event)",
      "ondragover": "fn(+Event)",
      "ondragstart": "fn(+Event)",
      "ondrop": "fn(+Event)",
      "ondurationchange": "fn(+Event)",
      "onemptied": "fn(+Event)",
      "onended": "fn(+Event)",
      "oninput": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
        "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
      },
      "oninvalid": "fn(+Event)",
      "onkeydown": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
        "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
      },
      "onkeypress": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
        "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
      },
      "onkeyup": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
        "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
      },
      "onload": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
        "!doc": "An event handler for the load event of a window."
      },
      "onloadeddata": "fn(+Event)",
      "onloadedmetadata": "fn(+Event)",
      "onloadstart": "fn(+Event)",
      "onmousedown": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
        "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
      },
      "onmouseenter": "fn(+Event)",
      "onmouseleave": "fn(+Event)",
      "onmousemove": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
        "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
      },
      "onmouseout": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
        "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
      },
      "onmouseover": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
        "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
      },
      "onmouseup": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
        "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
      },
      "onpause": "fn(+Event)",
      "onplay": "fn(+Event)",
      "onplaying": "fn(+Event)",
      "onprogress": "fn(+Event)",
      "onratechange": "fn(+Event)",
      "onreset": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
        "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
      },
      "onresize": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
        "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
      },
      "onscroll": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
        "!doc": "An event handler for scroll events on element."
      },
      "onseeked": "fn(+Event)",
      "onseeking": "fn(+Event)",
      "onselect": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
        "!doc": "An event handler for the select event on the window."
      },
      "onshow": "fn(+Event)",
      "onstalled": "fn(+Event)",
      "onsubmit": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
        "!doc": "An event handler for the submit event on the window."
      },
      "onsuspend": "fn(+Event)",
      "ontimeupdate": "fn(+Event)",
      "onvolumechange": "fn(+Event)",
      "onwaiting": "fn(+Event)",
      "onselectstart": "fn(+Event)",
      "onpointercancel": "fn(+Event)",
      "onpointerdown": "fn(+Event)",
      "onpointerup": "fn(+Event)",
      "onpointermove": "fn(+Event)",
      "onpointerout": "fn(+Event)",
      "onpointerover": "fn(+Event)",
      "onpointerenter": "fn(+Event)",
      "onpointerleave": "fn(+Event)",
      "ongotpointercapture": "fn(+Event)",
      "onlostpointercapture": "fn(+Event)",
      "onmozfullscreenchange": "fn(+Event)",
      "onmozfullscreenerror": "fn(+Event)",
      "onmozpointerlockchange": "fn(+Event)",
      "onmozpointerlockerror": "fn(+Event)"
    },
    "WindowEventHandlers": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers",
      "!doc": "WindowEventHandlers describes the event handlers common to several interfaces like Window, or HTMLBodyElement and  HTMLFrameSetElement. Each of these interfaces can implement more event handlers.",
      "onafterprint": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
        "!doc": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window."
      },
      "onbeforeprint": "fn(+Event)",
      "onbeforeunload": {
        "!type": "OnBeforeUnloadEventHandler",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
        "!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
      },
      "onhashchange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
        "!doc": "The hashchange event fires when a window's hash changes (see location.hash)."
      },
      "onlanguagechange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
        "!doc": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages."
      },
      "onmessage": "fn(+Event)",
      "onoffline": "fn(+Event)",
      "ononline": "fn(+Event)",
      "onpagehide": "fn(+Event)",
      "onpageshow": "fn(+Event)",
      "onpopstate": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
        "!doc": "An event handler for the popstate event on the window."
      },
      "onstorage": "fn(+Event)",
      "onunload": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
        "!doc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
      }
    },
    "OnErrorEventHandlerForNodes": {
      "onerror": "fn(+Event)"
    },
    "OnErrorEventHandlerForWindow": {
      "onerror": "OnErrorEventHandler"
    },
    "EventSourceInit": {
      "withCredentials": "bool"
    },
    "ExtendableEventInit": {},
    "ExtendableMessageEventInit": {
      "data": "?",
      "origin": "string",
      "lastEventId": "string",
      "source": "Client|ServiceWorker|MessagePort",
      "ports": "[MessagePort]"
    },
    "ExternalAppEventInit": {
      "data": "string"
    },
    "FakePluginTagInit": {
      "handlerURI": "string",
      "mimeEntries": "[FakePluginMimeEntry]",
      "niceName": "string",
      "fullPath": "string",
      "name": "string",
      "description": "string",
      "fileName": "string",
      "version": "string"
    },
    "FakePluginMimeEntry": {
      "type": "string",
      "description": "string",
      "extension": "string"
    },
    "BodyInit": "+ArrayBuffer|ArrayBufferView|+Blob|+FormData|string|+URLSearchParams",
    "Body": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body",
      "!doc": "The Body mixin of the Fetch API represents the body of the response/request, allowing you to declare what its content type is and how it should be handled.",
      "bodyUsed": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed",
        "!doc": "The bodyUsed read-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet."
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=+ArrayBuffer]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer",
        "!doc": "The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer."
      },
      "blob": {
        "!type": "fn() -> +Promise[value=+Blob]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/blob",
        "!doc": "The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob."
      },
      "formData": {
        "!type": "fn() -> +Promise[value=+FormData]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/formData",
        "!doc": "The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object."
      },
      "json": {
        "!type": "fn() -> +Promise[value=object]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/json",
        "!doc": "The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an object literal containing the JSON data."
      },
      "text": {
        "!type": "fn() -> +Promise[value=string]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/text",
        "!doc": "The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text)."
      }
    },
    "GlobalFetch": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch",
      "!doc": "The GlobalFetch interface of the Fetch API contains the GlobalFetch.fetch method used to start the process of fetching a resource.",
      "fetch": {
        "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=+Response]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch",
        "!doc": "The fetch() method of the GlobalFetch interface starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request."
      }
    },
    "FetchEventInit": {
      "request": "+Request",
      "clientId": "string",
      "isReload": "bool"
    },
    "FilePropertyBag": {
      "type": "string",
      "lastModified": "number"
    },
    "ChromeFilePropertyBag": {
      "name": "string",
      "temporary": "bool"
    },
    "FocusEventInit": {
      "relatedTarget": "EventTarget"
    },
    "BinaryData": "+ArrayBuffer|ArrayBufferView",
    "FontFaceDescriptors": {
      "style": "string",
      "weight": "string",
      "stretch": "string",
      "unicodeRange": "string",
      "variant": "string",
      "featureSettings": "string"
    },
    "FontFaceSetIteratorResult": {
      "value": "?",
      "done": "bool"
    },
    "FontFaceSetIterator": {
      "next": "fn() -> FontFaceSetIteratorResult"
    },
    "FontFaceSetLoadEventInit": {
      "fontfaces": "[+FontFace]"
    },
    "FontFaceSource": {
      "fonts": "FontFaceSet"
    },
    "FormDataEntryValue": "+File|string",
    "GamepadAxisMoveEventInit": {
      "axis": "number",
      "value": "number"
    },
    "GamepadButtonEventInit": {
      "button": "number"
    },
    "GamepadEventInit": {
      "gamepad": "Gamepad"
    },
    "PositionOptions": {
      "enableHighAccuracy": "bool",
      "timeout": "number",
      "maximumAge": "number"
    },
    "Geolocation": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Geolocation",
      "!doc": "The Geolocation interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.",
      "getCurrentPosition": {
        "!type": "fn(successCallback: fn(position: Position), errorCallback?: fn(positionError: PositionError), options?: PositionOptions)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition",
        "!doc": "The Geolocation.getCurrentPosition() method is used to get the current position of the device."
      },
      "watchPosition": {
        "!type": "fn(successCallback: fn(position: Position), errorCallback?: fn(positionError: PositionError), options?: PositionOptions) -> number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition",
        "!doc": "The Geolocation.watchPosition() method is used to register a handler function that will be called automatically each time the position of the device changes. You can also, optionally, specify an error handling callback function."
      },
      "clearWatch": {
        "!type": "fn(watchId: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Geolocation/clearWatch",
        "!doc": "The Geolocation.clearWatch() method is used to unregister location/error monitoring handlers previously installed using Geolocation.watchPosition()."
      }
    },
    "BoxQuadOptions": {
      "box": "CSSBoxType",
      "relativeTo": "GeometryNode"
    },
    "ConvertCoordinateOptions": {
      "fromBox": "CSSBoxType",
      "toBox": "CSSBoxType"
    },
    "GeometryUtils": {
      "getBoxQuads": "fn(options?: BoxQuadOptions) -> [+DOMQuad]",
      "convertQuadFromNode": "fn(quad: +DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
      "convertRectFromNode": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
      "convertPointFromNode": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMPoint"
    },
    "GeometryNode": "+Text|HTMLElement|+Document",
    "GetUserMediaRequest": {
      "windowID": "number",
      "innerWindowID": "number",
      "callID": "string",
      "getConstraints": "fn() -> MediaStreamConstraints",
      "isSecure": "bool"
    },
    "TouchEventHandlers": {
      "ontouchstart": "fn(+Event)",
      "ontouchend": "fn(+Event)",
      "ontouchmove": "fn(+Event)",
      "ontouchcancel": "fn(+Event)"
    },
    "HTMLHyperlinkElementUtils": {
      "href": "string",
      "origin": "string",
      "protocol": "string",
      "username": "string",
      "password": "string",
      "host": "string",
      "hostname": "string",
      "port": "string",
      "pathname": "string",
      "search": "string",
      "hash": "string"
    },
    "MozImageLoadingContent": {
      "UNKNOWN_REQUEST": "number",
      "CURRENT_REQUEST": "number",
      "PENDING_REQUEST": "number",
      "loadingEnabled": "bool",
      "imageBlockingStatus": "number",
      "addObserver": "fn(aObserver: imgINotificationObserver)",
      "removeObserver": "fn(aObserver: imgINotificationObserver)",
      "getRequest": "fn(aRequestType: number) -> imgIRequest",
      "getRequestType": "fn(aRequest: imgIRequest) -> number",
      "currentURI": "URI",
      "loadImageWithChannel": "fn(aChannel: MozChannel) -> nsIStreamListener",
      "forceReload": "fn(aNotify?: bool)",
      "forceImageState": "fn(aForce: bool, aState: number)"
    },
    "MozPhonetic": {
      "phonetic": "string"
    },
    "MozObjectLoadingContent": {
      "TYPE_LOADING": "number",
      "TYPE_IMAGE": "number",
      "TYPE_PLUGIN": "number",
      "TYPE_DOCUMENT": "number",
      "TYPE_NULL": "number",
      "PLUGIN_UNSUPPORTED": "number",
      "PLUGIN_ALTERNATE": "number",
      "PLUGIN_DISABLED": "number",
      "PLUGIN_BLOCKLISTED": "number",
      "PLUGIN_OUTDATED": "number",
      "PLUGIN_CRASHED": "number",
      "PLUGIN_SUPPRESSED": "number",
      "PLUGIN_USER_DISABLED": "number",
      "PLUGIN_CLICK_TO_PLAY": "number",
      "PLUGIN_VULNERABLE_UPDATABLE": "number",
      "PLUGIN_VULNERABLE_NO_UPDATE": "number",
      "actualType": "string",
      "displayedType": "number",
      "getContentTypeForMIMEType": "fn(aMimeType: string) -> number",
      "getPluginAttributes": "fn() -> [MozPluginParameter]",
      "getPluginParameters": "fn() -> [MozPluginParameter]",
      "playPlugin": "fn()",
      "reload": "fn(aClearActivation: bool)",
      "activated": "bool",
      "srcURI": "URI",
      "defaultFallbackType": "number",
      "pluginFallbackType": "number",
      "hasRunningPlugin": "bool",
      "runID": "number"
    },
    "MozPluginParameter": {
      "name": "string",
      "value": "string"
    },
    "PropertyValueArray": "[?]",
    "HashChangeEventInit": {
      "oldURL": "string",
      "newURL": "string"
    },
    "HeadersInit": "+Headers|[[string]]|+MozMap[value=string]",
    "IDBEnvironment": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment",
      "!doc": "The IDBEnvironment interface of the IndexedDB API contains the indexedDB property, which provides access to IndexedDB functionality. It is the top level IndexedDB interface implemented by the window and Worker objects.",
      "indexedDB": {
        "!type": "IDBFactory",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB",
        "!doc": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases."
      }
    },
    "IDBOpenDBOptions": {
      "version": "number",
      "storage": "StorageType"
    },
    "IDBFileMetadataParameters": {
      "size": "bool",
      "lastModified": "bool"
    },
    "IDBIndexParameters": {
      "unique": "bool",
      "multiEntry": "bool",
      "locale": "string"
    },
    "IDBObjectStoreParameters": {
      "keyPath": "string|[string]",
      "autoIncrement": "bool"
    },
    "IDBVersionChangeEventInit": {
      "oldVersion": "number",
      "newVersion": "number"
    },
    "IccChangeEventInit": {
      "iccId": "string"
    },
    "IdentityWatchOptions": {
      "onlogin": "fn(identityAssertion: string)",
      "wantIssuer": "string",
      "loggedInUser": "string",
      "onready": "fn()",
      "onlogout": "fn()",
      "onerror": "fn(error: string)",
      "audience": "string"
    },
    "IdentityRequestOptions": {
      "refreshAuthentication": "number",
      "termsOfService": "string",
      "privacyPolicy": "string",
      "backgroundColor": "string",
      "siteLogo": "string",
      "siteName": "string",
      "returnTo": "string",
      "oncancel": "fn(error: string)",
      "origin": "string"
    },
    "IdentityGetOptions": {
      "privacyPolicy": "string",
      "termsOfService": "string",
      "privacyURL": "string",
      "tosURL": "string",
      "siteName": "string",
      "siteLogo": "string"
    },
    "IdentityManager": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IdentityManager",
      "!doc": "The IdentityManager of the  BrowserID protocol exposes the BrowserID API, via navigator.id. This API has gone through several significant revisions. Each generation is listed separately below.",
      "watch": {
        "!type": "fn(options?: IdentityWatchOptions)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/watch",
        "!doc": "This function registers callbacks that respond to a Persona user logging in or out."
      },
      "request": {
        "!type": "fn(options?: IdentityRequestOptions)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/request",
        "!doc": "This function enables a web site to use Persona to authenticate its users. It must be invoked from within a click handler. For example, you should call it when a user clicks your \"log in with Persona\" button."
      },
      "logout": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/logout",
        "!doc": "This function is used in Persona to cause the browser to reset the automatic / persistent login flag for a website. After being called, the user will need to explicitly log back into your site instead of being signed in automatically."
      },
      "get": {
        "!type": "fn(callback: fn(identityAssertion: string), options?: IdentityGetOptions)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/get",
        "!doc": "This function enables a web site to use BrowserID to authenticate its users. Call it in the click handler to your \"log in with Persona\" button with a callback function as a parameter."
      },
      "getVerifiedEmail": {
        "!type": "fn(callback: fn(identityAssertion: string))",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/getVerifiedEmail",
        "!doc": "This function enables a web site to use BrowserID to authenticate its users. Call it in the click handler to your \"log in with BrowserID\" button with a callback function as a parameter."
      }
    },
    "ImageBitmapSource": "+HTMLImageElement|HTMLVideoElement|HTMLCanvasElement|+Blob|+ImageData|CanvasRenderingContext2D|ImageBitmap",
    "ImageBitmapFactories": {
      "createImageBitmap": "fn(aImage: ImageBitmapSource) -> +Promise[value=ImageBitmap]"
    },
    "ImageCaptureErrorEventInit": {
      "imageCaptureError": "ImageCaptureError"
    },
    "ImageCaptureError": {
      "FRAME_GRAB_ERROR": "number",
      "SETTINGS_ERROR": "number",
      "PHOTO_ERROR": "number",
      "ERROR_UNKNOWN": "number",
      "code": "number",
      "message": "string"
    },
    "InputEventInit": {
      "isComposing": "bool"
    },
    "MozInputContextChoicesInfo": {
      "multiple": "bool",
      "choices": "[MozInputMethodChoiceDict]"
    },
    "MozInputMethodChoiceDict": {
      "group": "bool",
      "text": "string",
      "disabled": "bool",
      "inGroup": "bool",
      "selected": "bool",
      "optionIndex": "number"
    },
    "CompositionClauseParameters": {
      "selectionType": "CompositionClauseSelectionType",
      "length": "number"
    },
    "MozInputMethodInputManifest": {
      "launch_path": "string",
      "name": "string",
      "description": "string",
      "types": "[MozInputMethodInputContextInputTypes]"
    },
    "MozInputMethodKeyboardEventDictBase": {
      "code": "string",
      "keyCode": "number",
      "repeat": "bool",
      "printable": "bool"
    },
    "MozInputMethodKeyboardEventDict": {
      "key": "string"
    },
    "MozInputMethodRequiredKeyboardEventDict": {
      "key": "string"
    },
    "InspectorRGBTriple": {
      "r": "number",
      "g": "number",
      "b": "number"
    },
    "InspectorRGBATuple": {
      "r": "number",
      "g": "number",
      "b": "number",
      "a": "number"
    },
    "InstallTriggerData": {
      "URL": "string",
      "IconURL": "string",
      "Hash": "string"
    },
    "IterableKeyOrValueResult": {
      "value": "?",
      "done": "bool"
    },
    "IterableKeyAndValueResult": {
      "value": "[?]",
      "done": "bool"
    },
    "KeyAlgorithm": {
      "name": "string"
    },
    "AesKeyAlgorithm": {
      "length": "number"
    },
    "EcKeyAlgorithm": {
      "namedCurve": "string"
    },
    "HmacKeyAlgorithm": {
      "hash": "KeyAlgorithm",
      "length": "number"
    },
    "RsaHashedKeyAlgorithm": {
      "modulusLength": "number",
      "publicExponent": "Uint8Array",
      "hash": "KeyAlgorithm"
    },
    "DhKeyAlgorithm": {
      "prime": "Uint8Array",
      "generator": "Uint8Array"
    },
    "KeyboardEventInit": {
      "key": "string",
      "code": "string",
      "location": "number",
      "repeat": "bool",
      "isComposing": "bool",
      "charCode": "number",
      "keyCode": "number",
      "which": "number"
    },
    "Keyframe": {
      "offset": "number",
      "easing": "string",
      "composite": "CompositeOperation"
    },
    "ComputedKeyframe": {
      "computedOffset": "number"
    },
    "KeyframeEffectOptions": {
      "iterationComposite": "IterationCompositeOperation",
      "composite": "CompositeOperation",
      "spacing": "string"
    },
    "LegacyQueryInterface": {
      "queryInterface": "fn(iid: IID) -> nsISupports"
    },
    "LinkStyle": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/LinkStyle",
      "!doc": "The LinkStyle interface allows to access the associated CSS style sheet of a node.",
      "sheet": "StyleSheet"
    },
    "ListBoxObject": {
      "!proto": "BoxObject",
      "getRowCount": "fn() -> number",
      "getNumberOfVisibleRows": "fn() -> number",
      "getIndexOfFirstVisibleRow": "fn() -> number",
      "ensureIndexIsVisible": "fn(rowIndex: number)",
      "scrollToIndex": "fn(rowIndex: number)",
      "scrollByLines": "fn(numLines: number)",
      "getItemAtIndex": "fn(index: number) -> HTMLElement",
      "getIndexOfItem": "fn(item: HTMLElement) -> number"
    },
    "MediaKeyNeededEventInit": {
      "initDataType": "string",
      "initData": "+ArrayBuffer"
    },
    "MediaKeyMessageEventInit": {
      "messageType": "MediaKeyMessageType",
      "message": "+ArrayBuffer"
    },
    "MediaKeySystemMediaCapability": {
      "contentType": "string"
    },
    "MediaKeySystemConfiguration": {
      "label": "string",
      "initDataTypes": "[string]",
      "audioCapabilities": "[MediaKeySystemMediaCapability]",
      "videoCapabilities": "[MediaKeySystemMediaCapability]",
      "initDataType": "string",
      "audioType": "string",
      "videoType": "string"
    },
    "RequestMediaKeySystemAccessNotification": {
      "keySystem": "string",
      "status": "MediaKeySystemStatus"
    },
    "MediaRecorderOptions": {
      "mimeType": "string",
      "audioBitsPerSecond": "number",
      "videoBitsPerSecond": "number",
      "bitsPerSecond": "number"
    },
    "MediaStreamConstraints": {
      "audio": "bool|MediaTrackConstraints",
      "video": "bool|MediaTrackConstraints",
      "picture": "bool",
      "fake": "bool",
      "fakeTracks": "bool",
      "peerIdentity": "string"
    },
    "MediaStreamError": {
      "name": "string",
      "message": "string",
      "constraint": "string"
    },
    "MediaStreamEventInit": {
      "stream": "+MediaStream"
    },
    "ConstrainLong": "number|ConstrainLongRange",
    "ConstrainDouble": "number|ConstrainDoubleRange",
    "ConstrainBoolean": "bool|ConstrainBooleanParameters",
    "ConstrainDOMString": "string|[string]|ConstrainDOMStringParameters",
    "MediaTrackConstraintSet": {
      "width": "ConstrainLong",
      "height": "ConstrainLong",
      "frameRate": "ConstrainDouble",
      "facingMode": "ConstrainDOMString",
      "mediaSource": "string",
      "browserWindow": "number",
      "scrollWithPage": "bool",
      "deviceId": "ConstrainDOMString",
      "viewportOffsetX": "ConstrainLong",
      "viewportOffsetY": "ConstrainLong",
      "viewportWidth": "ConstrainLong",
      "viewportHeight": "ConstrainLong"
    },
    "MediaTrackConstraints": {
      "advanced": "[MediaTrackConstraintSet]"
    },
    "MediaStreamTrackEventInit": {
      "track": "MediaStreamTrack",
      "receiver": "RTCRtpReceiver",
      "stream": "+MediaStream"
    },
    "MediaTrackSupportedConstraints": {
      "width": "bool",
      "height": "bool",
      "aspectRatio": "bool",
      "frameRate": "bool",
      "facingMode": "bool",
      "volume": "bool",
      "sampleRate": "bool",
      "sampleSize": "bool",
      "echoCancellation": "bool",
      "latency": "bool",
      "deviceId": "bool",
      "groupId": "bool",
      "mediaSource": "bool",
      "browserWindow": "bool",
      "scrollWithPage": "bool",
      "viewportOffsetX": "bool",
      "viewportOffsetY": "bool",
      "viewportWidth": "bool",
      "viewportHeight": "bool"
    },
    "MessageEventInit": {
      "data": "?",
      "origin": "string",
      "lastEventId": "string",
      "source": "Window|MessagePort",
      "ports": "[MessagePort]"
    },
    "MessagePortList": {
      "length": "number",
      "item": "fn(index: number) -> MessagePort",
      "<i>": "MessagePort"
    },
    "MmsDeliveryInfo": {
      "receiver": "string",
      "deliveryStatus": "string",
      "deliveryTimestamp": "DOMTimeStamp",
      "readStatus": "string",
      "readTimestamp": "DOMTimeStamp"
    },
    "MouseEventInit": {
      "screenX": "number",
      "screenY": "number",
      "clientX": "number",
      "clientY": "number",
      "button": "number",
      "buttons": "number",
      "relatedTarget": "EventTarget",
      "movementX": "number",
      "movementY": "number"
    },
    "ActivityOptions": {
      "name": "string",
      "data": "?",
      "getFilterResults": "bool"
    },
    "MozApplicationEventInit": {
      "application": "DOMApplication"
    },
    "MozCellBroadcastEventInit": {
      "message": "MozCellBroadcastMessage"
    },
    "MozClirModeEventInit": {
      "mode": "number"
    },
    "MozContactChangeEventInit": {
      "contactID": "string",
      "reason": "string"
    },
    "MozEmergencyCbModeEventInit": {
      "active": "bool",
      "timeoutMs": "number"
    },
    "IccUnlockCardLockOptions": {
      "lockType": "IccLockType",
      "pin": "string",
      "puk": "string",
      "newPin": "string"
    },
    "IccSetCardLockOptions": {
      "lockType": "IccLockType",
      "pin": "string",
      "pin2": "string",
      "newPin": "string",
      "enabled": "bool"
    },
    "IccCardLockStatus": {
      "enabled": "bool"
    },
    "IccCardLockRetryCount": {
      "retryCount": "number"
    },
    "MozInterAppMessageEventInit": {
      "data": "?"
    },
    "MozMessageDeletedEventInit": {
      "deletedMessageIds": "[number]",
      "deletedThreadIds": "[number]"
    },
    "MozMmsEventInit": {
      "message": "MmsMessage"
    },
    "MozCallForwardingOptions": {
      "active": "bool",
      "action": "number",
      "reason": "number",
      "number": "string",
      "timeSeconds": "number",
      "serviceClass": "number"
    },
    "MozCallBarringOptions": {
      "program": "number",
      "enabled": "bool",
      "password": "string",
      "serviceClass": "number",
      "pin": "string",
      "newPin": "string"
    },
    "MozMMIResult": {
      "success": "bool",
      "serviceCode": "string",
      "statusMessage": "string",
      "additionalInformation": "number|object"
    },
    "MozClirStatus": {
      "n": "number",
      "m": "number"
    },
    "SmsSegmentInfo": {
      "segments": "number",
      "charsPerSegment": "number",
      "charsAvailableInLastSegment": "number"
    },
    "MmsAttachment": {
      "id": "string",
      "location": "string",
      "content": "+Blob"
    },
    "MmsParameters": {
      "receivers": "[string]",
      "subject": "string",
      "smil": "string",
      "attachments": "[MmsAttachment]"
    },
    "SmsSendParameters": {
      "serviceId": "number"
    },
    "MmsSendParameters": {
      "serviceId": "number"
    },
    "MobileMessageFilter": {
      "startDate": "DOMTimeStamp",
      "endDate": "DOMTimeStamp",
      "numbers": "[string]",
      "delivery": "MobileMessageFilterDelivery",
      "read": "bool",
      "threadId": "number"
    },
    "TypeOfAddress": {
      "typeOfNumber": "TypeOfNumber",
      "numberPlanIdentification": "NumberPlanIdentification"
    },
    "SmscAddress": {
      "address": "string",
      "typeOfAddress": "TypeOfAddress"
    },
    "MozNDEFRecordOptions": {
      "tnf": "TNF",
      "type": "Uint8Array",
      "id": "Uint8Array",
      "payload": "Uint8Array"
    },
    "MozNFCManager": {
      "checkP2PRegistration": "fn(manifestUrl: string) -> +Promise[value=bool]",
      "notifyUserAcceptedP2P": "fn(manifestUrl: string)",
      "notifySendFileStatus": "fn(status: number, requestId: string)",
      "startPoll": "fn() -> +Promise[value=void]",
      "stopPoll": "fn() -> +Promise[value=void]",
      "powerOff": "fn() -> +Promise[value=void]"
    },
    "MozNFCPeerEventInit": {
      "peer": "MozNFCPeer"
    },
    "MozTagTech": "MozIsoDepTech|MozNfcATech",
    "MozNFCTagEventInit": {
      "tag": "MozNFCTag",
      "ndefRecords": "[+MozNDEFRecord]"
    },
    "NetworkStatsGetOptions": {
      "appManifestURL": "string",
      "serviceType": "string",
      "browsingTrafficOnly": "bool"
    },
    "NetworkStatsAlarmOptions": {
      "startTime": "Date",
      "data": "Date"
    },
    "NetworkInterface": {
      "type": "number",
      "id": "string"
    },
    "MozOtaStatusEventInit": {
      "status": "string"
    },
    "PaymentIccInfo": {
      "mcc": "string",
      "mnc": "string",
      "iccId": "string",
      "dataPrimary": "bool"
    },
    "PaymentSmsMessage": {
      "iccId": "string",
      "sender": "string",
      "body": "string",
      "timestamp": "DOMTimeStamp",
      "sentTimestamp": "DOMTimeStamp"
    },
    "PaymentProvider": {
      "paymentServiceId": "string",
      "iccInfo": "[PaymentIccInfo]",
      "paymentSuccess": "fn(result?: string)",
      "paymentFailed": "fn(error?: string)",
      "sendSilentSms": "fn(number: string, message: string) -> DOMRequest",
      "observeSilentSms": "fn(number: string, callback: fn(message?: PaymentSmsMessage))",
      "removeSilentSmsObserver": "fn(number: string, callback: fn(message?: PaymentSmsMessage))"
    },
    "MozSettingsEventInit": {
      "settingName": "string",
      "settingValue": "?"
    },
    "MozSettingsTransactionEventInit": {
      "error": "string"
    },
    "MozSmsEventInit": {
      "message": "SmsMessage"
    },
    "MozStkIcon": {
      "width": "number",
      "height": "number",
      "codingScheme": "IccImageCodingScheme",
      "pixels": "[number]"
    },
    "MozStkIconContainer": {
      "iconSelfExplanatory": "bool",
      "icons": "[MozStkIcon]"
    },
    "MozStkCommandEventInit": {
      "command": "?"
    },
    "MozStkTextMessage": {
      "text": "string",
      "duration": "MozStkDuration",
      "isHighPriority": "bool",
      "userClear": "bool",
      "responseNeeded": "bool"
    },
    "MozStkItem": {
      "identifier": "number",
      "text": "string"
    },
    "MozStkMenu": {
      "items": "[MozStkItem]",
      "presentationType": "number",
      "title": "string",
      "defaultItem": "number",
      "isHelpAvailable": "bool",
      "nextActionList": "[number]"
    },
    "MozStkInput": {
      "text": "string",
      "duration": "MozStkDuration",
      "minLength": "number",
      "maxLength": "number",
      "defaultText": "string",
      "isAlphabet": "bool",
      "isUCS2": "bool",
      "hideInput": "bool",
      "isYesNoRequested": "bool",
      "isPacked": "bool",
      "isHelpAvailable": "bool"
    },
    "MozStkBrowserSetting": {
      "confirmMessage": "MozStkTextMessage",
      "url": "string",
      "mode": "number"
    },
    "MozStkSetUpCall": {
      "address": "string",
      "confirmMessage": "MozStkTextMessage",
      "callMessage": "MozStkTextMessage",
      "duration": "MozStkDuration"
    },
    "MozStkSetUpEventList": {
      "eventList": "[number]"
    },
    "MozStkLocationInfo": {
      "mcc": "string",
      "mnc": "string",
      "gsmLocationAreaCode": "number",
      "gsmCellId": "number"
    },
    "MozStkDuration": {
      "timeUnit": "number",
      "timeInterval": "number"
    },
    "MozStkPlayTone": {
      "text": "string",
      "tone": "number",
      "duration": "MozStkDuration",
      "isVibrate": "bool"
    },
    "MozStkProvideLocalInfo": {
      "localInfoType": "number"
    },
    "MozStkLocationEvent": {
      "eventType": "number",
      "locationStatus": "number",
      "locationInfo": "MozStkLocationInfo"
    },
    "MozStkTimer": {
      "timerId": "number",
      "timerValue": "number",
      "timerAction": "number"
    },
    "MozStkBipMessage": {
      "text": "string"
    },
    "MozStkCommand": {
      "commandNumber": "number",
      "typeOfCommand": "number",
      "commandQualifier": "number",
      "options": "?"
    },
    "MozStkResponse": {
      "resultCode": "number",
      "additionalInformation": "number",
      "itemIdentifier": "number",
      "input": "string",
      "isYesNo": "bool",
      "hasConfirmed": "bool",
      "localInfo": "MozStkLocalInfo",
      "timer": "MozStkTimer"
    },
    "MozStkCallEvent": {
      "eventType": "number",
      "number": "string",
      "isIssuedByRemote": "bool",
      "error": "string"
    },
    "MozStkLocalInfo": {
      "imei": "string",
      "locationInfo": "MozStkLocationInfo",
      "date": "Date",
      "language": "string"
    },
    "MozStkLanguageSelectionEvent": {
      "eventType": "number",
      "language": "string"
    },
    "MozStkBrowserTerminationEvent": {
      "eventType": "number",
      "terminationCause": "number"
    },
    "MozStkGeneralEvent": {
      "eventType": "number"
    },
    "WifiTetheringConfig": {
      "ssid": "string",
      "security": "SecurityType",
      "key": "string"
    },
    "TetheringConfiguration": {
      "ip": "string",
      "prefix": "string",
      "startIp": "string",
      "endIp": "string",
      "dns1": "string",
      "dns2": "string",
      "wifiConfig": "WifiTetheringConfig"
    },
    "MozVoicemailEventInit": {
      "status": "MozVoicemailStatus"
    },
    "MozWifiConnectionInfoEventInit": {
      "network": "?",
      "signalStrength": "number",
      "relSignalStrength": "number",
      "linkSpeed": "number",
      "ipAddress": "string"
    },
    "WifiWPSInfo": {
      "method": "WifiWPSMethod",
      "pin": "string",
      "bssid": "string"
    },
    "NetworkProperties": {
      "ssid": "string",
      "mode": "number",
      "frequency": "number",
      "security": "[string]",
      "capabilities": "[string]",
      "known": "bool",
      "connected": "bool",
      "hidden": "bool",
      "bssid": "string",
      "signalStrength": "string",
      "relSignalStrength": "number",
      "psk": "string",
      "wep": "string",
      "wep_key0": "string",
      "wep_key1": "string",
      "wep_key2": "string",
      "wep_key3": "string",
      "wep_tx_keyidx": "number",
      "priority": "number",
      "scan_ssid": "number",
      "keyManagement": "string",
      "identity": "string",
      "password": "string",
      "auth_alg": "string",
      "phase1": "string",
      "phase2": "string",
      "eap": "string",
      "pin": "string",
      "dontConnect": "bool",
      "serverCertificate": "string",
      "subjectMatch": "string",
      "userCertificate": "string"
    },
    "IPConfiguration": {
      "enabled": "bool",
      "ipaddr": "string",
      "proxy": "string",
      "maskLength": "number",
      "gateway": "string",
      "dns1": "string",
      "dns2": "string"
    },
    "WPSInfo": {
      "method": "WPSMethod",
      "pin": "string"
    },
    "MozWifiP2pStatusChangeEventInit": {
      "peerAddress": "string"
    },
    "MozWifiStationInfoEventInit": {
      "station": "number"
    },
    "MozWifiStatusChangeEventInit": {
      "network": "?",
      "status": "string"
    },
    "MutationObserverInit": {
      "childList": "bool",
      "attributes": "bool",
      "characterData": "bool",
      "subtree": "bool",
      "attributeOldValue": "bool",
      "characterDataOldValue": "bool",
      "nativeAnonymousChildList": "bool",
      "animations": "bool",
      "attributeFilter": "[string]"
    },
    "MutationObservingInfo": {
      "observedNode": "Node"
    },
    "NativeOSFileReadOptions": {
      "encoding": "string",
      "bytes": "number"
    },
    "NavigatorID": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID",
      "!doc": "The NavigatorID interface contains methods and properties related to the identity of the browser.",
      "appCodeName": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "appName": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "appVersion": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "platform": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "userAgent": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent",
        "!doc": "Returns the user agent string for the current browser."
      },
      "product": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "taintEnabled": {
        "!type": "fn() -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled",
        "!doc": "Not available to workers.Although the interface of this feature is available to workers, this feature isn't."
      }
    },
    "NavigatorLanguage": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage",
      "!doc": "NavigatorLanguage contains methods and properties related to the language of the navigator.",
      "language": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language",
        "!doc": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI."
      },
      "languages": {
        "!type": "[string]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages",
        "!doc": "The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first."
      }
    },
    "NavigatorOnLine": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine",
      "!doc": "The NavigatorOnLine interface contains methods and properties related to the connectivity status of the browser.",
      "onLine": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine",
        "!doc": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection."
      }
    },
    "NavigatorContentUtils": {
      "registerProtocolHandler": "fn(scheme: string, url: string, title: string)",
      "registerContentHandler": "fn(mimeType: string, url: string, title: string)"
    },
    "NavigatorStorageUtils": {},
    "NavigatorFeatures": {
      "getFeature": "fn(name: string) -> +Promise[value=?]",
      "hasFeature": "fn(name: string) -> +Promise[value=?]"
    },
    "NavigatorGeolocation": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorGeolocation",
      "!doc": "NavigatorGeolocation  contains a creation method allowing objects implementing it to obtain a Geolocation instance.",
      "geolocation": {
        "!type": "Geolocation",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorGeolocation/geolocation",
        "!doc": "The Navigator.geolocation read-only property returns a Geolocation object that gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location."
      }
    },
    "NavigatorDataStore": {
      "getDataStores": "fn(name: string, owner?: string) -> +Promise"
    },
    "SocketElement": {
      "host": "string",
      "port": "number",
      "active": "bool",
      "tcp": "bool",
      "sent": "number",
      "received": "number"
    },
    "SocketsDict": {
      "sockets": "[SocketElement]",
      "sent": "number",
      "received": "number"
    },
    "HttpConnInfo": {
      "rtt": "number",
      "ttl": "number",
      "protocolVersion": "string"
    },
    "HalfOpenInfoDict": {
      "speculative": "bool"
    },
    "HttpConnectionElement": {
      "host": "string",
      "port": "number",
      "spdy": "bool",
      "ssl": "bool",
      "active": "[HttpConnInfo]",
      "idle": "[HttpConnInfo]",
      "halfOpens": "[HalfOpenInfoDict]"
    },
    "HttpConnDict": {
      "connections": "[HttpConnectionElement]"
    },
    "WebSocketElement": {
      "hostport": "string",
      "msgsent": "number",
      "msgreceived": "number",
      "sentsize": "number",
      "receivedsize": "number",
      "encrypted": "bool"
    },
    "WebSocketDict": {
      "websockets": "[WebSocketElement]"
    },
    "DnsCacheEntry": {
      "hostname": "string",
      "hostaddr": "[string]",
      "family": "string",
      "expiration": "number"
    },
    "DNSCacheDict": {
      "entries": "[DnsCacheEntry]"
    },
    "DNSLookupDict": {
      "address": "[string]",
      "error": "string",
      "answer": "bool"
    },
    "ConnStatusDict": {
      "status": "string"
    },
    "NetworkCommandOptions": {
      "id": "number",
      "cmd": "string",
      "ifname": "string",
      "ip": "string",
      "prefixLength": "number",
      "domain": "string",
      "dnses": "[string]",
      "gateway": "string",
      "gateways": "[string]",
      "mode": "string",
      "report": "bool",
      "enabled": "bool",
      "wifictrlinterfacename": "string",
      "internalIfname": "string",
      "externalIfname": "string",
      "enable": "bool",
      "ssid": "string",
      "security": "string",
      "key": "string",
      "prefix": "string",
      "link": "string",
      "interfaceList": "[string]",
      "wifiStartIp": "string",
      "wifiEndIp": "string",
      "usbStartIp": "string",
      "usbEndIp": "string",
      "dns1": "string",
      "dns2": "string",
      "threshold": "number",
      "startIp": "string",
      "endIp": "string",
      "serverIp": "string",
      "maskLength": "string",
      "preInternalIfname": "string",
      "preExternalIfname": "string",
      "curInternalIfname": "string",
      "curExternalIfname": "string",
      "ipaddr": "number",
      "mask": "number",
      "gateway_long": "number",
      "dns1_long": "number",
      "dns2_long": "number",
      "mtu": "number"
    },
    "NetworkResultOptions": {
      "id": "number",
      "ret": "bool",
      "broadcast": "bool",
      "topic": "string",
      "reason": "string",
      "resultCode": "number",
      "resultReason": "string",
      "error": "bool",
      "enable": "bool",
      "result": "bool",
      "success": "bool",
      "curExternalIfname": "string",
      "curInternalIfname": "string",
      "reply": "string",
      "route": "string",
      "ipaddr_str": "string",
      "gateway_str": "string",
      "dns1_str": "string",
      "dns2_str": "string",
      "mask_str": "string",
      "server_str": "string",
      "vendor_str": "string",
      "lease": "number",
      "mask": "number",
      "ipaddr": "number",
      "gateway": "number",
      "dns1": "number",
      "dns2": "number",
      "server": "number",
      "netId": "string"
    },
    "NfcCommandOptions": {
      "type": "NfcRequestType",
      "sessionId": "number",
      "requestId": "string",
      "rfState": "RFState",
      "techType": "number",
      "isP2P": "bool",
      "records": "[MozNDEFRecordOptions]",
      "technology": "NFCTechType",
      "command": "Uint8Array"
    },
    "NfcEventOptions": {
      "rspType": "NfcResponseType",
      "ntfType": "NfcNotificationType",
      "status": "number",
      "errorMsg": "NfcErrorMessage",
      "sessionId": "number",
      "requestId": "string",
      "majorVersion": "number",
      "minorVersion": "number",
      "isP2P": "bool",
      "techList": "[NFCTechType]",
      "tagId": "Uint8Array",
      "records": "[MozNDEFRecordOptions]",
      "tagType": "NFCTagType",
      "maxNDEFSize": "number",
      "isReadOnly": "bool",
      "isFormatable": "bool",
      "rfState": "RFState",
      "origin": "string",
      "aid": "Uint8Array",
      "payload": "Uint8Array",
      "response": "Uint8Array"
    },
    "NotificationOptions": {
      "dir": "NotificationDirection",
      "lang": "string",
      "body": "string",
      "tag": "string",
      "icon": "string",
      "data": "?",
      "mozbehavior": "NotificationBehavior"
    },
    "GetNotificationOptions": {
      "tag": "string"
    },
    "NotificationBehavior": {
      "noscreen": "bool",
      "noclear": "bool",
      "showOnlyOnce": "bool",
      "soundFile": "string",
      "vibrationPattern": "[number]"
    },
    "NotificationEventInit": {
      "notification": "+Notification"
    },
    "PageTransitionEventInit": {
      "persisted": "bool"
    },
    "ParentNode": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode",
      "!doc": "The ParentNode interface contains methods that are particular to Node objects that can have children.",
      "children": {
        "!type": "HTMLCollection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
        "!doc": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node."
      },
      "firstElementChild": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
        "!doc": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements."
      },
      "lastElementChild": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
        "!doc": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements."
      },
      "childElementCount": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
        "!doc": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element."
      }
    },
    "DOMHighResTimeStamp": "number",
    "PerformanceEntryList": "[PerformanceEntry]",
    "PerformanceEntryEventInit": {
      "name": "string",
      "entryType": "string",
      "startTime": "DOMHighResTimeStamp",
      "duration": "DOMHighResTimeStamp",
      "epoch": "number",
      "origin": "string"
    },
    "PerformanceObserverInit": {
      "entryTypes": "[string]"
    },
    "PerformanceEntryFilterOptions": {
      "name": "string",
      "entryType": "string",
      "initiatorType": "string"
    },
    "PermissionDescriptor": {
      "name": "PermissionName"
    },
    "PushPermissionDescriptor": {
      "userVisible": "bool"
    },
    "PluginCrashedEventInit": {
      "pluginID": "number",
      "pluginDumpID": "string",
      "pluginName": "string",
      "browserDumpID": "string",
      "pluginFilename": "string",
      "submittedCrashReport": "bool",
      "gmpPlugin": "bool"
    },
    "PointerEventInit": {
      "pointerId": "number",
      "width": "number",
      "height": "number",
      "pressure": "number",
      "tiltX": "number",
      "tiltY": "number",
      "pointerType": "string",
      "isPrimary": "bool"
    },
    "PopStateEventInit": {
      "state": "?"
    },
    "PopupBlockedEventInit": {
      "requestingWindow": "Window",
      "popupWindowURI": "URI",
      "popupWindowName": "string",
      "popupWindowFeatures": "string"
    },
    "Position": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Position",
      "!doc": "The Position interface represents the position of the concerned device at a given time. The position, represented by a Coordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.",
      "coords": {
        "!type": "Coordinates",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Position/coords",
        "!doc": "The Position.coords read-only property, a Coordinates object, represents a geographic attitude: it contains the location, that is longitude and latitude on the Earth, the altitude, and the speed of the object concerned, regrouped inside the returned value. It also contains accuracy information about these values."
      },
      "timestamp": {
        "!type": "DOMTimeStamp",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Position/timestamp",
        "!doc": "The Position.timestamp read-only property, a DOMTimeStamp object, represents the date and the time of the creation of the Position object it belongs to. The precision is to the millisecond."
      }
    },
    "PositionError": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionError",
      "!doc": "The PositionError interface represents the reason of an error occurring when using the geolocating device.",
      "PERMISSION_DENIED": "number",
      "POSITION_UNAVAILABLE": "number",
      "TIMEOUT": "number",
      "code": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionError/code",
        "!doc": "The PositionError.code read-only property is an unsigned short representing the error code. The following values are possible:"
      },
      "message": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionError/message",
        "!doc": "The PositionError.message read-only property returns a human-readable DOMString describing the details of the error."
      }
    },
    "PresentationAvailableEventInit": {
      "available": "bool"
    },
    "PresentationConnectionAvailableEventInit": {
      "connection": "PresentationConnection"
    },
    "PresentationDeviceInfo": {
      "id": "string",
      "name": "string",
      "type": "string"
    },
    "ProfileTimelineStackFrame": {
      "line": "number",
      "column": "number",
      "source": "string",
      "functionDisplayName": "string",
      "parent": "object",
      "asyncParent": "object",
      "asyncCause": "string"
    },
    "ProfileTimelineLayerRect": {
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number"
    },
    "ProfileTimelineMarker": {
      "name": "string",
      "start": "DOMHighResTimeStamp",
      "end": "DOMHighResTimeStamp",
      "stack": "object",
      "processType": "number",
      "isOffMainThread": "bool",
      "causeName": "string",
      "endStack": "object",
      "type": "string",
      "eventPhase": "number",
      "unixTime": "number",
      "rectangles": "[ProfileTimelineLayerRect]",
      "restyleHint": "string",
      "workerOperation": "ProfileTimelineWorkerOperationType"
    },
    "ProgressEventInit": {
      "lengthComputable": "bool",
      "loaded": "number",
      "total": "number"
    },
    "PromiseDebuggingStateHolder": {
      "state": "PromiseDebuggingState",
      "value": "?",
      "reason": "?"
    },
    "PropertyIndexedKeyframes": {
      "easing": "string",
      "composite": "CompositeOperation"
    },
    "PushMessageDataInit": "BufferSource|string",
    "PushEventInit": {
      "data": "PushMessageDataInit"
    },
    "PushManagerImpl": {
      "subscribe": "fn() -> +Promise[value=PushSubscription]",
      "getSubscription": "fn() -> +Promise[value=PushSubscription]",
      "permissionState": "fn() -> +Promise[value=PushPermissionState]",
      "setScope": "fn(scope: string)"
    },
    "PushSubscriptionKeys": {
      "p256dh": "string",
      "auth": "string"
    },
    "PushSubscriptionJSON": {
      "endpoint": "string",
      "keys": "PushSubscriptionKeys"
    },
    "RTCIceServer": {
      "urls": "string|[string]",
      "url": "string",
      "credential": "string",
      "username": "string"
    },
    "RTCConfiguration": {
      "iceServers": "[RTCIceServer]",
      "iceTransportPolicy": "RTCIceTransportPolicy",
      "bundlePolicy": "RTCBundlePolicy",
      "peerIdentity": "string",
      "certificates": "[RTCCertificate]"
    },
    "RTCDataChannelEventInit": {
      "channel": "RTCDataChannel"
    },
    "RTCIceCandidateInit": {
      "candidate": "string",
      "sdpMid": "string",
      "sdpMLineIndex": "number"
    },
    "RTCIdentityAssertion": {
      "idp": "string",
      "name": "string"
    },
    "RTCIdentityProviderRegistrar": {
      "register": "fn(idp: RTCIdentityProvider)",
      "idp": "RTCIdentityProvider",
      "generateAssertion": "fn(contents: string, origin: string, usernameHint?: string) -> +Promise[value=RTCIdentityAssertionResult]",
      "validateAssertion": "fn(assertion: string, origin: string) -> +Promise[value=RTCIdentityValidationResult]"
    },
    "RTCIdentityAssertionResult": {
      "idp": "RTCIdentityProviderDetails",
      "assertion": "string"
    },
    "RTCIdentityProviderDetails": {
      "domain": "string",
      "protocol": "string"
    },
    "RTCIdentityValidationResult": {
      "identity": "string",
      "contents": "string"
    },
    "RTCDataChannelInit": {
      "ordered": "bool",
      "maxRetransmitTime": "number",
      "maxRetransmits": "number",
      "protocol": "string",
      "negotiated": "bool",
      "id": "number",
      "outOfOrderAllowed": "bool",
      "maxRetransmitNum": "number",
      "preset": "bool",
      "stream": "number"
    },
    "RTCOfferAnswerOptions": {},
    "RTCAnswerOptions": {},
    "RTCOfferOptions": {
      "offerToReceiveVideo": "number",
      "offerToReceiveAudio": "number",
      "mozDontOfferDataChannel": "bool",
      "mozBundleOnly": "bool",
      "mandatory": "DeprecatedRTCOfferOptionsSet",
      "optional": "[DeprecatedRTCOfferOptionsSet]"
    },
    "DeprecatedRTCOfferOptionsSet": {
      "OfferToReceiveAudio": "bool",
      "OfferToReceiveVideo": "bool",
      "MozDontOfferDataChannel": "bool",
      "MozBundleOnly": "bool"
    },
    "RTCPeerConnectionIceEventInit": {
      "candidate": "+RTCIceCandidate"
    },
    "RTCRtxParameters": {
      "ssrc": "number"
    },
    "RTCFecParameters": {
      "ssrc": "number"
    },
    "RTCRtpEncodingParameters": {
      "ssrc": "number",
      "rtx": "RTCRtxParameters",
      "fec": "RTCFecParameters",
      "active": "bool",
      "priority": "RTCPriorityType",
      "maxBitrate": "number",
      "degradationPreference": "RTCDegradationPreference",
      "rid": "string",
      "scaleResolutionDownBy": "number"
    },
    "RTCRtpHeaderExtensionParameters": {
      "uri": "string",
      "id": "number",
      "encrypted": "bool"
    },
    "RTCRtcpParameters": {
      "cname": "string",
      "reducedSize": "bool"
    },
    "RTCRtpCodecParameters": {
      "payloadType": "number",
      "mimeType": "string",
      "clockRate": "number",
      "channels": "number",
      "sdpFmtpLine": "string"
    },
    "RTCRtpParameters": {
      "encodings": "[RTCRtpEncodingParameters]",
      "headerExtensions": "[RTCRtpHeaderExtensionParameters]",
      "rtcp": "RTCRtcpParameters",
      "codecs": "[RTCRtpCodecParameters]"
    },
    "RTCSessionDescriptionInit": {
      "type": "RTCSdpType",
      "sdp": "string"
    },
    "RTCStats": {
      "timestamp": "DOMHighResTimeStamp",
      "type": "RTCStatsType",
      "id": "string"
    },
    "RTCRTPStreamStats": {
      "ssrc": "string",
      "mediaType": "string",
      "remoteId": "string",
      "isRemote": "bool",
      "mediaTrackId": "string",
      "transportId": "string",
      "codecId": "string",
      "bitrateMean": "number",
      "bitrateStdDev": "number",
      "framerateMean": "number",
      "framerateStdDev": "number"
    },
    "RTCInboundRTPStreamStats": {
      "packetsReceived": "number",
      "bytesReceived": "number",
      "jitter": "number",
      "packetsLost": "number",
      "mozAvSyncDelay": "number",
      "mozJitterBufferDelay": "number",
      "mozRtt": "number",
      "discardedPackets": "number"
    },
    "RTCOutboundRTPStreamStats": {
      "packetsSent": "number",
      "bytesSent": "number",
      "targetBitrate": "number",
      "droppedFrames": "number"
    },
    "RTCMediaStreamTrackStats": {
      "trackIdentifier": "string",
      "remoteSource": "bool",
      "ssrcIds": "[string]",
      "frameWidth": "number",
      "frameHeight": "number",
      "framesPerSecond": "number",
      "framesSent": "number",
      "framesReceived": "number",
      "framesDecoded": "number",
      "framesDropped": "number",
      "framesCorrupted": "number",
      "audioLevel": "number",
      "echoReturnLoss": "number",
      "echoReturnLossEnhancement": "number"
    },
    "RTCMediaStreamStats": {
      "streamIdentifier": "string",
      "trackIds": "[string]"
    },
    "RTCTransportStats": {
      "bytesSent": "number",
      "bytesReceived": "number"
    },
    "RTCIceComponentStats": {
      "transportId": "string",
      "component": "number",
      "bytesSent": "number",
      "bytesReceived": "number",
      "activeConnection": "bool"
    },
    "RTCIceCandidatePairStats": {
      "componentId": "string",
      "localCandidateId": "string",
      "remoteCandidateId": "string",
      "state": "RTCStatsIceCandidatePairState",
      "priority": "number",
      "readable": "bool",
      "nominated": "bool",
      "selected": "bool"
    },
    "RTCIceCandidateStats": {
      "componentId": "string",
      "candidateId": "string",
      "ipAddress": "string",
      "transport": "string",
      "mozLocalTransport": "string",
      "portNumber": "number",
      "candidateType": "RTCStatsIceCandidateType"
    },
    "RTCCodecStats": {
      "payloadType": "number",
      "codec": "string",
      "clockRate": "number",
      "channels": "number",
      "parameters": "string"
    },
    "RTCStatsReportInternal": {
      "pcid": "string",
      "inboundRTPStreamStats": "[RTCInboundRTPStreamStats]",
      "outboundRTPStreamStats": "[RTCOutboundRTPStreamStats]",
      "mediaStreamTrackStats": "[RTCMediaStreamTrackStats]",
      "mediaStreamStats": "[RTCMediaStreamStats]",
      "transportStats": "[RTCTransportStats]",
      "iceComponentStats": "[RTCIceComponentStats]",
      "iceCandidatePairStats": "[RTCIceCandidatePairStats]",
      "iceCandidateStats": "[RTCIceCandidateStats]",
      "codecStats": "[RTCCodecStats]",
      "localSdp": "string",
      "remoteSdp": "string",
      "timestamp": "DOMHighResTimeStamp",
      "closed": "bool"
    },
    "RecordErrorEventInit": {
      "name": "string"
    },
    "RequestInfo": "+Request|string",
    "nsContentPolicyType": "number",
    "RequestInit": {
      "method": "string",
      "headers": "HeadersInit",
      "body": "BodyInit",
      "mode": "RequestMode",
      "credentials": "RequestCredentials",
      "cache": "RequestCache",
      "redirect": "RequestRedirect"
    },
    "RequestTaskParams": {
      "wakeUpPage": "string",
      "oneShot": "bool",
      "minInterval": "number",
      "wifiOnly": "bool",
      "data": "?"
    },
    "RequestTaskFull": {
      "task": "string",
      "lastSync": "DOMTimeStamp"
    },
    "ResourceStatsOptions": {
      "component": "string",
      "serviceType": "SystemService",
      "manifestURL": "string"
    },
    "ResourceStatsAlarmOptions": {
      "startTime": "DOMTimeStamp",
      "data": "?"
    },
    "ResponseInit": {
      "status": "number",
      "statusText": "string",
      "headers": "HeadersInit"
    },
    "SVGAnimatedPathData": {
      "pathSegList": "SVGPathSegList",
      "animatedPathSegList": "SVGPathSegList"
    },
    "SVGAnimatedPoints": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPoints",
      "!doc": "The SVGAnimatedPoints interface supports elements which have a points attribute which holds a list of coordinate values and which support the ability to animate that attribute.",
      "points": "SVGPointList",
      "animatedPoints": "SVGPointList"
    },
    "SVGFilterPrimitiveStandardAttributes": {
      "x": "SVGAnimatedLength",
      "y": "SVGAnimatedLength",
      "width": "SVGAnimatedLength",
      "height": "SVGAnimatedLength",
      "result": "SVGAnimatedString"
    },
    "SVGFitToViewBox": {
      "viewBox": "SVGAnimatedRect",
      "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio"
    },
    "SVGBoundingBoxOptions": {
      "fill": "bool",
      "stroke": "bool",
      "markers": "bool",
      "clipped": "bool"
    },
    "SVGTests": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTests",
      "!doc": "Interface SVGTests defines an interface which applies to all elements which have attributes requiredFeatures, requiredExtensions and systemLanguage.",
      "requiredFeatures": "SVGStringList",
      "requiredExtensions": "SVGStringList",
      "systemLanguage": "SVGStringList",
      "hasExtension": "fn(extension: string) -> bool"
    },
    "SVGURIReference": {
      "href": "SVGAnimatedString"
    },
    "ScrollBoxObject": {
      "!proto": "BoxObject",
      "scrollTo": "fn(x: number, y: number)",
      "scrollBy": "fn(dx: number, dy: number)",
      "scrollByLine": "fn(dlines: number)",
      "scrollByIndex": "fn(dindexes: number)",
      "scrollToLine": "fn(line: number)",
      "scrollToElement": "fn(child: HTMLElement)",
      "scrollToIndex": "fn(index: number)",
      "positionX": "number",
      "positionY": "number",
      "scrolledWidth": "number",
      "scrolledHeight": "number",
      "getPosition": "fn(x: object, y: object)",
      "getScrolledSize": "fn(width: object, height: object)",
      "ensureElementIsVisible": "fn(child: HTMLElement)",
      "ensureIndexIsVisible": "fn(index: number)",
      "ensureLineIsVisible": "fn(line: number)"
    },
    "ScrollViewChangeEventInit": {
      "state": "ScrollState"
    },
    "SECommand": {
      "cla": "number",
      "ins": "number",
      "p1": "number",
      "p2": "number",
      "data": "[number]",
      "le": "number"
    },
    "SEManager": {
      "getSEReaders": "fn() -> +Promise"
    },
    "SelectionStateChangedEventInit": {
      "visible": "bool",
      "selectedText": "string",
      "boundingClientRect": "DOMRectReadOnly",
      "states": "[SelectionState]"
    },
    "RegistrationOptions": {
      "scope": "string"
    },
    "ServiceWorkerMessageEventInit": {
      "data": "?",
      "origin": "string",
      "lastEventId": "string",
      "source": "ServiceWorker|MessagePort",
      "ports": "[MessagePort]"
    },
    "SettingChangeNotification": {
      "key": "string",
      "value": "?",
      "isInternalChange": "bool"
    },
    "SettingChange": {
      "settingName": "string",
      "settingValue": "string"
    },
    "SpeechRecognitionErrorInit": {
      "error": "SpeechRecognitionErrorCode",
      "message": "string"
    },
    "SpeechRecognitionEventInit": {
      "resultIndex": "number",
      "results": "SpeechRecognitionResultList",
      "interpretation": "?",
      "emma": "+Document"
    },
    "SpeechSynthesisErrorEventInit": {
      "error": "SpeechSynthesisErrorCode"
    },
    "SpeechSynthesisEventInit": {
      "utterance": "+SpeechSynthesisUtterance",
      "charIndex": "number",
      "elapsedTime": "number",
      "name": "string"
    },
    "StorageEventInit": {
      "key": "string",
      "oldValue": "string",
      "newValue": "string",
      "url": "string",
      "storageArea": "Storage"
    },
    "StyleRuleChangeEventInit": {
      "stylesheet": "CSSStyleSheet",
      "rule": "CSSRule"
    },
    "StyleSheetApplicableStateChangeEventInit": {
      "stylesheet": "CSSStyleSheet",
      "applicable": "bool"
    },
    "StyleSheetChangeEventInit": {
      "stylesheet": "CSSStyleSheet",
      "documentSheet": "bool"
    },
    "KeyType": "string",
    "KeyUsage": "string",
    "NamedCurve": "string",
    "BigInteger": "Uint8Array",
    "Algorithm": {
      "name": "string"
    },
    "AesCbcParams": {
      "iv": "CryptoOperationData"
    },
    "AesCtrParams": {
      "counter": "CryptoOperationData",
      "length": "number"
    },
    "AesGcmParams": {
      "iv": "CryptoOperationData",
      "additionalData": "CryptoOperationData",
      "tagLength": "number"
    },
    "HmacImportParams": {
      "hash": "AlgorithmIdentifier"
    },
    "Pbkdf2Params": {
      "salt": "CryptoOperationData",
      "iterations": "number",
      "hash": "AlgorithmIdentifier"
    },
    "RsaHashedImportParams": {
      "hash": "AlgorithmIdentifier"
    },
    "AesKeyGenParams": {
      "length": "number"
    },
    "HmacKeyGenParams": {
      "hash": "AlgorithmIdentifier",
      "length": "number"
    },
    "RsaHashedKeyGenParams": {
      "modulusLength": "number",
      "publicExponent": "BigInteger",
      "hash": "AlgorithmIdentifier"
    },
    "RsaOaepParams": {
      "label": "CryptoOperationData"
    },
    "DhKeyGenParams": {
      "prime": "BigInteger",
      "generator": "BigInteger"
    },
    "EcKeyGenParams": {
      "namedCurve": "NamedCurve"
    },
    "AesDerivedKeyParams": {
      "length": "number"
    },
    "HmacDerivedKeyParams": {
      "length": "number"
    },
    "EcdhKeyDeriveParams": {
      "public": "CryptoKey"
    },
    "DhKeyDeriveParams": {
      "public": "CryptoKey"
    },
    "DhImportKeyParams": {
      "prime": "BigInteger",
      "generator": "BigInteger"
    },
    "EcdsaParams": {
      "hash": "AlgorithmIdentifier"
    },
    "EcKeyImportParams": {
      "namedCurve": "NamedCurve"
    },
    "RsaOtherPrimesInfo": {
      "r": "string",
      "d": "string",
      "t": "string"
    },
    "JsonWebKey": {
      "kty": "string",
      "use": "string",
      "key_ops": "[string]",
      "alg": "string",
      "ext": "bool",
      "crv": "string",
      "x": "string",
      "y": "string",
      "d": "string",
      "n": "string",
      "e": "string",
      "p": "string",
      "q": "string",
      "dp": "string",
      "dq": "string",
      "qi": "string",
      "oth": "[RsaOtherPrimesInfo]",
      "k": "string"
    },
    "CryptoKeyPair": {
      "publicKey": "CryptoKey",
      "privateKey": "CryptoKey"
    },
    "KeyFormat": "string",
    "CryptoOperationData": "ArrayBufferView|+ArrayBuffer",
    "AlgorithmIdentifier": "object|string",
    "SystemUpdateProviderInfo": {
      "name": "string",
      "uuid": "string"
    },
    "SystemUpdatePackageInfo": {
      "type": "string",
      "version": "string",
      "description": "string",
      "buildDate": "DOMTimeStamp",
      "size": "number"
    },
    "ServerSocketOptions": {
      "binaryType": "TCPSocketBinaryType"
    },
    "TCPServerSocketEventInit": {
      "socket": "+TCPSocket"
    },
    "SocketOptions": {
      "useSecureTransport": "bool",
      "binaryType": "TCPSocketBinaryType"
    },
    "LegacyMozTCPSocket": {
      "open": "fn(host: string, port: number, options?: SocketOptions) -> +TCPSocket",
      "listen": "fn(port: number, options?: ServerSocketOptions, backlog?: number) -> +TCPServerSocket"
    },
    "TCPSocketErrorEventInit": {
      "name": "string",
      "message": "string"
    },
    "TCPSocketEventInit": {
      "data": "?"
    },
    "TVGetProgramsOptions": {
      "startTime": "number",
      "duration": "number"
    },
    "TVCurrentChannelChangedEventInit": {
      "channel": "TVChannel"
    },
    "TVCurrentSourceChangedEventInit": {
      "source": "TVSource"
    },
    "TVEITBroadcastedEventInit": {
      "programs": "[TVProgram]"
    },
    "TVScanningStateChangedEventInit": {
      "state": "TVScanningState",
      "channel": "TVChannel"
    },
    "TVStartScanningOptions": {
      "isRescanned": "bool"
    },
    "TextDecoderOptions": {
      "fatal": "bool"
    },
    "TextDecodeOptions": {
      "stream": "bool"
    },
    "HeapSnapshotBoundaries": {
      "globals": "[object]",
      "debugger": "object",
      "runtime": "bool"
    },
    "TouchInit": {
      "identifier": "number",
      "target": "EventTarget",
      "clientX": "number",
      "clientY": "number",
      "screenX": "number",
      "screenY": "number",
      "pageX": "number",
      "pageY": "number",
      "radiusX": "number",
      "radiusY": "number",
      "rotationAngle": "number",
      "force": "number"
    },
    "TouchEventInit": {
      "touches": "[+Touch]",
      "targetTouches": "[+Touch]",
      "changedTouches": "[+Touch]"
    },
    "TrackEventInit": {
      "track": "VideoTrack|AudioTrack|TextTrack"
    },
    "TransitionEventInit": {
      "propertyName": "string",
      "elapsedTime": "number",
      "pseudoElement": "string"
    },
    "TreeCellInfo": {
      "row": "number",
      "col": "TreeColumn",
      "childElt": "string"
    },
    "TreeBoxObject": {
      "!proto": "BoxObject",
      "columns": "TreeColumns",
      "view": "MozTreeView",
      "focused": "bool",
      "treeBody": "HTMLElement",
      "rowHeight": "number",
      "rowWidth": "number",
      "horizontalPosition": "number",
      "selectionRegion": "nsIScriptableRegion",
      "getFirstVisibleRow": "fn() -> number",
      "getLastVisibleRow": "fn() -> number",
      "getPageLength": "fn() -> number",
      "ensureRowIsVisible": "fn(index: number)",
      "ensureCellIsVisible": "fn(row: number, col: TreeColumn)",
      "scrollToRow": "fn(index: number)",
      "scrollByLines": "fn(numLines: number)",
      "scrollByPages": "fn(numPages: number)",
      "scrollToCell": "fn(row: number, col: TreeColumn)",
      "scrollToColumn": "fn(col: TreeColumn)",
      "scrollToHorizontalPosition": "fn(horizontalPosition: number)",
      "invalidate": "fn()",
      "invalidateColumn": "fn(col: TreeColumn)",
      "invalidateRow": "fn(index: number)",
      "invalidateCell": "fn(row: number, col: TreeColumn)",
      "invalidateRange": "fn(startIndex: number, endIndex: number)",
      "invalidateColumnRange": "fn(startIndex: number, endIndex: number, col: TreeColumn)",
      "getRowAt": "fn(x: number, y: number) -> number",
      "getCellAt": "fn(x: number, y: number) -> TreeCellInfo",
      "getCoordsForCellItem": "fn(row: number, col: TreeColumn, element: string) -> +DOMRect",
      "isCellCropped": "fn(row: number, col: TreeColumn) -> bool",
      "rowCountChanged": "fn(index: number, count: number)",
      "beginUpdateBatch": "fn()",
      "endUpdateBatch": "fn()",
      "clearStyleAndImageCaches": "fn()"
    },
    "UDPMessageEventInit": {
      "remoteAddress": "string",
      "remotePort": "number",
      "data": "?"
    },
    "UDPOptions": {
      "localAddress": "string",
      "localPort": "number",
      "remoteAddress": "string",
      "remotePort": "number",
      "addressReuse": "bool",
      "loopback": "bool"
    },
    "UIEventInit": {
      "view": "Window",
      "detail": "number"
    },
    "EventModifierInit": {
      "ctrlKey": "bool",
      "shiftKey": "bool",
      "altKey": "bool",
      "metaKey": "bool",
      "modifierAltGraph": "bool",
      "modifierCapsLock": "bool",
      "modifierFn": "bool",
      "modifierFnLock": "bool",
      "modifierNumLock": "bool",
      "modifierOS": "bool",
      "modifierScrollLock": "bool",
      "modifierSymbol": "bool",
      "modifierSymbolLock": "bool"
    },
    "objectURLOptions": {},
    "URLUtils": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils",
      "!doc": "The URLUtils interface defines utility methods to work with URLs.",
      "href": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/href",
        "!doc": "The URLUtils.href property is a DOMString containing the whole URL."
      },
      "origin": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/origin",
        "!doc": "The URLUtils.origin read-only property is a DOMString containing the Unicode serialization of the origin of the represented URL, that is, for http and https, the scheme followed by '://', followed by the domain, followed by ':', followed by the port (the default port, 80 and 443 respectively, if explicitely specified). For URL using file: scheme, the value is browser dependant."
      },
      "protocol": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/protocol",
        "!doc": "The URLUtils.protocol property is a DOMString representing the protocol scheme of the URL, including the final ':'."
      },
      "username": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/username",
        "!doc": "The URLUtils.username property is a DOMString containing the username specified before the domain name."
      },
      "password": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/password",
        "!doc": "The URLUtils.password property is a DOMString containing the password specified before the domain name."
      },
      "host": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/host",
        "!doc": "The URLUtils.host property is a DOMString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL."
      },
      "hostname": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/hostname",
        "!doc": "The URLUtils.hostname property is a DOMString containing the domain of the URL."
      },
      "port": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/port",
        "!doc": "The URLUtils.port property is a DOMString containing the port number of the URL."
      },
      "pathname": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/pathname",
        "!doc": "The URLUtils.pathname property is a DOMString containing an initial '/' followed by the path of the URL."
      },
      "search": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search",
        "!doc": "The URLUtils.search property is a DOMString containing a '?' followed by the parameters of the URL."
      },
      "hash": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtils/hash",
        "!doc": "The URLUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL."
      }
    },
    "URLUtilsSearchParams": {
      "searchParams": "+URLSearchParams"
    },
    "URLUtilsReadOnly": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly",
      "!doc": "The URLUtilsReadOnly interface defines utility methods to work with URLs. It defines only non-modifying methods intended to be used on data that cannot be changed.",
      "href": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/href",
        "!doc": "The URLUtilsReadOnly.href read-only property returns a DOMString containing the whole URL."
      },
      "protocol": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/protocol",
        "!doc": "The URLUtilsReadOnly.protocol read-only property returns a DOMString containing the protocol scheme of the URL, including the final ':'."
      },
      "host": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/host",
        "!doc": "The URLUtilsReadOnly.host read-only property returns a DOMString containing the host, that is the hostname, a ':', and the port of the URL."
      },
      "hostname": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/hostname",
        "!doc": "The URLUtilsReadOnly.hostname read-only property returns a DOMString containing the domain of the URL."
      },
      "port": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/port",
        "!doc": "The URLUtilsReadOnly.port read-only property returns a DOMString containing the port number of the URL."
      },
      "pathname": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/pathname",
        "!doc": "The URLUtilsReadOnly.pathname read-only property returns a DOMString containing an initial '/' followed by the path of the URL."
      },
      "search": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/search",
        "!doc": "The URLUtilsReadOnly.search read-only property returns a DOMString containing a '?' followed by the parameters of the URL."
      },
      "hash": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/hash",
        "!doc": "The URLUtilsReadOnly.hash read-only property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The hash is not percent encoded."
      },
      "origin": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/origin",
        "!doc": "The URLUtilsReadOnly.origin read-only property is a DOMString containing the Unicode serialization of the origin of the represented URL, that is, for http and https, the scheme followed by '://', followed by the domain, followed by ':', followed by the port (the default port, 80 and 443 respectively, if explicitely specified). For URL using file: scheme, the value is browser dependant."
      }
    },
    "USSDReceivedEventInit": {
      "serviceId": "number",
      "message": "string",
      "session": "+USSDSession"
    },
    "UserProximityEventInit": {
      "near": "bool"
    },
    "VRFieldOfViewInit": {
      "upDegrees": "number",
      "rightDegrees": "number",
      "downDegrees": "number",
      "leftDegrees": "number"
    },
    "LifecycleCallbacks": {
      "createdCallback": "fn()",
      "attachedCallback": "fn()",
      "detachedCallback": "fn()",
      "attributeChangedCallback": "fn(attrName: string, oldValue: string, newValue: string)"
    },
    "ElementRegistrationOptions": {
      "prototype": "object",
      "extends": "string"
    },
    "GLint64": "number",
    "GLuint64": "number",
    "GLenum": "number",
    "GLboolean": "bool",
    "GLbitfield": "number",
    "GLbyte": "number",
    "GLshort": "number",
    "GLint": "number",
    "GLsizei": "number",
    "GLintptr": "number",
    "GLsizeiptr": "number",
    "GLubyte": "number",
    "GLushort": "number",
    "GLuint": "number",
    "GLfloat": "unrestricted float",
    "GLclampf": "unrestricted float",
    "GLuint64EXT": "number",
    "WebGLContextAttributes": {
      "alpha": "bool",
      "depth": "bool",
      "stencil": "bool",
      "antialias": "bool",
      "premultipliedAlpha": "bool",
      "preserveDrawingBuffer": "bool",
      "failIfMajorPerformanceCaveat": "bool"
    },
    "WebGLVertexArrayObjectOES": {},
    "WEBGL_compressed_texture_s3tc": {
      "COMPRESSED_RGB_S3TC_DXT1_EXT": "GLenum",
      "COMPRESSED_RGBA_S3TC_DXT1_EXT": "GLenum",
      "COMPRESSED_RGBA_S3TC_DXT3_EXT": "GLenum",
      "COMPRESSED_RGBA_S3TC_DXT5_EXT": "GLenum"
    },
    "WEBGL_compressed_texture_atc": {
      "COMPRESSED_RGB_ATC_WEBGL": "GLenum",
      "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL": "GLenum",
      "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL": "GLenum"
    },
    "WEBGL_compressed_texture_etc1": {
      "COMPRESSED_RGB_ETC1_WEBGL": "GLenum"
    },
    "WEBGL_compressed_texture_pvrtc": {
      "COMPRESSED_RGB_PVRTC_4BPPV1_IMG": "GLenum",
      "COMPRESSED_RGB_PVRTC_2BPPV1_IMG": "GLenum",
      "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG": "GLenum",
      "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG": "GLenum"
    },
    "WEBGL_debug_renderer_info": {
      "UNMASKED_VENDOR_WEBGL": "GLenum",
      "UNMASKED_RENDERER_WEBGL": "GLenum"
    },
    "WEBGL_debug_shaders": {
      "getTranslatedShaderSource": "fn(shader: WebGLShader) -> string"
    },
    "WEBGL_depth_texture": {
      "UNSIGNED_INT_24_8_WEBGL": "GLenum"
    },
    "OES_element_index_uint": {},
    "EXT_frag_depth": {},
    "WEBGL_lose_context": {
      "loseContext": "fn()",
      "restoreContext": "fn()"
    },
    "EXT_texture_filter_anisotropic": {
      "TEXTURE_MAX_ANISOTROPY_EXT": "GLenum",
      "MAX_TEXTURE_MAX_ANISOTROPY_EXT": "GLenum"
    },
    "EXT_sRGB": {
      "SRGB_EXT": "GLenum",
      "SRGB_ALPHA_EXT": "GLenum",
      "SRGB8_ALPHA8_EXT": "GLenum",
      "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT": "GLenum"
    },
    "OES_standard_derivatives": {
      "FRAGMENT_SHADER_DERIVATIVE_HINT_OES": "GLenum"
    },
    "OES_texture_float": {},
    "WEBGL_draw_buffers": {
      "COLOR_ATTACHMENT0_WEBGL": "GLenum",
      "COLOR_ATTACHMENT1_WEBGL": "GLenum",
      "COLOR_ATTACHMENT2_WEBGL": "GLenum",
      "COLOR_ATTACHMENT3_WEBGL": "GLenum",
      "COLOR_ATTACHMENT4_WEBGL": "GLenum",
      "COLOR_ATTACHMENT5_WEBGL": "GLenum",
      "COLOR_ATTACHMENT6_WEBGL": "GLenum",
      "COLOR_ATTACHMENT7_WEBGL": "GLenum",
      "COLOR_ATTACHMENT8_WEBGL": "GLenum",
      "COLOR_ATTACHMENT9_WEBGL": "GLenum",
      "COLOR_ATTACHMENT10_WEBGL": "GLenum",
      "COLOR_ATTACHMENT11_WEBGL": "GLenum",
      "COLOR_ATTACHMENT12_WEBGL": "GLenum",
      "COLOR_ATTACHMENT13_WEBGL": "GLenum",
      "COLOR_ATTACHMENT14_WEBGL": "GLenum",
      "COLOR_ATTACHMENT15_WEBGL": "GLenum",
      "DRAW_BUFFER0_WEBGL": "GLenum",
      "DRAW_BUFFER1_WEBGL": "GLenum",
      "DRAW_BUFFER2_WEBGL": "GLenum",
      "DRAW_BUFFER3_WEBGL": "GLenum",
      "DRAW_BUFFER4_WEBGL": "GLenum",
      "DRAW_BUFFER5_WEBGL": "GLenum",
      "DRAW_BUFFER6_WEBGL": "GLenum",
      "DRAW_BUFFER7_WEBGL": "GLenum",
      "DRAW_BUFFER8_WEBGL": "GLenum",
      "DRAW_BUFFER9_WEBGL": "GLenum",
      "DRAW_BUFFER10_WEBGL": "GLenum",
      "DRAW_BUFFER11_WEBGL": "GLenum",
      "DRAW_BUFFER12_WEBGL": "GLenum",
      "DRAW_BUFFER13_WEBGL": "GLenum",
      "DRAW_BUFFER14_WEBGL": "GLenum",
      "DRAW_BUFFER15_WEBGL": "GLenum",
      "MAX_COLOR_ATTACHMENTS_WEBGL": "GLenum",
      "MAX_DRAW_BUFFERS_WEBGL": "GLenum",
      "drawBuffersWEBGL": "fn(buffers: [GLenum])"
    },
    "OES_texture_float_linear": {},
    "EXT_shader_texture_lod": {},
    "OES_texture_half_float": {
      "HALF_FLOAT_OES": "GLenum"
    },
    "OES_texture_half_float_linear": {},
    "WEBGL_color_buffer_float": {
      "RGBA32F_EXT": "GLenum",
      "RGB32F_EXT": "GLenum",
      "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT": "GLenum",
      "UNSIGNED_NORMALIZED_EXT": "GLenum"
    },
    "EXT_color_buffer_half_float": {
      "RGBA16F_EXT": "GLenum",
      "RGB16F_EXT": "GLenum",
      "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT": "GLenum",
      "UNSIGNED_NORMALIZED_EXT": "GLenum"
    },
    "OES_vertex_array_object": {
      "VERTEX_ARRAY_BINDING_OES": "GLenum",
      "createVertexArrayOES": "fn() -> WebGLVertexArrayObjectOES",
      "deleteVertexArrayOES": "fn(arrayObject: WebGLVertexArrayObjectOES)",
      "isVertexArrayOES": "fn(arrayObject: WebGLVertexArrayObjectOES) -> GLboolean",
      "bindVertexArrayOES": "fn(arrayObject: WebGLVertexArrayObjectOES)"
    },
    "ANGLE_instanced_arrays": {
      "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE": "GLenum",
      "drawArraysInstancedANGLE": "fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei)",
      "drawElementsInstancedANGLE": "fn(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei)",
      "vertexAttribDivisorANGLE": "fn(index: GLuint, divisor: GLuint)"
    },
    "EXT_blend_minmax": {
      "MIN_EXT": "GLenum",
      "MAX_EXT": "GLenum"
    },
    "WebGLTimerQueryEXT": {},
    "EXT_disjoint_timer_query": {
      "QUERY_COUNTER_BITS_EXT": "GLenum",
      "CURRENT_QUERY_EXT": "GLenum",
      "QUERY_RESULT_EXT": "GLenum",
      "QUERY_RESULT_AVAILABLE_EXT": "GLenum",
      "TIME_ELAPSED_EXT": "GLenum",
      "TIMESTAMP_EXT": "GLenum",
      "GPU_DISJOINT_EXT": "GLenum",
      "createQueryEXT": "fn() -> WebGLTimerQueryEXT",
      "deleteQueryEXT": "fn(query: WebGLTimerQueryEXT)",
      "isQueryEXT": "fn(query: WebGLTimerQueryEXT) -> bool",
      "beginQueryEXT": "fn(target: GLenum, query: WebGLTimerQueryEXT)",
      "endQueryEXT": "fn(target: GLenum)",
      "queryCounterEXT": "fn(query: WebGLTimerQueryEXT, target: GLenum)",
      "getQueryEXT": "fn(target: GLenum, pname: GLenum) -> ?",
      "getQueryObjectEXT": "fn(query: WebGLTimerQueryEXT, pname: GLenum) -> ?"
    },
    "WebrtcGlobalStatisticsReport": {
      "reports": "[RTCStatsReportInternal]"
    },
    "WheelEventInit": {
      "deltaX": "number",
      "deltaY": "number",
      "deltaZ": "number",
      "deltaMode": "number"
    },
    "WifiCommandOptions": {
      "id": "number",
      "cmd": "string",
      "request": "string"
    },
    "WifiResultOptions": {
      "id": "number",
      "status": "number",
      "reply": "string"
    },
    "WifiCertServiceResultOptions": {
      "id": "number",
      "status": "number",
      "usageFlag": "number",
      "nickname": "string"
    },
    "Transferable": "?",
    "WindowTimers": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers",
      "!doc": "WindowTimers contains utility methods to set and clear timers.",
      "setTimeout": {
        "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout",
        "!doc": "Calls a function or executes a code snippet after a specified delay."
      },
      "clearTimeout": {
        "!type": "fn(handle?: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout",
        "!doc": "Clears the delay set by WindowTimers.setTimeout()."
      },
      "setInterval": {
        "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",
        "!doc": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function. Returns an intervalID."
      },
      "clearInterval": {
        "!type": "fn(handle?: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",
        "!doc": "Cancels repeated action which was set up using setInterval."
      }
    },
    "WindowBase64": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64",
      "!doc": "The WindowBase64 helper contains utility methods to convert data to and from base64, a binary-to-text encoding scheme. For example it is used in data URIs.",
      "btoa": {
        "!type": "fn(btoa: string) -> string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa",
        "!doc": "Creates a base-64 encoded ASCII string from a \"string\" of binary data."
      },
      "atob": {
        "!type": "fn(atob: string) -> string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob",
        "!doc": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31."
      }
    },
    "WindowSessionStorage": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowSessionStorage",
      "!doc": "The sessionStorage property allows you to access a session Storage object. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.",
      "sessionStorage": "Storage"
    },
    "WindowLocalStorage": {
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowLocalStorage",
      "!doc": "The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends - that is when the browser is closed.",
      "localStorage": "Storage"
    },
    "ScrollOptions": {
      "behavior": "ScrollBehavior"
    },
    "ScrollToOptions": {
      "left": "number",
      "top": "number"
    },
    "SpeechSynthesisGetter": {
      "speechSynthesis": "SpeechSynthesis"
    },
    "WindowModal": {
      "dialogArguments": "?",
      "returnValue": "?"
    },
    "MozXMLHttpRequestParameters": {
      "mozAnon": "bool",
      "mozSystem": "bool"
    },
    "MozFrameLoaderOwner": {
      "frameLoader": "MozFrameLoader",
      "setIsPrerendered": "fn()",
      "swapFrameLoaders": "fn(aOtherOwner: XULElement)"
    }
  },
  "AVInputPort": {
    "!proto": "InputPort"
  },
  "MozAbortablePromise": {
    "!type": "fn(init: fn(resolve: object, reject: object), abortCallback: fn())",
    "prototype": {
      "!proto": "Promise.prototype",
      "abort": "fn()"
    }
  },
  "AlarmsManager": {
    "getAll": "fn() -> DOMRequest",
    "add": "fn(date: ?, respectTimezone: string, data?: ?) -> DOMRequest",
    "remove": "fn(id: number)"
  },
  "AnalyserNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode",
    "!doc": "The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.",
    "!proto": "AudioNode",
    "getFloatFrequencyData": {
      "!type": "fn(array: Float32Array)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData",
      "!doc": "The getFloatFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Float32Array array passed into it."
    },
    "getByteFrequencyData": {
      "!type": "fn(array: Uint8Array)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData",
      "!doc": "The getByteFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Uint8Array (unsigned byte array) passed into it."
    },
    "getFloatTimeDomainData": {
      "!type": "fn(array: Float32Array)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData",
      "!doc": "The getFloatTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Float32Array array passed into it."
    },
    "getByteTimeDomainData": {
      "!type": "fn(array: Uint8Array)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData",
      "!doc": "The getByteTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it."
    },
    "fftSize": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize",
      "!doc": "The fftSize property of the AnalyserNode interface is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain."
    },
    "frequencyBinCount": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount",
      "!doc": "The frequencyBinCount property of the AnalyserNode interface is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization."
    },
    "minDecibels": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels",
      "!doc": "The minDecibels property of the AnalyserNode interface Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values — basically, this specifies the minimum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData()."
    },
    "maxDecibels": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels",
      "!doc": "The maxDecibels property of the AnalyserNode interface Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values — basically, this specifies the maximum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData()."
    },
    "smoothingTimeConstant": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant",
      "!doc": "The smoothingTimeConstant property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame. It's basically an average\n between the current buffer and the last buffer the AnalyserNode processed, and results in a much smoother set of value changes over time."
    },
    "passThrough": "bool"
  },
  "Animation": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation",
    "!doc": "The Animation interface represents a single animation player and provides playback controls and a timeline for an animation node or source.",
    "!proto": "EventTarget",
    "effect": "AnimationEffectReadOnly",
    "timeline": "AnimationTimeline",
    "startTime": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime",
      "!doc": "The Animation.startTime property returns or sets the scheduled time when an animation's playback should begin."
    },
    "currentTime": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime",
      "!doc": "The Animation.currentTime property returns or sets the current time of the animation if it is running, or null if the animation is paused."
    },
    "playbackRate": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate",
      "!doc": "The Animation.playbackRate property returns or sets the playback rate of the animation."
    },
    "playState": {
      "!type": "AnimationPlayState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/playState",
      "!doc": "The Animation.playState read-only property is an enumerated value describing the playback state of an animation:"
    },
    "ready": "+Promise[value=Animation]",
    "finished": "+Promise[value=Animation]",
    "onfinish": "fn(+Event)",
    "oncancel": "fn(+Event)",
    "cancel": "fn()",
    "finish": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/finish",
      "!doc": "The finish() method of the Animation Interface seeks either end of an animation, depending on whether the animation is playing or reversing."
    },
    "play": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/play",
      "!doc": "The play() method of the Animation Interface starts or resumes playing of an animation, or begins the animation again if it previously finished."
    },
    "pause": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Animation/pause",
      "!doc": "The pause() method of the Animation interface suspends playing of an animation.."
    },
    "reverse": "fn()",
    "isRunningOnCompositor": "bool"
  },
  "AnimationEffectReadOnly": {
    "getComputedTiming": "fn() -> ComputedTimingProperties"
  },
  "AnimationEvent": {
    "!type": "fn(type: string, eventInitDict?: AnimationEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent",
    "!doc": "The AnimationEvent interface represents events providing information related to animations.",
    "prototype": {
      "!proto": "Event.prototype",
      "animationName": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName",
        "!doc": "The AnimationEvent.animationName read-only property is a DOMString containing the value of the animation-name CSS property associated with the transition."
      },
      "elapsedTime": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime",
        "!doc": "The AnimationEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an \"animationstart\" event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing  (-1 * delay)."
      },
      "pseudoElement": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement",
        "!doc": "The AnimationEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''."
      }
    }
  },
  "AnimationPlaybackEvent": {
    "!type": "fn(type: string, eventInitDict?: AnimationPlaybackEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "currentTime": "number",
      "timelineTime": "number"
    }
  },
  "AnimationTimeline": {
    "currentTime": "number",
    "getAnimations": "fn() -> [Animation]"
  },
  "MozObserver": {},
  "ArchiveReader": {
    "!type": "fn(blob: +Blob, options?: ArchiveReaderOptions)",
    "prototype": {
      "getFilenames": "fn() -> ArchiveRequest",
      "getFile": "fn(filename: string) -> ArchiveRequest",
      "getFiles": "fn() -> ArchiveRequest"
    }
  },
  "ArchiveRequest": {
    "!proto": "DOMRequest",
    "reader": "+ArchiveReader"
  },
  "Attr": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Attr",
    "!doc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.",
    "!proto": "Node",
    "localName": "string",
    "value": "string",
    "name": "string",
    "namespaceURI": "string",
    "prefix": "string",
    "specified": "bool",
    "ownerElement": "HTMLElement",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "AudioBuffer": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer",
    "!doc": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.",
    "sampleRate": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate",
      "!doc": "The sampleRate property of the AudioBuffer interface returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer."
    },
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length",
      "!doc": "The length property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer."
    },
    "duration": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration",
      "!doc": "The duration property of the AudioBuffer interface returns a double representing the duration, in seconds, of the PCM data stored in the buffer."
    },
    "numberOfChannels": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels",
      "!doc": "The numberOfChannels property of the AudioBuffer interface returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer."
    },
    "getChannelData": {
      "!type": "fn(channel: number) -> Float32Array",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData",
      "!doc": "The getChannelData() method of the AudioBuffer Interface returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel)."
    },
    "copyFromChannel": {
      "!type": "fn(destination: Float32Array, channelNumber: number, startInChannel?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel",
      "!doc": "The copyFromChannel() method of the AudioBuffer interface copies the samples from the specified channel of the AudioBuffer to the destination array."
    },
    "copyToChannel": {
      "!type": "fn(source: Float32Array, channelNumber: number, startInChannel?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel",
      "!doc": "The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array."
    }
  },
  "AudioBufferSourceNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode",
    "!doc": "The AudioBufferSourceNode interface represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It is an AudioNode that acts as an audio source.",
    "!proto": "AudioNode",
    "buffer": {
      "!type": "AudioBuffer",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer",
      "!doc": "The buffer property of the AudioBufferSourceNode interface represents an AudioBuffer that defines the audio asset to be played."
    },
    "playbackRate": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate",
      "!doc": "The playbackRate property of the AudioBufferSourceNode interface Is an a-rate AudioParam that defines the speed at which the audio asset will be played."
    },
    "detune": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune",
      "!doc": "The detune property of the AudioBufferSourceNode interface is an k-rate AudioParam representing detuning of oscillation in cents."
    },
    "loop": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop",
      "!doc": "The loop property of the AudioBufferSourceNode interface is a Boolean indicating if the audio asset must be replayed when the end of the AudioBuffer is reached."
    },
    "loopStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart",
      "!doc": "The loopStart property of the AudioBufferSourceNode interface is a double value indicating, in seconds, where in the AudioBuffer the restart of the play must happen."
    },
    "loopEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd",
      "!doc": "The loopEnd property of the AudioBufferSourceNode interface is a double value indicating, in seconds, where in the AudioBuffer the restart of the play must end (and then loop again.)"
    },
    "start": {
      "!type": "fn(when?: number, grainOffset?: number, grainDuration?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start",
      "!doc": "The start() method of the AudioBufferSourceNode Interface is used to schedule the start of the audio buffer playback."
    },
    "stop": {
      "!type": "fn(when?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/stop",
      "!doc": "The stop() method of the AudioBufferSourceNode Interface is used to schedule when audio buffer playback should stop."
    },
    "onended": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/onended",
      "!doc": "The onended event handler of the AudioBufferSourceNode contains the callback associated with the ended event: this allows you to run code in response to the audio track finishing playback."
    },
    "passThrough": "bool"
  },
  "AudioChannelManager": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioChannelManager",
    "!doc": "The AudioChannelManager interface of the AudioChannels API includes features for managing your device's audio channels, including setting what channel's volume to affect when the volume buttons are pressed inside a particular app.",
    "!proto": "EventTarget",
    "headphones": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioChannelManager/headphones",
      "!doc": "The headphones read-only property of the AudioChannelManager interface returns a Boolean that indicates whether headphones are plugged into the device. A true value means that headphone are plugged in; false means they aren't."
    },
    "onheadphoneschange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioChannelManager/onheadphoneschange",
      "!doc": "The onheadphoneschange event handler of the AudioChannelManager interface fires when the device's headphones are plugged in or unplugged."
    },
    "volumeControlChannel": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioChannelManager/volumeControlChannel",
      "!doc": "The volumeControlChannel property of the AudioChannelManager interface returns a DOMString that allows you to set which audio channel should have its volume changed when you press the device's hardware volume controls."
    },
    "allowedAudioChannels": "[BrowserElementAudioChannel]"
  },
  "AudioContext": {
    "!type": "fn(audioChannelType: AudioChannel)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext",
    "!doc": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode. An audio context controls both the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an AudioContext before you do anything else, as everything happens inside a context.",
    "prototype": {
      "!proto": "EventTarget",
      "destination": {
        "!type": "AudioDestinationNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination",
        "!doc": "The destination property of the AudioContext interface returns an AudioDestinationNode representing the final destination of all audio in the context. It often represents an actual audio-rendering device such as your device's speakers."
      },
      "sampleRate": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sampleRate",
        "!doc": "The sampleRate property of the AudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context. This limitation means that sample-rate converters are not supported."
      },
      "currentTime": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/currentTime",
        "!doc": "The currentTime read-only property of the AudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc. It starts at 0."
      },
      "listener": {
        "!type": "AudioListener",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/listener",
        "!doc": "The listener property of the AudioContext interface returns an AudioListener object that can then be used for implementing 3D audio spatialization."
      },
      "state": {
        "!type": "AudioContextState",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/state",
        "!doc": "The state read-only property of the AudioContext interface returns the current state of the AudioContext."
      },
      "suspend": {
        "!type": "fn() -> +Promise[value=void]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend",
        "!doc": "The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process — this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while."
      },
      "resume": {
        "!type": "fn() -> +Promise[value=void]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume",
        "!doc": "The resume() method of the AudioContext Interface resumes the progression of time in an audio context that has previously been suspended."
      },
      "close": {
        "!type": "fn() -> +Promise[value=void]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close",
        "!doc": "The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses."
      },
      "onstatechange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/onstatechange",
        "!doc": "The onstatechange property of the AudioContext interface defines an event handler function to be called when the statechange event fires: this occurs when the audio context's state changes."
      },
      "createBuffer": {
        "!type": "fn(numberOfChannels: number, length: number, sampleRate: number) -> AudioBuffer",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBuffer",
        "!doc": "The createBuffer() method of the AudioContext Interface is used to create a new, empty AudioBuffer object, which can then be populated by data, and played via an AudioBufferSourceNode."
      },
      "decodeAudioData": {
        "!type": "fn(audioData: +ArrayBuffer, successCallback?: fn(decodedData: AudioBuffer), errorCallback?: fn()) -> +Promise[value=AudioBuffer]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData",
        "!doc": "The decodeAudioData() method of the AudioContext Interface is used to asynchronously decode audio file data contained in an ArrayBuffer. In this case the ArrayBuffer is usually loaded from an XMLHttpRequest's response attribute after setting the responseType to arraybuffer."
      },
      "createBufferSource": {
        "!type": "fn() -> AudioBufferSourceNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource",
        "!doc": "The createBufferSource() method of the AudioContext Interface is used to create a new AudioBufferSourceNode, which can be used to play audio data contained within an AudioBuffer object. AudioBuffers are created using AudioContext.createBuffer or returned by AudioContext.decodeAudioData when it successfully decodes an audio track."
      },
      "createMediaStreamDestination": {
        "!type": "fn() -> MediaStreamAudioDestinationNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination",
        "!doc": "The createMediaStreamDestination() method of the AudioContext Interface is used to create a new MediaStreamAudioDestinationNode object associated with a WebRTC MediaStream representing an audio stream, which may be stored in a local file or sent to another computer."
      },
      "createScriptProcessor": {
        "!type": "fn(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number) -> ScriptProcessorNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor",
        "!doc": "The createScriptProcessor() method of the AudioContext interface creates a ScriptProcessorNode used for direct audio processing."
      },
      "createStereoPanner": {
        "!type": "fn() -> StereoPannerNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createStereoPanner",
        "!doc": "The createStereoPanner() method of the AudioContext interface creates a StereoPannerNode, which can be used to apply stereo panning to an audio source. It positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm."
      },
      "createAnalyser": {
        "!type": "fn() -> AnalyserNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createAnalyser",
        "!doc": "The createAnalyser() method of the AudioContext interface creates an AnalyserNode, which can be used to expose audio time and frequency data and create data visualisations."
      },
      "createMediaElementSource": {
        "!type": "fn(mediaElement: HTMLMediaElement) -> MediaElementAudioSourceNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource",
        "!doc": "The createMediaElementSource() method of the AudioContext Interface is used to create a new MediaElementAudioSourceNode object, given an existing HTML <audio> or <video> element, the audio from which can then be played and manipulated."
      },
      "createMediaStreamSource": {
        "!type": "fn(mediaStream: +MediaStream) -> MediaStreamAudioSourceNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource",
        "!doc": "The createMediaStreamSource() method of the AudioContext Interface is used to create a new MediaStreamAudioSourceNode object, given a media stream (say, from a navigator.getUserMedia instance), the audio from which can then be played and manipulated."
      },
      "createGain": {
        "!type": "fn() -> GainNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain",
        "!doc": "The createGain() method of the AudioContext interface creates a GainNode, which can be used to control the overall volume of the audio graph."
      },
      "createDelay": {
        "!type": "fn(maxDelayTime?: number) -> DelayNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createDelay",
        "!doc": "The createDelay() method of the AudioContext Interface is used to create a DelayNode, which is used to delay the incoming audio signal by a certain amount."
      },
      "createBiquadFilter": {
        "!type": "fn() -> BiquadFilterNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBiquadFilter",
        "!doc": "The createBiquadFilter() method of the AudioContext interface creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types."
      },
      "createWaveShaper": {
        "!type": "fn() -> WaveShaperNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createWaveShaper",
        "!doc": "The createWaveShaper() method of the AudioContext interface creates a WaveShaperNode, which represents a non-linear distortion. It is used to apply distortion effects to your audio."
      },
      "createPanner": {
        "!type": "fn() -> PannerNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createPanner",
        "!doc": "The createPanner() method of the AudioContext Interface is used to create a new PannerNode, which is used to spatialize an incoming audio stream in 3D space."
      },
      "createConvolver": {
        "!type": "fn() -> ConvolverNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createConvolver",
        "!doc": "The createConvolver() method of the AudioContext interface creates a ConvolverNode, which is commonly used to apply reverb effects to your audio. See the spec definition of Convolution for more information."
      },
      "createChannelSplitter": {
        "!type": "fn(numberOfOutputs?: number) -> ChannelSplitterNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createChannelSplitter",
        "!doc": "The createChannelSplitter() method of the AudioContext Interface is used to create a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately."
      },
      "createChannelMerger": {
        "!type": "fn(numberOfInputs?: number) -> ChannelMergerNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createChannelMerger",
        "!doc": "The createChannelMerger() method of the AudioContext Interface is used to create a ChannelMergerNode, which is used to combine channels from multiple audio streams into a single audio stream."
      },
      "createDynamicsCompressor": {
        "!type": "fn() -> DynamicsCompressorNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createDynamicsCompressor",
        "!doc": "The createDynamicsCompressor() method of the AudioContext Interface is used to create a DynamicsCompressorNode, which can be used to apply compression to an audio signal."
      },
      "createOscillator": {
        "!type": "fn() -> OscillatorNode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createOscillator",
        "!doc": "The createOscillator() method of the AudioContext interface creates an OscillatorNode, a source representing a periodic waveform. It basically generates a constant tone."
      },
      "createPeriodicWave": {
        "!type": "fn(real: Float32Array, imag: Float32Array) -> PeriodicWave",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createPeriodicWave",
        "!doc": "The createPeriodicWave() method of the AudioContext Interface is used to create a PeriodicWave, which is used to define a periodic waveform that can be used to shape the output of an OscillatorNode."
      },
      "mozAudioChannelType": "AudioChannel",
      "onmozinterruptbegin": "fn(+Event)",
      "onmozinterruptend": "fn(+Event)",
      "testAudioChannelInAudioNodeStream": "fn() -> AudioChannel"
    }
  },
  "AudioDestinationNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode",
    "!doc": "The AudioDestinationNode interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will \"record\" the audio data when used with an OfflineAudioContext.",
    "!proto": "AudioNode",
    "maxChannelCount": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount",
      "!doc": "The maxchannelCount property of the AudioDestinationNode interface is an unsigned long defining the maximum amount of channels that the physical device can handle."
    }
  },
  "AudioListener": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioListener",
    "!doc": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialisation. All PannerNodes spatialise in relation to the AudioListener stored in the AudioContext.listener attribute.",
    "dopplerFactor": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioListener/dopplerFactor",
      "!doc": "The dopplerFactor property of the AudioListener interface is a double value representing the amount of pitch shift to use when rendering a doppler effect."
    },
    "speedOfSound": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioListener/speedOfSound",
      "!doc": "The speedOfSound property of the AudioListener interface is a double value representing the speed of sound, in meters per second."
    },
    "setPosition": {
      "!type": "fn(x: number, y: number, z: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition",
      "!doc": "The setPosition() method of the AudioListener Interface defines the position of the listener."
    },
    "setOrientation": {
      "!type": "fn(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setOrientation",
      "!doc": "The setOrientation() method of the AudioListener interface defines the orientation of the listener."
    },
    "setVelocity": "fn(x: number, y: number, z: number)"
  },
  "AudioNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode",
    "!doc": "The AudioNode interface is a generic interface for representing an audio processing module like an audio source (e.g. an HTML <audio> or <video> element, an OscillatorNode, etc.), the audio destination, intermediate processing module (e.g. a filter like BiquadFilterNode or ConvolverNode), or volume control (like GainNode).",
    "!proto": "EventTarget",
    "connect": "fn(destination: AudioNode, output?: number, input?: number) -> AudioNode",
    "disconnect": {
      "!type": "fn(output?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect",
      "!doc": "The disconnect method of the AudioNode interface allows you to disconnect the current node from another one that it is already connected to."
    },
    "context": {
      "!type": "+AudioContext",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context",
      "!doc": "The context property of the AudioNode interface returns the associated AudioContext, that is the object representing the processing graph the node is participating in."
    },
    "numberOfInputs": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs",
      "!doc": "The numberOfInputs property of the AudioNode interface returns the number of inputs feeding the node. Source nodes are defined as nodes having a numberOfInputs property with a value of 0."
    },
    "numberOfOutputs": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs",
      "!doc": "The numberOfOutputs property of the AudioNode interface returns the number of outputs coming out of the node. Destination nodes — like AudioDestinationNode — have a value of 0 for this attribute."
    },
    "channelCount": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount",
      "!doc": "The channelCount property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node."
    },
    "channelCountMode": {
      "!type": "ChannelCountMode",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode",
      "!doc": "The channelCountMode property of the AudioNode interface represents an enumerated value describing the way channels must be matched between the node's inputs and outputs."
    },
    "channelInterpretation": {
      "!type": "ChannelInterpretation",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation",
      "!doc": "The channelInterpretation property of the AudioNode interface represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen."
    },
    "id": "number"
  },
  "AudioParam": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam",
    "!doc": "The AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain). An AudioParam can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.",
    "value": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value",
      "!doc": "The value property of the AudioParam interface represents the parameter's current floating point value, which is initially set to the value of AudioParam.defaultValue."
    },
    "defaultValue": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/defaultValue",
      "!doc": "The defaultValue property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the AudioParam."
    },
    "setValueAtTime": {
      "!type": "fn(value: number, startTime: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueAtTime",
      "!doc": "The setValueAtTime() method of the AudioParam Interface schedules an instant change to the value of the AudioParam at a precise time, as measured against AudioContext.currentTime. The new value is given in the value parameter."
    },
    "linearRampToValueAtTime": {
      "!type": "fn(value: number, endTime: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime",
      "!doc": "NOTE: both the example and live example are incorrect, see https://github.com/WebAudio/web-audio-api/issues/34"
    },
    "exponentialRampToValueAtTime": {
      "!type": "fn(value: number, endTime: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime",
      "!doc": "The exponentialRampToValueAtTime() method of the AudioParam Interface schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter."
    },
    "setTargetAtTime": {
      "!type": "fn(target: number, startTime: number, timeConstant: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime",
      "!doc": "The setTargetAtTime() method of the AudioParam Interface schedules the start of a change to the value of the AudioParam."
    },
    "setValueCurveAtTime": {
      "!type": "fn(values: Float32Array, startTime: number, duration: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueCurveAtTime",
      "!doc": "The setValueCurveAtTime() method of the AudioParam Interface schedules the values of the AudioParam to change one by one (it's not a smooth transition) through a set of values defined by a Float32Array, which are scaled to fit into the given interval starting at startTime and having a specific duration."
    },
    "cancelScheduledValues": {
      "!type": "fn(startTime: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelScheduledValues",
      "!doc": "The cancelScheduledValues() method of the AudioParam Interface cancels all scheduled future changes to the AudioParam."
    },
    "parentNodeId": "number",
    "name": "string"
  },
  "AudioProcessingEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent",
    "!doc": "The Web Audio API AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.",
    "!proto": "Event.prototype",
    "playbackTime": "number",
    "inputBuffer": "AudioBuffer",
    "outputBuffer": "AudioBuffer"
  },
  "AudioStreamTrack": {
    "!proto": "MediaStreamTrack"
  },
  "AudioTrack": {
    "id": "string",
    "kind": "string",
    "label": "string",
    "language": "string",
    "enabled": "bool"
  },
  "AudioTrackList": {
    "!proto": "EventTarget",
    "length": "number",
    "getTrackById": "fn(id: string) -> AudioTrack",
    "onchange": "fn(+Event)",
    "onaddtrack": "fn(+Event)",
    "onremovetrack": "fn(+Event)",
    "<i>": "AudioTrack"
  },
  "AutocompleteErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: AutocompleteErrorEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "reason": "AutoCompleteErrorReason"
    }
  },
  "BarProp": {
    "visible": "bool",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "BatteryManager": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager",
    "!doc": "The BatteryManager interface provides ways to get information about the system's battery charge level.",
    "!proto": "EventTarget",
    "charging": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/charging",
      "!doc": "A Boolean value indicating whether or not the device's battery is currently being charged."
    },
    "chargingTime": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/chargingTime",
      "!doc": "Indicates the amount of time, in seconds, that remain until the battery is fully charged."
    },
    "dischargingTime": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/dischargingTime",
      "!doc": "Indicates the amount of time, in seconds, that remains until the battery is fully discharged."
    },
    "level": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/level",
      "!doc": "Indicates the current battery charge level as a value between 0.0 and 1.0."
    },
    "onchargingchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingchange",
      "!doc": "Specifies an event listener to receive chargingchange events. These events occur when the battery charging state is updated."
    },
    "onchargingtimechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingtimechange",
      "!doc": "Specifies an event listener to receive chargingtimechange events. These events occur when the battery chargingTime is updated."
    },
    "ondischargingtimechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/ondischargingtimechange",
      "!doc": "Specifies an event listener to receive dischargingtimechange events. These events occur when the battery dischargingTime is updated."
    },
    "onlevelchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onlevelchange",
      "!doc": "Specifies an event listener to receive levelchange events. These events occur when the battery level is updated."
    }
  },
  "BeforeAfterKeyboardEvent": {
    "!type": "fn(typeArg: string, eventInitDict?: BeforeAfterKeyboardEventInit)",
    "prototype": {
      "!proto": "KeyboardEvent.prototype",
      "embeddedCancelled": "bool"
    }
  },
  "BeforeUnloadEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent",
    "!doc": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded.",
    "!proto": "Event.prototype",
    "returnValue": "string"
  },
  "BiquadFilterNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode",
    "!doc": "The BiquadFilterNode interface represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. A BiquadFilterNode always has exactly one input and one output.",
    "!proto": "AudioNode",
    "type": {
      "!type": "BiquadFilterType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type",
      "!doc": "The type property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing."
    },
    "frequency": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency",
      "!doc": "The frequency property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing a frequency in the current filtering algorithm measured in hertz (Hz)."
    },
    "detune": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune",
      "!doc": "The detune property of the BiquadFilterNode interface is an a-rate AudioParam representing detuning of the frequency in cents."
    },
    "Q": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q",
      "!doc": "The Q property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing a Q factor, or quality factor."
    },
    "gain": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain",
      "!doc": "The gain property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing the gain used in the current filtering algorithm."
    },
    "getFrequencyResponse": {
      "!type": "fn(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse",
      "!doc": "The getFrequencyResponse() method of the BiquadFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in the frequencyHz array of frequencies."
    },
    "passThrough": "bool"
  },
  "Blob": {
    "!type": "fn(blobParts: [+ArrayBuffer|ArrayBufferView|+Blob|string], options?: BlobPropertyBag)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Blob",
    "!doc": "A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.",
    "prototype": {
      "size": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Blob/size",
        "!doc": "The Blob.size property returns the size of the file in bytes."
      },
      "type": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Blob/type",
        "!doc": "The type property of a Blob object provides the MIME type of the file. It returns an empty string if the type couldn't determined."
      },
      "slice": {
        "!type": "fn(start?: number, end?: number, contentType?: string) -> +Blob",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Blob/slice",
        "!doc": "The slice is used to create a new Blob object containing the data in the specified range of bytes of the source Blob."
      }
    }
  },
  "BlobEvent": {
    "!type": "fn(type: string, eventInitDict?: BlobEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BlobEvent",
    "!doc": "The BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily,  associated with media content.",
    "prototype": {
      "!proto": "Event.prototype",
      "data": {
        "!type": "+Blob",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/data",
        "!doc": "The BlobEvent.data read-only property represents a Blob associated with the event."
      }
    }
  },
  "BluetoothAdapter": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter",
    "!doc": "The BluetoothAdapter interface of the Web Bluetooth API is used to handle all the operations requested by Bluetooth networks. A Bluetooth adapter is the physical interface which is used to interact with local Bluetooth device.",
    "!proto": "EventTarget",
    "state": "BluetoothAdapterState",
    "address": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/address",
      "!doc": "The address property value provides the address of the device's adapter on the Bluetooth micro-network."
    },
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/name",
      "!doc": "The name property provides the human readable name of the device's adapter."
    },
    "discoverable": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/discoverable",
      "!doc": "The discoverable property indicates if the device is discoverable (true) or not (false) by other Bluetooth devices."
    },
    "discovering": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/discovering",
      "!doc": "The discovering property indicates if the device is in the process of discovering (true) or not (false) surrounding Bluetooth devices."
    },
    "gattServer": "BluetoothGattServer",
    "pairingReqs": "BluetoothPairingListener",
    "onattributechanged": "fn(+Event)",
    "ondevicepaired": "fn(+Event)",
    "ondeviceunpaired": "fn(+Event)",
    "onpairingaborted": "fn(+Event)",
    "ona2dpstatuschanged": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/ona2dpstatuschanged",
      "!doc": "Specifies an event listener to receive a2dpstatuschanged events. Those events occur when an A2DP connection status changes."
    },
    "onhfpstatuschanged": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/onhfpstatuschanged",
      "!doc": "Specifies an event listener to receive hfpstatuschanged events. Those events occur when an HFP connection status changes."
    },
    "onscostatuschanged": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/onscostatuschanged",
      "!doc": "Specifies an event listener to receive scostatuschanged events. Those events occur when a SCO connection status changes."
    },
    "onrequestmediaplaystatus": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/onrequestmediaplaystatus",
      "!doc": "Specifies an event listener to receive requestmediaplaystatus events. Those events occur when a remote Bluetooth device queries the current media play status."
    },
    "onobexpasswordreq": "fn(+Event)",
    "onpullphonebookreq": "fn(+Event)",
    "onpullvcardentryreq": "fn(+Event)",
    "onpullvcardlistingreq": "fn(+Event)",
    "onmapfolderlistingreq": "fn(+Event)",
    "onmapmessageslistingreq": "fn(+Event)",
    "onmapgetmessagereq": "fn(+Event)",
    "onmapsetmessagestatusreq": "fn(+Event)",
    "onmapsendmessagereq": "fn(+Event)",
    "onmapmessageupdatereq": "fn(+Event)",
    "enable": "fn() -> +Promise[value=void]",
    "disable": "fn() -> +Promise[value=void]",
    "setName": {
      "!type": "fn(name: string) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/setName",
      "!doc": "The setName method is used to change the value of the name property for the device's adapter."
    },
    "setDiscoverable": {
      "!type": "fn(discoverable: bool) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/setDiscoverable",
      "!doc": "The setDiscoverable method is used to change the value of the discoverable property for the device's adapter."
    },
    "startDiscovery": {
      "!type": "fn() -> +Promise[value=BluetoothDiscoveryHandle]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/startDiscovery",
      "!doc": "The startDiscovery method is used to have the device's adapter start seeking for remote devices."
    },
    "stopDiscovery": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/stopDiscovery",
      "!doc": "The stopDiscovery method is used to have the device's adapter stop seeking for remote devices."
    },
    "pair": {
      "!type": "fn(deviceAddress: string) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/pair",
      "!doc": "The pair method is used to start pairing a remote device with the device's adapter."
    },
    "unpair": {
      "!type": "fn(deviceAddress: string) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/unpair",
      "!doc": "The unpair method is used to remove the paired device from the paired device list of the device's adapter."
    },
    "getPairedDevices": {
      "!type": "fn() -> [BluetoothDevice]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/getPairedDevices",
      "!doc": "The getPairedDevices method is used to retrieve the full list of all devices paired with the device's adapter."
    },
    "startLeScan": "fn(serviceUuids: [string]) -> +Promise[value=BluetoothDiscoveryHandle]",
    "stopLeScan": "fn(discoveryHandle: BluetoothDiscoveryHandle) -> +Promise[value=void]",
    "getConnectedDevices": {
      "!type": "fn(serviceUuid: number) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/getConnectedDevices",
      "!doc": "The getConnectedDevices method is used to retrieve the full list of all devices connected with a specific service of local adapter."
    },
    "connect": {
      "!type": "fn(device: BluetoothDevice, serviceUuid?: number) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/connect",
      "!doc": "The connect method is used to connect the device's adapter to a specific service of a remote device."
    },
    "disconnect": {
      "!type": "fn(device: BluetoothDevice, serviceUuid?: number) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/disconnect",
      "!doc": "The disconnect method is used to disconnect the device's adapter from a specific service of a remote device."
    },
    "sendFile": {
      "!type": "fn(deviceAddress: string, blob: +Blob) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/sendFile",
      "!doc": "The sendFile method is used to start sending a file to a given remote device."
    },
    "stopSendingFile": {
      "!type": "fn(deviceAddress: string) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/stopSendingFile",
      "!doc": "The stopSendingFile method is used to abort sending a file to a given remote device."
    },
    "confirmReceivingFile": {
      "!type": "fn(deviceAddress: string, confirmation: bool) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/confirmReceivingFile",
      "!doc": "The confirmReceivingFile method is used to accept or reject the incoming file transfer request received from the remote device."
    },
    "connectSco": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/connectSco",
      "!doc": "The connectSco method is used to allow the device to enable the SCO connection to broadcast and listen to audio to/from the remote devices it is connected to."
    },
    "disconnectSco": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/disconnectSco",
      "!doc": "The disconnectSco method is used to allow the device to disable the SCO connection with the remote devices it is connected to."
    },
    "isScoConnected": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/isScoConnected",
      "!doc": "The isScoConnected method is used to allow to know if there is a SCO connection between local and the remote Bluetooth device."
    },
    "answerWaitingCall": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/answerWaitingCall",
      "!doc": "The answerWaitingCall method is used to allow HFP devices to answer a pending incoming call on a CDMA network."
    },
    "ignoreWaitingCall": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/ignoreWaitingCall",
      "!doc": "The ignoreWaitingCall method is used to allow HFP devices to dismiss a pending incoming call on a CDMA network."
    },
    "toggleCalls": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/toggleCalls",
      "!doc": "The toggleCalls method is used to allow HFP devices to switch from one call to another on a CDMA network."
    },
    "sendMediaMetaData": {
      "!type": "fn(mediaMetaData?: MediaMetaData) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/sendMediaMetaData",
      "!doc": "The sendMediaMetaData method is used to send metadata about media to remote devices connected with the AVRCP 1.3 profile."
    },
    "sendMediaPlayStatus": {
      "!type": "fn(mediaPlayStatus?: MediaPlayStatus) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapter/sendMediaPlayStatus",
      "!doc": "The sendMediaPlayStatus method is used to send the play status of the device to remote devices connected with the AVRCP 1.3 profile."
    }
  },
  "BluetoothAdapterEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothAdapterEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdapterEvent",
    "!doc": "The BluetoothAdapterEvent interface of the Web Bluetooth API provides access to a BluetoothAdapter object and its address as the parameter of a adapteradded or adapterremoved event handler (see BluetoothManager.onadapteradded and BluetoothManager.onadapterremoved), when fired.",
    "prototype": {
      "!proto": "Event.prototype",
      "adapter": "BluetoothAdapter",
      "address": "string"
    }
  },
  "BluetoothAttributeEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothAttributeEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothAttributeEvent",
    "!doc": "The BluetoothAttributeEvent interface of the Web Bluetooth API provides access to changed attributes and their new values as the parameter of attributechanged event handlers (including BluetoothManager.onattributechanged, BluetoothAdapter.onattributechanged, and BluetoothDevice.onattributechanged), when fired.",
    "prototype": {
      "!proto": "Event.prototype",
      "attrs": "[string]"
    }
  },
  "BluetoothClassOfDevice": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothClassOfDevice",
    "!doc": "The BluetoothClassOfDevice interface of the Web Bluetooth API provides identifying/classification information about a given remote Bluetooth device, available at discovery stage.",
    "LIMITED_DISCOVERABILITY": "number",
    "POSITIONING": "number",
    "NETWORKING": "number",
    "RENDERING": "number",
    "CAPTURING": "number",
    "OBJECT_TRANSFER": "number",
    "AUDIO": "number",
    "TELEPHONY": "number",
    "INFORMATION": "number",
    "MISC": "number",
    "COMPUTER": "number",
    "PHONE": "number",
    "NETWORK": "number",
    "AUDIO_VIDEO": "number",
    "PERIPHERAL": "number",
    "IMAGING": "number",
    "WEARABLE": "number",
    "TOY": "number",
    "HEALTH": "number",
    "UNCATEGORIZED": "number",
    "majorServiceClass": "number",
    "majorDeviceClass": "number",
    "minorDeviceClass": "number"
  },
  "BluetoothDevice": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice",
    "!doc": "The BluetoothDevice interface of the Web Bluetooth API provides information regarding a given Bluetooth device.",
    "!proto": "EventTarget",
    "address": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/address",
      "!doc": "The address property value provides the address of the device on the Bluetooth micro-network."
    },
    "cod": "BluetoothClassOfDevice",
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/name",
      "!doc": "The name property provides the human readable name of the device."
    },
    "paired": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/paired",
      "!doc": "The paired property indicates if the device is paired to the current device's adapter (true) or not (false)."
    },
    "type": "BluetoothDeviceType",
    "gatt": "BluetoothGatt",
    "uuids": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/uuids",
      "!doc": "The uuids property provides the list of UUIDs of each Bluetooth service the device is able to provide. For a full list of possible Bluetooth services see the Bluetooth specification."
    },
    "onattributechanged": "fn(+Event)",
    "fetchUuids": "fn() -> +Promise"
  },
  "BluetoothDeviceEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothDeviceEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDeviceEvent",
    "!doc": "The BluetoothDeviceEvent interface of the Web Bluetooth API provides access to a found/paired device (BluetoothDevice) object or the address or an unpaired device as the parameter of a devicefound, devicepaired or deviceunpaired event handler (see BluetoothDiscoveryHandle.ondevicefound, BluetoothAdapter.ondevicepaired, BluetoothAdapter.ondeviceunpaired), when fired.",
    "prototype": {
      "!proto": "Event.prototype",
      "device": {
        "!type": "BluetoothDevice",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDeviceEvent/device",
        "!doc": "The device property gives access to the device bound to the event."
      },
      "address": "string"
    }
  },
  "BluetoothDiscoveryHandle": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothDiscoveryHandle",
    "!doc": "The BluetoothDiscoveryHandle interface of the Web Bluetooth API is used to notify the current application about the discovery of a remote bluetooth device.",
    "!proto": "EventTarget",
    "ondevicefound": "fn(+Event)"
  },
  "BluetoothGatt": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothGatt",
    "!doc": "The BluetoothGatt interface of the Web Bluetooth API handles initial communications and connections with Gatt services.",
    "!proto": "EventTarget",
    "services": "[+BluetoothGattService]",
    "connectionState": "BluetoothConnectionState",
    "oncharacteristicchanged": "fn(+Event)",
    "onconnectionstatechanged": "fn(+Event)",
    "connect": "fn() -> +Promise[value=void]",
    "disconnect": "fn() -> +Promise[value=void]",
    "discoverServices": "fn() -> +Promise[value=void]",
    "readRemoteRssi": "fn() -> +Promise[value=number]"
  },
  "BluetoothGattAttributeEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothGattAttributeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "address": "string",
      "requestId": "number",
      "characteristic": "BluetoothGattCharacteristic",
      "descriptor": "BluetoothGattDescriptor",
      "value": "+ArrayBuffer",
      "needResponse": "bool"
    }
  },
  "BluetoothGattCharacteristic": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattCharacteristic",
    "!doc": "The BluetoothGattCharacteristic interface of the Web Bluetooth API represents a GATT service characteristic, which includes characteristic definition, value, properties and configuration info, and a list of descriptors that provide related information.",
    "service": "+BluetoothGattService",
    "descriptors": "[BluetoothGattDescriptor]",
    "uuid": "string",
    "instanceId": "number",
    "value": "+ArrayBuffer",
    "permissions": "GattPermissions",
    "properties": "GattCharacteristicProperties",
    "readValue": "fn() -> +Promise[value=+ArrayBuffer]",
    "writeValue": "fn(value: +ArrayBuffer) -> +Promise[value=void]",
    "startNotifications": "fn() -> +Promise[value=void]",
    "stopNotifications": "fn() -> +Promise[value=void]",
    "addDescriptor": "fn(uuid: string, permissions: GattPermissions, value: +ArrayBuffer) -> +Promise[value=BluetoothGattDescriptor]"
  },
  "BluetoothGattCharacteristicEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothGattCharacteristicEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattCharacteristicEvent",
    "!doc": "The BluetoothGattCharacteristicEvent interface of the Web Bluetooth API provides access to an updated BluetoothGattCharacteristic object as the parameter of the BluetoothGatt.oncharacteristicchanged, handler, when the characteristicchanged event is fired.",
    "prototype": {
      "!proto": "Event.prototype",
      "characteristic": "BluetoothGattCharacteristic"
    }
  },
  "BluetoothGattDescriptor": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor",
    "!doc": "The BluetoothGattDescriptor interface of the Web Bluetooth API represents a GATT descriptor, which contains related information about a characteristic value.",
    "characteristic": "BluetoothGattCharacteristic",
    "uuid": "string",
    "value": "+ArrayBuffer",
    "permissions": "GattPermissions",
    "readValue": "fn() -> +Promise[value=+ArrayBuffer]",
    "writeValue": "fn(value: +ArrayBuffer) -> +Promise[value=void]"
  },
  "BluetoothGattServer": {
    "!proto": "EventTarget",
    "services": "[+BluetoothGattService]",
    "onconnectionstatechanged": "fn(+Event)",
    "onattributereadreq": "fn(+Event)",
    "onattributewritereq": "fn(+Event)",
    "connect": "fn(address: string) -> +Promise[value=void]",
    "disconnect": "fn(address: string) -> +Promise[value=void]",
    "addService": "fn(service: +BluetoothGattService) -> +Promise[value=void]",
    "removeService": "fn(service: +BluetoothGattService) -> +Promise[value=void]",
    "notifyCharacteristicChanged": "fn(address: string, characteristic: BluetoothGattCharacteristic, confirm: bool) -> +Promise[value=void]",
    "sendResponse": "fn(address: string, status: number, requestId: number) -> +Promise[value=void]"
  },
  "BluetoothGattService": {
    "!type": "fn(init: BluetoothGattServiceInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService",
    "!doc": "The BluetoothGattService interface of the Web Bluetooth API represents a service provided by a GATT server, including the service definition, a list of referenced services, and a list of the characteristics of this service.",
    "prototype": {
      "characteristics": "[BluetoothGattCharacteristic]",
      "includedServices": "[+BluetoothGattService]",
      "isPrimary": "bool",
      "uuid": "string",
      "instanceId": "number",
      "addCharacteristic": "fn(uuid: string, permissions: GattPermissions, properties: GattCharacteristicProperties, value: +ArrayBuffer) -> +Promise[value=BluetoothGattCharacteristic]",
      "addIncludedService": "fn(service: +BluetoothGattService) -> +Promise[value=void]"
    }
  },
  "BluetoothLeDeviceEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothLeDeviceEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "device": "BluetoothDevice",
      "rssi": "number",
      "scanRecord": "+ArrayBuffer"
    }
  },
  "BluetoothManager": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothManager",
    "!doc": "The BluetoothManager interface of the Web Bluetooth API allows to access all Bluetooth adapters available on the device. Adapters are the connection interface to connect a Bluetooth device to that device.",
    "!proto": "EventTarget",
    "defaultAdapter": "BluetoothAdapter",
    "onattributechanged": "fn(+Event)",
    "onadapteradded": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothManager/onadapteradded",
      "!doc": "Specifies an event listener to receive adapteradded events. Those events occur when a Bluetooth adapter is enabled on the device. Each time this event occurs, the BluetoothManager.getDefaultAdapter() method will be able to access the last enabled adapter."
    },
    "onadapterremoved": "fn(+Event)",
    "getAdapters": "fn() -> [BluetoothAdapter]"
  },
  "BluetoothMapFolderListingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothMapFolderListingEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "maxListCount": "number",
      "listStartOffset": "number",
      "handle": "BluetoothMapRequestHandle"
    }
  },
  "BluetoothMapGetMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothMapGetMessageEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "hasAttachment": "bool",
      "charset": "FilterCharset",
      "handle": "BluetoothMapRequestHandle"
    }
  },
  "BluetoothMapMessageUpdateEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothMapMessageUpdateEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "instanceId": "number",
      "handle": "BluetoothMapRequestHandle"
    }
  },
  "BluetoothMapMessagesListingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothMapMessagesListingEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "maxListCount": "number",
      "listStartOffset": "number",
      "subjectLength": "number",
      "parameterMask": "[ParameterMask]",
      "filterMessageType": "MessageType",
      "filterPeriodBegin": "string",
      "filterPeriodEnd": "string",
      "filterReadStatus": "ReadStatus",
      "filterRecipient": "string",
      "filterOriginator": "string",
      "filterPriority": "Priority",
      "handle": "BluetoothMapRequestHandle"
    }
  },
  "BluetoothMapRequestHandle": {
    "replyToFolderListing": "fn(masId: number, folders: string) -> +Promise[value=void]",
    "replyToMessagesListing": "fn(masId: number, messageslisting: +Blob, newmessage: bool, timestamp: string, size: number) -> +Promise[value=void]",
    "replyToGetMessage": "fn(masId: number, bmessage: +Blob) -> +Promise[value=void]",
    "replyToSetMessageStatus": "fn(masId: number, status: bool) -> +Promise[value=void]",
    "replyToSendMessage": "fn(masId: number, handleId: string, status: bool) -> +Promise[value=void]",
    "replyToMessageUpdate": "fn(masId: number, status: bool) -> +Promise[value=void]"
  },
  "BluetoothMapSendMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothMapSendMessageEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "recipient": "string",
      "messageBody": "string",
      "retry": "number",
      "handle": "BluetoothMapRequestHandle"
    }
  },
  "BluetoothMapSetMessageStatusEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothMapSetMessageStatusEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "handleId": "number",
      "statusIndicator": "StatusIndicators",
      "statusValue": "bool",
      "handle": "BluetoothMapRequestHandle"
    }
  },
  "BluetoothObexAuthEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothObexAuthEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "userId": "string",
      "handle": "BluetoothObexAuthHandle"
    }
  },
  "BluetoothObexAuthHandle": {
    "setPassword": "fn(aPassword: string) -> +Promise[value=void]",
    "reject": "fn() -> +Promise[value=void]"
  },
  "BluetoothPairingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothPairingEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothPairingEvent",
    "!doc": "The BluetoothPairingEvent interface of the Web Bluetooth API provides access to a device's name and the BluetoothPairingHandle object required for pairing devices as the parameter of pairing-related handlers (for example including BluetoothPairingListener.ondisplaypasskeyreq and BluetoothPairingListener.onenterpincodereq), when fired.",
    "prototype": {
      "!proto": "Event.prototype",
      "deviceName": "string",
      "handle": "BluetoothPairingHandle"
    }
  },
  "BluetoothPairingHandle": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothPairingHandle",
    "!doc": "The BluetoothPairingHandle interface of the Web Bluetooth API contains the functionality required for completing a device pairing operation, including passkeys, and mechanisms to reply to user-entered pin codes and confirm passkeys.",
    "passkey": "string",
    "setPinCode": "fn(aPinCode: string) -> +Promise[value=void]",
    "accept": "fn() -> +Promise[value=void]",
    "reject": "fn() -> +Promise[value=void]"
  },
  "BluetoothPairingListener": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothPairingListener",
    "!doc": "The BluetoothPairingListener interface of the Web Bluetooth API defines event handlers triggered for different pairing operations.",
    "!proto": "EventTarget",
    "ondisplaypasskeyreq": "fn(+Event)",
    "onenterpincodereq": "fn(+Event)",
    "onpairingconfirmationreq": "fn(+Event)",
    "onpairingconsentreq": "fn(+Event)"
  },
  "BluetoothPbapRequestHandle": {
    "replyTovCardPulling": "fn(vcardObject: +Blob) -> DOMRequest",
    "replyToPhonebookPulling": "fn(vcardObject: +Blob, phonebookSize: number) -> DOMRequest",
    "replyTovCardListing": "fn(vcardObject: +Blob, phonebookSize: number) -> DOMRequest"
  },
  "BluetoothPhonebookPullingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothPhonebookPullingEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "name": "string",
      "format": "vCardVersion",
      "propSelector": "[vCardProperties]",
      "maxListCount": "number",
      "listStartOffset": "number",
      "vcardSelector": "[vCardProperties]",
      "vcardSelectorOperator": "vCardSelectorOp",
      "handle": "BluetoothPbapRequestHandle"
    }
  },
  "BluetoothStatusChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothStatusChangedEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothStatusChangedEvent",
    "!doc": "The BluetoothStatusChangedEvent API provides access to information regarding any change to the status of a Bluetooth device.",
    "prototype": {
      "!proto": "Event.prototype",
      "address": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothStatusChangedEvent/address",
        "!doc": "The address property represents the address of the device for which the status has changed in the Bluetooth micro-network."
      },
      "status": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BluetoothStatusChangedEvent/status",
        "!doc": "The status property indicates if the connection is active (true) or not (false)."
      }
    }
  },
  "BluetoothVCardListingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothVCardListingEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "name": "string",
      "order": "vCardOrderType",
      "searchValue": "string",
      "searchKey": "vCardSearchKeyType",
      "maxListCount": "number",
      "listStartOffset": "number",
      "vcardSelector": "[vCardProperties]",
      "vcardSelectorOperator": "vCardSelectorOp",
      "handle": "BluetoothPbapRequestHandle"
    }
  },
  "BluetoothVCardPullingEvent": {
    "!type": "fn(type: string, eventInitDict?: BluetoothVCardPullingEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "name": "string",
      "format": "vCardVersion",
      "propSelector": "[vCardProperties]",
      "handle": "BluetoothPbapRequestHandle"
    }
  },
  "BoxObject": {
    "element": "HTMLElement",
    "x": "number",
    "y": "number",
    "screenX": "number",
    "screenY": "number",
    "width": "number",
    "height": "number",
    "getPropertyAsSupports": "fn(propertyName: string) -> nsISupports",
    "setPropertyAsSupports": "fn(propertyName: string, value: nsISupports)",
    "getProperty": "fn(propertyName: string) -> string",
    "setProperty": "fn(propertyName: string, propertyValue: string)",
    "removeProperty": "fn(propertyName: string)",
    "parentBox": "HTMLElement",
    "firstChild": "HTMLElement",
    "lastChild": "HTMLElement",
    "nextSibling": "HTMLElement",
    "previousSibling": "HTMLElement",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "BroadcastChannel": {
    "!type": "fn(channel: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel",
    "!doc": "The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.",
    "prototype": {
      "!proto": "EventTarget",
      "name": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name",
        "!doc": "The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only."
      },
      "postMessage": {
        "!type": "fn(message: ?)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage",
        "!doc": "The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browser context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel."
      },
      "close": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close",
        "!doc": "The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore."
      },
      "onmessage": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage",
        "!doc": "The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel."
      }
    }
  },
  "BrowserElementAudioChannel": {
    "!proto": "EventTarget",
    "name": "AudioChannel",
    "onactivestatechanged": "fn(+Event)",
    "getVolume": "fn() -> DOMRequest",
    "setVolume": "fn(aVolume: number) -> DOMRequest",
    "getMuted": "fn() -> DOMRequest",
    "setMuted": "fn(aMuted: bool) -> DOMRequest",
    "isActive": "fn() -> DOMRequest",
    "notifyChannel": "fn(aEvent: string) -> DOMRequest"
  },
  "BrowserElementProxy": {
    "!type": "fn()",
    "prototype": {
      "!proto": "EventTarget",
      "setVisible": "fn(visible: bool)",
      "getVisible": "fn() -> DOMRequest",
      "setActive": "fn(active: bool)",
      "getActive": "fn() -> bool",
      "addNextPaintListener": "fn(listener: fn())",
      "removeNextPaintListener": "fn(listener: fn())",
      "sendMouseEvent": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)",
      "sendTouchEvent": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)",
      "goBack": "fn()",
      "goForward": "fn()",
      "reload": "fn(hardReload?: bool)",
      "stop": "fn()",
      "download": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest",
      "purgeHistory": "fn() -> DOMRequest",
      "getScreenshot": "fn(width: number, height: number, mimeType?: string) -> DOMRequest",
      "zoom": "fn(zoom: number)",
      "getCanGoBack": "fn() -> DOMRequest",
      "getCanGoForward": "fn() -> DOMRequest",
      "getContentDimensions": "fn() -> DOMRequest",
      "setInputMethodActive": "fn(isActive: bool) -> DOMRequest",
      "setNFCFocus": "fn(isFocus: bool)",
      "findAll": "fn(searchString: string, caseSensitivity: BrowserFindCaseSensitivity)",
      "findNext": "fn(direction: BrowserFindDirection)",
      "clearMatch": "fn()",
      "executeScript": "fn(script: string, options?: BrowserElementExecuteScriptOptions) -> DOMRequest",
      "getStructuredData": "fn() -> DOMRequest",
      "getWebManifest": "fn() -> DOMRequest",
      "allowedAudioChannels": "[BrowserElementAudioChannel]",
      "mute": "fn()",
      "unmute": "fn()",
      "getMuted": "fn() -> DOMRequest",
      "setVolume": "fn(volume: number)",
      "getVolume": "fn() -> DOMRequest"
    }
  },
  "BrowserFeedWriter": {
    "!type": "fn()",
    "prototype": {
      "writeContent": "fn()",
      "close": "fn()"
    }
  },
  "CDATASection": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CDATASection",
    "!doc": "A CDATA Section can be used within XML to include extended portions of unescaped text, such that the symbols < and & do not need escaping as they normally do within XML when used as text.",
    "!proto": "Text.prototype"
  },
  "CFStateChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: CFStateChangeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "action": "number",
      "reason": "number",
      "number": "string",
      "timeSeconds": "number",
      "serviceClass": "number"
    }
  },
  "CSS": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSS",
    "!doc": "The CSS interface holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface.",
    "supports": {
      "!type": "fn(property: string, value: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSS/supports",
      "!doc": "The CSS.supports() static methods returns a Boolean value indicating if the browser supports a given CSS feature, or not."
    },
    "escape": {
      "!type": "fn(ident: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSS/escape",
      "!doc": "The CSS.escape() static method returns a DOMString containing the escaped string passed as parameter, mostly for use as part of a CSS selector."
    }
  },
  "CSS2Properties": {
    "!proto": "CSSStyleDeclaration",
    "MozAppearance": "string",
    "MozOutlineRadius": "string",
    "MozOutlineRadiusTopleft": "string",
    "MozOutlineRadiusTopright": "string",
    "MozOutlineRadiusBottomright": "string",
    "MozOutlineRadiusBottomleft": "string",
    "MozTabSize": "string",
    "all": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/all",
      "!doc": "The CSS all shorthand property resets all properties, apart from unicode-bidi and direction, to their initial or inherited value."
    },
    "animation": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation",
      "!doc": "The animation CSS property is a shorthand property for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode and animation-play-state."
    },
    "animationDelay": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay",
      "!doc": "The animation-delay CSS property specifies when the animation should start. This lets the animation sequence begin some time after it's applied to an element."
    },
    "animationDirection": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction",
      "!doc": "The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles."
    },
    "animationDuration": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration",
      "!doc": "The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle."
    },
    "animationFillMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode",
      "!doc": "The animation-fill-mode CSS property specifies how a CSS animation should apply styles to its target before and after it is executing."
    },
    "animationIterationCount": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count",
      "!doc": "The animation-iteration-count CSS property defines the number of times an animation cycle should be played before stopping."
    },
    "animationName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-name",
      "!doc": "The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes at-rule that defines the property values for the animation sequence."
    },
    "animationPlayState": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state",
      "!doc": "The animation-play-state CSS property determines whether an animation is running or paused. This can be queried to determine whether or not the animation is currently running. In addition, its value can be set to pause and resume playback of an animation."
    },
    "animationTimingFunction": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function",
      "!doc": "The CSS animation-timing-function property specifies how a CSS animation should progress over the duration of each cycle. The possible values are one or several <timing-function>."
    },
    "background": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background",
      "!doc": "The background CSS property is a shorthand for setting the individual background values in a single place in the style sheet. background can be used to set the values for one or more of: background-clip, background-color, background-image, background-origin, background-position, background-repeat, background-size, and background-attachment."
    },
    "backgroundAttachment": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment",
      "!doc": "If a background-image is specified, the background-attachment CSS property determines whether that image's position is fixed within the viewport, or scrolls along with its containing block."
    },
    "backgroundClip": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-clip",
      "!doc": "The background-clip CSS property specifies whether an element's background, either the color or image, extends underneath its border."
    },
    "backgroundColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-color",
      "!doc": "The background-color CSS property sets the background color of an element, either through a color value or the keyword transparent."
    },
    "backgroundImage": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-image",
      "!doc": "The CSS background-image property sets one or several background images for an element. The images are drawn on stacking context layers on top of each other. The first layer specified is drawn as if it is closest to the user."
    },
    "backgroundBlendMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode",
      "!doc": "The background-blend-mode CSS property describes how the element's background images should blend with each other and the element's background color."
    },
    "backgroundOrigin": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-origin",
      "!doc": "The background-origin CSS property determines the background positioning area, that is the position of the origin of an image specified using the background-image CSS property."
    },
    "backgroundPosition": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-position",
      "!doc": "The background-position CSS property sets the initial position, relative to the background position layer defined by background-origin for each defined background image."
    },
    "backgroundRepeat": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat",
      "!doc": "The background-repeat CSS property defines how background images are repeated. A background image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all."
    },
    "backgroundSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/background-size",
      "!doc": "The background-size CSS property specifies the size of the background images. The size of the image can be fully constrained or only partially in order to preserve its intrinsic ratio."
    },
    "MozBinding": "string",
    "blockSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/block-size",
      "!doc": "The block-size CSS property defines the horizontal or vertical size of an element's block depending on it's writing mode. It corresponds to the width or the height property depending on the value defined for writing-mode."
    },
    "border": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border",
      "!doc": "The border CSS property is a shorthand property for setting the individual border property values in a single place in the style sheet. border can be used to set the values for one or more of: border-width, border-style, border-color."
    },
    "borderBlockEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end",
      "!doc": "The border-block-end CSS property is a shorthand property for setting the individual logical block end border property values in a single place in the style sheet. border-block-end can be used to set the values for one or more of: border-block-end-width, border-block-end-style, border-block-end-color. It maps to a physical border depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top, border-right, border-bottom, or border-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start",
      "!doc": "The border-block-start CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet. border-block-start can be used to set the values for one or more of: border-block-start-width, border-block-start-style, border-block-start-color. It maps to a physical border depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top, border-right, border-bottom, or border-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockEndColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color",
      "!doc": "The border-block-end-color CSS property defines the color of the logical block end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockEndStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style",
      "!doc": "The border-block-end-style CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockEndWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-width",
      "!doc": "The border-block-end-width CSS property defines the width of the logical block end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockStartColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color",
      "!doc": "The border-block-start-color CSS property defines the color of the logical block start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockStartStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style",
      "!doc": "The border-block-start-style CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBlockStartWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-width",
      "!doc": "The border-block-start-width CSS property defines the width of the logical block start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderBottom": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom",
      "!doc": "The border-bottom CSS property is a shorthand that sets the values of border-bottom-color, border-bottom-style, and border-bottom-width. These properties describe the bottom border of elements."
    },
    "borderBottomColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color",
      "!doc": "The border-bottom-color CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties border-color or border-bottom are more convenient and preferable."
    },
    "MozBorderBottomColors": "string",
    "borderBottomStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style",
      "!doc": "The border-bottom-style CSS property sets the line style of the bottom border of a box."
    },
    "borderBottomWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width",
      "!doc": "The border-bottom-width CSS property sets the width of the bottom border of a box."
    },
    "borderCollapse": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse",
      "!doc": "The border-collapse CSS property determines whether a table's borders are separated or collapsed. In the separated model, adjacent cells each have their own distinct borders. In the collapsed model, adjacent table cells share borders."
    },
    "borderColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-color",
      "!doc": "The border-color CSS property is a shorthand for setting the color of the four sides of an element's border: border-top-color, border-right-color, border-bottom-color, border-left-color"
    },
    "borderImage": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-image",
      "!doc": "The border-image CSS property allows drawing an image on the borders of elements. This makes drawing complex looking widgets much simpler than it has been and removes the need for nine boxes in some cases. The border-image is used instead of the border styles given by the border-style properties."
    },
    "borderImageSource": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-image-source",
      "!doc": "The border-image-source CSS property defines the <image> to use instead of the style of the border. If this property is set to none, the style defined by border-style is used instead."
    },
    "borderImageSlice": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slice",
      "!doc": "The border-image-slice CSS property divides the image specified by border-image-source in nine regions: the four corners, the four edges and the middle. It does this by specifying 4 inwards offsets."
    },
    "borderImageWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width",
      "!doc": "The border-image-width CSS property defines the width of the border. If specified it overrides the border-width property."
    },
    "borderImageOutset": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset",
      "!doc": "The border-image-outset property describes by what amount the border image area extends beyond the border box."
    },
    "borderImageRepeat": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-image-repeat",
      "!doc": "The border-image-repeat CSS property defines how the middle part of a border image is handled so that it can match the size of the border. It has a one-value syntax that describes the behavior of all the sides, and a two-value syntax that sets a different value for the horizontal and vertical behavior."
    },
    "borderInlineEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end",
      "!doc": "The border-inline-end CSS property is a shorthand property for setting the individual logical inline end border property values in a single place in the style sheet. border-inline-end can be used to set the values for one or more of: border-inline-end-width, border-inline-end-style, border-inline-end-color. It maps to a physical border depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top, border-right, border-bottom, or border-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineEndColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color",
      "!doc": "The border-inline-end-color CSS property defines the color of the logical inline end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineEndStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style",
      "!doc": "The border-inline-end-style CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineEndWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width",
      "!doc": "The border-inline-end-width CSS property defines the width of the logical inline end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start",
      "!doc": "The border-inline-start CSS property is a shorthand property for setting the individual logical inline start border property values in a single place in the style sheet. border-inline-start can be used to set the values for one or more of: border-inline-start-width, border-inline-start-style, border-inline-start-color. It maps to a physical border depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top, border-right, border-bottom, or border-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineStartColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color",
      "!doc": "The border-inline-start-color CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineStartStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style",
      "!doc": "The border-inline-start-style CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderInlineStartWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-width",
      "!doc": "The border-inline-start-width CSS property defines the width of the logical inline start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "borderLeft": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-left",
      "!doc": "The border-left CSS property is a shorthand that sets the values of border-left-color, border-left-style, and border-left-width. These properties describe the left border of elements."
    },
    "borderLeftColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color",
      "!doc": "The border-left-color CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties border-color or border-left are more convenient and preferable."
    },
    "MozBorderLeftColors": "string",
    "borderLeftStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style",
      "!doc": "The border-left-style CSS property sets the line style of the left border of a box."
    },
    "borderLeftWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width",
      "!doc": "The border-left-width CSS property sets the width of the left border of a box."
    },
    "borderRight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-right",
      "!doc": "The border-right CSS property is a shorthand that sets the values of border-right-color, border-right-style, and border-right-width. These properties describe the right border of elements."
    },
    "borderRightColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color",
      "!doc": "The border-right-color CSS property sets the color of the right border of an element. Note that in many cases the shorthand CSS properties  border-color or border-right are more convenient and preferable."
    },
    "MozBorderRightColors": "string",
    "borderRightStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style",
      "!doc": "The border-right-style CSS property sets the line style of the right border of a box."
    },
    "borderRightWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width",
      "!doc": "The border-right-width CSS property sets the width of the right border of a box."
    },
    "borderSpacing": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing",
      "!doc": "The border-spacing CSS property specifies the distance between the borders of adjacent table cells (only for the separated borders model). This is equivalent to the cellspacing attribute in presentational HTML, but an optional second value can be used to set different horizontal and vertical spacing."
    },
    "borderStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-style",
      "!doc": "The border-style property is a shorthand property for setting the line style for all four sides of the elements border."
    },
    "borderTop": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-top",
      "!doc": "The border-top CSS property is a shorthand that sets the values of border-top-color, border-top-style, and border-top-width. These properties describe the top border of elements."
    },
    "borderTopColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color",
      "!doc": "The border-top-color CSS property sets the color of the top border of an element. Note that in many cases the shorthand CSS properties border-color or border-top are more convenient and preferable."
    },
    "MozBorderTopColors": "string",
    "borderTopStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style",
      "!doc": "The border-top-style CSS property sets the line style of the top border of a box."
    },
    "borderTopWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width",
      "!doc": "The border-top-width CSS property sets the width of the top border of a box."
    },
    "borderWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-width",
      "!doc": "The border-width property sets the width of the border of a box. Using the shorthand property border is often more convenient."
    },
    "borderRadius": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-radius",
      "!doc": "The border-radius CSS property allows Web authors to define how rounded border corners are. The curve of each corner is defined using one or two radii, defining its shape: circle or ellipse."
    },
    "borderTopLeftRadius": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius",
      "!doc": "The border-top-left-radius CSS property sets the rounding of the top-left corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0,no rounding is done and the corner is square."
    },
    "borderTopRightRadius": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius",
      "!doc": "The border-top-right-radius CSS property sets the rounding of the top-right corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square."
    },
    "borderBottomRightRadius": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius",
      "!doc": "The border-bottom-right-radius CSS property sets the rounding of the bottom-right corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square."
    },
    "borderBottomLeftRadius": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius",
      "!doc": "The border-bottom-left-radius CSS property sets the rounding of the bottom-left corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square."
    },
    "bottom": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/bottom",
      "!doc": "The bottom CSS property participates in specifying the position of positioned elements."
    },
    "boxDecorationBreak": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break",
      "!doc": "The box-decoration-break CSS property specifies how the background, padding, border, border-image, box-shadow, margin and clip of an element is applied when the box for the element is fragmented.  Fragmentation occurs when an inline box wraps onto multiple lines, or when a block spans more than one column inside a column layout container, or spans a page break when printed.  Each piece of the rendering for the element is called a fragment."
    },
    "boxShadow": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow",
      "!doc": "The box-shadow property describes one or more shadow effects as a comma-separated list. It enables you to cast a drop shadow from the frame of almost any element. If a border-radius is specified on the element with a box shadow, the box shadow takes on the same rounded corners. The z-ordering of multiple box shadows is the same as multiple text shadows (the first specified shadow is on top)."
    },
    "boxSizing": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing",
      "!doc": "The box-sizing property is used to alter the default CSS box model used to calculate widths and heights of elements. It is possible to use this property to emulate the behavior of browsers that do not correctly support the CSS box model specification."
    },
    "captionSide": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/caption-side",
      "!doc": "The caption-side CSS property positions the content of a table's <caption> on the specified side."
    },
    "clear": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/clear",
      "!doc": "The clear CSS property specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them. The clear property applies to both floating and non-floating elements."
    },
    "clip": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/clip",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "color": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/color",
      "!doc": "The color property sets the foreground color of an element's text content, and its decorations. It doesn't affect any other characteristic of the element; it should really be called text-color and would have been named so, save for historical reasons and its appearance in CSS Level 1."
    },
    "MozColumns": "string",
    "MozColumnCount": "string",
    "MozColumnFill": "string",
    "MozColumnWidth": "string",
    "MozColumnGap": "string",
    "MozColumnRule": "string",
    "MozColumnRuleColor": "string",
    "MozColumnRuleStyle": "string",
    "MozColumnRuleWidth": "string",
    "contain": "string",
    "content": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/content",
      "!doc": "The content CSS property is used with the ::before and ::after pseudo-elements to generate content in an element. Objects inserted using the content property are anonymous replaced elements."
    },
    "counterIncrement": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment",
      "!doc": "The counter-increment CSS property is used to increase the value of CSS Counters by a given value. The counter's value can be reset using the counter-reset CSS property."
    },
    "counterReset": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset",
      "!doc": "The counter-reset CSS property is used to reset CSS Counters to a given value."
    },
    "cursor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/cursor",
      "!doc": "The cursor CSS property specifies the mouse cursor displayed when the mouse pointer is over an element."
    },
    "direction": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/direction",
      "!doc": "Set the direction CSS property to match the direction of the text: rtl for languages written from right-to-left (like Hebrew or Arabic) text and ltr for other scripts. This is typically done as part of the document (e.g., using the dir attribute in HTML) rather than through direct use of CSS."
    },
    "display": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/display",
      "!doc": "The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is inline."
    },
    "emptyCells": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/empty-cells",
      "!doc": "The empty-cells CSS property specifies how user agents should render borders and backgrounds around cells that have no visible content."
    },
    "alignContent": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/align-content",
      "!doc": "The CSS align-content property aligns a flex container's lines within the flex container when there is extra space on the cross-axis."
    },
    "alignItems": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/align-items",
      "!doc": "The CSS align-items property aligns flex items of the current flex line the same way as justify-content but in the perpendicular direction."
    },
    "alignSelf": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/align-self",
      "!doc": "The align-self CSS property aligns flex items of the current flex line overriding the align-items value. If any of the flex item's cross-axis margin is set to auto, then align-self is ignored."
    },
    "flex": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex",
      "!doc": "The flex CSS property is a shorthand property specifying the ability of a flex item to alter its dimensions to fill available space. Flex items can be stretched to use available space proportional to their flex grow factor or their flex shrink factor to prevent overflow."
    },
    "flexBasis": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis",
      "!doc": "The flex-basis CSS property specifies the flex basis which is the initial main size of a flex item. This property determines the size of the content-box unless specified otherwise using box-sizing."
    },
    "flexDirection": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction",
      "!doc": "The flex-direction CSS property specifies how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
    },
    "webkitBoxOrient": "string",
    "flexFlow": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow",
      "!doc": "The flex-flow CSS property is a shorthand property for flex-direction and flex-wrap individual properties."
    },
    "flexGrow": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow",
      "!doc": "The flex-grow CSS property specifies the flex grow factor of a flex item. It specifies what amount of space inside the flex container the item should take up."
    },
    "flexShrink": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink",
      "!doc": "The flex-shrink CSS property specifies the flex shrink factor of a flex item."
    },
    "flexWrap": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap",
      "!doc": "The CSS flex-wrap property specifies whether flex items are forced into a single line or can be wrapped onto multiple lines. If wrapping is allowed, this property also enables you to control the direction in which lines are stacked."
    },
    "order": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/order",
      "!doc": "The CSS order property specifies the order used to lay out flex items in their flex container. Elements are laid out in the ascending order of the order value. Elements with the same order value are laid out in the order in which they appear in the source code."
    },
    "justifyContent": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/justify-content",
      "!doc": "The CSS justify-content property defines how the browser distributes space between and around flex items along the main-axis of their container."
    },
    "justifyItems": "string",
    "justifySelf": "string",
    "cssFloat": "string",
    "float": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/float",
      "!doc": "The float CSS property specifies that an element should be taken from the normal flow and placed along the left or right side of its container, where text and inline elements will wrap around it."
    },
    "MozFloatEdge": "string",
    "font": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font",
      "!doc": "The font CSS property is either a shorthand property for setting font-style, font-variant, font-weight, font-size, line-height and font-family, or a way to set the element's font to a system font, using specific keywords."
    },
    "fontFamily": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-family",
      "!doc": "The font-family CSS property lets you specify a prioritized list of font family names and/or generic family names for the selected element. Values are separated by a comma to indicate that they are alternatives. The browser will select the first font on the list that is installed on the computer or that can be downloaded using a @font-face at-rule."
    },
    "fontFeatureSettings": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings",
      "!doc": "The font-feature-settings CSS property gives you control over advanced typographic features in OpenType fonts."
    },
    "fontKerning": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning",
      "!doc": "The font-kerning CSS property controls the usage of the kerning information; that is, it controls how letters are spaced. The kerning information is stored in the font, and if the font is well-kerned, this feature allows spacing between characters to be very similar, whatever the characters are."
    },
    "fontLanguageOverride": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-language-override",
      "!doc": "The font-language-override CSS property controls the usage of language-specific glyphs in a typeface."
    },
    "fontSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-size",
      "!doc": "The font-size CSS property specifies the size of the font. Setting the font size may, in turn, change the size of other items, since it is used to compute the value of the em and ex \n <length> units."
    },
    "fontSizeAdjust": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust",
      "!doc": "The font-size-adjust CSS property specifies that font size should be chosen based on the height of lowercase letters rather than the height of capital letters. This is useful since the legibility of fonts, especially at small sizes, is determined more by the size of lowercase letters than by the size of capital letters."
    },
    "MozOsxFontSmoothing": "string",
    "fontStretch": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch",
      "!doc": "The font-stretch property selects a normal, condensed, or expanded face from a font."
    },
    "fontStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-style",
      "!doc": "The font-style CSS property lets you select italic or oblique faces within a font-family."
    },
    "fontSynthesis": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis",
      "!doc": "The font-synthesis CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser."
    },
    "fontVariant": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant",
      "!doc": "This property acts as a shorthand for the longhand properties: font-variant-caps, font-variant-numeric, font-variant-alternates, font-variant-ligatures, and font-variant-east-asian. You can also set the CSS Level 2 (Revision 1) values of font-variant, (that is, normal or small-caps), by using the font shorthand."
    },
    "fontVariantAlternates": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternates",
      "!doc": "The font-variant-alternates CSS property controls the usage of alternate glyphs associated to alternative names defined in @font-feature-values."
    },
    "fontVariantCaps": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps",
      "!doc": "The font-variant-caps CSS property controls the usage of alternate glyphs for capital letters. Scripts can have capital letter glyphs of different sizes, the normal uppercase glyphs, small capital glyphs, and petite capital glyphs. This property controls which alternate glyphs to use."
    },
    "fontVariantEastAsian": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-east-asian",
      "!doc": "The font-variant-east-asian CSS property controls the usage of alternate glyphs for East Asian scripts, like Japanese and Chinese."
    },
    "fontVariantLigatures": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures",
      "!doc": "The font-variant-ligatures CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text."
    },
    "fontVariantNumeric": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric",
      "!doc": "The font-variant-numeric CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers."
    },
    "fontVariantPosition": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-position",
      "!doc": "The font-variant-position CSS property controls the usage of alternate glyphs of smaller size positioned as superscript or subscript regarding the baseline of the font, which is set unchanged. These glyphs are likely to be used in <sub> and <sup> elements."
    },
    "fontWeight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/font-weight",
      "!doc": "The font-weight CSS property specifies the weight or boldness of the font. Some fonts are only available in normal and bold."
    },
    "MozForceBrokenImageIcon": "string",
    "gridAutoFlow": "string",
    "gridAutoColumns": "string",
    "gridAutoRows": "string",
    "gridTemplateAreas": "string",
    "gridTemplateColumns": "string",
    "gridTemplateRows": "string",
    "gridTemplate": "string",
    "grid": "string",
    "gridColumnStart": "string",
    "gridColumnEnd": "string",
    "gridRowStart": "string",
    "gridRowEnd": "string",
    "gridColumn": "string",
    "gridRow": "string",
    "gridArea": "string",
    "gridColumnGap": "string",
    "gridRowGap": "string",
    "gridGap": "string",
    "height": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/height",
      "!doc": "The height CSS property specifies the height of the content area of an element. The content area is inside the padding, border, and margin of the element."
    },
    "imageOrientation": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation",
      "!doc": "The image-orientation CSS property describes how to correct the default orientation of an image."
    },
    "MozImageRegion": "string",
    "imeMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/ime-mode",
      "!doc": "The ime-mode CSS property controls the state of the input method editor for text fields."
    },
    "inlineSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/inline-size",
      "!doc": "The inline-size CSS property defines the horizontal or vertical size of an element's block depending on it's writing mode. It corresponds to the width or the height property depending on the value defined for writing-mode."
    },
    "left": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/left",
      "!doc": "The left CSS property specifies part of the position of positioned elements."
    },
    "letterSpacing": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing",
      "!doc": "The letter-spacing CSS property specifies spacing behavior between text characters."
    },
    "lineHeight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/line-height",
      "!doc": "On block level elements, the line-height property specifies the minimum height of line boxes within the element."
    },
    "listStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/list-style",
      "!doc": "The list-style property is a shorthand property for setting list-style-type, list-style-image and list-style-position."
    },
    "listStyleImage": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image",
      "!doc": "The list-style-image property specifies an image to be used as the list item marker."
    },
    "listStylePosition": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position",
      "!doc": "The list-style-position property specifies the position of the marker box in the principal block box."
    },
    "listStyleType": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type",
      "!doc": "The list-style-type property specifies the appearance of a list item element. Because it is the only property that defaults to display:list-item, this is usually a <li> element, but can be any element with this display value."
    },
    "margin": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin",
      "!doc": "The margin CSS property sets the margin for all four sides. It is a shorthand to avoid setting each side separately with the other margin properties: margin-top, margin-right, margin-bottom and margin-left."
    },
    "marginBlockEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end",
      "!doc": "The margin-block-end CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "marginBlockStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start",
      "!doc": "The margin-block-start CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "marginBottom": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom",
      "!doc": "The margin-bottom CSS property of an element sets the margin space required on the bottom of an element. A negative value is also allowed."
    },
    "marginInlineEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end",
      "!doc": "The margin-inline-end CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the margin-top, margin-right, margin-bottom or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "marginInlineStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start",
      "!doc": "The margin-inline-start CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "marginLeft": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-left",
      "!doc": "The margin-left CSS property sets the margin space required on the left side of a box associated with an element. A negative value is also allowed."
    },
    "marginRight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-right",
      "!doc": "The margin-right CSS property of an element sets the margin space required on the right side of an element. A negative value is also allowed."
    },
    "marginTop": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/margin-top",
      "!doc": "The margin-top CSS property of an element sets the margin space required on the top of an element. A negative value is also allowed."
    },
    "markerOffset": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/marker-offset",
      "!doc": "Marker-offset describes the distance between a marker-box (usually a :before or :after pseudo-element set to \"display: marker\") and the target node."
    },
    "maxBlockSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/max-block-size",
      "!doc": "The max-block-size CSS property defines the horizontal or vertical maximal size of an element's block depending on its writing mode. It corresponds to the max-width or the max-height property, depending on the value defined for writing-mode. If the writing mode is vertically oriented, the value of max-block-size relates to the maximal width of the element, otherwise it relates to the maximal height of the element. It relates to max-inline-size, which defines the other dimension of the element."
    },
    "maxHeight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/max-height",
      "!doc": "The max-height property is used to set the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for max-height."
    },
    "maxInlineSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/max-inline-size",
      "!doc": "The max-inline-size CSS property defines the horizontal or vertical maximal size of an element's block depending on its writing mode. It corresponds to the max-width or the max-height property depending on the value defined for writing-mode. If the writing mode is vertically oriented, the value of max-inline-size relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to max-block-size, which defines the other dimension of the element."
    },
    "maxWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/max-width",
      "!doc": "The max-width property is used to set the maximum width of a given element. It prevents the used value of the width property from becoming larger than the value specified for max-width."
    },
    "minHeight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/min-height",
      "!doc": "The min-height property is used to set the minimum height of a given element. It prevents the used value of the height property from becoming smaller than the value specified for min-height."
    },
    "minBlockSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/min-block-size",
      "!doc": "The min-block-size CSS property defines the horizontal or vertical minimal size of an element's block depending on its writing mode. It corresponds to the min-width or the min-height property, depending on the value defined for writing-mode. If the writing mode is vertically oriented, the value of min-block-size relates to the minimal width of the element, otherwise it relates to the minimal height of the element. It relates to min-inline-size, which defines the other dimension of the element."
    },
    "minInlineSize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size",
      "!doc": "The min-inline-size CSS property defines the horizontal or vertical minimal size of an element's block depending on its writing mode. It corresponds to the min-width or the min-height property, depending on the value defined for writing-mode. If the writing mode is vertically oriented, the value of min-inline-size relates to the minimal height of the element, otherwise it relates to the minimal width of the element. It relates to min-block-size, which defines the other dimension of the element."
    },
    "minWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/min-width",
      "!doc": "The min-width property is used to set the minimum width of a given element. It prevents the used value of the width property from becoming smaller than the value specified for min-width."
    },
    "mixBlendMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode",
      "!doc": "The mix-blend-mode CSS property describes how an element content should blend with the content of the element that is below it and the element's background."
    },
    "isolation": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/isolation",
      "!doc": "The isolation CSS property defines if the element must create a new stacking context."
    },
    "objectFit": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/object-fit",
      "!doc": "The object-fit CSS property specifies how the contents of a replaced element should be fitted to the box established by its used height and width."
    },
    "objectPosition": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/object-position",
      "!doc": "The object-position property determines the alignment of the replaced element inside its box."
    },
    "offsetBlockEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/offset-block-end",
      "!doc": "The offset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "offsetBlockStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/offset-block-start",
      "!doc": "The offset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "offsetInlineEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/offset-inline-end",
      "!doc": "The offset-inline-end CSS property defines the logical inline end offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "offsetInlineStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/offset-inline-start",
      "!doc": "The offset-inline-start CSS property defines the logical inline start offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "opacity": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/opacity",
      "!doc": "The opacity CSS property specifies the transparency of an element, that is, the degree to which the background behind the element is overlaid."
    },
    "MozOrient": "string",
    "outline": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/outline",
      "!doc": "The CSS outline property is a shorthand property for setting one or more of the individual outline properties outline-style, outline-width and outline-color in a single declaration. In most cases the use of this shortcut is preferable and more convenient."
    },
    "outlineColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/outline-color",
      "!doc": "The outline-color CSS property sets the color of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out."
    },
    "outlineStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/outline-style",
      "!doc": "The outline-style CSS property is used to set the style of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out."
    },
    "outlineWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/outline-width",
      "!doc": "The outline-width CSS property is used to set the width of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out:"
    },
    "outlineOffset": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset",
      "!doc": "The outline-offset CSS property is used to set space between an outline and the edge or border of an element. An outline is a line that is drawn around elements, outside the border edge."
    },
    "overflow": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/overflow",
      "!doc": "The overflow property specifies whether to clip content, render scrollbars or just display content when it overflows its block level container."
    },
    "overflowClipBox": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-box",
      "!doc": "The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow."
    },
    "overflowX": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x",
      "!doc": "The overflow-x property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the left and right edges."
    },
    "overflowY": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y",
      "!doc": "The overflow-y property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the top and bottom edges."
    },
    "padding": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding",
      "!doc": "The padding property sets the padding space on all sides of an element. The padding area is the space between the content of the element and its border. Negative values are not allowed."
    },
    "paddingBlockEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end",
      "!doc": "The padding-block-end CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "paddingBlockStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start",
      "!doc": "The padding-block-start CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "paddingBottom": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom",
      "!doc": "The padding-bottom CSS property of an element sets the height of the padding area at the bottom of an element. The padding area is the space between the content of the element and it's border. Contrary to margin-bottom values, negative values of padding-bottom are invalid."
    },
    "paddingInlineEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end",
      "!doc": "The padding-inline-end CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "paddingInlineStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start",
      "!doc": "The padding-inline-start CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "paddingLeft": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-left",
      "!doc": "The padding-left CSS property of an element sets the padding space required on the left side of an element. The padding area is the space between the content of the element and it's border. A negative value is not allowed."
    },
    "paddingRight": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-right",
      "!doc": "The padding-right CSS property of an element sets the padding space required on the right side of an element. The padding area is the space between the content of the element and its border. Negative values are not allowed."
    },
    "paddingTop": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/padding-top",
      "!doc": "The padding-top CSS property of an element sets the padding space required on the top of an element. The padding area is the space between the content of the element and its border. Contrary to margin-top values, negative values of padding-top are invalid."
    },
    "pageBreakAfter": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/page-break-after",
      "!doc": "The page-break-after CSS property adjusts page breaks after the current element."
    },
    "pageBreakBefore": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/page-break-before",
      "!doc": "The page-break-before CSS property adjusts page breaks before the current element."
    },
    "pageBreakInside": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/page-break-inside",
      "!doc": "The page-break-inside CSS property adjusts page breaks inside the current element."
    },
    "paintOrder": "string",
    "pointerEvents": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events",
      "!doc": "The CSS property pointer-events allows authors to control under what circumstances (if any) a particular graphic element can become the target of mouse events. When this property is unspecified, the same characteristics of the visiblePainted value apply to SVG content."
    },
    "position": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/position",
      "!doc": "The position CSS property chooses alternative rules for positioning elements, designed to be useful for scripted animation effects."
    },
    "quotes": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/quotes",
      "!doc": "The quotes CSS property indicates how user agents should render quotation marks."
    },
    "resize": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/resize",
      "!doc": "The resize CSS property lets you control the resizability of an element."
    },
    "right": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/right",
      "!doc": "The right CSS property specifies part of the position of positioned elements."
    },
    "rubyAlign": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/ruby-align",
      "!doc": "The ruby-align CSS property defines the distribution of the different ruby elements over the base."
    },
    "rubyPosition": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position",
      "!doc": "The ruby-position CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (over), under it (under), or between the characters, on their right side (inter-character)."
    },
    "scrollBehavior": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior",
      "!doc": "The scroll-behavior CSS property specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs. Any other scrolls, e.g. those that are performed by the user, are not affected by this property. When this property is specified on the root element, it applies to the viewport instead."
    },
    "scrollSnapCoordinate": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-coordinate",
      "!doc": "The scroll-snap-coordinate CSS property defines the positions in x and y coordinates within the element which will align with the nearest ancestor scroll container's scroll-snap-destination for the respective axis."
    },
    "scrollSnapDestination": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-destination",
      "!doc": "The scroll-snap-destination CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with."
    },
    "scrollSnapPointsX": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-points-x",
      "!doc": "The scroll-snap-points-x CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to."
    },
    "scrollSnapPointsY": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-points-y",
      "!doc": "The scroll-snap-points-y CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to."
    },
    "scrollSnapType": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type",
      "!doc": "The scroll-snap-type CSS property defines how strictly snap points are enforced on the scroll container in case there is one."
    },
    "scrollSnapTypeX": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type-x",
      "!doc": "The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one."
    },
    "scrollSnapTypeY": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type-y",
      "!doc": "The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one."
    },
    "tableLayout": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/table-layout",
      "!doc": "The table-layout CSS property defines the algorithm to be used to layout the table cells, rows, and columns."
    },
    "textAlign": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-align",
      "!doc": "The text-align CSS property describes how inline content like text is aligned in its parent block element. text-align does not control the alignment of block elements itself, only their inline content."
    },
    "MozTextAlignLast": "string",
    "textDecoration": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration",
      "!doc": "The text-decoration CSS property is used to set the text formatting to underline, overline, line-through or blink. Underline and overline decorations are positioned under the text, line-through over it."
    },
    "textCombineUpright": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-combine-upright",
      "!doc": "The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for the purposes of layout and decoration. This property only has an effect in vertical writing modes."
    },
    "textDecorationColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color",
      "!doc": "The text-decoration-color CSS property sets the color used when drawing underlines, overlines, or strike-throughs specified by text-decoration-line."
    },
    "textDecorationLine": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line",
      "!doc": "The text-decoration-line CSS property sets what kind of line decorations are added to an element."
    },
    "textDecorationStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style",
      "!doc": "The text-decoration-style CSS property defines the style of the lines specified by text-decoration-line. The style applies to all lines, there is no way to define different style for each of the line defined by text-decoration-line."
    },
    "textEmphasis": "string",
    "textEmphasisColor": "string",
    "textEmphasisPosition": "string",
    "textEmphasisStyle": "string",
    "textIndent": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-indent",
      "!doc": "The text-indent property specifies how much horizontal space should be left before the beginning of the first line of the text content of an element."
    },
    "textOrientation": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation",
      "!doc": "The text-orientation CSS property defines the orientation of the text in a line. This property only has an effect in vertical mode, that is when writing-mode is not horizontal-tb. It is useful to control the display of writing in languages using vertical script, but also to deal with vertical table headers."
    },
    "textOverflow": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow",
      "!doc": "The text-overflow property determines how overflowed content that is not displayed is signaled to users. It can be clipped, display an ellipsis ('…', U+2026 Horizontal Ellipsis), or display a custom string."
    },
    "textShadow": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow",
      "!doc": "The text-shadow property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and text-decorations of the element."
    },
    "MozTextSizeAdjust": "string",
    "textTransform": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-transform",
      "!doc": "The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
    },
    "transform": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transform",
      "!doc": "The CSS transform property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled, and skewed."
    },
    "transformBox": "string",
    "transformOrigin": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin",
      "!doc": "The transform-origin property lets you modify the origin for transformations of an element. For example, the transform-origin of the rotate() function is the centre of rotation. (This property is applied by first translating the element by the negated value of the property, then applying the element's transform, then translating by the property value.)"
    },
    "perspectiveOrigin": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/perspective-origin",
      "!doc": "The perspective-origin CSS property determines the position the viewer is looking at. It is used as the vanishing point by the perspective property."
    },
    "perspective": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/perspective",
      "!doc": "The perspective CSS property determines the distance between the z=0 plane and the user in order to give to the 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property."
    },
    "transformStyle": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transform-style",
      "!doc": "The transform-style CSS property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element."
    },
    "backfaceVisibility": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility",
      "!doc": "The CSS backface-visibility property determines whether or not the back face of the element is visible when facing the user. The back face of an element always is a transparent background, letting, when visible, a mirror image of the front face be displayed."
    },
    "top": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/top",
      "!doc": "The top CSS property specifies part of the position of positioned elements. It has no effect on non-positioned elements."
    },
    "touchAction": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/touch-action",
      "!doc": "The touch-action CSS property specifies whether and how a given region can be manipulated by the user (for instance, by panning or zooming)."
    },
    "transition": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transition",
      "!doc": "The CSS transition property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay. It enables you to define the transition between two states of an element. Different states may be defined using pseudo-classes like :hover or :active or dynamically set using JavaScript."
    },
    "transitionDelay": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay",
      "!doc": "The transition-delay property specifies the amount of time to wait between a change being requested to a property that is to be transitioned and the start of the transition effect."
    },
    "transitionDuration": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration",
      "!doc": "The transition-duration CSS property specifies the number of seconds or milliseconds a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur."
    },
    "transitionProperty": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transition-property",
      "!doc": "The transition-property CSS property is used to specify the names of CSS properties to which a transition effect should be applied."
    },
    "transitionTimingFunction": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function",
      "!doc": "The transition-timing-function property is used to describe how the intermediate values of the CSS properties being affected by a transition effect are calculated. This in essence lets you establish an acceleration curve, so that the speed of the transition can vary over its duration."
    },
    "unicodeBidi": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi",
      "!doc": "The unicode-bidi CSS property together with the direction property relates to the handling of bidirectional text in a document. For example, if a block of text contains both left-to-right and right-to-left text then the user-agent uses a complex Unicode algorithm to decide how to display the text. This property overrides this algorithm and allows the developer to control the text embedding."
    },
    "MozUserFocus": "string",
    "MozUserInput": "string",
    "MozUserModify": "string",
    "MozUserSelect": "string",
    "verticalAlign": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align",
      "!doc": "The vertical-align CSS property specifies the vertical alignment of an inline or table-cell box."
    },
    "visibility": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/visibility",
      "!doc": "The visibility property can be used to hide an element while leaving the space where it would have been. It can also hide rows or columns of a table."
    },
    "whiteSpace": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/white-space",
      "!doc": "The white-space property is used to describe how whitespace inside the element is handled."
    },
    "width": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/width",
      "!doc": "The width CSS property specifies the width of the content area of an element. The content area is inside the padding, border, and margin of the element."
    },
    "MozWindowDragging": "string",
    "wordBreak": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/word-break",
      "!doc": "The word-break CSS property is used to specify whether to break lines within words."
    },
    "wordSpacing": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing",
      "!doc": "The word-spacing property specifies spacing behavior between tags and words."
    },
    "wordWrap": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/word-wrap",
      "!doc": "The word-wrap property is used to specify whether or not the browser may break lines within words in order to prevent overflow when an otherwise unbreakable string is too long to fit in its containing box."
    },
    "hyphens": "string",
    "writingMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode",
      "!doc": "The writing-mode property defines whether lines of text are laid out horizontally or vertically and the direction in which blocks progress."
    },
    "zIndex": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/z-index",
      "!doc": "The z-index property specifies the z-order of an element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one."
    },
    "MozBoxAlign": "string",
    "MozBoxDirection": "string",
    "MozBoxFlex": "string",
    "MozBoxOrient": "string",
    "MozBoxPack": "string",
    "MozBoxOrdinalGroup": "string",
    "MozStackSizing": "string",
    "clipPath": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/clip-path",
      "!doc": "The clip-path CSS property prevents a portion of an element from getting displayed by defining a clipping region to be displayed i.e, only a specific region of the element is displayed. The clipping region is a path specified as a URL referencing an inline or external SVG, or shape method such as circle(). The clip-path property replaces the now deprecated clip property."
    },
    "clipRule": "string",
    "colorInterpolation": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/color-interpolation",
      "!doc": "The color-interpolation attribute specifies the color space for gradient interpolations, color animations, and alpha compositing.\n \n When a child element is blended into a background, the value of the color-interpolation attribute on the child determines the type of blending, not the value of the color-interpolation on the parent. For gradients which make use of the xlink:href attribute to reference another gradient, the gradient uses the color-interpolation attribute value from the gradient element which is directly referenced by the fill or stroke attribute. When animating colors, color interpolation is performed according to the value of the color-interpolation attribute on the element being animated."
    },
    "colorInterpolationFilters": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/color-interpolation-filters",
      "!doc": "The color-interpolation-filters attribute specifies the color space for imaging operations performed via filter effects."
    },
    "dominantBaseline": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/dominant-baseline",
      "!doc": "The dominant-baseline attribute is used to determine or re-determine a scaled-baseline-table. A scaled-baseline-table is a compound value with three components: a baseline-identifier for the dominant-baseline, a baseline-table and a baseline-table font-size. Some values of the property re-determine all three values; other only re-establish the baseline-table font-size. When the initial value, auto, would give an undesired result, this property can be used to explicitly set the desire scaled-baseline-table."
    },
    "fill": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/fill",
      "!doc": "The fill attribute has two meanings based on the context it's used."
    },
    "fillOpacity": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/fill-opacity",
      "!doc": "This attribute specifies the opacity of the color or the content the current object is filled with."
    },
    "fillRule": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/fill-rule",
      "!doc": "The fill-rule attribute indicates the algorithm which is to be used to determine what side of a path is inside the shape. For a simple, non-intersecting path, it is intuitively clear what region lies \"inside\"; however, for a more complex path, such as a path that intersects itself or where one subpath encloses another, the interpretation of \"inside\" is not so obvious."
    },
    "filter": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/filter",
      "!doc": "The filter property provides for effects like blurring or color shifting on an element’s rendering before the element is displayed. Filters are commonly used to adjust the rendering of an image, a background, or a border."
    },
    "floodColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flood-color",
      "!doc": "The flood-color attribute indicates what color to use to flood the current filter primitive subregion defined through the <feflood> element. The keyword currentColor and ICC colors can be specified in the same manner as within a <paint> specification for the fill and stroke attributes."
    },
    "floodOpacity": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/flood-opacity",
      "!doc": "The flood-opacity attribute indicates the opacity value to use across the current filter primitive subregion defined through the <feflood> element."
    },
    "imageRendering": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering",
      "!doc": "The image-rendering CSS property provides a hint to the browser about the algorithm it should use to scale images. It applies to the element itself as well as any images supplied in other properties for the element. It has no effect on non-scaled images."
    },
    "lightingColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/lighting-color",
      "!doc": "The lighting-color attribute defines the color of the light source for filter primitives elements <fediffuselighting> and <fespecularlighting>."
    },
    "marker": "string",
    "markerEnd": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/marker-end",
      "!doc": "The marker-end defines the arrowhead or polymarker that will be drawn at the final vertex of the given <path> element or basic shape. Note that for a <path> element which ends with a closed sub-path, the last vertex is the same as the initial vertex on the given sub-path. In this case, if marker-end does not equal none, then it is possible that two markers will be rendered on the given vertex. One way to prevent this is to set marker-end to none. (Note that the same comment applies to <polygon> elements.)"
    },
    "markerMid": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/marker-mid",
      "!doc": "The marker-mid defines the arrowhead or polymarker that shall be drawn at every vertex other than the first and last vertex of the given <path> element or basic shape."
    },
    "markerStart": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/marker-start",
      "!doc": "The marker-start attribute defines the arrowhead or polymarker that will be drawn at the first vertex of the given <path> element or basic shape."
    },
    "mask": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/mask",
      "!doc": "The mask element in CSS allows users to alter the visibility of an item by either partially or fully hidding the item. This is accomplished by either masking or clipping the image at specific points."
    },
    "maskType": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/mask-type",
      "!doc": "The CSS mask-type properties defines if a SVG <mask> element is a luminance or an alpha mask."
    },
    "shapeRendering": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/shape-rendering",
      "!doc": "The creator of SVG content might want to provide a hint about what tradeoffs to make as the browser renders <path> element or basic shapes. The shape-rendering attribute provides these hints."
    },
    "stopColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stop-color",
      "!doc": "The stop-color attribute indicates what color to use at that gradient stop. The keyword currentColor and ICC colors can be specified in the same manner as within a <paint> specification for the fill and stroke attributes."
    },
    "stopOpacity": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stop-opacity",
      "!doc": "The stop-opacity attribute defines the opacity of a given gradient stop."
    },
    "stroke": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke",
      "!doc": "The stroke attribute defines the color of the outline on a given graphical element. The default value for the stroke attribute is none."
    },
    "strokeDasharray": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-dasharray",
      "!doc": "the stroke-dasharray attribute controls the pattern of dashes and gaps used to stroke paths."
    },
    "strokeDashoffset": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-dashoffset",
      "!doc": "the stroke-dashoffset attribute specifies the distance into the dash pattern to start the dash."
    },
    "strokeLinecap": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-linecap",
      "!doc": "the stroke-linecap attribute specifies the shape to be used at the end of open subpaths when they are stroked."
    },
    "strokeLinejoin": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-linejoin",
      "!doc": "the stroke-linejoin attribute specifies the shape to be used at the corners of paths or basic shapes when they are stroked."
    },
    "strokeMiterlimit": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-miterlimit",
      "!doc": "When two line segments meet at a sharp angle and miter joins have been specified for stroke-linejoin, it is possible for the miter to extend far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes a limit on the ratio of the miter length to the stroke-width. When the limit is exceeded, the join is converted from a miter to a bevel."
    },
    "strokeOpacity": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-opacity",
      "!doc": "the stroke-opacity attribute specifies the opacity of the outline on the current object. Its default value is 1."
    },
    "strokeWidth": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/stroke-width",
      "!doc": "the stroke-width attribute specifies the width of the outline on the current object. Its default value is 1. If a <percentage> is used, the value represents a percentage of the current viewport. If a value of 0 is used the outline will never be drawn."
    },
    "textAnchor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-anchor",
      "!doc": "The text-anchor attribute is used to align (start-, middle- or end-alignment) a string of text relative to a given point."
    },
    "textRendering": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering",
      "!doc": "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text."
    },
    "vectorEffect": "string",
    "willChange": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/CSS/will-change",
      "!doc": "The will-change CSS property provides a way for authors to hint browsers about the kind of changes to be expected on an element, so that the browser can setup appropriate optimizations ahead of time before the element is actually changed. These kind of optimizations can increase the responsiveness of a page by doing potentially expensive work ahead of time before they are actually required."
    },
    "MozTransform": "string",
    "MozTransformOrigin": "string",
    "MozPerspectiveOrigin": "string",
    "MozPerspective": "string",
    "MozTransformStyle": "string",
    "MozBackfaceVisibility": "string",
    "MozBorderImage": "string",
    "MozTransition": "string",
    "MozTransitionDelay": "string",
    "MozTransitionDuration": "string",
    "MozTransitionProperty": "string",
    "MozTransitionTimingFunction": "string",
    "MozAnimation": "string",
    "MozAnimationDelay": "string",
    "MozAnimationDirection": "string",
    "MozAnimationDuration": "string",
    "MozAnimationFillMode": "string",
    "MozAnimationIterationCount": "string",
    "MozAnimationName": "string",
    "MozAnimationPlayState": "string",
    "MozAnimationTimingFunction": "string",
    "MozBoxSizing": "string",
    "MozFontFeatureSettings": "string",
    "MozFontLanguageOverride": "string",
    "MozPaddingEnd": "string",
    "MozPaddingStart": "string",
    "MozMarginEnd": "string",
    "MozMarginStart": "string",
    "MozBorderEnd": "string",
    "MozBorderEndColor": "string",
    "MozBorderEndStyle": "string",
    "MozBorderEndWidth": "string",
    "MozBorderStart": "string",
    "MozBorderStartColor": "string",
    "MozBorderStartStyle": "string",
    "MozBorderStartWidth": "string",
    "MozHyphens": "string",
    "webkitAnimation": "string",
    "webkitAnimationDelay": "string",
    "webkitAnimationDirection": "string",
    "webkitAnimationDuration": "string",
    "webkitAnimationFillMode": "string",
    "webkitAnimationIterationCount": "string",
    "webkitAnimationName": "string",
    "webkitAnimationPlayState": "string",
    "webkitAnimationTimingFunction": "string",
    "webkitTextSizeAdjust": "string",
    "webkitTransform": "string",
    "webkitTransformOrigin": "string",
    "webkitTransformStyle": "string",
    "webkitBackfaceVisibility": "string",
    "webkitPerspective": "string",
    "webkitPerspectiveOrigin": "string",
    "webkitTransition": "string",
    "webkitTransitionDelay": "string",
    "webkitTransitionDuration": "string",
    "webkitTransitionProperty": "string",
    "webkitTransitionTimingFunction": "string",
    "webkitBorderRadius": "string",
    "webkitBorderTopLeftRadius": "string",
    "webkitBorderTopRightRadius": "string",
    "webkitBorderBottomLeftRadius": "string",
    "webkitBorderBottomRightRadius": "string",
    "webkitAppearance": "string",
    "webkitBackgroundClip": "string",
    "webkitBackgroundOrigin": "string",
    "webkitBackgroundSize": "string",
    "webkitBorderImage": "string",
    "webkitBoxShadow": "string",
    "webkitBoxSizing": "string",
    "webkitBoxFlex": "string",
    "webkitBoxOrdinalGroup": "string",
    "webkitBoxAlign": "string",
    "webkitBoxPack": "string",
    "webkitUserSelect": "string"
  },
  "CSSAnimation": {
    "!proto": "Animation",
    "animationName": "string"
  },
  "Counter": {},
  "CSSPrimitiveValue": {
    "!proto": "CSSValue",
    "CSS_UNKNOWN": "number",
    "CSS_NUMBER": "number",
    "CSS_PERCENTAGE": "number",
    "CSS_EMS": "number",
    "CSS_EXS": "number",
    "CSS_PX": "number",
    "CSS_CM": "number",
    "CSS_MM": "number",
    "CSS_IN": "number",
    "CSS_PT": "number",
    "CSS_PC": "number",
    "CSS_DEG": "number",
    "CSS_RAD": "number",
    "CSS_GRAD": "number",
    "CSS_MS": "number",
    "CSS_S": "number",
    "CSS_HZ": "number",
    "CSS_KHZ": "number",
    "CSS_DIMENSION": "number",
    "CSS_STRING": "number",
    "CSS_URI": "number",
    "CSS_IDENT": "number",
    "CSS_ATTR": "number",
    "CSS_COUNTER": "number",
    "CSS_RECT": "number",
    "CSS_RGBCOLOR": "number",
    "primitiveType": "number",
    "setFloatValue": "fn(unitType: number, floatValue: number)",
    "getFloatValue": "fn(unitType: number) -> number",
    "setStringValue": "fn(stringType: number, stringValue: string)",
    "getStringValue": "fn() -> string",
    "getCounterValue": "fn() -> Counter",
    "getRectValue": "fn() -> Rect",
    "getRGBColorValue": "fn() -> RGBColor",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "CSSRuleList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList",
    "!doc": "A CSSRuleList is an array-like object containing an ordered collection of CSSRule objects.",
    "length": "number",
    "item": "fn(index: number) -> CSSRule",
    "<i>": "CSSRule"
  },
  "CSSRule": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSSRule",
    "!doc": "An object implementing the CSSRule DOM interface represents a single CSS at-rule. References to a CSSRule-implementing object may be obtained by looking at a CSS style sheet's cssRules list."
  },
  "CSSStyleDeclaration": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration",
    "!doc": "CSSStyleDeclaration represents a collection of CSS property-value pairs. It is used in a few APIs:",
    "cssText": "string",
    "length": "number",
    "item": "fn(index: number) -> string",
    "getPropertyValue": "fn(property: string) -> string",
    "getPropertyCSSValue": "fn(property: string) -> CSSValue",
    "getPropertyPriority": "fn(property: string) -> string",
    "setProperty": "fn(property: string, value: string, priority?: string)",
    "removeProperty": "fn(property: string) -> string",
    "parentRule": "CSSRule",
    "getAuthoredPropertyValue": "fn(property: string) -> string",
    "<i>": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "CSSStyleSheet": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet",
    "!doc": "An object implementing the CSSStyleSheet interface represents a single CSS style sheet.",
    "!proto": "StyleSheet",
    "ownerRule": "CSSRule",
    "cssRules": "CSSRuleList",
    "insertRule": {
      "!type": "fn(rule: string, index: number) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule",
      "!doc": "The CSSStyleSheet.insertRule() method inserts a new style rule into the current style sheet."
    },
    "deleteRule": {
      "!type": "fn(index: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule",
      "!doc": "The CSSStyleSheet.deleteRule() method removes a style rule from the current style sheet object."
    }
  },
  "CSSTransition": {
    "!proto": "Animation",
    "transitionProperty": "string"
  },
  "CSSValue": {
    "CSS_INHERIT": "number",
    "CSS_PRIMITIVE_VALUE": "number",
    "CSS_VALUE_LIST": "number",
    "CSS_CUSTOM": "number",
    "cssText": "string",
    "cssValueType": "number"
  },
  "CSSValueList": {
    "!proto": "CSSValue",
    "length": "number",
    "item": "fn(index: number) -> CSSValue",
    "<i>": "CSSValue",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "Cache": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache",
    "!doc": "The Cache interface of the ServiceWorker API represents the storage for Request / Response object pairs that are cached as part of the ServiceWorker life cycle.",
    "match": {
      "!type": "fn(request: RequestInfo, options?: CacheQueryOptions) -> +Promise[value=+Response]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/match",
      "!doc": "The match() method of the Cache interface returns a Promise that resolves to the Response associated with the first matching request in the Cache object."
    },
    "matchAll": {
      "!type": "fn(request?: RequestInfo, options?: CacheQueryOptions) -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/matchAll",
      "!doc": "The matchAll() method of the Cache interface returns a Promise that resolves to an array of all matching requests in the Cache object."
    },
    "add": {
      "!type": "fn(request: RequestInfo) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/add",
      "!doc": "The add() method of the Cache interface takes a URL, retrieves it and adds the resulting response object to the given cache. The add() method is functionally equivalent to the following:"
    },
    "addAll": {
      "!type": "fn(requests: [RequestInfo]) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/addAll",
      "!doc": "The addAll() method of the Cache interface takes an array of URLS, retrieves them, and adds the resulting response objects to the given cache. The request objects created during retrieval become keys to the stored response operations."
    },
    "put": {
      "!type": "fn(request: RequestInfo, response: +Response) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/put",
      "!doc": "The put() method of the Cache interface allows key/value pairs to be added to the current Cache object."
    },
    "delete": {
      "!type": "fn(request: RequestInfo, options?: CacheQueryOptions) -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/delete",
      "!doc": "The delete() method of the Cache interface finds the Cache entry whose key is the request, and if found, deletes the Cache entry and returns a Promise that resolves to true. If no Cache entry is found, it returns false."
    },
    "keys": {
      "!type": "fn(request?: RequestInfo, options?: CacheQueryOptions) -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Cache/keys",
      "!doc": "The keys() method of the Cache interface returns a Promise that resolves to an array of Cache keys."
    }
  },
  "Principal": {},
  "CacheStorage": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CacheStorage",
    "!doc": "The CacheStorage interface of the ServiceWorker API represents the storage for Cache objects. It provides a master directory of all the named caches that a ServiceWorker can access and maintains a mapping of string names to corresponding Cache objects.",
    "match": {
      "!type": "fn(request: RequestInfo, options?: CacheQueryOptions) -> +Promise[value=+Response]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/match",
      "!doc": "The match() method of the CacheStorage interface checks if a given Request is a key in any of the Cache objects that the CacheStorage object tracks and returns a Promise that resolves to the matching Response."
    },
    "has": {
      "!type": "fn(cacheName: string) -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/has",
      "!doc": "The has() method of the CacheStorage interface returns a Promise that resolves to true if a Cache object matches the cacheName."
    },
    "open": {
      "!type": "fn(cacheName: string) -> +Promise[value=Cache]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open",
      "!doc": "The open() method of the CacheStorage interface returns a Promise that resolves to the Cache object matching the cacheName."
    },
    "delete": {
      "!type": "fn(cacheName: string) -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete",
      "!doc": "The delete() method of the CacheStorage interface finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true. If no Cache object is found, it returns false."
    },
    "keys": {
      "!type": "fn() -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/keys",
      "!doc": "The keys() method of the CacheStorage interface returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage object. Use this method to iterate over a list of all Cache objects."
    }
  },
  "CallEvent": {
    "!type": "fn(type: string, eventInitDict?: CallEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CallEvent",
    "!doc": "The CallEvent interface of the Web Telephony API represents events related to telephone calls.",
    "prototype": {
      "!proto": "Event.prototype",
      "call": {
        "!type": "TelephonyCall",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CallEvent/call",
        "!doc": "The call read-only property of the CallEvent interface returns a TelephonyCall object indicating the call from which the event originated."
      }
    }
  },
  "CallGroupErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: CallGroupErrorEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "name": "string",
      "message": "string"
    }
  },
  "CameraRecorderAudioProfile": {
    "codec": "string",
    "bitsPerSecond": "number",
    "samplesPerSecond": "number",
    "channels": "number"
  },
  "CameraRecorderVideoProfile": {
    "codec": "string",
    "bitsPerSecond": "number",
    "framesPerSecond": "number",
    "size": "CameraSize",
    "width": "number",
    "height": "number"
  },
  "CameraRecorderProfile": {
    "name": "string",
    "containerFormat": "string",
    "mimeType": "string",
    "audio": "CameraRecorderAudioProfile",
    "video": "CameraRecorderVideoProfile"
  },
  "CameraRecorderProfiles": {
    "<i>": "CameraRecorderProfile"
  },
  "CameraCapabilities": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities",
    "!doc": "The CameraControl.capabilities property returns a CameraCapabilities object, which describes all the camera's capabilities.",
    "previewSizes": {
      "!type": "[CameraSize]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/previewSizes",
      "!doc": "The previewSizes property is an Array of objects containing the height and width properties supported for the video preview stream."
    },
    "pictureSizes": {
      "!type": "[CameraSize]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/pictureSizes",
      "!doc": "The pictureSizes property is an Array of objects containing the height and width properties supported for picture taking."
    },
    "thumbnailSizes": "[CameraSize]",
    "videoSizes": {
      "!type": "[CameraSize]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/videoSizes",
      "!doc": "The videoSizes property is an Array of objects containing the height and width properties supported for video recording."
    },
    "fileFormats": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/fileFormats",
      "!doc": "The fileFormats property is an Array identifying the file formats supported by the camera, such as jpeg, rgb565, etc."
    },
    "whiteBalanceModes": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/whiteBalanceModes",
      "!doc": "The whiteBalanceModes property is an Array of strings identifiers for each white balance mode supported by the camera such as auto, fluorecent, etc."
    },
    "sceneModes": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/sceneModes",
      "!doc": "The sceneModes property is an Array identifying each of the scene modes supported by the camera such as auto, night, beach, etc."
    },
    "effects": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/effects",
      "!doc": "The effects property value is an Array identifying the effects (such as normal, sepia, mono, etc.) that the camera supports."
    },
    "flashModes": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/flashModes",
      "!doc": "The flashModes property is an Array of strings identifying each of the flash modes supported by the camera. Possible values are auto, off, on or torch."
    },
    "focusModes": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/focusModes",
      "!doc": "The focusModes property is an Array of strings identifying each of the focus modes supported by the camera such as auto, fixed, macro, etc."
    },
    "zoomRatios": {
      "!type": "[number]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/zoomRatios",
      "!doc": "The zoomRatios property is an Array of numbers representing all the supported zoom ratios. If the camera has no zoom capabilities, the value is null."
    },
    "maxFocusAreas": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/maxFocusAreas",
      "!doc": "The maxFocusAreas property is a number that defines the maximum number of focus areas supported by the camera."
    },
    "maxMeteringAreas": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/maxMeteringAreas",
      "!doc": "The maxMeteringAreas property is a number that defines the maximum number of metering areas supported by the camera."
    },
    "maxDetectedFaces": "number",
    "minExposureCompensation": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/minExposureCompensation",
      "!doc": "The minExposureCompensation property is a number that defines the minimum supported exposure compensation value."
    },
    "maxExposureCompensation": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/maxExposureCompensation",
      "!doc": "The maxExposureCompensation property is a number that defines the maximum supported exposure compensation value."
    },
    "exposureCompensationStep": "number",
    "recorderProfiles": {
      "!type": "CameraRecorderProfiles",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraCapabilities/recorderProfiles",
      "!doc": "The recorderProfiles property is an object with attributes for each of the supported recorder profiles, e.g., recorderProfiles.cif, recorderProfiles.qvga."
    },
    "isoModes": "[string]",
    "meteringModes": "[string]"
  },
  "CameraClosedEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraClosedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "reason": "string"
    }
  },
  "CameraConfigurationEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraConfigurationEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "mode": "CameraMode",
      "recorderProfile": "string",
      "previewSize": "DOMRectReadOnly",
      "pictureSize": "DOMRectReadOnly"
    }
  },
  "CameraControl": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl",
    "!doc": "When you use the CameraManager.getCamera() method to get a reference to a camera, you specify a callback function to be invoked on success. That function receives as a parameter a CameraControl object. You can use its methods and properties to manage and make use of the camera.",
    "!proto": "MediaStream.prototype",
    "capabilities": {
      "!type": "CameraCapabilities",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/capabilities",
      "!doc": "The capabilities property return a CameraCapabilities object, which describes the capabilities of the camera."
    },
    "effect": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/effect",
      "!doc": "The effect property is a string defining the effect to be used by the camera. When set, its value must be one of the values available in CameraCapabilities.effects."
    },
    "whiteBalanceMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/whiteBalanceMode",
      "!doc": "The whiteBalanceMode property value is a string that defines the white balance mode to use. When set, its new value must be chosen from the list of options specified by  CameraCapabilities.whiteBalanceModes."
    },
    "sceneMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/sceneMode",
      "!doc": "The sceneMode property value is a string that defines the quality of exposure to use while taking pictures. When set, its new value must be chosen from the list of options specified by  CameraCapabilities.sceneModes."
    },
    "flashMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/flashMode",
      "!doc": "The flashMode property value is a string that defines how the flash, if any, is to be used. When set, its new value must be chosen from the list of options specified by  CameraCapabilities.flashModes."
    },
    "focusMode": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/focusMode",
      "!doc": "The focusMode property value is a string that defines which kind of focus mode the camera should use. When set, its new value must be chosen from the list of options specified by  CameraCapabilities.focusModes."
    },
    "zoom": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/zoom",
      "!doc": "The zoom property value is a number that defines the zoom factor that is to be used when taking photographs. When set, its new value must be chosen from the list of options specified by  CameraCapabilities.zoomRatios. If the new value is not one of those possible values, the new value is rounded to the nearest supported value."
    },
    "getMeteringAreas": "fn() -> [CameraRegion]",
    "setMeteringAreas": "fn(meteringAreas?: [CameraRegion])",
    "getFocusAreas": "fn() -> [CameraRegion]",
    "setFocusAreas": "fn(focusAreas?: [CameraRegion])",
    "focalLength": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/focalLength",
      "!doc": "The focalLength property value is a read-only property that returns a number that expresses the camera's focal length in millimeters."
    },
    "focusDistanceNear": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/focusDistanceNear",
      "!doc": "The focusDistanceNear property value is a distance in meters used with CameraControl.focusDistanceFar to define the image's depth of field."
    },
    "focusDistanceOptimum": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/focusDistanceOptimum",
      "!doc": "The focusDistanceOptimum property value is the distance in meters where the subject appears sharpest."
    },
    "focusDistanceFar": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/focusDistanceFar",
      "!doc": "The focusDistanceFar property value is a distance in meters used with CameraControl.focusDistanceNear to define the image's depth of field. The value for this property may be Infinity."
    },
    "exposureCompensation": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/exposureCompensation",
      "!doc": "The exposureCompensation property value is a number used to compensate the camera exposure."
    },
    "isoMode": "string",
    "onshutter": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/onshutter",
      "!doc": "The onShutter property is used to set an event handler for the camera's \"shutter\" event, to trigger a shutter sound and/or a visual shutter indicator."
    },
    "onclose": "fn(+Event)",
    "onrecorderstatechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/onrecorderstatechange",
      "!doc": "The onRecorderStateChange property is used to set an event handler to listen to the recorder state change. This can happen either because the recording process encountered an error, or because one of the recording limits set with CameraControl.startRecording() was reached."
    },
    "onposter": "fn(+Event)",
    "onpreviewstatechange": "fn(+Event)",
    "getPictureSize": "fn() -> CameraSize",
    "setPictureSize": "fn(size?: CameraSize)",
    "pictureQuality": "number",
    "getThumbnailSize": "fn() -> CameraSize",
    "setThumbnailSize": "fn(size?: CameraSize)",
    "sensorAngle": "number",
    "meteringMode": "string",
    "autoFocus": {
      "!type": "fn() -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/autoFocus",
      "!doc": "This method attempts to focus the camera. If the camera is able to attempt to focus, a success callback is issued, regardless of whether or not the focusing attempt succeeds. If unable to attempt to focus, an error callback is performed instead."
    },
    "onfocus": "fn(+Event)",
    "takePicture": {
      "!type": "fn(options?: CameraPictureOptions) -> +Promise[value=+Blob]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/takePicture",
      "!doc": "Captures a still image from the camera and passes it as a Blob to a success callback handler, which can manipulate the image as you wish (for example, by manipulating its pixel data or storing it)."
    },
    "onpicture": "fn(+Event)",
    "startRecording": {
      "!type": "fn(options: CameraStartRecordingOptions, storageArea: DeviceStorage, filename: string) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/startRecording",
      "!doc": "This method is used to start recording a video file on the device; the video is stored as a 3gp file."
    },
    "stopRecording": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/stopRecording",
      "!doc": "Stops recording video on the device; you should call this at some point after calling CameraControl.startRecording()."
    },
    "pauseRecording": "fn()",
    "resumeRecording": "fn()",
    "resumePreview": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/resumePreview",
      "!doc": "This method is used to resume the preview stream."
    },
    "release": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraControl/release",
      "!doc": "Releases the camera so that other applications can use it. You should call this whenever the camera is not actively being used by your application."
    },
    "setConfiguration": "fn(configuration?: CameraConfiguration) -> +Promise[value=CameraConfiguration]",
    "onconfigurationchange": "fn(+Event)",
    "resumeContinuousFocus": "fn()",
    "startFaceDetection": "fn()",
    "stopFaceDetection": "fn()",
    "onfacesdetected": "fn(+Event)"
  },
  "CameraDetectedFace": {
    "!type": "fn(initDict?: CameraDetectedFaceInit)",
    "prototype": {
      "id": "number",
      "score": "number",
      "bounds": "+DOMRect",
      "hasLeftEye": "bool",
      "leftEye": "+DOMPoint",
      "hasRightEye": "bool",
      "rightEye": "+DOMPoint",
      "hasMouth": "bool",
      "mouth": "+DOMPoint"
    }
  },
  "CameraFacesDetectedEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraFacesDetectedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "faces": "[+CameraDetectedFace]"
    }
  },
  "CameraManager": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraManager",
    "!doc": "The CameraManager interface provides access to any cameras available on the device being used.",
    "getCamera": {
      "!type": "fn(camera: string, initialConfiguration?: CameraConfiguration) -> +Promise[value=CameraGetPromiseData]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraManager/getCamera",
      "!doc": "This method is used to access to one of the cameras available on the device based on its identifier. You can get a list of the available cameras by calling the CameraManager.getListOfCameras() method."
    },
    "getListOfCameras": {
      "!type": "fn() -> [string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CameraManager/getListOfCameras",
      "!doc": "This method is used to get an Array of identifiers of all the cameras available on the device."
    }
  },
  "CameraStateChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: CameraStateChangeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "newState": "string"
    }
  },
  "CanvasCaptureMediaStream": {
    "!proto": "MediaStream.prototype",
    "canvas": "HTMLCanvasElement",
    "requestFrame": "fn()"
  },
  "CanvasRenderingContext2D": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "!doc": "The CanvasRenderingContext2D interface provides the 2D rendering context for the drawing surface of a <canvas> element.",
    "canvas": {
      "!type": "HTMLCanvasElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas",
      "!doc": "The CanvasRenderingContext2D.canvas property is a read-only reference to the HTMLCanvasElement object that is associated with the context. It might be null if there is no association with an <canvas> element."
    },
    "save": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save",
      "!doc": "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack."
    },
    "restore": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore",
      "!doc": "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing."
    },
    "scale": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale",
      "!doc": "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units by x horizontally and by y vertically."
    },
    "rotate": {
      "!type": "fn(angle: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate",
      "!doc": "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians."
    },
    "translate": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate",
      "!doc": "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid."
    },
    "transform": {
      "!type": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform",
      "!doc": "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. You are able to scale, rotate, move and skew the context."
    },
    "setTransform": {
      "!type": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform",
      "!doc": "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix and then invokes a transformation described by the arguments of this method."
    },
    "resetTransform": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform",
      "!doc": "The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current transform by the identity matrix."
    },
    "globalAlpha": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha",
      "!doc": "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque)."
    },
    "globalCompositeOperation": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation",
      "!doc": "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the compositing or blending mode operations to use."
    },
    "strokeStyle": {
      "!type": "string|CanvasGradient|CanvasPattern",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle",
      "!doc": "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color or style to use for the lines around shapes. The default is #000 (black)."
    },
    "fillStyle": {
      "!type": "string|CanvasGradient|CanvasPattern",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle",
      "!doc": "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes. The default is #000 (black)."
    },
    "createLinearGradient": {
      "!type": "fn(x0: number, y0: number, x1: number, y1: number) -> CanvasGradient",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient",
      "!doc": "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line given by the coordinates represented by the parameters. This method returns a linear CanvasGradient."
    },
    "createRadialGradient": {
      "!type": "fn(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number) -> CanvasGradient",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient",
      "!doc": "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient given by the coordinates of the two circles represented by the parameters. This method returns a CanvasGradient."
    },
    "createPattern": {
      "!type": "fn(image: CanvasImageSource, repetition: string) -> CanvasPattern",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern",
      "!doc": "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image (a CanvasImageSource). It repeats the source in the directions specified by the repetition argument. This method returns a CanvasPattern."
    },
    "shadowOffsetX": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX",
      "!doc": "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that the shadow will be offset in horizontal distance."
    },
    "shadowOffsetY": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY",
      "!doc": "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that the shadow will be offset in vertical distance."
    },
    "shadowBlur": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur",
      "!doc": "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the level of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. The default value is 0."
    },
    "shadowColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor",
      "!doc": "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of the shadow."
    },
    "filter": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter",
      "!doc": "The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects like blurring or gray-scaling. It is similar to the CSS filter property and accepts the same functions."
    },
    "clearRect": {
      "!type": "fn(x: number, y: number, w: number, h: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect",
      "!doc": "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content."
    },
    "fillRect": {
      "!type": "fn(x: number, y: number, w: number, h: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect",
      "!doc": "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a filled rectangle at (x, y) position whose size is determined by width and height and whose style is determined by the fillStyle attribute."
    },
    "strokeRect": {
      "!type": "fn(x: number, y: number, w: number, h: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect",
      "!doc": "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style."
    },
    "beginPath": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath",
      "!doc": "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path."
    },
    "fill": {
      "!type": "fn(winding?: CanvasWindingRule)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill",
      "!doc": "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fill style using the non-zero or even-odd winding rule."
    },
    "stroke": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke",
      "!doc": "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes the current or given path with the current stroke style using the non-zero winding rule."
    },
    "drawFocusIfNeeded": {
      "!type": "fn(element: HTMLElement)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded",
      "!doc": "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current path or given path, If a given element is focused."
    },
    "drawCustomFocusRing": "fn(element: HTMLElement) -> bool",
    "clip": {
      "!type": "fn(winding?: CanvasWindingRule)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip",
      "!doc": "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the path currently being built into the current clipping path."
    },
    "isPointInPath": {
      "!type": "fn(x: number, y: number, winding?: CanvasWindingRule) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath",
      "!doc": "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path."
    },
    "isPointInStroke": {
      "!type": "fn(x: number, y: number) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke",
      "!doc": "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path."
    },
    "fillText": {
      "!type": "fn(text: string, x: number, y: number, maxWidth?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText",
      "!doc": "The CanvasRenderingContext2D.fillText() method of the Canvas 2D API fills a given text at the given (x, y) position. If the optional fourth parameter for a maximum width is provided, the text will be scaled to fit that width."
    },
    "strokeText": {
      "!type": "fn(text: string, x: number, y: number, maxWidth?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText",
      "!doc": "The CanvasRenderingContext2D.strokeText() method of the Canvas 2D API strokes a given text at the given (x, y) position. If the optional fourth parameter for a maximum width is provided, the text will be scaled to fit that width."
    },
    "measureText": {
      "!type": "fn(text: string) -> TextMetrics",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText",
      "!doc": "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width for example)."
    },
    "drawImage": {
      "!type": "fn(image: CanvasImageSource, dx: number, dy: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage",
      "!doc": "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas."
    },
    "addHitRegion": {
      "!type": "fn(options?: HitRegionOptions)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion",
      "!doc": "The CanvasRenderingContext2D.addHitRegion() method of the Canvas 2D API adds a hit region to the bitmap. This allows you to make hit detection easier, lets you route events to DOM elements, and makes it possible for users to explore the canvas without seeing it."
    },
    "removeHitRegion": {
      "!type": "fn(id: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion",
      "!doc": "The CanvasRenderingContext2D.removeHitRegion() method of the Canvas 2D API removes a given hit region from the canvas."
    },
    "clearHitRegions": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions",
      "!doc": "The CanvasRenderingContext2D.clearHitRegions() method of the Canvas 2D API removes all hit regions from the canvas."
    },
    "createImageData": {
      "!type": "fn(sw: number, sh: number) -> +ImageData",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData",
      "!doc": "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black."
    },
    "getImageData": {
      "!type": "fn(sx: number, sy: number, sw: number, sh: number) -> +ImageData",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData",
      "!doc": "The CanvasRenderingContext2D.getImageData() method of the Canvas 2D API returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height."
    },
    "putImageData": {
      "!type": "fn(imagedata: +ImageData, dx: number, dy: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData",
      "!doc": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted."
    },
    "mozCurrentTransform": "object",
    "mozCurrentTransformInverse": "object",
    "mozFillRule": "string",
    "mozDash": "?",
    "mozDashOffset": "number",
    "mozTextStyle": "string",
    "mozImageSmoothingEnabled": "bool",
    "DRAWWINDOW_DRAW_CARET": "number",
    "DRAWWINDOW_DO_NOT_FLUSH": "number",
    "DRAWWINDOW_DRAW_VIEW": "number",
    "DRAWWINDOW_USE_WIDGET_LAYERS": "number",
    "DRAWWINDOW_ASYNC_DECODE_IMAGES": "number",
    "drawWindow": {
      "!type": "fn(window: Window, x: number, y: number, w: number, h: number, bgColor: string, flags?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow",
      "!doc": "The non-standard and internal only CanvasRenderingContext2D.drawWindow() method of the Canvas 2D API renders a region of a window into the canvas. The contents of the window's viewport are rendered, ignoring viewport clipping and scrolling."
    },
    "asyncDrawXULElement": {
      "!type": "fn(elem: XULElement, x: number, y: number, w: number, h: number, bgColor: string, flags?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/asyncDrawXULElement",
      "!doc": "The non-standard and internal only CanvasRenderingContext2D.asyncDrawXULElement() method of the Canvas 2D API renders a region of a XUL element into the canvas."
    },
    "drawWidgetAsOnScreen": "fn(window: Window)",
    "demote": "fn()",
    "lineWidth": "number",
    "lineCap": "string",
    "lineJoin": "string",
    "miterLimit": "number",
    "setLineDash": "fn(segments: [number])",
    "getLineDash": "fn() -> [number]",
    "lineDashOffset": "number",
    "font": "string",
    "textAlign": "string",
    "textBaseline": "string",
    "closePath": "fn()",
    "moveTo": "fn(x: number, y: number)",
    "lineTo": "fn(x: number, y: number)",
    "quadraticCurveTo": "fn(cpx: number, cpy: number, x: number, y: number)",
    "bezierCurveTo": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)",
    "arcTo": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)",
    "rect": "fn(x: number, y: number, w: number, h: number)",
    "arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)"
  },
  "CanvasGradient": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient",
    "!doc": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().",
    "addColorStop": {
      "!type": "fn(offset: number, color: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop",
      "!doc": "The CanvasGradient.addColorStop() method adds a new stop, defined by an offset and a color, to the gradient. If the offset is not between 0 and 1, an INDEX_SIZE_ERR is raised, if the color can't be parsed as a CSS <color>, a SYNTAX_ERR is raised."
    }
  },
  "CanvasPattern": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern",
    "!doc": "The CanvasPattern interface represents an opaque object describing a pattern, based on a image, a canvas or a video, created by the CanvasRenderingContext2D.createPattern() method.",
    "setTransform": {
      "!type": "fn(matrix: SVGMatrix)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform",
      "!doc": "The CanvasPattern.setTransform() method uses an SVGMatrix object as the pattern's transformation matrix and invokes it on the pattern."
    }
  },
  "TextMetrics": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextMetrics",
    "!doc": "The TextMetrics interface represents the dimension of a text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.",
    "width": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width",
      "!doc": "The readonly TextMetrics.width property contains the text's advance width (the width of that inline box) in CSS pixels."
    }
  },
  "Path2D": {
    "!type": "fn(pathString: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Path2D",
    "!doc": "The Path2D interface of the Canvas 2D API is used to declare paths that are then later used on CanvasRenderingContext2D objects. The path methods of the CanvasRenderingContext2D interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.",
    "prototype": {
      "addPath": {
        "!type": "fn(path: +Path2D, transformation?: SVGMatrix)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath",
        "!doc": "The Path2D.addPath() method of the Canvas 2D API adds to the path the path given by the argument."
      },
      "closePath": "fn()",
      "moveTo": "fn(x: number, y: number)",
      "lineTo": "fn(x: number, y: number)",
      "quadraticCurveTo": "fn(cpx: number, cpy: number, x: number, y: number)",
      "bezierCurveTo": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)",
      "arcTo": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)",
      "rect": "fn(x: number, y: number, w: number, h: number)",
      "arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)"
    }
  },
  "CaretPosition": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CaretPosition",
    "!doc": "The CaretPosition interface represents the caret postion, an indicator for the text insertion point. You can get a CaretPosition using the document.caretPositionFromPoint method.",
    "offsetNode": "Node",
    "offset": "number",
    "getClientRect": "fn() -> +DOMRect",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "ChannelMergerNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode",
    "!doc": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
    "!proto": "AudioNode"
  },
  "ChannelSplitterNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode",
    "!doc": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
    "!proto": "AudioNode"
  },
  "CharacterData": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CharacterData",
    "!doc": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.",
    "!proto": "Node",
    "data": "string",
    "length": "number",
    "substringData": "fn(offset: number, count: number) -> string",
    "appendData": "fn(data: string)",
    "insertData": "fn(offset: number, data: string)",
    "deleteData": "fn(offset: number, count: number)",
    "replaceData": "fn(offset: number, count: number, data: string)",
    "remove": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
      "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
    },
    "previousElementSibling": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
      "!doc": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list."
    },
    "nextElementSibling": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
      "!doc": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list."
    }
  },
  "ChromeNodeList": {
    "!type": "fn()",
    "prototype": {
      "!proto": "NodeList",
      "append": "fn(aNode: Node)",
      "remove": "fn(aNode: Node)"
    }
  },
  "ChromeNotifications": {
    "mozResendAllNotifications": "fn(resendCallback: fn(count: number))"
  },
  "Client": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Client",
    "!doc": "The Client interface of the ServiceWorker API represents the scope of a service worker client. A service worker client is either a document in a browser context or a SharedWorker, which is controlled by an active worker. A client object acts as a snapshot representation of its associated service worker client in the scope of a service worker.",
    "url": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Client/url",
      "!doc": "The url read-only property of the Client interface returns the URL of the current service worker client."
    },
    "frameType": "FrameType",
    "id": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Client/id",
      "!doc": "The id read-only property of the Client interface returns the id of the Client object."
    },
    "postMessage": {
      "!type": "fn(message: ?, transfer?: [Transferable])",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage",
      "!doc": "The Client.postMessage() method of the Client interface allows a service worker client to send a message to a ServiceWorker."
    }
  },
  "WindowClient": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowClient",
    "!doc": "The WindowClient interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.",
    "!proto": "Client",
    "visibilityState": {
      "!type": "VisibilityState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowClient/visibilityState",
      "!doc": "The visibilityState read-only property of the WindowClient interface indicates the visibility of the current client. This value can be one of hidden, visible, prerender, or unloaded."
    },
    "focused": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focused",
      "!doc": "The focused read-only property of the WindowClient interface is a Boolean that indicates whether the current client has focus."
    },
    "focus": {
      "!type": "fn() -> +Promise[value=WindowClient]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focus",
      "!doc": "The focus() method of the WindowClient interface gives user input focus to the current client and returns a Promise that resolves to the existing WindowClient."
    }
  },
  "Clients": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Clients",
    "!doc": "The Clients interface of the Service Workers API represents a container for a list of Client objects.",
    "get": "fn(id: string) -> +Promise[value=?]",
    "matchAll": {
      "!type": "fn(options?: ClientQueryOptions) -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll",
      "!doc": "The matchAll() method of the Clients interface returns a Promise for a list of service worker clients. Include the options parameter to return all service worker clients whose origin is the same as the associated service worker's origin. If options are not included, the method returns only the service worker clients controlled by the service worker."
    },
    "openWindow": {
      "!type": "fn(url: string) -> +Promise[value=WindowClient]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Clients/openWindow",
      "!doc": "The openWindow() method of the Clients interface opens a service worker WindowClient in a new browser window."
    },
    "claim": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Clients/claim",
      "!doc": "The claim() method of the of the Clients interface allows an active Service Worker to set itself as the active worker for a client page when the worker and the page are in the same scope. This triggers an oncontrollerchange event on any client pages within the Service Worker's scope."
    }
  },
  "ClipboardEvent": {
    "!type": "fn(type: string, eventInitDict?: ClipboardEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent",
    "!doc": "The ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events.",
    "prototype": {
      "!proto": "Event.prototype",
      "clipboardData": {
        "!type": "DataTransfer",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData",
        "!doc": "The Clipboard.clipboardData read-only property is a DataTransfer object the data affected by the user-initialed cut, copy, or paste operation, along with its MIME type."
      }
    }
  },
  "CloseEvent": {
    "!type": "fn(type: string, eventInitDict?: CloseEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CloseEvent",
    "!doc": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.",
    "prototype": {
      "!proto": "Event.prototype",
      "wasClean": "bool",
      "code": "number",
      "reason": "string"
    }
  },
  "CommandEvent": {
    "!proto": "Event.prototype",
    "command": "string",
    "initCommandEvent": "fn(type: string, canBubble: bool, cancelable: bool, command: string)"
  },
  "Comment": {
    "!type": "fn(data?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Comment",
    "!doc": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '<!--' and '-->'. In XML, the character sequence '--' cannot be used within a comment.",
    "prototype": {
      "!proto": "CharacterData",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "CompositionEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent",
    "!doc": "The DOM CompositionEvent represents events that occur due to the user indirectly entering text.",
    "!proto": "UIEvent.prototype",
    "data": "string",
    "locale": "string",
    "initCompositionEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, dataArg: string, localeArg: string)"
  },
  "mozContact": {
    "!type": "fn(properties?: ContactProperties)",
    "prototype": {
      "id": "string",
      "published": "Date",
      "updated": "Date",
      "bday": "Date",
      "anniversary": "Date",
      "sex": "string",
      "genderIdentity": "string",
      "photo": "[+Blob]",
      "adr": "[ContactAddress]",
      "email": "[ContactField]",
      "url": "[ContactField]",
      "impp": "[ContactField]",
      "tel": "[ContactTelField]",
      "name": "[string]",
      "honorificPrefix": "[string]",
      "givenName": "[string]",
      "phoneticGivenName": "[string]",
      "additionalName": "[string]",
      "familyName": "[string]",
      "phoneticFamilyName": "[string]",
      "honorificSuffix": "[string]",
      "nickname": "[string]",
      "category": "[string]",
      "org": "[string]",
      "jobTitle": "[string]",
      "note": "[string]",
      "key": "[string]",
      "init": "fn(properties?: ContactProperties)",
      "setMetadata": "fn(id: string, published: Date, updated: Date)"
    }
  },
  "ConvolverNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode",
    "!doc": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.",
    "!proto": "AudioNode",
    "buffer": {
      "!type": "AudioBuffer",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer",
      "!doc": "The buffer property of the ConvolverNode interface represents a mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect."
    },
    "normalize": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize",
      "!doc": "The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not."
    },
    "passThrough": "bool"
  },
  "Crypto": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Crypto",
    "!doc": "The Crypto interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.",
    "subtle": {
      "!type": "SubtleCrypto",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle",
      "!doc": "The Crypto.subtle read-only property returns a SubtleCrypto object allowing to perform cryptographical operations."
    },
    "getRandomValues": "fn(array: ArrayBufferView) -> ArrayBufferView",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "CustomEvent": {
    "!type": "fn(type: string, eventInitDict?: CustomEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CustomEvent",
    "!doc": "This interface inherits properties from its parent, Event.",
    "prototype": {
      "!proto": "Event.prototype",
      "detail": "?",
      "initCustomEvent": {
        "!type": "fn(type: string, canBubble: bool, cancelable: bool, detail: ?)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      }
    }
  },
  "DOMCursor": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMCursor",
    "!doc": "A DOMCursor object represents an ongoing operation over a list of results. It is an enhanced DOMRequest that allows to iterate through a list of results asynchronously. Each time its continue() method is called, the DOMCursor tries to reach the next result in the list and calls its result's success or error accordingly.",
    "!proto": "EventTarget",
    "done": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMCursor/done",
      "!doc": "The done property indicate if the DOMCursor has reach the last result."
    },
    "continue": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMCursor/continue",
      "!doc": "()"
    },
    "readyState": "DOMRequestReadyState",
    "result": "?",
    "error": "+DOMError",
    "onsuccess": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "DOMError": {
    "!type": "fn(name: string, message?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMError",
    "!doc": "The DOMError interface describes an error object that contains an error name.",
    "prototype": {
      "name": "string",
      "message": "string"
    }
  },
  "StackFrame": {},
  "DOMException": {
    "!type": "fn(message?: string, name?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMException",
    "!doc": "The DOMException exception represents an abnormal event happening when a method or a property is used.",
    "prototype": {
      "INDEX_SIZE_ERR": "number",
      "DOMSTRING_SIZE_ERR": "number",
      "HIERARCHY_REQUEST_ERR": "number",
      "WRONG_DOCUMENT_ERR": "number",
      "INVALID_CHARACTER_ERR": "number",
      "NO_DATA_ALLOWED_ERR": "number",
      "NO_MODIFICATION_ALLOWED_ERR": "number",
      "NOT_FOUND_ERR": "number",
      "NOT_SUPPORTED_ERR": "number",
      "INUSE_ATTRIBUTE_ERR": "number",
      "INVALID_STATE_ERR": "number",
      "SYNTAX_ERR": "number",
      "INVALID_MODIFICATION_ERR": "number",
      "NAMESPACE_ERR": "number",
      "INVALID_ACCESS_ERR": "number",
      "VALIDATION_ERR": "number",
      "TYPE_MISMATCH_ERR": "number",
      "SECURITY_ERR": "number",
      "NETWORK_ERR": "number",
      "ABORT_ERR": "number",
      "URL_MISMATCH_ERR": "number",
      "QUOTA_EXCEEDED_ERR": "number",
      "TIMEOUT_ERR": "number",
      "INVALID_NODE_TYPE_ERR": "number",
      "DATA_CLONE_ERR": "number",
      "code": "number",
      "message": "string",
      "result": "number",
      "name": "string",
      "filename": "string",
      "lineNumber": "number",
      "columnNumber": "number",
      "location": "StackFrame",
      "data": "nsISupports",
      "stack": "string"
    }
  },
  "DOMImplementation": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation",
    "!doc": "The DOMImplementation interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
    "hasFeature": {
      "!type": "fn(feature: string, version: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature",
      "!doc": "The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported."
    },
    "createDocumentType": {
      "!type": "fn(qualifiedName: string, publicId: string, systemId: string) -> DocumentType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType",
      "!doc": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild()."
    },
    "createDocument": {
      "!type": "fn(namespace: string, qualifiedName: string, doctype?: DocumentType) -> +Document",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument",
      "!doc": "The DOMImplementation.createDocument() method creates and returns an XMLDocument."
    },
    "createHTMLDocument": {
      "!type": "fn(title?: string) -> +Document",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument",
      "!doc": "The DOMImplementation.createHTMLDocument() method creates a new HTML Document."
    },
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "DOMMatrixReadOnly": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly",
    "!doc": "The DOMMatrixReadOnly interface represents 4x4 matrices, suitable for 2D and 3D operations. If this interface defines only read-only matrices, the DOMMatrix interface which inherits from it, add all the properties and the methods to allow to have modifiable matrices.",
    "a": "number",
    "b": "number",
    "c": "number",
    "d": "number",
    "e": "number",
    "f": "number",
    "m11": "number",
    "m12": "number",
    "m13": "number",
    "m14": "number",
    "m21": "number",
    "m22": "number",
    "m23": "number",
    "m24": "number",
    "m31": "number",
    "m32": "number",
    "m33": "number",
    "m34": "number",
    "m41": "number",
    "m42": "number",
    "m43": "number",
    "m44": "number",
    "translate": "fn(tx: number, ty: number, tz?: number) -> +DOMMatrix",
    "scale": "fn(scale: number, originX?: number, originY?: number) -> +DOMMatrix",
    "scale3d": "fn(scale: number, originX?: number, originY?: number, originZ?: number) -> +DOMMatrix",
    "scaleNonUniform": "fn(scaleX: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number) -> +DOMMatrix",
    "rotate": "fn(angle: number, originX?: number, originY?: number) -> +DOMMatrix",
    "rotateFromVector": "fn(x: number, y: number) -> +DOMMatrix",
    "rotateAxisAngle": "fn(x: number, y: number, z: number, angle: number) -> +DOMMatrix",
    "skewX": "fn(sx: number) -> +DOMMatrix",
    "skewY": "fn(sy: number) -> +DOMMatrix",
    "multiply": "fn(other: +DOMMatrix) -> +DOMMatrix",
    "flipX": "fn() -> +DOMMatrix",
    "flipY": "fn() -> +DOMMatrix",
    "inverse": "fn() -> +DOMMatrix",
    "is2D": "bool",
    "identity": "bool",
    "transformPoint": "fn(point?: DOMPointInit) -> +DOMPoint",
    "toFloat32Array": "fn() -> Float32Array",
    "toFloat64Array": "fn() -> Float64Array"
  },
  "DOMMatrix": {
    "!type": "fn(numberSequence: [number])",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix",
    "!doc": "The DOMMatrix interface represents 4x4 matrices, suitable for 2D and 3D operations.",
    "prototype": {
      "!proto": "DOMMatrixReadOnly",
      "a": "number",
      "b": "number",
      "c": "number",
      "d": "number",
      "e": "number",
      "f": "number",
      "m11": "number",
      "m12": "number",
      "m13": "number",
      "m14": "number",
      "m21": "number",
      "m22": "number",
      "m23": "number",
      "m24": "number",
      "m31": "number",
      "m32": "number",
      "m33": "number",
      "m34": "number",
      "m41": "number",
      "m42": "number",
      "m43": "number",
      "m44": "number",
      "multiplySelf": "fn(other: +DOMMatrix) -> +DOMMatrix",
      "preMultiplySelf": "fn(other: +DOMMatrix) -> +DOMMatrix",
      "translateSelf": "fn(tx: number, ty: number, tz?: number) -> +DOMMatrix",
      "scaleSelf": "fn(scale: number, originX?: number, originY?: number) -> +DOMMatrix",
      "scale3dSelf": "fn(scale: number, originX?: number, originY?: number, originZ?: number) -> +DOMMatrix",
      "scaleNonUniformSelf": "fn(scaleX: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number) -> +DOMMatrix",
      "rotateSelf": "fn(angle: number, originX?: number, originY?: number) -> +DOMMatrix",
      "rotateFromVectorSelf": "fn(x: number, y: number) -> +DOMMatrix",
      "rotateAxisAngleSelf": "fn(x: number, y: number, z: number, angle: number) -> +DOMMatrix",
      "skewXSelf": "fn(sx: number) -> +DOMMatrix",
      "skewYSelf": "fn(sy: number) -> +DOMMatrix",
      "invertSelf": "fn() -> +DOMMatrix",
      "setMatrixValue": "fn(transformList: string) -> +DOMMatrix"
    }
  },
  "DOMMobileMessageError": {
    "!proto": "DOMError.prototype",
    "data": "SmsMessage|MmsMessage"
  },
  "URI": {},
  "InputStream": {},
  "DOMParser": {
    "!type": "fn(prin: Principal, documentURI?: URI, baseURI?: URI)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMParser",
    "!doc": "DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization.",
    "prototype": {
      "parseFromString": "fn(str: string, type: SupportedType) -> +Document",
      "parseFromBuffer": "fn(buf: [number], bufLen: number, type: SupportedType) -> +Document",
      "parseFromStream": "fn(stream: InputStream, charset: string, contentLength: number, type: SupportedType) -> +Document",
      "init": "fn(principal?: Principal, documentURI?: URI, baseURI?: URI)",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "DOMPointReadOnly": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly",
    "!doc": "The DOMPointReadOnly interface specifies the standard properties used by DOMPoint to define a 2D or 3D point in a coordinate system.",
    "x": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/x",
      "!doc": "The x read-only property of the DOMPointReadOnly interface represents the x coordinate of a point."
    },
    "y": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/y",
      "!doc": "The y read-only property of the DOMPointReadOnly interface represents the y coordinate of a point."
    },
    "z": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/z",
      "!doc": "The z read-only property of the DOMPointReadOnly interface represents the z coordinate of a point."
    },
    "w": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/w",
      "!doc": "The w read-only property of the DOMPointReadOnly interface represents the perspective of a point."
    }
  },
  "DOMPoint": {
    "!type": "fn(x: number, y: number, z?: number, w?: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMPoint",
    "!doc": "A DOMPoint represents a 2D or 3D point in a coordinate system.",
    "prototype": {
      "!proto": "DOMPointReadOnly",
      "x": "number",
      "y": "number",
      "z": "number",
      "w": "number"
    }
  },
  "DOMQuad": {
    "!type": "fn(rect: DOMRectReadOnly)",
    "prototype": {
      "p1": "+DOMPoint",
      "p2": "+DOMPoint",
      "p3": "+DOMPoint",
      "p4": "+DOMPoint",
      "bounds": "DOMRectReadOnly"
    }
  },
  "DOMRect": {
    "!type": "fn(x: number, y: number, width: number, height: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRect",
    "!doc": "A DOMRect represents a rectangle.",
    "prototype": {
      "!proto": "DOMRectReadOnly",
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number"
    }
  },
  "DOMRectReadOnly": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly",
    "!doc": "The DOMRectReadOnly interface specifies the standard properties used by DOMRect to define a rectangle.",
    "x": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/x",
      "!doc": "The x read-only property of the DOMRectReadOnly interface represents the x coordinate of the DOMRect's origin."
    },
    "y": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/y",
      "!doc": "The y read-only property of the DOMRectReadOnly interface represents the y coordinate of the DOMRect's origin."
    },
    "width": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/width",
      "!doc": "The width read-only property of the DOMRectReadOnly interface represents the width of the DOMRect."
    },
    "height": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/height",
      "!doc": "The height read-only property of the DOMRectReadOnly interface represents the height of the DOMRect."
    },
    "top": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/top",
      "!doc": "The top read-only property of the DOMRectReadOnly interface returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative.)"
    },
    "right": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/right",
      "!doc": "The right read-only property of the DOMRectReadOnly interface returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative.)"
    },
    "bottom": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/bottom",
      "!doc": "The bottom read-only property of the DOMRectReadOnly interface returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative.)"
    },
    "left": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/left",
      "!doc": "The left read-only property of the DOMRectReadOnly interface returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative.)"
    }
  },
  "DOMRectList": {
    "length": "number",
    "item": "fn(index: number) -> +DOMRect",
    "<i>": "+DOMRect"
  },
  "DOMRequest": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMRequest",
    "!doc": "A DOMRequest object represents an ongoing operation. It provides callbacks that are called when the operation completes, as well as a reference to the operation's result. A DOM method that initiates an ongoing operation may return a DOMRequest object that you can use to monitor the progress of that operation.",
    "!proto": "EventTarget",
    "then": "fn(fulfillCallback?: fn(value: ?), rejectCallback?: fn(value: ?)) -> ?",
    "readyState": "DOMRequestReadyState",
    "result": "?",
    "error": "+DOMError",
    "onsuccess": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "DOMSettableTokenList": {
    "!proto": "DOMTokenList",
    "value": "string"
  },
  "DOMStringList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMStringList",
    "!doc": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
    "length": "number",
    "item": "fn(index: number) -> string",
    "contains": "fn(string: string) -> bool",
    "<i>": "string"
  },
  "DOMStringMap": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap",
    "!doc": "Used by the dataset HTML attribute to represent data for custom attributes added to elements.",
    "<i>": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "DOMTokenList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList",
    "!doc": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList or HTMLAreaElement.relList. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.",
    "length": "number",
    "item": "fn(index: number) -> string",
    "contains": "fn(token: string) -> bool",
    "add": "fn(tokens: string)",
    "remove": "fn(tokens: string)",
    "toggle": "fn(token: string, force?: bool) -> bool",
    "<i>": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "DOMTransaction": {
    "label": "string",
    "executeAutomatic": "fn()",
    "execute": "fn()",
    "undo": "fn()",
    "redo": "fn()"
  },
  "DOMTransactionEvent": {
    "!type": "fn(type: string, eventInitDict?: DOMTransactionEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "transactions": "?"
    }
  },
  "DataChannel": {
    "!proto": "EventTarget",
    "label": "string",
    "reliable": "bool",
    "readyState": "RTCDataChannelState",
    "bufferedAmount": "number",
    "bufferedAmountLowThreshold": "number",
    "onopen": "fn(+Event)",
    "onerror": "fn(+Event)",
    "onclose": "fn(+Event)",
    "close": "fn()",
    "onmessage": "fn(+Event)",
    "onbufferedamountlow": "fn(+Event)",
    "binaryType": "RTCDataChannelType",
    "send": "fn(data: string)",
    "protocol": "string",
    "ordered": "bool",
    "id": "number",
    "stream": "number"
  },
  "nsIVariant": {},
  "DataErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: DataErrorEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "message": "string"
    }
  },
  "DataStore": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore",
    "!doc": "The DataStore interface of the Data Store API represents a retrieved set of data, and includes standard properties for accessing the store's name, owner, etc., methods for reading, modifying and syncing data, and the onchange event handler for reacting to changes to the data.",
    "!proto": "EventTarget",
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/name",
      "!doc": "The name read-only property of the DataStore interface returns the name of the current data store."
    },
    "owner": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/owner",
      "!doc": "The owner read-only property of the DataStore interface returns the name of the app that owns the current data store."
    },
    "readOnly": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/readOnly",
      "!doc": "The readOnly read-only property of the DataStore interface returns a boolean indicating whether the current data store is read-only."
    },
    "get": {
      "!type": "fn(id: DataStoreKey) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/get",
      "!doc": "The get() method of the DataStore interface retrieves one or more objects from the current data store."
    },
    "put": {
      "!type": "fn(obj: ?, id: DataStoreKey, revisionId?: string) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/put",
      "!doc": "The put() method of the DataStore interface updates an existing record in the data store."
    },
    "add": {
      "!type": "fn(obj: ?, id?: DataStoreKey, revisionId?: string) -> +Promise[value=DataStoreKey]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/add",
      "!doc": "The add() method of the DataStore interface adds a new record to the data store; if the record you are attempting to add already exists, it will throw an exception."
    },
    "remove": {
      "!type": "fn(id: DataStoreKey, revisionId?: string) -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/remove",
      "!doc": "The remove() method of the DataStore interface deletes one or more objects from the current data store."
    },
    "clear": {
      "!type": "fn(revisionId?: string) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/clear",
      "!doc": "The clear() method of the DataStore interface deletes all records from the data store, leaving it empty."
    },
    "revisionId": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/revisionId",
      "!doc": "The revisionId read-only property of the DataStore interface returns the current data store's current revision ID. This ID can be tracked, allowing you to synchronize apps using the data store to this point in its history."
    },
    "onchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/onchange",
      "!doc": "The onchange event handler of the DataStore interface fires when a change is made to the data store. Its main use is to synchronize different apps that are using the data store when a change is made. When fired, this event returns a DataStoreChangeEvent, which can be used to handle the change that was just made. Alternatively, when the event fires you could create a DataStoreCursor and iterate through all the records, if needed."
    },
    "getLength": {
      "!type": "fn() -> +Promise[value=number]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/getLength",
      "!doc": "The getLength() method of the DataStore interface returns the number of records stored in the current data store."
    },
    "sync": {
      "!type": "fn(revisionId?: string) -> DataStoreCursor",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStore/sync",
      "!doc": "The sync() method of the DataStore interface opens a cursor that allows you to step through any changes that have taken place in the data store going back to a particular revision ID, and run code in response to different types of change."
    },
    "setDataStoreImpl": "fn(store: DataStoreImpl)"
  },
  "DataStoreCursor": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreCursor",
    "!doc": "The DataStoreCursor interface of the Data Store API represents a cursor that allows apps to iterate through a list of DataStoreTask objects representing the change history of the data store, for use when synchronizing the data.",
    "store": {
      "!type": "DataStore",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreCursor/store",
      "!doc": "The store read-only property of the DataStoreCursor interface returns the name of the store that the cursor is iterating over."
    },
    "next": {
      "!type": "fn() -> +Promise[value=DataStoreTask]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreCursor/next",
      "!doc": "The next() method of the DataStoreCursor interface makes a request to retrieve information about the next operation that changes a record in the data store. Returns a promise of type DataStoreTask."
    },
    "close": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreCursor/close",
      "!doc": "The close() method of the DataStoreCursor interface makes a request to terminate the cursor."
    },
    "setDataStoreCursorImpl": "fn(cursor: DataStoreCursorImpl)"
  },
  "DataStoreChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: DataStoreChangeEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreChangeEvent",
    "!doc": "The DataStoreChangeEvent interface of the Data Store API represents the event related to a record changed in the data store, i.e. this is returned once a change is made and the change event is fired (see DataStore.onchange for the handler).",
    "prototype": {
      "!proto": "Event.prototype",
      "revisionId": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreChangeEvent/revisionId",
        "!doc": "The revisionId read-only property of the DataStoreChangeEvent interface returns the ID of the current revision of the data store, i.e. the current change that has been made to a data record."
      },
      "id": {
        "!type": "DataStoreKey",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreChangeEvent/id",
        "!doc": "The id read-only property of the DataStoreChangeEvent interface returns the identifier of the changed record in the data store. This must return null if the operation is cleared."
      },
      "operation": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreChangeEvent/operation",
        "!doc": "The operation read-only property of the DataStoreChangeEvent interface returns the type of operation that represents the current change that has been made to the data store."
      },
      "owner": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataStoreChangeEvent/owner",
        "!doc": "The owner read-only property of the DataStoreChangeEvent interface returns the manifest URL of the application that made the change to the data store."
      }
    }
  },
  "DataStoreImpl": {
    "setEventTarget": "fn(eventTarget: EventTarget)",
    "name": "string",
    "owner": "string",
    "readOnly": "bool",
    "get": "fn(id: DataStoreKey) -> +Promise[value=?]",
    "put": "fn(obj: ?, id: DataStoreKey, revisionId?: string) -> +Promise[value=void]",
    "add": "fn(obj: ?, id?: DataStoreKey, revisionId?: string) -> +Promise[value=DataStoreKey]",
    "remove": "fn(id: DataStoreKey, revisionId?: string) -> +Promise[value=bool]",
    "clear": "fn(revisionId?: string) -> +Promise[value=void]",
    "revisionId": "string",
    "getLength": "fn() -> +Promise[value=number]",
    "sync": "fn(revisionId?: string) -> DataStoreCursor"
  },
  "DataStoreCursorImpl": {
    "store": "DataStore",
    "next": "fn() -> +Promise[value=DataStoreTask]",
    "close": "fn()"
  },
  "DataTransfer": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DataTransfer",
    "!doc": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see Drag and Drop.",
    "dropEffect": "string",
    "effectAllowed": "string",
    "setDragImage": "fn(image: HTMLElement, x: number, y: number)",
    "types": "DOMStringList",
    "getData": "fn(format: string) -> string",
    "setData": "fn(format: string, data: string)",
    "clearData": "fn(format?: string)",
    "files": "FileList",
    "getFilesAndDirectories": "fn() -> +Promise",
    "addElement": "fn(element: HTMLElement)",
    "mozItemCount": "number",
    "mozCursor": "string",
    "mozTypesAt": "fn(index: number) -> DOMStringList",
    "mozClearDataAt": "fn(format: string, index: number)",
    "mozSetDataAt": "fn(format: string, data: ?, index: number)",
    "mozGetDataAt": "fn(format: string, index: number) -> ?",
    "mozUserCancelled": "bool",
    "mozSourceNode": "Node"
  },
  "DedicatedWorkerGlobalScope": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope",
    "!doc": "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
    "!proto": "WorkerGlobalScope",
    "postMessage": {
      "!type": "fn(message: ?, transfer?: [?])",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage",
      "!doc": "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references."
    },
    "onmessage": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage",
      "!doc": "The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker — i.e. when a message is sent to the worker using the Worker.postMessage method."
    }
  },
  "DelayNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DelayNode",
    "!doc": "The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output. A DelayNode always has exactly one input and one output, both with the same amount of channels.",
    "!proto": "AudioNode",
    "delayTime": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DelayNode/delayTime",
      "!doc": "The delayTime property of the DelayNode interface is an a-rate AudioParam representing the amount of delay to apply."
    },
    "passThrough": "bool"
  },
  "DesktopNotificationCenter": {
    "createNotification": "fn(title: string, description: string, iconURL?: string) -> DesktopNotification"
  },
  "DesktopNotification": {
    "!proto": "EventTarget",
    "show": "fn()",
    "onclick": "fn(+Event)",
    "onclose": "fn(+Event)"
  },
  "DeviceLightEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceLightEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceLightEvent",
    "!doc": "The DeviceLightEvent provides web developers with information from photo sensors or similiar detectors about ambient light levels near the device. For example this may be useful to adjust the screen's brightness based on the current ambient light level in order to save energy or provide better readability.",
    "prototype": {
      "!proto": "Event.prototype",
      "value": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceLightEvent/value",
        "!doc": "The value property provides the current level of the ambient light."
      }
    }
  },
  "DeviceMotionEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceMotionEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent",
    "!doc": "The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.",
    "prototype": {
      "!proto": "Event.prototype",
      "acceleration": {
        "!type": "DeviceAcceleration",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/acceleration",
        "!doc": "The acceleration property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2)."
      },
      "accelerationIncludingGravity": {
        "!type": "DeviceAcceleration",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity",
        "!doc": "The accelerationIncludingGravity property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2). Unlike DeviceMotionEvent.acceleration which does not compensate for the influence of gravity, its value is the sum of the acceleration of the device as induced by the user and the acceleration caused by gravity."
      },
      "rotationRate": {
        "!type": "DeviceRotationRate",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/rotationRate",
        "!doc": "Returns the rate at which the device is rotating around each of its axes in degrees per second."
      },
      "interval": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/interval",
        "!doc": "Returns the interval, in milliseconds, at which data is obtained from the underlaying hardware. You can use this to determine the granularity of motion events."
      },
      "initDeviceMotionEvent": "fn(type: string, canBubble: bool, cancelable: bool, acceleration: DeviceAccelerationInit, accelerationIncludingGravity: DeviceAccelerationInit, rotationRate: DeviceRotationRateInit, interval: number)"
    }
  },
  "DeviceOrientationEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceOrientationEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent",
    "!doc": "The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.",
    "prototype": {
      "!proto": "Event.prototype",
      "alpha": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/alpha",
        "!doc": "Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen. See Orientation and motion data explained for details."
      },
      "beta": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/beta",
        "!doc": "Returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180,  by which the device is tipped forward or backward. See Orientation and motion data explained for details."
      },
      "gamma": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/gamma",
        "!doc": "Returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between -90 and 90, by which the device is turned left or right. See Orientation and motion data explained for details."
      },
      "absolute": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/absolute",
        "!doc": "Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See Orientation and motion data explained for details."
      },
      "initDeviceOrientationEvent": "fn(type: string, canBubble: bool, cancelable: bool, alpha: number, beta: number, gamma: number, absolute: bool)"
    }
  },
  "DeviceProximityEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceProximityEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent",
    "!doc": "The DeviceProximityEvent interface provides information about the distance of a nearby physical object using the proximity sensor of a device.",
    "prototype": {
      "!proto": "Event.prototype",
      "value": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/value",
        "!doc": "The value property of DeviceProximityEvent objects provides the current distance between the device and the detected object, in centimeters."
      },
      "min": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/min",
        "!doc": "The min property provides the minimum distance the sensor can report, in centimeters."
      },
      "max": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/max",
        "!doc": "The max property provides the maximum sensing distance the sensor is able to report, in centimeters."
      }
    }
  },
  "DeviceStorage": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage",
    "!doc": "The DeviceStorage interface is used to access files on a specific storage area available on the device. A storage area is, in essence, a file system repository even if it hides the reality of the underlying file system.",
    "!proto": "EventTarget",
    "onchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/onchange",
      "!doc": "The onchange property is used to specify an event handler to receive change events. Those events are triggered each time a file is created, modified, or deleted on the storage area."
    },
    "add": {
      "!type": "fn(aBlob: +Blob) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/add",
      "!doc": "The add method is used to add a file inside a given storage area."
    },
    "addNamed": {
      "!type": "fn(aBlob: +Blob, aName: string) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/addNamed",
      "!doc": "The addNamed method is used to add a file inside a given storage area."
    },
    "appendNamed": "fn(aBlob: +Blob, aName: string) -> DOMRequest",
    "get": {
      "!type": "fn(aName: string) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/get",
      "!doc": "The get method is used to retrieve a read-only file from a given storage area."
    },
    "getEditable": {
      "!type": "fn(aName: string) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/getEditable",
      "!doc": "The getEditable method is used to retrieve a file, which is editable, from a given storage area."
    },
    "delete": {
      "!type": "fn(aName: string) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/delete",
      "!doc": "The delete method is used to remove a file from a given storage area."
    },
    "enumerate": {
      "!type": "fn(options?: DeviceStorageEnumerationParameters) -> DOMCursor",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/enumerate",
      "!doc": "The enumerate method is used to iterate through the files of a given storage area."
    },
    "enumerateEditable": {
      "!type": "fn(options?: DeviceStorageEnumerationParameters) -> DOMCursor",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/enumerateEditable",
      "!doc": "The enumerateEditable method is used to iterate through the files of a given storage area."
    },
    "freeSpace": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/freeSpace",
      "!doc": "The freeSpace method is used to get the amount of free space usable by the storage area."
    },
    "usedSpace": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/usedSpace",
      "!doc": "The usedSpace method is used to get the total of space used by the storage (the amount of space filled by files)."
    },
    "available": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/available",
      "!doc": "The available() method is used to check whether the storage area is available; this is an asynchronous operation that returns a DOMRequest object that will receive a callback when the operation is complete."
    },
    "storageStatus": "fn() -> DOMRequest",
    "format": "fn() -> DOMRequest",
    "mount": "fn() -> DOMRequest",
    "unmount": "fn() -> DOMRequest",
    "storageName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/storageName",
      "!doc": "The storageName property indicates the name of the storage area."
    },
    "canBeMounted": "bool",
    "canBeShared": "bool",
    "canBeFormatted": "bool",
    "default": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorage/default",
      "!doc": "The default property indicates if the storage area is the one which will be used by default for storing new files (true) or not (false)."
    },
    "isRemovable": "bool",
    "lowDiskSpace": "bool",
    "getRoot": "fn() -> +Promise[value=?]"
  },
  "DeviceStorageAreaChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceStorageAreaChangedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "operation": "DeviceStorageAreaChangedEventOperation",
      "storageName": "string"
    }
  },
  "DeviceStorageAreaListener": {
    "!proto": "EventTarget",
    "onstorageareachanged": "fn(+Event)"
  },
  "DeviceStorageChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: DeviceStorageChangeEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorageChangeEvent",
    "!doc": "The DeviceStorageChangeEvent provides information about any change made to a file inside a given storage area. It extends the Event interface.",
    "prototype": {
      "!proto": "Event.prototype",
      "path": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorageChangeEvent/path",
        "!doc": "The path property provides the full path to the file affected by the change."
      },
      "reason": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DeviceStorageChangeEvent/reason",
        "!doc": "The reason property gives the nature of the change that occurred."
      }
    }
  },
  "Directory": {
    "name": "string",
    "createFile": "fn(path: string, options?: CreateFileOptions) -> +Promise[value=+File]",
    "createDirectory": "fn(path: string) -> +Promise[value=Directory]",
    "get": "fn(path: string) -> +Promise[value=+File|Directory]",
    "remove": "fn(path: string) -> +Promise[value=bool]",
    "removeDeep": "fn(path: string) -> +Promise[value=bool]",
    "path": "string",
    "getFilesAndDirectories": "fn() -> +Promise"
  },
  "DisplayPortInputPort": {
    "!proto": "InputPort"
  },
  "WindowProxy": {},
  "nsISupports": {},
  "nsIDocShell": {},
  "nsILoadGroup": {},
  "Document": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document",
    "!doc": "Each web page loaded in the browser has its own document object. The Document interface serves as an entry point into the web page's content (the DOM tree, including elements such as <body> and <table>) and provides functionality which is global to the document (such as obtaining the page's URL and creating new elements in the document).",
    "prototype": {
      "!proto": "Node",
      "implementation": {
        "!type": "DOMImplementation",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/implementation",
        "!doc": "Returns a DOMImplementation object associated with the current document."
      },
      "URL": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/URL",
        "!doc": "The URL read-only property of the Document interface returns the document location as a string."
      },
      "documentURI": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI",
        "!doc": "The documentURI property of the Document interface returns the document location as a string."
      },
      "compatMode": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode",
        "!doc": "Indicates whether the document is rendered in Quirks mode or Standards mode."
      },
      "characterSet": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet",
        "!doc": "Returns the character encoding of the current document."
      },
      "charset": "string",
      "inputEncoding": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "contentType": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/contentType",
        "!doc": "Returns the MIME type that the document is being rendered as.  This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions."
      },
      "doctype": {
        "!type": "DocumentType",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/doctype",
        "!doc": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType."
      },
      "documentElement": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement",
        "!doc": "The Document.documentElement read-only property returns the Element that is the root element of the document (for example, the <html> element for HTML documents)."
      },
      "getElementsByTagName": {
        "!type": "fn(localName: string) -> HTMLCollection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName",
        "!doc": "Returns an HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again."
      },
      "getElementsByTagNameNS": {
        "!type": "fn(namespace: string, localName: string) -> HTMLCollection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS",
        "!doc": "Firefox 3.6 note"
      },
      "getElementsByClassName": {
        "!type": "fn(classNames: string) -> HTMLCollection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName",
        "!doc": "Returns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names."
      },
      "getElementById": {
        "!type": "fn(elementId: string) -> HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById",
        "!doc": "Returns a reference to the element by its ID."
      },
      "createElement": {
        "!type": "fn(localName: string) -> HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",
        "!doc": "In an HTML document, the Document.createElement() method creates the specified HTML element or an HTMLUnknownElement if the given element name isn't a known one."
      },
      "createElementNS": {
        "!type": "fn(namespace: string, qualifiedName: string) -> HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS",
        "!doc": "Creates an element with the specified namespace URI and qualified name."
      },
      "createDocumentFragment": {
        "!type": "fn() -> +DocumentFragment",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment",
        "!doc": "Creates a new empty DocumentFragment."
      },
      "createTextNode": {
        "!type": "fn(data: string) -> +Text",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode",
        "!doc": "Creates a new Text node."
      },
      "createComment": {
        "!type": "fn(data: string) -> +Comment",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createComment",
        "!doc": "createComment() creates a new comment node, and returns it."
      },
      "createProcessingInstruction": {
        "!type": "fn(target: string, data: string) -> ProcessingInstruction",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction",
        "!doc": "createProcessingInstruction() creates a new processing instruction node, and returns it."
      },
      "importNode": {
        "!type": "fn(node: Node, deep?: bool) -> Node",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/importNode",
        "!doc": "Creates a copy of a node from an external document that can be inserted into the current document."
      },
      "adoptNode": {
        "!type": "fn(node: Node) -> Node",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode",
        "!doc": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document."
      },
      "createEvent": {
        "!type": "fn(interface: string) -> +Event",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent",
        "!doc": "Many methods used with createEvent, such as initCustomEvent, are deprecated. Use event constructors instead."
      },
      "createRange": {
        "!type": "fn() -> +Range",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createRange",
        "!doc": "Returns a new Range object."
      },
      "createNodeIterator": {
        "!type": "fn(root: Node, whatToShow?: number, filter?: NodeFilter) -> NodeIterator",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator",
        "!doc": "Returns a new NodeIterator object."
      },
      "createTreeWalker": {
        "!type": "fn(root: Node, whatToShow?: number, filter?: NodeFilter) -> TreeWalker",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker",
        "!doc": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object."
      },
      "createCDATASection": {
        "!type": "fn(data: string) -> CDATASection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection",
        "!doc": "createCDATASection() creates a new CDATA section node, and returns it."
      },
      "createAttribute": {
        "!type": "fn(name: string) -> Attr",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute",
        "!doc": "createAttribute creates a new attribute node, and returns it."
      },
      "createAttributeNS": "fn(namespace: string, name: string) -> Attr",
      "location": {
        "!type": "Location",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/location",
        "!doc": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL."
      },
      "referrer": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/referrer",
        "!doc": "Returns the URI of the page that linked to this page."
      },
      "lastModified": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified",
        "!doc": "Returns a string containing the date and time on which the current document was last modified."
      },
      "readyState": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/readyState",
        "!doc": "Returns \"loading\" while the document is loading, \"interactive\" once it is finished parsing but still loading sub-resources, and \"complete\" once it has loaded."
      },
      "title": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/title",
        "!doc": "Gets or sets the title of the document."
      },
      "dir": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/dir",
        "!doc": "The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right."
      },
      "defaultView": {
        "!type": "WindowProxy",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView",
        "!doc": "In browsers returns the window object associated with the document or null if none available."
      },
      "activeElement": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement",
        "!doc": "Returns the currently focused element, that is, the element that will get keystroke events if the user types any. This attribute is read only."
      },
      "hasFocus": {
        "!type": "fn() -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus",
        "!doc": "When viewing a document, an element with focus is always the active element in the document, but an active element does not necessarily have focus. For example, an active element within a (popup) window that is not the foreground has no focus."
      },
      "onreadystatechange": "fn(+Event)",
      "onwheel": "fn(+Event)",
      "oncopy": "fn(+Event)",
      "oncut": "fn(+Event)",
      "onpaste": "fn(+Event)",
      "onbeforescriptexecute": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute",
        "!doc": "Fired when the code in a <script> element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild()."
      },
      "onafterscriptexecute": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute",
        "!doc": "Fired when a static <script> element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild()."
      },
      "onselectionchange": "fn(+Event)",
      "mozSyntheticDocument": "bool",
      "currentScript": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript",
        "!doc": "Returns the <script> element whose script is currently being processed."
      },
      "releaseCapture": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture",
        "!doc": "Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture()."
      },
      "mozSetImageElement": "fn(aImageElementId: string, aImageElement: HTMLElement)",
      "documentURIObject": {
        "!type": "URI",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/documentURIObject",
        "!doc": "The Document.documentURIObject read-only property returns an nsIURI object representing the URI of the document."
      },
      "referrerPolicy": "number",
      "mozFullScreenEnabled": "bool",
      "mozFullScreenElement": "HTMLElement",
      "mozFullScreen": "bool",
      "mozCancelFullScreen": "fn()",
      "mozPointerLockElement": "HTMLElement",
      "mozExitPointerLock": "fn()",
      "registerElement": {
        "!type": "fn(name: string, options?: ElementRegistrationOptions) -> object",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/registerElement",
        "!doc": "The Document.registerElement() method registers a new custom element in the browser and returns a constructor for the new element."
      },
      "hidden": "bool",
      "mozHidden": "bool",
      "visibilityState": "VisibilityState",
      "mozVisibilityState": "VisibilityState",
      "styleSheets": {
        "!type": "StyleSheetList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets",
        "!doc": "The Document.styleSheets read-only property returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document."
      },
      "selectedStyleSheetSet": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet",
        "!doc": "Indicates the name of the style sheet set that's currently in use."
      },
      "lastStyleSheetSet": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet",
        "!doc": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed."
      },
      "preferredStyleSheetSet": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet",
        "!doc": "Returns the preferred style sheet set as set by the page author."
      },
      "styleSheetSets": {
        "!type": "DOMStringList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheetSets",
        "!doc": "Returns a live list of all of the currently-available style sheet sets."
      },
      "enableStyleSheetsForSet": {
        "!type": "fn(name: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet",
        "!doc": "Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled)."
      },
      "elementFromPoint": {
        "!type": "fn(x: number, y: number) -> HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint",
        "!doc": "The elementFromPoint() method of the Document interface returns the topmost element at the specified coordinates."
      },
      "caretPositionFromPoint": {
        "!type": "fn(x: number, y: number) -> CaretPosition",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/caretPositionFromPoint",
        "!doc": "This method is used to retrieve the caret position in a document based on two coordinates. A CaretPosition is returned, containing the found DOM node and the character offset in that node."
      },
      "undoManager": "UndoManager",
      "querySelector": {
        "!type": "fn(selectors: string) -> HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector",
        "!doc": "Returns the first element within the document (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors."
      },
      "querySelectorAll": {
        "!type": "fn(selectors: string) -> NodeList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll",
        "!doc": "Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList."
      },
      "timeline": "DocumentTimeline",
      "getAnonymousNodes": "fn(elt: HTMLElement) -> NodeList",
      "getAnonymousElementByAttribute": "fn(elt: HTMLElement, attrName: string, attrValue: string) -> HTMLElement",
      "getBindingParent": "fn(node: Node) -> HTMLElement",
      "loadBindingDocument": "fn(documentURL: string)",
      "createTouch": {
        "!type": "fn(view?: Window, target?: EventTarget, identifier?: number, pageX?: number, pageY?: number, screenX?: number, screenY?: number, clientX?: number, clientY?: number, radiusX?: number, radiusY?: number, rotationAngle?: number, force?: number) -> +Touch",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createTouch",
        "!doc": "Note: As of Gecko 25.0, this method has been renamed to Document.createTouch."
      },
      "createTouchList": {
        "!type": "fn(touch: +Touch, touches: +Touch) -> TouchList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Document/createTouchList",
        "!doc": "Note: As of Gecko 25.0, this method has been renamed to Document.createTouchList."
      },
      "styleSheetChangeEventsEnabled": "bool",
      "obsoleteSheet": "fn(sheetURI: URI)",
      "docShell": "nsIDocShell",
      "contentLanguage": "string",
      "documentLoadGroup": "nsILoadGroup",
      "isSrcdocDocument": "bool",
      "insertAnonymousContent": "fn(aElement: HTMLElement) -> AnonymousContent",
      "removeAnonymousContent": "fn(aContent: AnonymousContent)",
      "userHasInteracted": "bool",
      "createExpression": "fn(expression: string, resolver: fn(prefix: string)) -> XPathExpression",
      "createNSResolver": "fn(nodeResolver: Node) -> Node",
      "evaluate": "fn(expression: string, contextNode: Node, resolver: fn(prefix: string), type: number, result: object) -> XPathResult",
      "queryInterface": "fn(iid: IID) -> nsISupports",
      "onabort": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
        "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
      },
      "onblur": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
        "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
      },
      "onfocus": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
        "!doc": "The onfocus property returns the onFocus event handler code on the current element."
      },
      "oncanplay": "fn(+Event)",
      "oncanplaythrough": "fn(+Event)",
      "onchange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
        "!doc": "The onchange property sets and returns the event handler for the change event."
      },
      "onclick": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
        "!doc": "The onclick property returns the click event handler code on the current element."
      },
      "oncontextmenu": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
        "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
      },
      "ondblclick": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
        "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
      },
      "ondrag": "fn(+Event)",
      "ondragend": "fn(+Event)",
      "ondragenter": "fn(+Event)",
      "ondragleave": "fn(+Event)",
      "ondragover": "fn(+Event)",
      "ondragstart": "fn(+Event)",
      "ondrop": "fn(+Event)",
      "ondurationchange": "fn(+Event)",
      "onemptied": "fn(+Event)",
      "onended": "fn(+Event)",
      "oninput": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
        "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
      },
      "oninvalid": "fn(+Event)",
      "onkeydown": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
        "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
      },
      "onkeypress": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
        "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
      },
      "onkeyup": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
        "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
      },
      "onload": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
        "!doc": "An event handler for the load event of a window."
      },
      "onloadeddata": "fn(+Event)",
      "onloadedmetadata": "fn(+Event)",
      "onloadstart": "fn(+Event)",
      "onmousedown": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
        "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
      },
      "onmouseenter": "fn(+Event)",
      "onmouseleave": "fn(+Event)",
      "onmousemove": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
        "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
      },
      "onmouseout": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
        "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
      },
      "onmouseover": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
        "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
      },
      "onmouseup": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
        "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
      },
      "onpause": "fn(+Event)",
      "onplay": "fn(+Event)",
      "onplaying": "fn(+Event)",
      "onprogress": "fn(+Event)",
      "onratechange": "fn(+Event)",
      "onreset": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
        "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
      },
      "onresize": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
        "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
      },
      "onscroll": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
        "!doc": "An event handler for scroll events on element."
      },
      "onseeked": "fn(+Event)",
      "onseeking": "fn(+Event)",
      "onselect": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
        "!doc": "An event handler for the select event on the window."
      },
      "onshow": "fn(+Event)",
      "onstalled": "fn(+Event)",
      "onsubmit": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
        "!doc": "An event handler for the submit event on the window."
      },
      "onsuspend": "fn(+Event)",
      "ontimeupdate": "fn(+Event)",
      "onvolumechange": "fn(+Event)",
      "onwaiting": "fn(+Event)",
      "onselectstart": "fn(+Event)",
      "onpointercancel": "fn(+Event)",
      "onpointerdown": "fn(+Event)",
      "onpointerup": "fn(+Event)",
      "onpointermove": "fn(+Event)",
      "onpointerout": "fn(+Event)",
      "onpointerover": "fn(+Event)",
      "onpointerenter": "fn(+Event)",
      "onpointerleave": "fn(+Event)",
      "ongotpointercapture": "fn(+Event)",
      "onlostpointercapture": "fn(+Event)",
      "onmozfullscreenchange": "fn(+Event)",
      "onmozfullscreenerror": "fn(+Event)",
      "onmozpointerlockchange": "fn(+Event)",
      "onmozpointerlockerror": "fn(+Event)",
      "ontouchstart": "fn(+Event)",
      "ontouchend": "fn(+Event)",
      "ontouchmove": "fn(+Event)",
      "ontouchcancel": "fn(+Event)",
      "children": {
        "!type": "HTMLCollection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
        "!doc": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node."
      },
      "firstElementChild": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
        "!doc": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements."
      },
      "lastElementChild": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
        "!doc": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements."
      },
      "childElementCount": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
        "!doc": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element."
      },
      "onerror": "fn(+Event)",
      "getBoxQuads": "fn(options?: BoxQuadOptions) -> [+DOMQuad]",
      "convertQuadFromNode": "fn(quad: +DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
      "convertRectFromNode": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
      "convertPointFromNode": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMPoint",
      "fonts": "FontFaceSet"
    }
  },
  "DocumentFragment": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "!doc": "The DocumentFragment interface represents a minimal document object that has no parent. It is used as a light-weight version of Document to store well-formed or potentially non-well-formed fragments of XML.",
    "prototype": {
      "!proto": "Node",
      "getElementById": "fn(elementId: string) -> HTMLElement",
      "querySelector": {
        "!type": "fn(selectors: string) -> HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector",
        "!doc": "The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors."
      },
      "querySelectorAll": {
        "!type": "fn(selectors: string) -> NodeList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll",
        "!doc": "The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors."
      },
      "children": {
        "!type": "HTMLCollection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
        "!doc": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node."
      },
      "firstElementChild": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
        "!doc": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements."
      },
      "lastElementChild": {
        "!type": "HTMLElement",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
        "!doc": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements."
      },
      "childElementCount": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
        "!doc": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element."
      },
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "DocumentTimeline": {
    "!proto": "AnimationTimeline"
  },
  "DocumentType": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DocumentType",
    "!doc": "The DocumentType interface represents a Node containing a doctype.",
    "!proto": "Node",
    "name": "string",
    "publicId": "string",
    "systemId": "string",
    "remove": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
      "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
    },
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "DownloadEvent": {
    "!type": "fn(type: string, eventInitDict?: DownloadEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "download": "DOMDownload"
    }
  },
  "DOMDownload": {
    "!proto": "EventTarget",
    "totalBytes": "number",
    "currentBytes": "number",
    "url": "string",
    "path": "string",
    "storageName": "string",
    "storagePath": "string",
    "state": "DownloadState",
    "contentType": "string",
    "startTime": "Date",
    "id": "string",
    "sourceAppManifestURL": "string",
    "error": "+DOMError",
    "pause": "fn() -> +Promise[value=DOMDownload]",
    "resume": "fn() -> +Promise[value=DOMDownload]",
    "onstatechange": "fn(+Event)"
  },
  "DragEvent": {
    "!type": "fn(type: string, eventInitDict?: DragEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DragEvent",
    "!doc": "The drag event is fired when an element or text selection is being dragged (every few hundred milliseconds).",
    "prototype": {
      "!proto": "MouseEvent.prototype",
      "dataTransfer": "DataTransfer",
      "initDragEvent": "fn(type: string, canBubble: bool, cancelable: bool, aView: Window, aDetail: number, aScreenX: number, aScreenY: number, aClientX: number, aClientY: number, aCtrlKey: bool, aAltKey: bool, aShiftKey: bool, aMetaKey: bool, aButton: number, aRelatedTarget: EventTarget, aDataTransfer: DataTransfer)"
    }
  },
  "DummyInterface": {
    "lifecycleCallbacks": "fn(arg?: LifecycleCallbacks)"
  },
  "DummyInterfaceWorkers": {},
  "DynamicsCompressorNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode",
    "!doc": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode that has exactly one input and one output; it is created using the AudioContext.createDynamicsCompressor method.",
    "!proto": "AudioNode",
    "threshold": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/threshold",
      "!doc": "The threshold property of the DynamicCompressorNode interface is a k-rate AudioParam representing the decibel value above which the compression will start taking effect."
    },
    "knee": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/knee",
      "!doc": "The knee property of the DynamicCompressorNode interface is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion."
    },
    "ratio": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/ratio",
      "!doc": "The ratio property of the DynamicCompressorNode interface Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output."
    },
    "reduction": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/reduction",
      "!doc": "The reduction property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of gain reduction currently applied by the compressor to the signal."
    },
    "attack": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/attack",
      "!doc": "The attack property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB. It defines how quickly the signal is adapted when its volume is increased."
    },
    "release": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/release",
      "!doc": "The release property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB. It defines how quick the signal is adapted when its volume is reduced."
    },
    "passThrough": "bool"
  },
  "Element": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element",
    "!doc": "The Element interface represents an object of a Document. This interface describes methods and properties common to all kinds of elements. Specific behaviors are described in interfaces which inherit from Element but add additional functionality. For example, the HTMLElement interface is the base interface for HTML elements, while the SVGElement interface is the basis for all SVG elements.",
    "!proto": "Node",
    "tagName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/tagName",
      "!doc": "Returns the name of the element."
    },
    "id": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/id",
      "!doc": "The Element.id property represents the element's identifier, reflecting the id global attribute."
    },
    "className": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/className",
      "!doc": "className gets and sets the value of the class attribute of the specified element."
    },
    "classList": {
      "!type": "DOMTokenList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/classList",
      "!doc": "classList returns a token list of the class attribute of the element."
    },
    "attributes": {
      "!type": "NamedNodeMap",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/attributes",
      "!doc": "The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute."
    },
    "getAttributeNames": "fn() -> [string]",
    "getAttribute": {
      "!type": "fn(name: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute",
      "!doc": "getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details."
    },
    "getAttributeNS": {
      "!type": "fn(namespace: string, localName: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS",
      "!doc": "getAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details."
    },
    "setAttribute": {
      "!type": "fn(name: string, value: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute",
      "!doc": "Adds a new attribute or changes the value of an existing attribute on the specified element."
    },
    "setAttributeNS": {
      "!type": "fn(namespace: string, name: string, value: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS",
      "!doc": "setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name."
    },
    "removeAttribute": {
      "!type": "fn(name: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute",
      "!doc": "removeAttribute removes an attribute from the specified element."
    },
    "removeAttributeNS": {
      "!type": "fn(namespace: string, localName: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS",
      "!doc": "removeAttributeNS removes the specified attribute from an element."
    },
    "hasAttribute": {
      "!type": "fn(name: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute",
      "!doc": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not."
    },
    "hasAttributeNS": {
      "!type": "fn(namespace: string, localName: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS",
      "!doc": "hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute."
    },
    "hasAttributes": {
      "!type": "fn() -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes",
      "!doc": "The Element.hasAttributes() method returns a Boolean value, true or false, indicating if the current element has any attributes or not."
    },
    "closest": {
      "!type": "fn(selector: string) -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/closest",
      "!doc": "The Element.closest() method returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter. If there isn't such an ancestor, it returns null."
    },
    "matches": {
      "!type": "fn(selector: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/matches",
      "!doc": "The Element.matches() method returns true if the element would be selected by the specified selector string; otherwise, returns false."
    },
    "webkitMatchesSelector": "fn(selector: string) -> bool",
    "getElementsByTagName": {
      "!type": "fn(localName: string) -> HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName",
      "!doc": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name. The subtree underneath the specified element is searched, excluding the element itself. The returned list is live, meaning that it updates itself with the DOM tree automatically. Consequently, there is no need to call several times Element.getElementsByTagName() with the same element and arguments."
    },
    "getElementsByTagNameNS": {
      "!type": "fn(namespace: string, localName: string) -> HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS",
      "!doc": "The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element."
    },
    "getElementsByClassName": {
      "!type": "fn(classNames: string) -> HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName",
      "!doc": "The Element.getElementsByClassName() method returns a live HTMLCollection containing all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node."
    },
    "fontSizeInflation": "number",
    "onwheel": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/onwheel",
      "!doc": "The onwheel property returns the onwheel event handler code on the current element."
    },
    "mozMatchesSelector": "fn(selector: string) -> bool",
    "setPointerCapture": "fn(pointerId: number)",
    "releasePointerCapture": "fn(pointerId: number)",
    "setCapture": {
      "!type": "fn(retargetToElement?: bool)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture",
      "!doc": "Call this method during the handling of a mousedown event to retarget all mouse events to this element until the mouse button is released or document.releaseCapture() is called."
    },
    "releaseCapture": "fn()",
    "mozRequestFullScreen": "fn(options?: ?)",
    "mozRequestPointerLock": "fn()",
    "getAttributeNode": {
      "!type": "fn(name: string) -> Attr",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode",
      "!doc": "Returns the specified attribute of the specified element, as an Attr node."
    },
    "setAttributeNode": {
      "!type": "fn(newAttr: Attr) -> Attr",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode",
      "!doc": "setAttributeNode() adds a new Attr node to the specified element."
    },
    "removeAttributeNode": {
      "!type": "fn(oldAttr: Attr) -> Attr",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode",
      "!doc": "removeAttributeNode removes the specified attribute from the current element."
    },
    "getAttributeNodeNS": {
      "!type": "fn(namespaceURI: string, localName: string) -> Attr",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS",
      "!doc": "Returns the Attr node for the attribute with the given namespace and name."
    },
    "setAttributeNodeNS": {
      "!type": "fn(newAttr: Attr) -> Attr",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS",
      "!doc": "setAttributeNodeNS adds a new namespaced attribute node to an element."
    },
    "scrollByNoFlush": "fn(dx: number, dy: number) -> bool",
    "getClientRects": {
      "!type": "fn() -> DOMRectList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects",
      "!doc": "The Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client."
    },
    "getBoundingClientRect": {
      "!type": "fn() -> +DOMRect",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect",
      "!doc": "The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport."
    },
    "scrollIntoView": {
      "!type": "fn(top: bool)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView",
      "!doc": "The Element.scrollIntoView() method scrolls the current element into the visible area of the browser window."
    },
    "scrollTop": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop",
      "!doc": "The Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0."
    },
    "scrollLeft": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft",
      "!doc": "The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left."
    },
    "scrollWidth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth",
      "!doc": "The Element.scrollWidth read–only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth."
    },
    "scrollHeight": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight",
      "!doc": "The Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin."
    },
    "scroll": "fn(x: number, y: number)",
    "scrollTo": "fn(x: number, y: number)",
    "scrollBy": "fn(x: number, y: number)",
    "mozScrollSnap": "fn()",
    "clientTop": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop",
      "!doc": "The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only."
    },
    "clientLeft": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft",
      "!doc": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only."
    },
    "clientWidth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth",
      "!doc": "The Element.clientWidth property is the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin."
    },
    "clientHeight": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight",
      "!doc": "The Element.clientHeight read-only property returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin."
    },
    "scrollTopMin": "number",
    "scrollTopMax": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax",
      "!doc": "The Element.scrollTopMax read-only property returns a Number representing the maximum top scroll offset possible for the element."
    },
    "scrollLeftMin": "number",
    "scrollLeftMax": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeftMax",
      "!doc": "The Element.scrollLeftMax read-only property returns a Number representing the maximum left scroll offset possible for the element."
    },
    "undoManager": "UndoManager",
    "undoScope": "bool",
    "innerHTML": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML",
      "!doc": "The Element.innerHTML property sets or gets the HTML syntax describing the element's descendants."
    },
    "outerHTML": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML",
      "!doc": "The outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string."
    },
    "insertAdjacentHTML": {
      "!type": "fn(position: string, text: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML",
      "!doc": "insertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation."
    },
    "querySelector": {
      "!type": "fn(selectors: string) -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector",
      "!doc": "Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors."
    },
    "querySelectorAll": {
      "!type": "fn(selectors: string) -> NodeList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll",
      "!doc": "Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors."
    },
    "createShadowRoot": {
      "!type": "fn() -> ShadowRoot",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/createShadowRoot",
      "!doc": "Use Element.createShadowRoot to create an instance of shadow DOM. When shadow DOM is created, it is always attached to an existing element. After the shadow DOM is created, the element that it is attached to is called the shadow root."
    },
    "getDestinationInsertionPoints": "fn() -> NodeList",
    "shadowRoot": {
      "!type": "ShadowRoot",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot",
      "!doc": "The Element.shadowRoot read-only property represents the youngest shadow root that is hosted on the element."
    },
    "remove": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
      "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
    },
    "previousElementSibling": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
      "!doc": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list."
    },
    "nextElementSibling": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
      "!doc": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list."
    },
    "children": {
      "!type": "HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
      "!doc": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node."
    },
    "firstElementChild": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
      "!doc": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements."
    },
    "lastElementChild": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
      "!doc": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements."
    },
    "childElementCount": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
      "!doc": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element."
    },
    "getAnimations": "fn() -> [Animation]",
    "getBoxQuads": "fn(options?: BoxQuadOptions) -> [+DOMQuad]",
    "convertQuadFromNode": "fn(quad: +DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
    "convertRectFromNode": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
    "convertPointFromNode": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMPoint",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "EngineeringMode": {
    "!proto": "EventTarget",
    "getValue": "fn(name: string) -> +Promise[value=string]",
    "setValue": "fn(name: string, value: string) -> +Promise[value=void]",
    "onmessage": "fn(+Event)"
  },
  "ErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: ErrorEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent",
    "!doc": "The ErrorEvent interface represents events providing information related to errors in scripts or in files.",
    "prototype": {
      "!proto": "Event.prototype",
      "message": "string",
      "filename": "string",
      "lineno": "number",
      "colno": "number",
      "error": "?"
    }
  },
  "Event": {
    "!type": "fn(type: string, eventInitDict?: EventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event",
    "!doc": "The Event interface represents any event of the DOM. It contains common properties and methods to any event.",
    "prototype": {
      "type": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/type",
        "!doc": "Returns a string containing the type of event."
      },
      "target": {
        "!type": "EventTarget",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/target",
        "!doc": "A reference to the object that dispatched the event. It is different than event.currentTarget when the event handler is called during the bubbling or capturing phase of the event."
      },
      "currentTarget": {
        "!type": "EventTarget",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget",
        "!doc": "Identifies the current target for the event, as the event traverses the DOM. It always refers to the element the event handler has been attached to as opposed to event.target which identifies the element on which the event occurred."
      },
      "NONE": "number",
      "CAPTURING_PHASE": "number",
      "AT_TARGET": "number",
      "BUBBLING_PHASE": "number",
      "eventPhase": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase",
        "!doc": "Indicates which phase of the event flow is currently being evaluated."
      },
      "stopPropagation": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation",
        "!doc": "Prevents further propagation of the current event."
      },
      "stopImmediatePropagation": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation",
        "!doc": "Prevents other listeners of the same event from being called."
      },
      "bubbles": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles",
        "!doc": "Indicates whether the given event bubbles up through the DOM or not."
      },
      "cancelable": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable",
        "!doc": "Indicates whether the event is cancelable or not."
      },
      "preventDefault": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault",
        "!doc": "Cancels the event if it is cancelable, without stopping further propagation of the event."
      },
      "defaultPrevented": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented",
        "!doc": "Returns a boolean indicating whether or not event.preventDefault() was called on the event."
      },
      "isTrusted": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted",
        "!doc": "A boolean value indicating whether the event is trusted."
      },
      "timeStamp": {
        "!type": "DOMHighResTimeStamp",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp",
        "!doc": "Returns the time (in milliseconds since the epoch) at which the event was created."
      },
      "initEvent": {
        "!type": "fn(type: string, bubbles: bool, cancelable: bool)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "ALT_MASK": "number",
      "CONTROL_MASK": "number",
      "SHIFT_MASK": "number",
      "META_MASK": "number",
      "originalTarget": {
        "!type": "EventTarget",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget",
        "!doc": "The original target of the event before any retargetings. (Mozilla-specific)"
      },
      "explicitOriginalTarget": {
        "!type": "EventTarget",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget",
        "!doc": "The explicit original target of the event. (Mozilla-specific)"
      },
      "composedTarget": "EventTarget",
      "multipleActionsPrevented": "bool",
      "isSynthesized": "bool",
      "getPreventDefault": "fn() -> bool",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "EventSource": {
    "!type": "fn(url: string, eventSourceInitDict?: EventSourceInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/EventSource",
    "!doc": "The EventSource interface is used to receive server-sent events. It connects to a server over HTTP and receives events in text/event-stream format without closing the connection.",
    "prototype": {
      "!proto": "EventTarget",
      "url": "string",
      "withCredentials": "bool",
      "CONNECTING": "number",
      "OPEN": "number",
      "CLOSED": "number",
      "readyState": "number",
      "onopen": "fn(+Event)",
      "onmessage": "fn(+Event)",
      "onerror": "fn(+Event)",
      "close": "fn()",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "EventTarget": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/EventTarget",
    "!doc": "EventTarget is an interface implemented by objects that can receive events and may have listeners for them.",
    "addEventListener": {
      "!type": "fn(type: string, listener: fn(event: +Event), capture?: bool, wantsUntrusted?: bool)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",
      "!doc": "The EventTarget.addEventListener() method registers the specified listener on the EventTarget it's called on. The event target may be an Element in a document, the Document itself, a Window, or any other object that supports events (such as XMLHttpRequest)."
    },
    "removeEventListener": {
      "!type": "fn(type: string, listener: fn(event: +Event), capture?: bool)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener",
      "!doc": "Removes the event listener previously registered with EventTarget.addEventListener()."
    },
    "dispatchEvent": {
      "!type": "fn(event: +Event) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent",
      "!doc": "Dispatches an Event at the specified EventTarget, invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) apply to events dispatched manually with dispatchEvent()."
    },
    "setEventHandler": "fn(type: string, handler: fn(+Event))",
    "getEventHandler": "fn(type: string) -> fn(+Event)",
    "ownerGlobal": "WindowProxy"
  },
  "ExtendableEvent": {
    "!type": "fn(type: string, eventInitDict?: ExtendableEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent",
    "!doc": "The ExtendableEvent interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.",
    "prototype": {
      "!proto": "Event.prototype",
      "waitUntil": {
        "!type": "fn(p: +Promise)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil",
        "!doc": "The ExtendableEvent.waitUntil() method extends the lifetime of the event. When called in an EventHandler associated to the install event, it delays treating the installing worker as installed until the passed Promise resolves successfully. This is primarily used to ensure that a service worker is not considered installed until all of the core caches it depends on are populated."
      }
    }
  },
  "ExtendableMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: ExtendableMessageEventInit)",
    "prototype": {
      "!proto": "ExtendableEvent.prototype",
      "data": "?",
      "origin": "string",
      "lastEventId": "string",
      "source": "Client|ServiceWorker|MessagePort",
      "ports": "MessagePortList"
    }
  },
  "External": {
    "AddSearchProvider": "fn(aDescriptionURL: string)",
    "IsSearchProviderInstalled": "fn(aSearchURL: string) -> number",
    "addSearchEngine": "fn(engineURL: string, iconURL: string, suggestedTitle: string, suggestedCategory: string)"
  },
  "ExternalAppEvent": {
    "!type": "fn(type: string, eventInitDict?: ExternalAppEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "data": "string"
    }
  },
  "FMRadio": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio",
    "!doc": "The WebFM API provides access to the device FM radio. This interface lets you turn the FM radio on and off and tune it to different stations. It is accessible through the navigator.mozFMRadio property.",
    "!proto": "EventTarget",
    "enabled": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/enabled",
      "!doc": "The enabled property value indicates whether the radio is playing (true) or not (false)"
    },
    "rdsEnabled": "bool",
    "antennaAvailable": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/antennaAvailable",
      "!doc": "The antennaAvailable property value indicates if an antenna is plugged and available."
    },
    "frequency": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/frequency",
      "!doc": "The frequency property value returns the current radio frequency."
    },
    "frequencyUpperBound": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/frequencyUpperBound",
      "!doc": "The frequencyUpperBound property value indicates the maximum frequency up to which the seek method searches for radio stations."
    },
    "frequencyLowerBound": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/frequencyLowerBound",
      "!doc": "The frequencyLowerBound property value indicates the minimum frequency down to which the seek method searches for radio stations."
    },
    "channelWidth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/channelWidth",
      "!doc": "The channelWidth property value indicates the channel width of the ranges of frequency, in MHz."
    },
    "rdsGroupMask": "number",
    "pi": "number",
    "pty": "number",
    "ps": "string",
    "rt": "string",
    "rdsgroup": "Uint16Array",
    "onenabled": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/onenabled",
      "!doc": "Specifies an event listener to receive enabled events. Those events occur when the device's FM radio is turned on."
    },
    "ondisabled": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/ondisabled",
      "!doc": "Specifies an event listener to receive disabled events. Those events occur when the device's FM radio is turned off."
    },
    "onrdsenabled": "fn(+Event)",
    "onrdsdisabled": "fn(+Event)",
    "onantennaavailablechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/onantennaavailablechange",
      "!doc": "Specifies an event listener to receive antennaavailablechange events. Those events occur when an antenna is plugged or unplugged."
    },
    "onfrequencychange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/onfrequencychange",
      "!doc": "Specifies an event listener to receive frequencychange events. Those events occur whenever the radio frequency is changed"
    },
    "onpichange": "fn(+Event)",
    "onptychange": "fn(+Event)",
    "onpschange": "fn(+Event)",
    "onrtchange": "fn(+Event)",
    "onnewrdsgroup": "fn(+Event)",
    "disable": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/disable",
      "!doc": "The disable method is used to turn off the radio."
    },
    "enable": {
      "!type": "fn(frequency: number) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/enable",
      "!doc": "The enable method is used to turns on the radio on the given frequency."
    },
    "setFrequency": {
      "!type": "fn(frequency: number) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/setFrequency",
      "!doc": "The setFrequency method is used to change the frequency listened to by the radio."
    },
    "seekUp": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/seekUp",
      "!doc": "The seekUp method is used to tell the radio to seek up to the next radio channel. The search circles back to lower frequencies when the highest frequency has been reached."
    },
    "seekDown": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/seekDown",
      "!doc": "The seekDown method is used to tell the radio to seek down to the next radio channel. The search circles back to upper frequencies when the lowest frequency has been reached."
    },
    "cancelSeek": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FMRadio/cancelSeek",
      "!doc": "The cancelSeek method is used to tell the radio to stop seeking for frequencies."
    },
    "enableRDS": "fn() -> DOMRequest",
    "disableRDS": "fn() -> DOMRequest"
  },
  "FetchEvent": {
    "!type": "fn(type: string, eventInitDict?: FetchEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FetchEvent",
    "!doc": "The parameter passed into the ServiceWorkerGlobalScope.onfetch handler, FetchEvent represents a fetch action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. It contains information about the request and resulting response, and provides the FetchEvent.respondWith() method, which allows us to provide an arbitrary response back to the controlled page.",
    "prototype": {
      "!proto": "ExtendableEvent.prototype",
      "request": {
        "!type": "+Request",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request",
        "!doc": "The request read-only property of the FetchEvent interface returns the Request that triggered the event handler."
      },
      "clientId": "string",
      "isReload": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/isReload",
        "!doc": "The isReload read-only property of the FetchEvent interface returns true if the event was dispatched by the user attempting to reload the page, and false otherwise. Pressing the refresh button is a reload while clicking a link and pressing the back button is not."
      },
      "respondWith": {
        "!type": "fn(r: +Promise)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith",
        "!doc": "The respondWith() method of the FetchEvent interface is intended for containing code that generates custom responses to the requests coming from the controlled page. This code will resolve by returning a Response or a network error  to Fetch."
      }
    }
  },
  "nsIFile": {},
  "File": {
    "!type": "fn(fileBits: string, options?: ChromeFilePropertyBag)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/File",
    "!doc": "The File interface provides information about files and allows to access their content.",
    "prototype": {
      "!proto": "Blob.prototype",
      "name": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/File/name",
        "!doc": "Returns the name of the file. For security reasons, the path is excluded from this property."
      },
      "lastModified": "number",
      "lastModifiedDate": {
        "!type": "Date",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/File/lastModifiedDate",
        "!doc": "Returns the last modified date of the file. Files without a known last modified date use the current date instead."
      },
      "path": "string",
      "mozFullPath": "string"
    }
  },
  "FileList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileList",
    "!doc": "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
    "item": "fn(index: number) -> +File",
    "length": "number",
    "<i>": "+File",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "FileReader": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader",
    "!doc": "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.",
    "prototype": {
      "!proto": "EventTarget",
      "readAsArrayBuffer": {
        "!type": "fn(blob: +Blob)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer",
        "!doc": "The readAsArrayBuffer method is used to start reading the contents of a specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains an ArrayBuffer representing the file's data."
      },
      "readAsText": {
        "!type": "fn(blob: +Blob, label?: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText",
        "!doc": "The readAsText method is used to read the contents of the specified Blob or File. When the read operation is complete, the readyState is changed to DONE, the loadend is triggered, and the result attribute contains the contents of the file as a text string."
      },
      "readAsDataURL": {
        "!type": "fn(blob: +Blob)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL",
        "!doc": "The readAsDataURL method is used to read the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains  the data as a URL representing the file's data as a base64 encoded string."
      },
      "abort": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort",
        "!doc": "The abort method is used to aborts the read operation. Upon return, the readyState will be DONE."
      },
      "EMPTY": "number",
      "LOADING": "number",
      "DONE": "number",
      "readyState": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState",
        "!doc": "Provides the current state of the reading operation."
      },
      "result": {
        "!type": "?",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/result",
        "!doc": "Returns the file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation."
      },
      "error": {
        "!type": "+DOMError",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/error",
        "!doc": "Returns the error that occurred while reading the file."
      },
      "onloadstart": "fn(+Event)",
      "onprogress": "fn(+Event)",
      "onload": "fn(+Event)",
      "onabort": "fn(+Event)",
      "onerror": "fn(+Event)",
      "onloadend": "fn(+Event)",
      "readAsBinaryString": {
        "!type": "fn(filedata: +Blob)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString",
        "!doc": "The readAsBinaryString method is used to start reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the raw binary data from the file."
      }
    }
  },
  "FileReaderSync": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync",
    "!doc": "The FileReaderSync interface allows to read File or Blob objects in a synchronous way.",
    "prototype": {
      "readAsArrayBuffer": "fn(blob: +Blob) -> +ArrayBuffer",
      "readAsBinaryString": "fn(blob: +Blob) -> string",
      "readAsText": "fn(blob: +Blob, encoding?: string) -> string",
      "readAsDataURL": "fn(blob: +Blob) -> string"
    }
  },
  "FocusEvent": {
    "!type": "fn(typeArg: string, focusEventInitDict?: FocusEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FocusEvent",
    "!doc": "The FocusEvent interface represents focus-related events like focus, blur, focusin, or focusout.",
    "prototype": {
      "!proto": "UIEvent.prototype",
      "relatedTarget": {
        "!type": "EventTarget",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget",
        "!doc": "The FocusEvent.relatedTarget read-only property represents a secondary target for this event, which will depend of the event itself. As in some cases (like when tabbing in or out a page), this property may be set to null for security reasons."
      }
    }
  },
  "FontFace": {
    "!type": "fn(family: string, source: string, descriptors?: FontFaceDescriptors)",
    "prototype": {
      "family": "string",
      "style": "string",
      "weight": "string",
      "stretch": "string",
      "unicodeRange": "string",
      "variant": "string",
      "featureSettings": "string",
      "status": "FontFaceLoadStatus",
      "load": "fn() -> +Promise[value=+FontFace]",
      "loaded": "+Promise[value=+FontFace]"
    }
  },
  "FontFaceSet": {
    "!proto": "EventTarget",
    "size": "number",
    "add": "fn(font: +FontFace)",
    "has": "fn(font: +FontFace) -> bool",
    "delete": "fn(font: +FontFace) -> bool",
    "clear": "fn()",
    "entries": "fn() -> FontFaceSetIterator",
    "values": "fn() -> FontFaceSetIterator",
    "forEach": "fn(cb: fn(value: +FontFace, key: +FontFace, set: FontFaceSet), thisArg?: ?)",
    "onloading": "fn(+Event)",
    "onloadingdone": "fn(+Event)",
    "onloadingerror": "fn(+Event)",
    "load": "fn(font: string, text?: string) -> +Promise",
    "check": "fn(font: string, text?: string) -> bool",
    "ready": "+Promise[value=void]",
    "status": "FontFaceSetLoadStatus"
  },
  "FontFaceSetLoadEvent": {
    "!type": "fn(type: string, eventInitDict?: FontFaceSetLoadEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "fontfaces": "[+FontFace]"
    }
  },
  "FormData": {
    "!type": "fn(form?: HTMLFormElement)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData",
    "!doc": "XMLHttpRequest Level 2 adds support for the new FormData interface. FormData objects provide a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest send() method.",
    "prototype": {
      "append": {
        "!type": "fn(name: string, value: +Blob, filename?: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData/append",
        "!doc": "The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist."
      },
      "delete": {
        "!type": "fn(name: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData/delete",
        "!doc": "The delete() method of the FormData interface deletes a key/value pair from a FormData object."
      },
      "get": {
        "!type": "fn(name: string) -> FormDataEntryValue",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData/get",
        "!doc": "The get() method of the FormData interface returns the first value associated with a given key from within a FormData object."
      },
      "getAll": {
        "!type": "fn(name: string) -> [FormDataEntryValue]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll",
        "!doc": "The getAll() method of the FormData interface returns the first value associated with a given key from within a FormData object."
      },
      "has": {
        "!type": "fn(name: string) -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData/has",
        "!doc": "The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key/value pair."
      },
      "set": {
        "!type": "fn(name: string, value: +Blob, filename?: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/FormData/set",
        "!doc": "The append() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist."
      },
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "GainNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GainNode",
    "!doc": "The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.",
    "!proto": "AudioNode",
    "gain": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain",
      "!doc": "The gain property of the GainNode interface is an a-rate AudioParam representing the amount of gain to apply."
    },
    "passThrough": "bool"
  },
  "GamepadButton": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GamepadButton",
    "!doc": "The GamepadButton interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.",
    "pressed": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/pressed",
      "!doc": "The GamepadButton.pressed property of the GamepadButton interface returns a boolean indicating whether the button is currently pressed (true) or unpressed (false)."
    },
    "value": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value",
      "!doc": "The GamepadButton.value property of the GamepadButton interface returns a double value used to represent the current state of analog buttons on many modern gamepads, such as the triggers."
    }
  },
  "Gamepad": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad",
    "!doc": "The Gamepad interface defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.",
    "id": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id",
      "!doc": "The Gamepad.id property of the Gamepad interface returns a string containing some information about the controller."
    },
    "index": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/index",
      "!doc": "The Gamepad.index property of the Gamepad interface returns an integer that is auto-incremented to be unique for each device currently connected to the system."
    },
    "mapping": {
      "!type": "GamepadMappingType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping",
      "!doc": "The Gamepad.mapping property of the Gamepad interface returns a string indicating whether the browser has remapped the controls on the device to a known layout."
    },
    "connected": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/connected",
      "!doc": "The Gamepad.connected property of the Gamepad interface returns a boolean indicating whether the gamepad is still connected to the system."
    },
    "buttons": {
      "!type": "[GamepadButton]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons",
      "!doc": "The Gamepad.buttons property of the Gamepad interface returns an array of gamepadButton objects representing the buttons present on the device."
    },
    "axes": {
      "!type": "[number]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/axes",
      "!doc": "The Gamepad.axes property of the Gamepad interface returns an array representing the controls with axes present on the device (e.g. analog thumb sticks).-"
    },
    "timestamp": {
      "!type": "DOMHighResTimeStamp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Gamepad/timestamp",
      "!doc": "The Gamepad.timestamp property of the Gamepad interface returns a DOMHighResTimeStamp representing the last time the data for this gamepad was updated."
    }
  },
  "GamepadAxisMoveEvent": {
    "!type": "fn(type: string, eventInitDict?: GamepadAxisMoveEventInit)",
    "prototype": {
      "!proto": "GamepadEvent.prototype",
      "axis": "number",
      "value": "number"
    }
  },
  "GamepadButtonEvent": {
    "!type": "fn(type: string, eventInitDict?: GamepadButtonEventInit)",
    "prototype": {
      "!proto": "GamepadEvent.prototype",
      "button": "number"
    }
  },
  "GamepadEvent": {
    "!type": "fn(type: string, eventInitDict?: GamepadEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent",
    "!doc": "The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.",
    "prototype": {
      "!proto": "Event.prototype",
      "gamepad": {
        "!type": "Gamepad",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/gamepad",
        "!doc": "The GamepadEvent.gamepad property of the GamepadEvent interface returns a Gamepad object, providing access to the associated gamepad data for fired gamepadconnected and gamepaddisconnected events."
      }
    }
  },
  "HDMIInputPort": {
    "!proto": "InputPort"
  },
  "HTMLAllCollection": {
    "length": "number",
    "item": "fn(index: number) -> Node",
    "namedItem": "fn(name: string) -> Node|HTMLCollection",
    "<i>": "Node|HTMLCollection"
  },
  "HTMLAnchorElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement",
    "!doc": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of such elements.",
    "!proto": "HTMLElement",
    "target": "string",
    "download": "string",
    "ping": "string",
    "rel": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel",
      "!doc": "The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document."
    },
    "referrerPolicy": "string",
    "relList": {
      "!type": "DOMTokenList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/relList",
      "!doc": "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <a> element and the current document."
    },
    "hreflang": "string",
    "type": "string",
    "text": "string",
    "coords": "string",
    "charset": "string",
    "name": "string",
    "rev": "string",
    "shape": "string",
    "href": "string",
    "origin": "string",
    "protocol": "string",
    "username": "string",
    "password": "string",
    "host": "string",
    "hostname": "string",
    "port": "string",
    "pathname": "string",
    "search": "string",
    "hash": "string"
  },
  "HTMLAppletElement": {
    "!proto": "HTMLElement",
    "align": "string",
    "alt": "string",
    "archive": "string",
    "code": "string",
    "codeBase": "string",
    "height": "string",
    "hspace": "number",
    "name": "string",
    "object": "string",
    "vspace": "number",
    "width": "string"
  },
  "HTMLAreaElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement",
    "!doc": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.",
    "!proto": "HTMLElement",
    "alt": "string",
    "coords": "string",
    "shape": "string",
    "target": "string",
    "download": "string",
    "ping": "string",
    "rel": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel",
      "!doc": "The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document."
    },
    "referrerPolicy": "string",
    "relList": {
      "!type": "DOMTokenList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/relList",
      "!doc": "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <area> element and the current document."
    },
    "noHref": "bool",
    "href": "string",
    "origin": "string",
    "protocol": "string",
    "username": "string",
    "password": "string",
    "host": "string",
    "hostname": "string",
    "port": "string",
    "pathname": "string",
    "search": "string",
    "hash": "string"
  },
  "HTMLAudioElement": {
    "!type": "fn(src?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement",
    "!doc": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.",
    "prototype": {
      "!proto": "HTMLMediaElement"
    }
  },
  "Audio": {
    "!type": "fn(src?: string)",
    "prototype": {
      "!proto": "HTMLMediaElement"
    }
  },
  "HTMLBRElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement",
    "!doc": "The HTMLBRElement interface represents a HTML line break element (<br>). It inherits from HTMLElement.",
    "!proto": "HTMLElement",
    "clear": "string"
  },
  "HTMLBaseElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement",
    "!doc": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
    "!proto": "HTMLElement",
    "href": "string",
    "target": "string"
  },
  "HTMLBodyElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement",
    "!doc": "The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements.",
    "!proto": "HTMLElement",
    "text": "string",
    "link": "string",
    "vLink": "string",
    "aLink": "string",
    "bgColor": "string",
    "background": "string",
    "onafterprint": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
      "!doc": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window."
    },
    "onbeforeprint": "fn(+Event)",
    "onbeforeunload": {
      "!type": "OnBeforeUnloadEventHandler",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
      "!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
    },
    "onhashchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
      "!doc": "The hashchange event fires when a window's hash changes (see location.hash)."
    },
    "onlanguagechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
      "!doc": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages."
    },
    "onmessage": "fn(+Event)",
    "onoffline": "fn(+Event)",
    "ononline": "fn(+Event)",
    "onpagehide": "fn(+Event)",
    "onpageshow": "fn(+Event)",
    "onpopstate": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
      "!doc": "An event handler for the popstate event on the window."
    },
    "onstorage": "fn(+Event)",
    "onunload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
      "!doc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
    }
  },
  "HTMLButtonElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement",
    "!doc": "The HTMLButtonElement interface provides properties and methods (beyond the <button> object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.",
    "!proto": "HTMLElement",
    "autofocus": "bool",
    "disabled": "bool",
    "form": "HTMLFormElement",
    "formAction": "string",
    "formEnctype": "string",
    "formMethod": "string",
    "formNoValidate": "bool",
    "formTarget": "string",
    "name": "string",
    "type": "string",
    "value": "string",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)"
  },
  "nsIInputStreamCallback": {},
  "Variant": {},
  "HTMLCanvasElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement",
    "!doc": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
    "!proto": "HTMLElement",
    "width": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width",
      "!doc": "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used."
    },
    "height": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height",
      "!doc": "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used."
    },
    "getContext": {
      "!type": "fn(contextId: string, contextOptions?: ?) -> nsISupports",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext",
      "!doc": "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported."
    },
    "toDataURL": {
      "!type": "fn(type?: string, encoderOptions?: ?) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL",
      "!doc": "The HTMLCanvasElement.toDataURL() method returns a data URIs containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi."
    },
    "toBlob": {
      "!type": "fn(callback: fn(file: +Blob), type?: string, encoderOptions?: ?)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob",
      "!doc": "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.\n The third argument is used with image/jpeg images to specify the quality of the output."
    },
    "mozOpaque": "bool",
    "mozGetAsFile": "fn(name: string, type?: string) -> +File",
    "MozGetIPCContext": "fn(contextId: string) -> nsISupports",
    "mozPrintCallback": "fn(ctx: MozCanvasPrintState)",
    "captureStream": "fn(frameRate?: number) -> CanvasCaptureMediaStream",
    "transferControlToOffscreen": "fn() -> +OffscreenCanvas"
  },
  "HTMLCollection": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection",
    "!doc": "The HTMLCollection interface represents a generic collection (array-like object) of elements (in document order) and offers methods and properties for selecting from the list.",
    "length": "number",
    "item": {
      "!type": "fn(index: number) -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item",
      "!doc": "HTMLCollection.item( ) gets an element by position."
    },
    "namedItem": "fn(name: string) -> HTMLElement",
    "<i>": "HTMLElement",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "HTMLContentElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement",
    "!doc": "The HTMLContentElement interface represents a <content> HTML Element, which is used in Shadow DOM.",
    "!proto": "HTMLElement",
    "select": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement/select",
      "!doc": "The HTMLContentElement.select property reflects the select attribute. It is a DOMString containing a space-separated list of CSS selectors that select the content to insert in place of the <content> element."
    },
    "getDistributedNodes": {
      "!type": "fn() -> NodeList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement/getDistributedNodes",
      "!doc": "The HTMLContentElement.getDistributedNodes() method returns a static NodeList of the distributed nodes associated with this <content> element."
    }
  },
  "HTMLDListElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement",
    "!doc": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list elements.",
    "!proto": "HTMLElement",
    "compact": "bool"
  },
  "HTMLDataElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement",
    "!doc": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
    "!proto": "HTMLElement",
    "value": "string"
  },
  "HTMLDataListElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement",
    "!doc": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
    "!proto": "HTMLElement",
    "options": "HTMLCollection"
  },
  "HTMLDirectoryElement": {
    "!proto": "HTMLElement",
    "compact": "bool"
  },
  "HTMLDivElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement",
    "!doc": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.",
    "!proto": "HTMLElement",
    "align": "string"
  },
  "HTMLDocument": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument",
    "!doc": "HTMLDocument is an abstract interface of the DOM which provides access to special properties and methods not present by default on a regular (XML) document.",
    "!proto": "Document.prototype",
    "domain": "string",
    "cookie": "string",
    "body": "HTMLElement",
    "head": "HTMLHeadElement",
    "images": "HTMLCollection",
    "embeds": "HTMLCollection",
    "plugins": "HTMLCollection",
    "links": "HTMLCollection",
    "forms": "HTMLCollection",
    "scripts": "HTMLCollection",
    "getElementsByName": "fn(elementName: string) -> NodeList",
    "getItems": "fn(typeNames?: string) -> NodeList",
    "open": "fn(type?: string, replace?: string) -> +Document",
    "close": "fn()",
    "write": "fn(text: string)",
    "writeln": "fn(text: string)",
    "designMode": "string",
    "execCommand": "fn(commandId: string, showUI?: bool, value?: string) -> bool",
    "queryCommandEnabled": "fn(commandId: string) -> bool",
    "queryCommandIndeterm": "fn(commandId: string) -> bool",
    "queryCommandState": "fn(commandId: string) -> bool",
    "queryCommandSupported": "fn(commandId: string) -> bool",
    "queryCommandValue": "fn(commandId: string) -> string",
    "fgColor": "string",
    "linkColor": "string",
    "vlinkColor": "string",
    "alinkColor": "string",
    "bgColor": "string",
    "anchors": "HTMLCollection",
    "applets": "HTMLCollection",
    "clear": "fn()",
    "all": "HTMLAllCollection",
    "getSelection": "fn() -> Selection",
    "captureEvents": "fn()",
    "releaseEvents": "fn()",
    "blockedTrackingNodeCount": "number",
    "blockedTrackingNodes": "NodeList",
    "<i>": "object"
  },
  "HTMLElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement",
    "!doc": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.",
    "!proto": "Element",
    "title": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title",
      "!doc": "The HTMLElement.title property represents the title of the element, the text usually displayed in a 'tool tip' popup when the mouse is over the displayed node."
    },
    "lang": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang",
      "!doc": "The HTMLElement.lang property gets or sets the base language of an element's attribute values and text content."
    },
    "dir": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir",
      "!doc": "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element."
    },
    "dataset": {
      "!type": "DOMStringMap",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset",
      "!doc": "The HTMLElement.dataset read-only property allows access, both in reading and writing mode, to all the custom data attributes (data-*) set on the element. It is a map of DOMString, one entry for each custom data attribute."
    },
    "innerText": "string",
    "itemScope": "bool",
    "itemType": "DOMSettableTokenList",
    "itemId": "string",
    "itemRef": "DOMSettableTokenList",
    "itemProp": "DOMSettableTokenList",
    "properties": "HTMLPropertiesCollection",
    "itemValue": "?",
    "hidden": "bool",
    "click": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click",
      "!doc": "The HTMLElement.click() method simulates a mouse click on an element."
    },
    "tabIndex": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex",
      "!doc": "The HTMLElement.tabIndex property represents the tab order of the current element."
    },
    "focus": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus",
      "!doc": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused."
    },
    "blur": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur",
      "!doc": "The HTMLElement.blur() method removes keyboard focus from the current element."
    },
    "accessKey": "string",
    "accessKeyLabel": "string",
    "draggable": "bool",
    "contentEditable": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable",
      "!doc": "The HTMLElement.contentEditable property is used to indicate whether or not the element is editable. This enumerated attribute can have the following values:"
    },
    "isContentEditable": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable",
      "!doc": "The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false."
    },
    "contextMenu": "HTMLMenuElement",
    "spellcheck": "bool",
    "style": {
      "!type": "CSS2Properties",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style",
      "!doc": "The HTMLElement.style property returns a CSSStyleDeclaration object that represents the element's style attribute. See the CSS Properties Reference for a list of the CSS properties accessible via style."
    },
    "oncopy": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy",
      "!doc": "The oncopy property returns the onCopy event handler code on the current element."
    },
    "oncut": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut",
      "!doc": "The oncut property returns the onCut event handler code on the current element."
    },
    "onpaste": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste",
      "!doc": "The onpaste property returns the onPaste event handler code on the current element."
    },
    "offsetParent": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent",
      "!doc": "The HTMLElement.offsetParent read-only property returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. If the element is non-positioned, the nearest table cell or root element (html in standards compliant mode; body in quirks rendering mode) is the offsetParent. offsetParent returns null when the element has style.display set to \"none\". The offsetParent is useful because offsetTop and offsetLeft are relative to its padding edge."
    },
    "offsetTop": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop",
      "!doc": "The HTMLElement.offsetTop read-only property returns the distance of the current element relative to the top of the offsetParent node."
    },
    "offsetLeft": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft",
      "!doc": "The HTMLElement.offsetLeft read-only method returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node."
    },
    "offsetWidth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth",
      "!doc": "The HTMLElement.offsetWidth read-only property returns the layout width of an element. Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width."
    },
    "offsetHeight": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight",
      "!doc": "The HTMLElement.offsetHeight read-only property is the height of the element including vertical padding and borders, in pixels, as an integer."
    },
    "scrollgrab": "bool",
    "onabort": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
      "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
    },
    "onblur": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
      "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
    },
    "onfocus": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
      "!doc": "The onfocus property returns the onFocus event handler code on the current element."
    },
    "oncanplay": "fn(+Event)",
    "oncanplaythrough": "fn(+Event)",
    "onchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
      "!doc": "The onchange property sets and returns the event handler for the change event."
    },
    "onclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
      "!doc": "The onclick property returns the click event handler code on the current element."
    },
    "oncontextmenu": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
      "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
    },
    "ondblclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
      "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
    },
    "ondrag": "fn(+Event)",
    "ondragend": "fn(+Event)",
    "ondragenter": "fn(+Event)",
    "ondragleave": "fn(+Event)",
    "ondragover": "fn(+Event)",
    "ondragstart": "fn(+Event)",
    "ondrop": "fn(+Event)",
    "ondurationchange": "fn(+Event)",
    "onemptied": "fn(+Event)",
    "onended": "fn(+Event)",
    "oninput": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
      "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
    },
    "oninvalid": "fn(+Event)",
    "onkeydown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
      "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
    },
    "onkeypress": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
      "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
    },
    "onkeyup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
      "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
    },
    "onload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
      "!doc": "An event handler for the load event of a window."
    },
    "onloadeddata": "fn(+Event)",
    "onloadedmetadata": "fn(+Event)",
    "onloadstart": "fn(+Event)",
    "onmousedown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
      "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
    },
    "onmouseenter": "fn(+Event)",
    "onmouseleave": "fn(+Event)",
    "onmousemove": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
      "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
    },
    "onmouseout": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
      "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
    },
    "onmouseover": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
      "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
    },
    "onmouseup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
      "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
    },
    "onpause": "fn(+Event)",
    "onplay": "fn(+Event)",
    "onplaying": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onratechange": "fn(+Event)",
    "onreset": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
      "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
    },
    "onresize": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
      "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
    },
    "onscroll": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
      "!doc": "An event handler for scroll events on element."
    },
    "onseeked": "fn(+Event)",
    "onseeking": "fn(+Event)",
    "onselect": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
      "!doc": "An event handler for the select event on the window."
    },
    "onshow": "fn(+Event)",
    "onstalled": "fn(+Event)",
    "onsubmit": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
      "!doc": "An event handler for the submit event on the window."
    },
    "onsuspend": "fn(+Event)",
    "ontimeupdate": "fn(+Event)",
    "onvolumechange": "fn(+Event)",
    "onwaiting": "fn(+Event)",
    "onselectstart": "fn(+Event)",
    "onpointercancel": "fn(+Event)",
    "onpointerdown": "fn(+Event)",
    "onpointerup": "fn(+Event)",
    "onpointermove": "fn(+Event)",
    "onpointerout": "fn(+Event)",
    "onpointerover": "fn(+Event)",
    "onpointerenter": "fn(+Event)",
    "onpointerleave": "fn(+Event)",
    "ongotpointercapture": "fn(+Event)",
    "onlostpointercapture": "fn(+Event)",
    "onmozfullscreenchange": "fn(+Event)",
    "onmozfullscreenerror": "fn(+Event)",
    "onmozpointerlockchange": "fn(+Event)",
    "onmozpointerlockerror": "fn(+Event)",
    "ontouchstart": "fn(+Event)",
    "ontouchend": "fn(+Event)",
    "ontouchmove": "fn(+Event)",
    "ontouchcancel": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "HTMLUnknownElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement",
    "!doc": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
    "!proto": "HTMLElement"
  },
  "HTMLEmbedElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement",
    "!doc": "The HTMLEmbedElement interface, which provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
    "!proto": "HTMLElement",
    "src": "string",
    "type": "string",
    "width": "string",
    "height": "string",
    "align": "string",
    "name": "string",
    "getSVGDocument": "fn() -> +Document"
  },
  "HTMLExtAppElement": {
    "!proto": "HTMLElement",
    "getCustomProperty": "fn(name: string) -> string",
    "postMessage": "fn(name: string)"
  },
  "HTMLFieldSetElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement",
    "!doc": "The HTMLFieldSetElement interface has special properties and methods (beyond the regular HTMLelement interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.",
    "!proto": "HTMLElement",
    "disabled": "bool",
    "form": "HTMLFormElement",
    "name": "string",
    "type": "string",
    "elements": "HTMLCollection",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)"
  },
  "HTMLFontElement": {
    "!proto": "HTMLElement",
    "color": "string",
    "face": "string",
    "size": "string"
  },
  "HTMLFormControlsCollection": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection",
    "!doc": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. It replaces one method of HTMLCollection.",
    "!proto": "HTMLCollection",
    "namedItem": {
      "!type": "fn(name: string) -> RadioNodeList|HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection/namedItem",
      "!doc": "Note that this version of namedItem() hide the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")."
    },
    "<i>": "RadioNodeList|HTMLElement"
  },
  "HTMLFormElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement",
    "!doc": "The HTMLFormElement interface provides methods to create and modify <form> elements; it inherits from properties and methods of the HTMLElement interface.",
    "!proto": "HTMLElement",
    "acceptCharset": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset",
      "!doc": "The HTMLFormElement.acceptCharset property represents a list of the supported character encodings for the given FORM element. This list can be comma- or space-separated."
    },
    "action": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action",
      "!doc": "The HTMLFormElement.action property represents the action of the <form> element."
    },
    "autocomplete": "string",
    "enctype": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype",
      "!doc": "The HTMLFormElement.enctype property represents the content type of the <form> element."
    },
    "encoding": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding",
      "!doc": "The HTMLFormElement.encoding property is an alternative name for the enctype element on the DOM HTMLFormElement object."
    },
    "method": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method",
      "!doc": "The HTMLFormElement.method represents the HTTP method used to submit the form."
    },
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name",
      "!doc": "The HTMLFormElement.name property represents the name of the current form element as a string."
    },
    "noValidate": "bool",
    "target": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target",
      "!doc": "The HTMLFormElement.target property represents the target of the action (i.e., the frame to render its output in)."
    },
    "elements": {
      "!type": "HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements",
      "!doc": "The HTMLFormElement.elements property returns an HTMLFormControlsCollection (HTML 4 HTMLCollection) of all the form controls contained in the FORM element, with the exception of input elements which have a type attribute of image."
    },
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length",
      "!doc": "The HTMLFormElement.length read-only property returns the number of controls in the <form> element."
    },
    "submit": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit",
      "!doc": "The HTMLFormElement.submit() method submits the form. This method does something similar to activating a submit button of the form."
    },
    "reset": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset",
      "!doc": "The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's reset button."
    },
    "checkValidity": "fn() -> bool",
    "requestAutocomplete": "fn()",
    "<i>": "nsISupports"
  },
  "HTMLFrameElement": {
    "!proto": "HTMLElement",
    "name": "string",
    "scrolling": "string",
    "src": "string",
    "frameBorder": "string",
    "longDesc": "string",
    "noResize": "bool",
    "contentDocument": "+Document",
    "contentWindow": "WindowProxy",
    "marginHeight": "string",
    "marginWidth": "string"
  },
  "HTMLFrameSetElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement",
    "!doc": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
    "!proto": "HTMLElement",
    "cols": "string",
    "rows": "string",
    "onafterprint": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
      "!doc": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window."
    },
    "onbeforeprint": "fn(+Event)",
    "onbeforeunload": {
      "!type": "OnBeforeUnloadEventHandler",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
      "!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
    },
    "onhashchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
      "!doc": "The hashchange event fires when a window's hash changes (see location.hash)."
    },
    "onlanguagechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
      "!doc": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages."
    },
    "onmessage": "fn(+Event)",
    "onoffline": "fn(+Event)",
    "ononline": "fn(+Event)",
    "onpagehide": "fn(+Event)",
    "onpageshow": "fn(+Event)",
    "onpopstate": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
      "!doc": "An event handler for the popstate event on the window."
    },
    "onstorage": "fn(+Event)",
    "onunload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
      "!doc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
    }
  },
  "HTMLHRElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement",
    "!doc": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
    "!proto": "HTMLElement",
    "align": "string",
    "color": "string",
    "noShade": "bool",
    "size": "string",
    "width": "string"
  },
  "HTMLHeadElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement",
    "!doc": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
    "!proto": "HTMLElement"
  },
  "HTMLHeadingElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement",
    "!doc": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.",
    "!proto": "HTMLElement",
    "align": "string"
  },
  "HTMLHtmlElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement",
    "!doc": "The HTMLHtmlElement interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the HTMLElement interface.",
    "!proto": "HTMLElement",
    "version": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement/version",
      "!doc": "Returns version information about the document type definition (DTD) of a document.  While this property is recognized by Mozilla, the return value for this property is always an empty string."
    }
  },
  "HTMLIFrameElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement",
    "!doc": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
    "!proto": "HTMLElement",
    "src": "string",
    "srcdoc": "string",
    "name": "string",
    "sandbox": "DOMSettableTokenList",
    "allowFullscreen": "bool",
    "width": "string",
    "height": "string",
    "referrerPolicy": "string",
    "contentDocument": "+Document",
    "contentWindow": {
      "!type": "WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow",
      "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
    },
    "align": "string",
    "scrolling": "string",
    "frameBorder": "string",
    "longDesc": "string",
    "marginHeight": "string",
    "marginWidth": "string",
    "getSVGDocument": "fn() -> +Document",
    "mozbrowser": "bool",
    "appManifestURL": "string",
    "setVisible": "fn(visible: bool)",
    "getVisible": "fn() -> DOMRequest",
    "setActive": "fn(active: bool)",
    "getActive": "fn() -> bool",
    "addNextPaintListener": "fn(listener: fn())",
    "removeNextPaintListener": "fn(listener: fn())",
    "sendMouseEvent": "fn(type: string, x: number, y: number, button: number, clickCount: number, modifiers: number)",
    "sendTouchEvent": "fn(type: string, identifiers: [number], x: [number], y: [number], rx: [number], ry: [number], rotationAngles: [number], forces: [number], count: number, modifiers: number)",
    "goBack": "fn()",
    "goForward": "fn()",
    "reload": "fn(hardReload?: bool)",
    "stop": "fn()",
    "download": "fn(url: string, options?: BrowserElementDownloadOptions) -> DOMRequest",
    "purgeHistory": "fn() -> DOMRequest",
    "getScreenshot": "fn(width: number, height: number, mimeType?: string) -> DOMRequest",
    "zoom": "fn(zoom: number)",
    "getCanGoBack": "fn() -> DOMRequest",
    "getCanGoForward": "fn() -> DOMRequest",
    "getContentDimensions": "fn() -> DOMRequest",
    "setInputMethodActive": "fn(isActive: bool) -> DOMRequest",
    "setNFCFocus": "fn(isFocus: bool)",
    "findAll": "fn(searchString: string, caseSensitivity: BrowserFindCaseSensitivity)",
    "findNext": "fn(direction: BrowserFindDirection)",
    "clearMatch": "fn()",
    "executeScript": "fn(script: string, options?: BrowserElementExecuteScriptOptions) -> DOMRequest",
    "getStructuredData": "fn() -> DOMRequest",
    "getWebManifest": "fn() -> DOMRequest",
    "allowedAudioChannels": "[BrowserElementAudioChannel]",
    "mute": "fn()",
    "unmute": "fn()",
    "getMuted": "fn() -> DOMRequest",
    "setVolume": "fn(volume: number)",
    "getVolume": "fn() -> DOMRequest"
  },
  "imgINotificationObserver": {},
  "imgIRequest": {},
  "MozChannel": {},
  "nsIStreamListener": {},
  "HTMLImageElement": {
    "!type": "fn(width?: number, height?: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement",
    "!doc": "The HTMLImageElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <img> elements.",
    "prototype": {
      "!proto": "HTMLElement",
      "alt": "string",
      "src": "string",
      "srcset": "string",
      "crossOrigin": "string",
      "useMap": "string",
      "referrerPolicy": "string",
      "isMap": "bool",
      "width": "number",
      "height": "number",
      "naturalWidth": "number",
      "naturalHeight": "number",
      "complete": "bool",
      "name": "string",
      "align": "string",
      "hspace": "number",
      "vspace": "number",
      "longDesc": "string",
      "border": "string",
      "sizes": "string",
      "currentSrc": "string",
      "lowsrc": "string",
      "x": "number",
      "y": "number"
    }
  },
  "Image": {
    "!type": "fn(width?: number, height?: number)",
    "prototype": {
      "!proto": "HTMLElement",
      "alt": "string",
      "src": "string",
      "srcset": "string",
      "crossOrigin": "string",
      "useMap": "string",
      "referrerPolicy": "string",
      "isMap": "bool",
      "width": "number",
      "height": "number",
      "naturalWidth": "number",
      "naturalHeight": "number",
      "complete": "bool",
      "name": "string",
      "align": "string",
      "hspace": "number",
      "vspace": "number",
      "longDesc": "string",
      "border": "string",
      "sizes": "string",
      "currentSrc": "string",
      "lowsrc": "string",
      "x": "number",
      "y": "number"
    }
  },
  "nsIControllers": {},
  "HTMLInputElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement",
    "!doc": "The HTMLInputElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of input elements.",
    "!proto": "HTMLElement",
    "accept": "string",
    "alt": "string",
    "autocomplete": "string",
    "autofocus": "bool",
    "defaultChecked": "bool",
    "checked": "bool",
    "disabled": "bool",
    "form": "HTMLFormElement",
    "files": "FileList",
    "formAction": "string",
    "formEnctype": "string",
    "formMethod": "string",
    "formNoValidate": "bool",
    "formTarget": "string",
    "height": "number",
    "indeterminate": "bool",
    "inputMode": "string",
    "list": "HTMLElement",
    "max": "string",
    "maxLength": "number",
    "min": "string",
    "multiple": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/multiple",
      "!doc": "The HTMLInputElement.multiple property indicates if an input can have more than one value. Firefox currently only supports multiple for <input type=\"file\">."
    },
    "name": "string",
    "pattern": "string",
    "placeholder": "string",
    "readOnly": "bool",
    "required": "bool",
    "size": "number",
    "src": "string",
    "step": "string",
    "type": "string",
    "defaultValue": "string",
    "value": "string",
    "valueAsDate": "Date",
    "valueAsNumber": "number",
    "width": "number",
    "stepUp": "fn(n?: number)",
    "stepDown": "fn(n?: number)",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "select": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select",
      "!doc": "The HTMLInputElement.select() method focuses an element and selects all the text in it. For instance:"
    },
    "selectionStart": "number",
    "selectionEnd": "number",
    "selectionDirection": "string",
    "setRangeText": "fn(replacement: string)",
    "align": "string",
    "useMap": "string",
    "setSelectionRange": {
      "!type": "fn(start: number, end: number, direction?: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange",
      "!doc": "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an <input> element."
    },
    "controllers": "nsIControllers",
    "textLength": "number",
    "mozGetFileNameArray": "fn() -> [string]",
    "mozSetFileNameArray": "fn(fileNames: [string])",
    "mozSetFileArray": "fn(files: [+File])",
    "ownerNumberControl": "HTMLInputElement",
    "mozIsTextField": "fn(aExcludePassword: bool) -> bool",
    "getAutocompleteInfo": "fn() -> AutocompleteInfo",
    "editor": "nsIEditor",
    "setUserInput": "fn(input: string)",
    "directory": "bool",
    "isFilesAndDirectoriesSupported": "bool",
    "getFilesAndDirectories": "fn() -> +Promise",
    "chooseDirectory": "fn()"
  },
  "HTMLLIElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement",
    "!doc": "The HTMLLIElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
    "!proto": "HTMLElement",
    "value": "number",
    "type": "string"
  },
  "HTMLLabelElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement",
    "!doc": "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits from HTMLElement.",
    "!proto": "HTMLElement",
    "form": "HTMLFormElement",
    "htmlFor": "string",
    "control": "HTMLElement"
  },
  "HTMLLegendElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement",
    "!doc": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
    "!proto": "HTMLElement",
    "form": "HTMLFormElement",
    "align": "string"
  },
  "HTMLLinkElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement",
    "!doc": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.",
    "!proto": "HTMLElement",
    "disabled": "bool",
    "href": "string",
    "crossOrigin": "string",
    "rel": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel",
      "!doc": "The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <link> element and the current document."
    },
    "relList": {
      "!type": "DOMTokenList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/relList",
      "!doc": "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <link> element and the current document."
    },
    "media": "string",
    "hreflang": "string",
    "type": "string",
    "sizes": "DOMSettableTokenList",
    "charset": "string",
    "rev": "string",
    "target": "string",
    "import": "+Document",
    "integrity": "string",
    "sheet": "StyleSheet"
  },
  "HTMLMapElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement",
    "!doc": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
    "!proto": "HTMLElement",
    "name": "string",
    "areas": "HTMLCollection"
  },
  "HTMLMediaElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement",
    "!doc": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related functionality that's common to both audio and video. The HTMLVideoElement and HTMLAudioElement elements inherit this interface. special properties and methods (beyond the properties and methods available for all children of HTMLElement), that are common to all media-related objects.",
    "!proto": "HTMLElement",
    "error": "MediaError",
    "src": "string",
    "currentSrc": "string",
    "crossOrigin": "string",
    "NETWORK_EMPTY": "number",
    "NETWORK_IDLE": "number",
    "NETWORK_LOADING": "number",
    "NETWORK_NO_SOURCE": "number",
    "networkState": "number",
    "preload": "string",
    "buffered": "TimeRanges",
    "load": "fn()",
    "canPlayType": "fn(type: string) -> string",
    "HAVE_NOTHING": "number",
    "HAVE_METADATA": "number",
    "HAVE_CURRENT_DATA": "number",
    "HAVE_FUTURE_DATA": "number",
    "HAVE_ENOUGH_DATA": "number",
    "readyState": "number",
    "seeking": "bool",
    "currentTime": "number",
    "fastSeek": "fn(time: number)",
    "duration": "number",
    "isEncrypted": "bool",
    "paused": "bool",
    "defaultPlaybackRate": "number",
    "playbackRate": "number",
    "played": "TimeRanges",
    "seekable": "TimeRanges",
    "ended": "bool",
    "autoplay": "bool",
    "loop": "bool",
    "play": "fn()",
    "pause": "fn()",
    "controls": "bool",
    "volume": "number",
    "muted": "bool",
    "defaultMuted": "bool",
    "audioTracks": "AudioTrackList",
    "videoTracks": "VideoTrackList",
    "textTracks": "TextTrackList",
    "addTextTrack": "fn(kind: TextTrackKind, label?: string, language?: string) -> TextTrack",
    "mozMediaSourceObject": "+MediaSource",
    "srcObject": "+MediaStream",
    "mozSrcObject": "+MediaStream",
    "mozPreservesPitch": "bool",
    "mozAutoplayEnabled": "bool",
    "mozMediaStatisticsShowing": "bool",
    "mozAllowCasting": "bool",
    "mozIsCasting": "bool",
    "mozCaptureStream": "fn() -> +MediaStream",
    "mozCaptureStreamUntilEnded": "fn() -> +MediaStream",
    "mozAudioCaptured": "bool",
    "mozGetMetadata": "fn() -> object",
    "mozFragmentEnd": "number",
    "mozAudioChannelType": "AudioChannel",
    "onmozinterruptbegin": "fn(+Event)",
    "onmozinterruptend": "fn(+Event)",
    "mediaKeys": "MediaKeys",
    "setMediaKeys": "fn(mediaKeys: MediaKeys) -> +Promise[value=void]",
    "onencrypted": "fn(+Event)",
    "computedVolume": "number",
    "computedMuted": "bool"
  },
  "MenuBuilder": {},
  "HTMLMenuElement": {
    "!proto": "HTMLElement",
    "type": "string",
    "label": "string",
    "compact": "bool",
    "sendShowEvent": "fn()",
    "createBuilder": "fn() -> MenuBuilder",
    "build": "fn(aBuilder: MenuBuilder)"
  },
  "HTMLMenuItemElement": {
    "!proto": "HTMLElement",
    "type": "string",
    "label": "string",
    "icon": "string",
    "disabled": "bool",
    "checked": "bool",
    "radiogroup": "string",
    "defaultChecked": "bool"
  },
  "HTMLMetaElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement",
    "!doc": "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
    "!proto": "HTMLElement",
    "name": "string",
    "httpEquiv": "string",
    "content": "string",
    "scheme": "string"
  },
  "HTMLMeterElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement",
    "!doc": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
    "!proto": "HTMLElement",
    "value": "number",
    "min": "number",
    "max": "number",
    "low": "number",
    "high": "number",
    "optimum": "number"
  },
  "HTMLModElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement",
    "!doc": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
    "!proto": "HTMLElement",
    "cite": "string",
    "dateTime": "string"
  },
  "HTMLOListElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement",
    "!doc": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
    "!proto": "HTMLElement",
    "reversed": "bool",
    "start": "number",
    "type": "string",
    "compact": "bool"
  },
  "HTMLObjectElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement",
    "!doc": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
    "!proto": "HTMLElement",
    "data": "string",
    "type": "string",
    "typeMustMatch": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/typeMustMatch",
      "!doc": "The HTMLObjectElement.typeMustMatch property is a Boolean reflects the typemustmatch attribute of the <object> element and indicates if the resouce linked by it must match the MIME type given by HTMLObjectElement.type in order for this resource to be used."
    },
    "name": "string",
    "useMap": "string",
    "form": "HTMLFormElement",
    "width": "string",
    "height": "string",
    "contentDocument": "+Document",
    "contentWindow": "WindowProxy",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "align": "string",
    "archive": "string",
    "code": "string",
    "declare": "bool",
    "hspace": "number",
    "standby": "string",
    "vspace": "number",
    "codeBase": "string",
    "codeType": "string",
    "border": "string",
    "getSVGDocument": "fn() -> +Document"
  },
  "HTMLOptGroupElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement",
    "!doc": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
    "!proto": "HTMLElement",
    "disabled": "bool",
    "label": "string"
  },
  "HTMLOptionElement": {
    "!type": "fn(text?: string, value?: string, defaultSelected?: bool, selected?: bool)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement",
    "!doc": "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface.",
    "prototype": {
      "!proto": "HTMLElement",
      "disabled": "bool",
      "form": "HTMLFormElement",
      "label": "string",
      "defaultSelected": "bool",
      "selected": "bool",
      "value": "string",
      "text": "string",
      "index": "number"
    }
  },
  "Option": {
    "!type": "fn(text?: string, value?: string, defaultSelected?: bool, selected?: bool)",
    "prototype": {
      "!proto": "HTMLElement",
      "disabled": "bool",
      "form": "HTMLFormElement",
      "label": "string",
      "defaultSelected": "bool",
      "selected": "bool",
      "value": "string",
      "text": "string",
      "index": "number"
    }
  },
  "HTMLOptionsCollection": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection",
    "!doc": "HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the \"options\" property of select.",
    "!proto": "HTMLCollection",
    "length": "number",
    "add": "fn(element: +HTMLOptionElement, before?: HTMLElement)",
    "remove": "fn(index: number)",
    "selectedIndex": "number"
  },
  "HTMLOutputElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement",
    "!doc": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
    "!proto": "HTMLElement",
    "htmlFor": "DOMSettableTokenList",
    "form": "HTMLFormElement",
    "name": "string",
    "type": "string",
    "defaultValue": "string",
    "value": "string",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)"
  },
  "HTMLParagraphElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement",
    "!doc": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
    "!proto": "HTMLElement",
    "align": "string"
  },
  "HTMLParamElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement",
    "!doc": "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.",
    "!proto": "HTMLElement",
    "name": "string",
    "value": "string",
    "type": "string",
    "valueType": "string"
  },
  "HTMLPictureElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement",
    "!doc": "The HTMLPictureElement interface represents a <picture> HTML element. It doesn't implement specific properties or methods.",
    "!proto": "HTMLElement"
  },
  "HTMLPreElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement",
    "!doc": "The HTMLPreElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating block of preformatted text.",
    "!proto": "HTMLElement",
    "width": "number"
  },
  "HTMLProgressElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement",
    "!doc": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
    "!proto": "HTMLElement",
    "value": "number",
    "max": "number",
    "position": "number"
  },
  "HTMLPropertiesCollection": {
    "!proto": "HTMLCollection",
    "namedItem": "fn(name: string) -> PropertyNodeList",
    "names": "DOMStringList",
    "<i>": "PropertyNodeList"
  },
  "PropertyNodeList": {
    "!proto": "NodeList",
    "getValues": "fn() -> PropertyValueArray"
  },
  "HTMLQuoteElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement",
    "!doc": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
    "!proto": "HTMLElement",
    "cite": "string"
  },
  "HTMLScriptElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement",
    "!doc": "HTML script elements expose the HTMLScriptElement interface, which provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <script> elements.",
    "!proto": "HTMLElement",
    "src": "string",
    "type": "string",
    "charset": "string",
    "async": "bool",
    "defer": "bool",
    "crossOrigin": "string",
    "text": "string",
    "event": "string",
    "htmlFor": "string",
    "integrity": "string"
  },
  "HTMLSelectElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement",
    "!doc": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
    "!proto": "HTMLElement",
    "autofocus": "bool",
    "autocomplete": "string",
    "disabled": "bool",
    "form": "HTMLFormElement",
    "multiple": "bool",
    "name": "string",
    "required": "bool",
    "size": "number",
    "type": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/type",
      "!doc": "The HTMLSelectElement.type read-only property returns the form control's type. The possible values are:"
    },
    "options": "HTMLOptionsCollection",
    "length": "number",
    "item": {
      "!type": "fn(index: number) -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/item",
      "!doc": "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in parameter, or null if there are none."
    },
    "namedItem": {
      "!type": "fn(name: string) -> +HTMLOptionElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/namedItem",
      "!doc": "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches."
    },
    "add": {
      "!type": "fn(element: +HTMLOptionElement, before?: HTMLElement)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/add",
      "!doc": "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element."
    },
    "remove": {
      "!type": "fn(index: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove",
      "!doc": "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element."
    },
    "selectedOptions": "HTMLCollection",
    "selectedIndex": "number",
    "value": "string",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": {
      "!type": "fn() -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity",
      "!doc": "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false."
    },
    "setCustomValidity": {
      "!type": "fn(error: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity",
      "!doc": "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error."
    },
    "<i>": "HTMLElement"
  },
  "HTMLShadowElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement",
    "!doc": "The HTMLShadowElement interface represents a <shadow> HTML Element, which is used in Shadow DOM.",
    "!proto": "HTMLElement",
    "olderShadowRoot": "ShadowRoot"
  },
  "HTMLSourceElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement",
    "!doc": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
    "!proto": "HTMLElement",
    "src": "string",
    "type": "string",
    "srcset": "string",
    "sizes": "string",
    "media": "string"
  },
  "HTMLSpanElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement",
    "!doc": "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
    "!proto": "HTMLElement"
  },
  "HTMLStyleElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement",
    "!doc": "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.",
    "!proto": "HTMLElement",
    "disabled": "bool",
    "media": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media",
      "!doc": "The HTMLSyleElement.media property specifies the intended destination medium for style information."
    },
    "type": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/type",
      "!doc": "The HTMLStyleElement.type read-only property returns the type of the current style."
    },
    "scoped": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped",
      "!doc": "The HTMLStyleElement.scoped property is a Boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true)."
    },
    "sheet": "StyleSheet"
  },
  "HTMLTableCaptionElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement",
    "!doc": "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
    "!proto": "HTMLElement",
    "align": "string"
  },
  "HTMLTableCellElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement",
    "!doc": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
    "!proto": "HTMLElement",
    "colSpan": "number",
    "rowSpan": "number",
    "headers": "string",
    "cellIndex": "number",
    "abbr": "string",
    "scope": "string",
    "align": "string",
    "axis": "string",
    "height": "string",
    "width": "string",
    "ch": "string",
    "chOff": "string",
    "noWrap": "bool",
    "vAlign": "string",
    "bgColor": "string"
  },
  "HTMLTableColElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement",
    "!doc": "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
    "!proto": "HTMLElement",
    "span": "number",
    "align": "string",
    "ch": "string",
    "chOff": "string",
    "vAlign": "string",
    "width": "string"
  },
  "HTMLTableElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement",
    "!doc": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
    "!proto": "HTMLElement",
    "caption": {
      "!type": "HTMLTableCaptionElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption",
      "!doc": "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, it can be null."
    },
    "createCaption": {
      "!type": "fn() -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createCaption",
      "!doc": "The HTMLTableElement.createCaption() method returns the caption for the table. If no caption element exists on the table, this method creates it, then returns it."
    },
    "deleteCaption": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteCaption",
      "!doc": "The HTMLTableElement.deleteCaption() method removes the caption from the table. If there is no caption associated with the table, this method does nothing."
    },
    "tHead": {
      "!type": "HTMLTableSectionElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead",
      "!doc": "The HTMLTableElement.tHead represents  the table's <thead> element. Its value can be null if there is no such element."
    },
    "createTHead": {
      "!type": "fn() -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead",
      "!doc": "The HTMLTableElement.createTHead()method returns the <thead> element association with the table, of type HTMLTableSectionElement. If there is no such element associated to the thable, this method creates it, then returns it."
    },
    "deleteTHead": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTHead",
      "!doc": "The HTMLTableElement.deleteTHead() removes a <thead> element from the table."
    },
    "tFoot": {
      "!type": "HTMLTableSectionElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot",
      "!doc": "The HTMLTableElement.tFoot property represents the table's <tfoot> element. Its value can be null if there is no such element."
    },
    "createTFoot": {
      "!type": "fn() -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTFoot",
      "!doc": "The HTMLTableElement.createTFoot() method returns the <tfoot> element associated with the table, of type HTMLTableSectionElement. If there is no footer for this table, this methods creates it, then returns it."
    },
    "deleteTFoot": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTFoot",
      "!doc": "The HTMLTableElement.deleteTFoot() method removes a <tfoot> element from the table."
    },
    "tBodies": {
      "!type": "HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tBodies",
      "!doc": "The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the table bodies."
    },
    "createTBody": "fn() -> HTMLElement",
    "rows": {
      "!type": "HTMLCollection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows",
      "!doc": "The HTMLTableElement.rows read-only property returns a live HTMLCollection of all the rows in the table. The rows included in the associated <thead>, <tfoot> and <tbody> elements."
    },
    "insertRow": {
      "!type": "fn(index?: number) -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow",
      "!doc": "The HTMLTableElement.insertRow() method inserts a new row in the table."
    },
    "deleteRow": {
      "!type": "fn(index: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteRow",
      "!doc": "The HTMLTableElement.deleteRow() method removes a row from the table. If the amount of rows to delete, specified by the parameter, is greater or equal to the number of available rows, or if it is negative and not equal to the special index -1, representing the last row of the table, the exception INDEX_SIZE_ERR is thrown."
    },
    "align": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/align",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "border": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/border",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "frame": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/frame",
      "!doc": "The HTMLTableElement.frame property represents which external table borders to render."
    },
    "rules": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rules",
      "!doc": "The HTMLTableElement.rules property represents which cell borders to render in the table."
    },
    "summary": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/summary",
      "!doc": "The HTMLTableElement.summary property represents the table description."
    },
    "width": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/width",
      "!doc": "Where width is a string representing the width in number of pixels or as a percentage value."
    },
    "bgColor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/bgColor",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "cellPadding": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/cellPadding",
      "!doc": "The HTMLTableElement.cellPadding property represents the padding around the individual cells of the table."
    },
    "cellSpacing": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/cellSpacing",
      "!doc": "The HTMLTableElement.cellSpacing represents the spacing around the individual cells of the table."
    }
  },
  "HTMLTableRowElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement",
    "!doc": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
    "!proto": "HTMLElement",
    "rowIndex": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/rowIndex",
      "!doc": "The HTMLTableRowElement.rowIndex property represents the position of a row in relation to the whole table."
    },
    "sectionRowIndex": "number",
    "cells": "HTMLCollection",
    "insertCell": {
      "!type": "fn(index?: number) -> HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell",
      "!doc": "The HTMLTableRowElement.insertCell() method inserts a new cell into a table row and returns a reference to the cell."
    },
    "deleteCell": "fn(index: number)",
    "align": "string",
    "ch": "string",
    "chOff": "string",
    "vAlign": "string",
    "bgColor": "string"
  },
  "HTMLTableSectionElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement",
    "!doc": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
    "!proto": "HTMLElement",
    "rows": "HTMLCollection",
    "insertRow": "fn(index?: number) -> HTMLElement",
    "deleteRow": "fn(index: number)",
    "align": "string",
    "ch": "string",
    "chOff": "string",
    "vAlign": "string"
  },
  "HTMLTemplateElement": {
    "!proto": "HTMLElement",
    "content": "+DocumentFragment"
  },
  "nsIEditor": {},
  "MozControllers": {},
  "HTMLTextAreaElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement",
    "!doc": "The HTMLTextAreaElement interface, which provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <textarea> elements.",
    "!proto": "HTMLElement",
    "autofocus": "bool",
    "cols": "number",
    "disabled": "bool",
    "form": "HTMLFormElement",
    "maxLength": "number",
    "name": "string",
    "placeholder": "string",
    "readOnly": "bool",
    "required": "bool",
    "rows": "number",
    "wrap": "string",
    "type": "string",
    "defaultValue": "string",
    "value": "string",
    "textLength": "number",
    "willValidate": "bool",
    "validity": "ValidityState",
    "validationMessage": "string",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "select": "fn()",
    "selectionStart": "number",
    "selectionEnd": "number",
    "selectionDirection": "string",
    "setRangeText": "fn(replacement: string)",
    "setSelectionRange": "fn(start: number, end: number, direction?: string)",
    "controllers": "MozControllers",
    "editor": "nsIEditor",
    "setUserInput": "fn(input: string)"
  },
  "HTMLTimeElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement",
    "!doc": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
    "!proto": "HTMLElement",
    "dateTime": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime",
      "!doc": "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value."
    }
  },
  "HTMLTitleElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement",
    "!doc": "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
    "!proto": "HTMLElement",
    "text": "string"
  },
  "HTMLTrackElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement",
    "!doc": "The HTMLTrackElement interface provides access to the properties of <track> elements, as well as methods to manipulate them.",
    "!proto": "HTMLElement",
    "kind": "string",
    "src": "string",
    "srclang": "string",
    "label": "string",
    "default": "bool",
    "NONE": "number",
    "LOADING": "number",
    "LOADED": "number",
    "ERROR": "number",
    "readyState": "number",
    "track": "TextTrack"
  },
  "HTMLUListElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement",
    "!doc": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
    "!proto": "HTMLElement",
    "compact": "bool",
    "type": "string"
  },
  "HTMLVideoElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement",
    "!doc": "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
    "!proto": "HTMLMediaElement",
    "width": "number",
    "height": "number",
    "videoWidth": "number",
    "videoHeight": "number",
    "poster": "string",
    "mozParsedFrames": "number",
    "mozDecodedFrames": "number",
    "mozPresentedFrames": "number",
    "mozPaintedFrames": "number",
    "mozFrameDelay": "number",
    "mozHasAudio": "bool",
    "mozUseScreenWakeLock": "bool",
    "getVideoPlaybackQuality": {
      "!type": "fn() -> VideoPlaybackQuality",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality",
      "!doc": "The HTMLVideoElement.getVideoPlaybackQuality() creates and returns a VideoPlaybackQuality object containing metrics about the current quality of the video restitution."
    }
  },
  "HashChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: HashChangeEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent",
    "!doc": "The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).",
    "prototype": {
      "!proto": "Event.prototype",
      "oldURL": "string",
      "newURL": "string",
      "initHashChangeEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, oldURLArg: string, newURLArg: string)"
    }
  },
  "Headers": {
    "!type": "fn(init?: HeadersInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers",
    "!doc": "The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.",
    "prototype": {
      "append": {
        "!type": "fn(name: string, value: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers/append",
        "!doc": "The append() method of the Headers interface appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist."
      },
      "delete": {
        "!type": "fn(name: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers/delete",
        "!doc": "The delete() method of the Headers interface deletes a header from the current Headers object."
      },
      "get": {
        "!type": "fn(name: string) -> string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers/get",
        "!doc": "The get() method of the Headers interface returns the first value of a given header from within a Headers object. If the requested header doesn't exist in the Headers object, the call returns null."
      },
      "getAll": {
        "!type": "fn(name: string) -> [string]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers/getAll",
        "!doc": "The getAll() method of the Headers interface returns an array of all the values of a header within a Headers object with a given name. If the requested header doesn't exist in the Headers object, it returns an empty array."
      },
      "has": {
        "!type": "fn(name: string) -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers/has",
        "!doc": "The has() method of the Headers interface returns a boolean stating whether a Headers object contains a certain header."
      },
      "set": {
        "!type": "fn(name: string, value: string)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Headers/set",
        "!doc": "The set() method of the Headers interface sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist."
      },
      "guard": "HeadersGuardEnum"
    }
  },
  "History": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/History",
    "!doc": "The History interface allows to manipulate the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/History/length",
      "!doc": "The History.length read-only property returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1."
    },
    "scrollRestoration": "ScrollRestoration",
    "state": "?",
    "go": "fn(delta?: number)",
    "back": "fn()",
    "forward": "fn()",
    "pushState": "fn(data: ?, title: string, url?: string)",
    "replaceState": "fn(data: ?, title: string, url?: string)",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "IDBCursor": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor",
    "!doc": "The IDBCursor interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.",
    "source": {
      "!type": "IDBObjectStore|IDBIndex",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/source",
      "!doc": "The source property of the IDBCursor interface returns the IDBObjectStore or IDBIndex that the cursor is iterating over. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active."
    },
    "direction": {
      "!type": "IDBCursorDirection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/direction",
      "!doc": "The direction property of the IDBCursor interface is a DOMString that returns the direction of traversal of the cursor (set using IDBObjectStore.openCursor for example). See the Values section below for possible values."
    },
    "key": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/key",
      "!doc": "The key property of the IDBCursor interface returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type."
    },
    "primaryKey": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/primaryKey",
      "!doc": "The primaryKey property of the IDBCursor interface returns the cursor's current effective key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type."
    },
    "update": {
      "!type": "fn(value: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/update",
      "!doc": "An IDBRequest object on which subsequent events related to this operation are fired."
    },
    "advance": {
      "!type": "fn(count: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/advance",
      "!doc": "The advance() method of the IDBCursor interface sets the number times a cursor should move its position forward."
    },
    "continue": {
      "!type": "fn(key?: ?)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continue",
      "!doc": "The continue() method of the IDBCursor interface advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter. If no key is specified, the cursor advances to the immediate next position, based on the its direction."
    },
    "delete": {
      "!type": "fn() -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete",
      "!doc": "The delete() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. Once the record is deleted, the cursor's value is set to null."
    }
  },
  "IDBCursorWithValue": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue",
    "!doc": "The IDBCursorWithValue interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.",
    "!proto": "IDBCursor",
    "value": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue/value",
      "!doc": "The value property of the IDBCursorWithValue interface returns the value of the current cursor, whatever that is."
    }
  },
  "IDBDatabase": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase",
    "!doc": "The IDBDatabase interface of the IndexedDB API provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.",
    "!proto": "EventTarget",
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name",
      "!doc": "The name property of the IDBDatabase interface is a DOMString that contains the name of the connected database."
    },
    "version": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version",
      "!doc": "The version property of the IDBDatabase interface is a 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string."
    },
    "objectStoreNames": {
      "!type": "DOMStringList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames",
      "!doc": "The objectStoreNames property of the IDBDatabase interface is a DOMStringList containing a list of the names of the object stores currently in the connected database."
    },
    "createObjectStore": {
      "!type": "fn(name: string, optionalParameters?: IDBObjectStoreParameters) -> IDBObjectStore",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore",
      "!doc": "The createObjectStore() method of the IDBDatabase interface creates and returns a new object store or index."
    },
    "deleteObjectStore": {
      "!type": "fn(name: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/deleteObjectStore",
      "!doc": "The deleteObjectStore() method of the IDBDatabase interface destroys the object store with the given name in the connected database, along with any indexes that reference it."
    },
    "transaction": {
      "!type": "fn(storeNames: string, mode?: IDBTransactionMode) -> IDBTransaction",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/transaction",
      "!doc": "The transaction method of the IDBDatabase interface immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store."
    },
    "close": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close",
      "!doc": "The close() method of the IDBDatabase interface returns immediately and closes the connection in a separate thread."
    },
    "onabort": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort",
      "!doc": "The onabort event handler of the IDBDatabase interface handles the abort event, fired when attempted access to the database is aborted."
    },
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror",
      "!doc": "The onerror event handler of the IDBDatabase interface handles the error event, fired when access to the database fails."
    },
    "onversionchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange",
      "!doc": "The onversionchange event handler of the IDBDatabase interface handles the versionchange event, fired when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase) was requested elsewhere (most probably in another window/tab on the same computer)."
    },
    "storage": "StorageType",
    "createMutableFile": "fn(name: string, type?: string) -> IDBRequest",
    "mozCreateFileHandle": "fn(name: string, type?: string) -> IDBRequest"
  },
  "IDBFactory": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBFactory",
    "!doc": "The IDBFactory interface of the IndexedDB API lets applications asynchronously access the indexed databases. The object that implements the interface is window.indexedDB. You open — that is, create and access — and delete a database with this object, and not directly with IDBFactory.",
    "open": {
      "!type": "fn(name: string, version: number) -> IDBOpenDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open",
      "!doc": "The open() method of the IDBFactory interface requests opening a connection to a database."
    },
    "deleteDatabase": {
      "!type": "fn(name: string, options?: IDBOpenDBOptions) -> IDBOpenDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase",
      "!doc": "The deleteDatabase() method of the IDBFactory interface requests the deletion of a database. The method returns an IDBOpenDBRequest object immediately, and performs the deletion operation asynchronously."
    },
    "cmp": {
      "!type": "fn(first: ?, second: ?) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp",
      "!doc": "The cmp() method of the IDBFactory interface compares two values as keys to determine equality and ordering for IndexedDB operations, such as storing and iterating."
    },
    "openForPrincipal": "fn(principal: Principal, name: string, version: number) -> IDBOpenDBRequest",
    "deleteForPrincipal": "fn(principal: Principal, name: string, options?: IDBOpenDBOptions) -> IDBOpenDBRequest"
  },
  "IDBFileHandle": {
    "!proto": "EventTarget",
    "mutableFile": "IDBMutableFile",
    "fileHandle": "IDBMutableFile",
    "mode": "FileMode",
    "active": "bool",
    "location": "number",
    "getMetadata": "fn(parameters?: IDBFileMetadataParameters) -> IDBFileRequest",
    "readAsArrayBuffer": "fn(size: number) -> IDBFileRequest",
    "readAsText": "fn(size: number, encoding?: string) -> IDBFileRequest",
    "write": "fn(value: string) -> IDBFileRequest",
    "append": "fn(value: string) -> IDBFileRequest",
    "truncate": "fn(size?: number) -> IDBFileRequest",
    "flush": "fn() -> IDBFileRequest",
    "abort": "fn()",
    "oncomplete": "fn(+Event)",
    "onabort": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "IDBFileRequest": {
    "!proto": "DOMRequest",
    "fileHandle": "IDBFileHandle",
    "lockedFile": "IDBFileHandle",
    "onprogress": "fn(+Event)"
  },
  "IDBIndex": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex",
    "!doc": "The IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.",
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name",
      "!doc": "The name property of the IDBIndex interface returns the name of the current index."
    },
    "objectStore": {
      "!type": "IDBObjectStore",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore",
      "!doc": "The objectStore property of the IDBIndex interface returns the name of the object store referenced by the current index."
    },
    "keyPath": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath",
      "!doc": "The keyPath property of the IDBIndex interface returns the key path of the current index. If null, this index is not auto-populated."
    },
    "multiEntry": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry",
      "!doc": "The multiEntry property of the IDBIndex interface returns a boolean value that affects how the index behaves when the result of evaluating the index's key path yields an array."
    },
    "unique": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique",
      "!doc": "The unique property returns a boolean that states whether the index allows duplicate keys or not."
    },
    "locale": "string",
    "isAutoLocale": "bool",
    "openCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor",
      "!doc": "The openCursor() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range."
    },
    "openKeyCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor",
      "!doc": "The openKeyCursor() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index."
    },
    "get": {
      "!type": "fn(key: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get",
      "!doc": "The get() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is set to an IDBKeyRange."
    },
    "getKey": {
      "!type": "fn(key: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey",
      "!doc": "The getKey() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is set to an IDBKeyRange."
    },
    "count": {
      "!type": "fn(key?: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count",
      "!doc": "The count() method of the IDBIndex interface returns an IDBRequest object, and in a separate thread, returns the number of records within a key range."
    },
    "mozGetAll": "fn(key?: ?, limit?: number) -> IDBRequest",
    "mozGetAllKeys": "fn(key?: ?, limit?: number) -> IDBRequest",
    "getAll": {
      "!type": "fn(key?: ?, limit?: number) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll",
      "!doc": "The proposed getAll() method of the IDBIndex interface would instantly retrieve all objects inside an IDBIndex, setting them as the result of the request object."
    },
    "getAllKeys": {
      "!type": "fn(key?: ?, limit?: number) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys",
      "!doc": "The proposed getAllKeys() method of the IDBIndex interface would instantly retrieve the keys of all objects inside an object store, setting them as the result of the request object."
    }
  },
  "IDBKeyRange": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange",
    "!doc": "The IDBKeyRange interface of the IndexedDB API represents a continuous interval over some data type that is used for keys. Records can be retrieved from IDBObjectStore and IDBIndex objects using keys or a range of keys. You can limit the range using lower and upper bounds. For example, you can iterate over all values of a key in the value range A–Z.",
    "lower": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lower",
      "!doc": "The lower property of the IDBKeyRange interface returns the lower bound of the key range."
    },
    "upper": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upper",
      "!doc": "The upper property of the IDBKeyRange interface returns the upper bound of the key range."
    },
    "lowerOpen": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerOpen",
      "!doc": "The lowerOpen property of the IDBKeyRange interface returns a boolean indicating whether the lower-bound value is included in the key range."
    },
    "upperOpen": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperOpen",
      "!doc": "The upperOpen property of the IDBKeyRange interface returns a boolean indicating whether the upper-bound value is included in the key range."
    },
    "only": {
      "!type": "fn(value: ?) -> IDBKeyRange",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/only",
      "!doc": "The only() method of the IDBKeyRange interface creates a new key range containing a single value."
    },
    "lowerBound": {
      "!type": "fn(lower: ?, open?: bool) -> IDBKeyRange",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerBound",
      "!doc": "The lowerBound() method of the IDBKeyRange interface creates a new key range with only a lower bound."
    },
    "upperBound": {
      "!type": "fn(upper: ?, open?: bool) -> IDBKeyRange",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperBound",
      "!doc": "The upperBound() method of the IDBKeyRange interface creates a new upper-bound key range."
    },
    "bound": {
      "!type": "fn(lower: ?, upper: ?, lowerOpen?: bool, upperOpen?: bool) -> IDBKeyRange",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/bound",
      "!doc": "The bound() method of the IDBKeyRange interface creates a new key range with upper and lower bounds."
    }
  },
  "IDBLocaleAwareKeyRange": {
    "!proto": "IDBKeyRange",
    "bound": "fn(lower: ?, upper: ?, lowerOpen?: bool, upperOpen?: bool) -> IDBLocaleAwareKeyRange"
  },
  "IDBMutableFile": {
    "!proto": "EventTarget",
    "name": "string",
    "type": "string",
    "database": "IDBDatabase",
    "open": "fn(mode?: FileMode) -> IDBFileHandle",
    "getFile": "fn() -> DOMRequest",
    "onabort": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "IDBObjectStore": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore",
    "!doc": "The IDBObjectStore interface of the IndexedDB API represents an object store in a database. Records within an object store are sorted according to their keys. This sorting enables fast insertion, look-up, and ordered retrieval.",
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name",
      "!doc": "The name property of the IDBObjectStore interface returns the name of this object store."
    },
    "keyPath": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath",
      "!doc": "The keyPath property of the IDBObjectStore interface returns the key path of this object store."
    },
    "indexNames": {
      "!type": "DOMStringList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames",
      "!doc": "The indexNames property of the IDBObjectStore interface returns a list of the names of indexes on objects in this object store."
    },
    "transaction": {
      "!type": "IDBTransaction",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction",
      "!doc": "The transaction property of the IDBObjectStore interface returns the transaction object to which this object store belongs."
    },
    "autoIncrement": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement",
      "!doc": "The autoIncrement property of the IDBObjectStore interface returns the value of the auto increment flag for this object store."
    },
    "put": {
      "!type": "fn(value: ?, key?: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put",
      "!doc": "The put() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value and stores the cloned value in the object store. This is for adding new records, or updating existing records in an object store when the transaction's mode is readwrite."
    },
    "add": {
      "!type": "fn(value: ?, key?: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add",
      "!doc": "The add() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store."
    },
    "delete": {
      "!type": "fn(key: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete",
      "!doc": "The delete() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, deletes the current object store. This is for deleting individual records out of an object store."
    },
    "get": {
      "!type": "fn(key: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get",
      "!doc": "The get() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the object store selected by the specified key. This is for retrieving specific records from an object store."
    },
    "clear": {
      "!type": "fn() -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear",
      "!doc": "The clear() method of the IDBObjectStore interface creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all the current data out of an object store."
    },
    "openCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor",
      "!doc": "The openCursor() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store with a cursor."
    },
    "createIndex": {
      "!type": "fn(name: string, keyPath: string, optionalParameters?: IDBIndexParameters) -> IDBIndex",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex",
      "!doc": "The createIndex() method of the IDBObjectStore interface creates and returns a new IDBIndex object in the connected database."
    },
    "index": {
      "!type": "fn(name: string) -> IDBIndex",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index",
      "!doc": "The index() method of the IDBObjectStore interface opens a named index in the current object store, after which it can be used to, for example, return a series of records sorted by that index using a cursor."
    },
    "deleteIndex": {
      "!type": "fn(indexName: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex",
      "!doc": "The deleteIndex() method of the IDBObjectStore interface destroys the index with the specified name in the connected database, used during a version upgrade."
    },
    "count": {
      "!type": "fn(key?: ?) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count",
      "!doc": "The count() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store."
    },
    "mozGetAll": "fn(key?: ?, limit?: number) -> IDBRequest",
    "getAll": "fn(key?: ?, limit?: number) -> IDBRequest",
    "getAllKeys": "fn(key?: ?, limit?: number) -> IDBRequest",
    "openKeyCursor": {
      "!type": "fn(range?: ?, direction?: IDBCursorDirection) -> IDBRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor",
      "!doc": "The openKeyCursor() method of the IDBObjectStore interface returns an IDBRequest object whose result will be set to an IDBCursorWithValue that can be used to iterate through matching results. Used for iterating through an object store with a key cursor."
    }
  },
  "IDBOpenDBRequest": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest",
    "!doc": "The IDBOpenDBRequest interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using IDBFactory.open and IDBFactory.deleteDatabase), using specific event handler attributes.",
    "!proto": "IDBRequest",
    "onblocked": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onblocked",
      "!doc": "The IDBOpenDBRequest.onblocked event handler is the event handler for the blocked event. This event is triggered when the upgradeneeded should be triggered because of a version change but the database is still in use (that is, not closed) somewhere, even after the versionchange event was sent."
    },
    "onupgradeneeded": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onupgradeneeded",
      "!doc": "The onupgradeneeded property of the IDBOpenDBRequest interface is the event handler for the upgradeneeded event, triggered when a database of a bigger version number than the existing stored database is loaded."
    }
  },
  "IDBRequest": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest",
    "!doc": "The IDBRequest interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes. Each reading and writing operation on a database is done using a request.",
    "!proto": "EventTarget",
    "result": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/result",
      "!doc": "The result property of the IDBRequest interface returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown."
    },
    "error": {
      "!type": "+DOMError",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/error",
      "!doc": "The error property of the IDBRequest interface returns the error in the event of an unsuccessful request."
    },
    "source": {
      "!type": "IDBObjectStore|IDBIndex|IDBCursor",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/source",
      "!doc": "The source property of the IDBRequest interface returns the source of the request, such as an Index or an object store. If no source exists (such as when calling indexedDB.open), it returns null."
    },
    "transaction": {
      "!type": "IDBTransaction",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/transaction",
      "!doc": "The transaction property of the IDBRequest interface returns the transaction for the request, that is, the transaction the request is being made inside."
    },
    "readyState": {
      "!type": "IDBRequestReadyState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/readyState",
      "!doc": "The readyState property of the IDBRequest interface returns the state of the request."
    },
    "onsuccess": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/onsuccess",
      "!doc": "The onsuccess event handler of the IDBRequest interface handles the success event, fired when the result of a request is successfully returned."
    },
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/onerror",
      "!doc": "The onerror event handler of the IDBRequest interface handles the error event, fired when a request returns an error."
    }
  },
  "IDBTransaction": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction",
    "!doc": "The IDBTransaction interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You actually use IDBDatabase to start transactions and IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and access an IDBObjectStore to make a request. You can also use it to abort transactions.",
    "!proto": "EventTarget",
    "mode": {
      "!type": "IDBTransactionMode",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode",
      "!doc": "The mode property of the IDBTransaction interface returns the current mode for accessing the data in the object stores in the scope of the transaction (i.e. is the mode to be read-only, or do you want to write to the object stores?) The default value is readonly."
    },
    "db": {
      "!type": "IDBDatabase",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db",
      "!doc": "The db property of the IDBTransaction interface returns the database connection with which this transaction is associated."
    },
    "error": {
      "!type": "+DOMError",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error",
      "!doc": "The error property of the IDBTransaction interface returns a description of the error thrown in the event of an unsuccessful transaction."
    },
    "objectStore": {
      "!type": "fn(name: string) -> IDBObjectStore",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStore",
      "!doc": "The objectStore() method of the IDBTransaction interface returns an object store that has already been added to the scope of this transaction."
    },
    "abort": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort",
      "!doc": "The abort method of the IDBTransaction interface rolls back all the changes to objects in the database associated with this transaction."
    },
    "onabort": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort",
      "!doc": "The onabort event handler of the IDBTransaction interface handles the abort event, fired, when the current transaction is aborted via the IDBTransaction.abort method."
    },
    "oncomplete": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete",
      "!doc": "The oncomplete event handler of the IDBTransaction interface handles the complete event, fired when the transaction successfully completes."
    },
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror",
      "!doc": "The onerror event handler of the IDBTransaction interface handles the error event, fired when the transaction returns an error."
    },
    "objectStoreNames": "DOMStringList"
  },
  "IDBVersionChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: IDBVersionChangeEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent",
    "!doc": "The IDBVersionChangeEvent interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.",
    "prototype": {
      "!proto": "Event.prototype",
      "oldVersion": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/oldVersion",
        "!doc": "The oldVersion property of the IDBVersionChangeEvent interface returns the old version number of the database."
      },
      "newVersion": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/newVersion",
        "!doc": "The newVersion property of the IDBVersionChangeEvent interface returns the new version number of the database."
      }
    }
  },
  "IccCardLockError": {
    "!type": "fn(errorName: string, retryCount: number)",
    "prototype": {
      "!proto": "DOMError.prototype",
      "retryCount": "number"
    }
  },
  "IccChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: IccChangeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "iccId": "string"
    }
  },
  "ImageBitmap": {
    "width": "number",
    "height": "number",
    "close": "fn()"
  },
  "ImageBitmapRenderingContext": {
    "transferImageBitmap": "fn(bitmap: ImageBitmap)"
  },
  "ImageCapture": {
    "!type": "fn(track: VideoStreamTrack)",
    "prototype": {
      "!proto": "EventTarget",
      "videoStreamTrack": "VideoStreamTrack",
      "onphoto": "fn(+Event)",
      "onerror": "fn(+Event)",
      "takePhoto": "fn()"
    }
  },
  "ImageCaptureErrorEvent": {
    "!type": "fn(type: string, imageCaptureErrorInitDict?: ImageCaptureErrorEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "imageCaptureError": "ImageCaptureError"
    }
  },
  "ImageData": {
    "!type": "fn(data: Uint8ClampedArray, sw: number, sh?: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ImageData",
    "!doc": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().",
    "prototype": {
      "width": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ImageData/width",
        "!doc": "The readonly ImageData.width property returns the number of pixels per row in the image data object."
      },
      "height": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ImageData/height",
        "!doc": "The readonly ImageData.height property returns the number of rows in the image data object."
      },
      "data": {
        "!type": "Uint8ClampedArray",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ImageData/data",
        "!doc": "The readonly ImageData.data property returns a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included)."
      }
    }
  },
  "InputEvent": {
    "!type": "fn(type: string, eventInitDict?: InputEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/InputEvent",
    "!doc": "The InputEvent interface represents an event notifying of editable content change.",
    "prototype": {
      "!proto": "UIEvent.prototype",
      "isComposing": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing",
        "!doc": "The InputEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend."
      }
    }
  },
  "MozInputMethod": {
    "!proto": "EventTarget",
    "setActive": "fn(isActive: bool)",
    "mgmt": "MozInputMethodManager",
    "oninputcontextchange": "fn(+Event)",
    "inputcontext": "MozInputContext",
    "addInput": "fn(inputId: string, inputManifest: MozInputMethodInputManifest) -> +Promise[value=void]",
    "removeInput": "fn(id: string) -> +Promise[value=void]",
    "removeFocus": "fn()",
    "setValue": "fn(value: string)",
    "setSelectedOption": "fn(index: number)",
    "setSelectedOptions": "fn(indexes: [number])"
  },
  "MozInputMethodManager": {
    "!proto": "EventTarget",
    "showAll": "fn()",
    "next": "fn()",
    "supportsSwitching": "fn() -> bool",
    "hide": "fn()",
    "setSupportsSwitchingTypes": "fn(types: [MozInputMethodInputContextInputTypes])",
    "oninputcontextfocus": "fn(+Event)",
    "oninputcontextblur": "fn(+Event)",
    "onshowallrequest": "fn(+Event)",
    "onnextrequest": "fn(+Event)",
    "onaddinputrequest": "fn(+Event)",
    "onremoveinputrequest": "fn(+Event)"
  },
  "MozInputContextFocusEventDetail": {
    "type": "MozInputMethodInputContextTypes",
    "inputType": "MozInputMethodInputContextInputTypes",
    "value": "string",
    "choices": "MozInputContextChoicesInfo",
    "min": "string",
    "max": "string"
  },
  "MozInputRegistryEventDetail": {
    "manifestURL": "string",
    "inputId": "string",
    "inputManifest": "MozInputMethodInputManifest",
    "waitUntil": "fn(p: +Promise)"
  },
  "MozInputContext": {
    "!proto": "EventTarget",
    "type": "MozInputMethodInputContextTypes",
    "inputType": "MozInputMethodInputContextInputTypes",
    "inputMode": "string",
    "lang": "string",
    "getText": "fn(offset?: number, length?: number) -> +Promise[value=string]",
    "selectionStart": "number",
    "selectionEnd": "number",
    "text": "string",
    "textBeforeCursor": "string",
    "textAfterCursor": "string",
    "setSelectionRange": "fn(start: number, length: number) -> +Promise[value=bool]",
    "onselectionchange": "fn(+Event)",
    "replaceSurroundingText": "fn(text: string, offset?: number, length?: number) -> +Promise[value=bool]",
    "deleteSurroundingText": "fn(offset: number, length: number) -> +Promise[value=bool]",
    "onsurroundingtextchange": "fn(+Event)",
    "sendKey": "fn(dictOrKeyCode: MozInputMethodRequiredKeyboardEventDict, charCode?: number, modifiers?: number, repeat?: bool) -> +Promise[value=bool]",
    "keydown": "fn(dict: MozInputMethodRequiredKeyboardEventDict) -> +Promise[value=bool]",
    "keyup": "fn(dict: MozInputMethodRequiredKeyboardEventDict) -> +Promise[value=bool]",
    "setComposition": "fn(text: string, cursor?: number, clauses?: [CompositionClauseParameters], dict?: MozInputMethodKeyboardEventDict) -> +Promise[value=bool]",
    "endComposition": "fn(text?: string, dict?: MozInputMethodKeyboardEventDict) -> +Promise[value=bool]"
  },
  "MozInputContextSelectionChangeEventDetail": {
    "ownAction": "bool",
    "selectionStart": "number",
    "selectionEnd": "number"
  },
  "MozInputContextSurroundingTextChangeEventDetail": {
    "ownAction": "bool",
    "text": "string",
    "textBeforeCursor": "string",
    "textAfterCursor": "string"
  },
  "InputPort": {
    "!proto": "EventTarget",
    "id": "string",
    "stream": "+MediaStream",
    "connected": "bool",
    "onconnect": "fn(+Event)",
    "ondisconnect": "fn(+Event)"
  },
  "InputPortManager": {
    "getInputPorts": "fn() -> +Promise"
  },
  "MozInterAppConnection": {
    "!type": "fn(keyword: string, publisher: string, subsriber: string)",
    "prototype": {
      "keyword": "string",
      "publisher": "string",
      "subscriber": "string",
      "cancel": "fn()"
    }
  },
  "MozInterAppConnectionRequest": {
    "!type": "fn(keyword: string, port: +MozInterAppMessagePort, from: string)",
    "prototype": {
      "keyword": "string",
      "port": "+MozInterAppMessagePort",
      "from": "string"
    }
  },
  "MozInterAppMessagePort": {
    "!type": "fn(messagePortID: string)",
    "prototype": {
      "!proto": "EventTarget",
      "postMessage": "fn(message: ?)",
      "start": "fn()",
      "close": "fn()",
      "onmessage": "fn(+Event)",
      "onclose": "fn(+Event)"
    }
  },
  "KeyEvent": {
    "DOM_VK_CANCEL": "number",
    "DOM_VK_HELP": "number",
    "DOM_VK_BACK_SPACE": "number",
    "DOM_VK_TAB": "number",
    "DOM_VK_CLEAR": "number",
    "DOM_VK_RETURN": "number",
    "DOM_VK_SHIFT": "number",
    "DOM_VK_CONTROL": "number",
    "DOM_VK_ALT": "number",
    "DOM_VK_PAUSE": "number",
    "DOM_VK_CAPS_LOCK": "number",
    "DOM_VK_KANA": "number",
    "DOM_VK_HANGUL": "number",
    "DOM_VK_EISU": "number",
    "DOM_VK_JUNJA": "number",
    "DOM_VK_FINAL": "number",
    "DOM_VK_HANJA": "number",
    "DOM_VK_KANJI": "number",
    "DOM_VK_ESCAPE": "number",
    "DOM_VK_CONVERT": "number",
    "DOM_VK_NONCONVERT": "number",
    "DOM_VK_ACCEPT": "number",
    "DOM_VK_MODECHANGE": "number",
    "DOM_VK_SPACE": "number",
    "DOM_VK_PAGE_UP": "number",
    "DOM_VK_PAGE_DOWN": "number",
    "DOM_VK_END": "number",
    "DOM_VK_HOME": "number",
    "DOM_VK_LEFT": "number",
    "DOM_VK_UP": "number",
    "DOM_VK_RIGHT": "number",
    "DOM_VK_DOWN": "number",
    "DOM_VK_SELECT": "number",
    "DOM_VK_PRINT": "number",
    "DOM_VK_EXECUTE": "number",
    "DOM_VK_PRINTSCREEN": "number",
    "DOM_VK_INSERT": "number",
    "DOM_VK_DELETE": "number",
    "DOM_VK_0": "number",
    "DOM_VK_1": "number",
    "DOM_VK_2": "number",
    "DOM_VK_3": "number",
    "DOM_VK_4": "number",
    "DOM_VK_5": "number",
    "DOM_VK_6": "number",
    "DOM_VK_7": "number",
    "DOM_VK_8": "number",
    "DOM_VK_9": "number",
    "DOM_VK_COLON": "number",
    "DOM_VK_SEMICOLON": "number",
    "DOM_VK_LESS_THAN": "number",
    "DOM_VK_EQUALS": "number",
    "DOM_VK_GREATER_THAN": "number",
    "DOM_VK_QUESTION_MARK": "number",
    "DOM_VK_AT": "number",
    "DOM_VK_A": "number",
    "DOM_VK_B": "number",
    "DOM_VK_C": "number",
    "DOM_VK_D": "number",
    "DOM_VK_E": "number",
    "DOM_VK_F": "number",
    "DOM_VK_G": "number",
    "DOM_VK_H": "number",
    "DOM_VK_I": "number",
    "DOM_VK_J": "number",
    "DOM_VK_K": "number",
    "DOM_VK_L": "number",
    "DOM_VK_M": "number",
    "DOM_VK_N": "number",
    "DOM_VK_O": "number",
    "DOM_VK_P": "number",
    "DOM_VK_Q": "number",
    "DOM_VK_R": "number",
    "DOM_VK_S": "number",
    "DOM_VK_T": "number",
    "DOM_VK_U": "number",
    "DOM_VK_V": "number",
    "DOM_VK_W": "number",
    "DOM_VK_X": "number",
    "DOM_VK_Y": "number",
    "DOM_VK_Z": "number",
    "DOM_VK_WIN": "number",
    "DOM_VK_CONTEXT_MENU": "number",
    "DOM_VK_SLEEP": "number",
    "DOM_VK_NUMPAD0": "number",
    "DOM_VK_NUMPAD1": "number",
    "DOM_VK_NUMPAD2": "number",
    "DOM_VK_NUMPAD3": "number",
    "DOM_VK_NUMPAD4": "number",
    "DOM_VK_NUMPAD5": "number",
    "DOM_VK_NUMPAD6": "number",
    "DOM_VK_NUMPAD7": "number",
    "DOM_VK_NUMPAD8": "number",
    "DOM_VK_NUMPAD9": "number",
    "DOM_VK_MULTIPLY": "number",
    "DOM_VK_ADD": "number",
    "DOM_VK_SEPARATOR": "number",
    "DOM_VK_SUBTRACT": "number",
    "DOM_VK_DECIMAL": "number",
    "DOM_VK_DIVIDE": "number",
    "DOM_VK_F1": "number",
    "DOM_VK_F2": "number",
    "DOM_VK_F3": "number",
    "DOM_VK_F4": "number",
    "DOM_VK_F5": "number",
    "DOM_VK_F6": "number",
    "DOM_VK_F7": "number",
    "DOM_VK_F8": "number",
    "DOM_VK_F9": "number",
    "DOM_VK_F10": "number",
    "DOM_VK_F11": "number",
    "DOM_VK_F12": "number",
    "DOM_VK_F13": "number",
    "DOM_VK_F14": "number",
    "DOM_VK_F15": "number",
    "DOM_VK_F16": "number",
    "DOM_VK_F17": "number",
    "DOM_VK_F18": "number",
    "DOM_VK_F19": "number",
    "DOM_VK_F20": "number",
    "DOM_VK_F21": "number",
    "DOM_VK_F22": "number",
    "DOM_VK_F23": "number",
    "DOM_VK_F24": "number",
    "DOM_VK_NUM_LOCK": "number",
    "DOM_VK_SCROLL_LOCK": "number",
    "DOM_VK_WIN_OEM_FJ_JISHO": "number",
    "DOM_VK_WIN_OEM_FJ_MASSHOU": "number",
    "DOM_VK_WIN_OEM_FJ_TOUROKU": "number",
    "DOM_VK_WIN_OEM_FJ_LOYA": "number",
    "DOM_VK_WIN_OEM_FJ_ROYA": "number",
    "DOM_VK_CIRCUMFLEX": "number",
    "DOM_VK_EXCLAMATION": "number",
    "DOM_VK_DOUBLE_QUOTE": "number",
    "DOM_VK_HASH": "number",
    "DOM_VK_DOLLAR": "number",
    "DOM_VK_PERCENT": "number",
    "DOM_VK_AMPERSAND": "number",
    "DOM_VK_UNDERSCORE": "number",
    "DOM_VK_OPEN_PAREN": "number",
    "DOM_VK_CLOSE_PAREN": "number",
    "DOM_VK_ASTERISK": "number",
    "DOM_VK_PLUS": "number",
    "DOM_VK_PIPE": "number",
    "DOM_VK_HYPHEN_MINUS": "number",
    "DOM_VK_OPEN_CURLY_BRACKET": "number",
    "DOM_VK_CLOSE_CURLY_BRACKET": "number",
    "DOM_VK_TILDE": "number",
    "DOM_VK_VOLUME_MUTE": "number",
    "DOM_VK_VOLUME_DOWN": "number",
    "DOM_VK_VOLUME_UP": "number",
    "DOM_VK_COMMA": "number",
    "DOM_VK_PERIOD": "number",
    "DOM_VK_SLASH": "number",
    "DOM_VK_BACK_QUOTE": "number",
    "DOM_VK_OPEN_BRACKET": "number",
    "DOM_VK_BACK_SLASH": "number",
    "DOM_VK_CLOSE_BRACKET": "number",
    "DOM_VK_QUOTE": "number",
    "DOM_VK_META": "number",
    "DOM_VK_ALTGR": "number",
    "DOM_VK_WIN_ICO_HELP": "number",
    "DOM_VK_WIN_ICO_00": "number",
    "DOM_VK_WIN_ICO_CLEAR": "number",
    "DOM_VK_WIN_OEM_RESET": "number",
    "DOM_VK_WIN_OEM_JUMP": "number",
    "DOM_VK_WIN_OEM_PA1": "number",
    "DOM_VK_WIN_OEM_PA2": "number",
    "DOM_VK_WIN_OEM_PA3": "number",
    "DOM_VK_WIN_OEM_WSCTRL": "number",
    "DOM_VK_WIN_OEM_CUSEL": "number",
    "DOM_VK_WIN_OEM_ATTN": "number",
    "DOM_VK_WIN_OEM_FINISH": "number",
    "DOM_VK_WIN_OEM_COPY": "number",
    "DOM_VK_WIN_OEM_AUTO": "number",
    "DOM_VK_WIN_OEM_ENLW": "number",
    "DOM_VK_WIN_OEM_BACKTAB": "number",
    "DOM_VK_ATTN": "number",
    "DOM_VK_CRSEL": "number",
    "DOM_VK_EXSEL": "number",
    "DOM_VK_EREOF": "number",
    "DOM_VK_PLAY": "number",
    "DOM_VK_ZOOM": "number",
    "DOM_VK_PA1": "number",
    "DOM_VK_WIN_OEM_CLEAR": "number",
    "initKeyEvent": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, keyCode: number, charCode: number)"
  },
  "KeyboardEvent": {
    "!type": "fn(typeArg: string, keyboardEventInitDict?: KeyboardEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent",
    "!doc": "KeyboardEvent objects describe a user interaction with the keyboard. Each event describes a key; the event type (keydown, keypress, or keyup) identifies what kind of activity was performed.",
    "prototype": {
      "!proto": "UIEvent.prototype",
      "charCode": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "keyCode": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "altKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey",
        "!doc": "The KeyboardEvent.altKey read-only property is a Boolean indicates if the alt key was pressed (true) or not (false) when the event occured."
      },
      "ctrlKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey",
        "!doc": "The KeyboardEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured."
      },
      "shiftKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey",
        "!doc": "The KeyboardEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred."
      },
      "metaKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey",
        "!doc": "The KeyboardEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occured."
      },
      "getModifierState": {
        "!type": "fn(key: string) -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState",
        "!doc": "The KeyboardEvent.getModifierState() method returns the current state of the specified modifier key, true if the modifier is active (that is the modifier key is pressed or locked), otherwise, false."
      },
      "DOM_KEY_LOCATION_STANDARD": "number",
      "DOM_KEY_LOCATION_LEFT": "number",
      "DOM_KEY_LOCATION_RIGHT": "number",
      "DOM_KEY_LOCATION_NUMPAD": "number",
      "location": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location",
        "!doc": "The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device"
      },
      "repeat": "bool",
      "isComposing": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing",
        "!doc": "The KeyboardEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend."
      },
      "key": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key",
        "!doc": "The KeyboardEvent.key read-only property returns the value of a key or keys pressed by the user. It will be one of the following values:"
      },
      "code": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code",
        "!doc": "The KeyboardEvent.code property represents a physical key, that is value not changed neither by the modifier state, nor by keyboard layout."
      },
      "DOM_VK_CANCEL": "number",
      "DOM_VK_HELP": "number",
      "DOM_VK_BACK_SPACE": "number",
      "DOM_VK_TAB": "number",
      "DOM_VK_CLEAR": "number",
      "DOM_VK_RETURN": "number",
      "DOM_VK_SHIFT": "number",
      "DOM_VK_CONTROL": "number",
      "DOM_VK_ALT": "number",
      "DOM_VK_PAUSE": "number",
      "DOM_VK_CAPS_LOCK": "number",
      "DOM_VK_KANA": "number",
      "DOM_VK_HANGUL": "number",
      "DOM_VK_EISU": "number",
      "DOM_VK_JUNJA": "number",
      "DOM_VK_FINAL": "number",
      "DOM_VK_HANJA": "number",
      "DOM_VK_KANJI": "number",
      "DOM_VK_ESCAPE": "number",
      "DOM_VK_CONVERT": "number",
      "DOM_VK_NONCONVERT": "number",
      "DOM_VK_ACCEPT": "number",
      "DOM_VK_MODECHANGE": "number",
      "DOM_VK_SPACE": "number",
      "DOM_VK_PAGE_UP": "number",
      "DOM_VK_PAGE_DOWN": "number",
      "DOM_VK_END": "number",
      "DOM_VK_HOME": "number",
      "DOM_VK_LEFT": "number",
      "DOM_VK_UP": "number",
      "DOM_VK_RIGHT": "number",
      "DOM_VK_DOWN": "number",
      "DOM_VK_SELECT": "number",
      "DOM_VK_PRINT": "number",
      "DOM_VK_EXECUTE": "number",
      "DOM_VK_PRINTSCREEN": "number",
      "DOM_VK_INSERT": "number",
      "DOM_VK_DELETE": "number",
      "DOM_VK_0": "number",
      "DOM_VK_1": "number",
      "DOM_VK_2": "number",
      "DOM_VK_3": "number",
      "DOM_VK_4": "number",
      "DOM_VK_5": "number",
      "DOM_VK_6": "number",
      "DOM_VK_7": "number",
      "DOM_VK_8": "number",
      "DOM_VK_9": "number",
      "DOM_VK_COLON": "number",
      "DOM_VK_SEMICOLON": "number",
      "DOM_VK_LESS_THAN": "number",
      "DOM_VK_EQUALS": "number",
      "DOM_VK_GREATER_THAN": "number",
      "DOM_VK_QUESTION_MARK": "number",
      "DOM_VK_AT": "number",
      "DOM_VK_A": "number",
      "DOM_VK_B": "number",
      "DOM_VK_C": "number",
      "DOM_VK_D": "number",
      "DOM_VK_E": "number",
      "DOM_VK_F": "number",
      "DOM_VK_G": "number",
      "DOM_VK_H": "number",
      "DOM_VK_I": "number",
      "DOM_VK_J": "number",
      "DOM_VK_K": "number",
      "DOM_VK_L": "number",
      "DOM_VK_M": "number",
      "DOM_VK_N": "number",
      "DOM_VK_O": "number",
      "DOM_VK_P": "number",
      "DOM_VK_Q": "number",
      "DOM_VK_R": "number",
      "DOM_VK_S": "number",
      "DOM_VK_T": "number",
      "DOM_VK_U": "number",
      "DOM_VK_V": "number",
      "DOM_VK_W": "number",
      "DOM_VK_X": "number",
      "DOM_VK_Y": "number",
      "DOM_VK_Z": "number",
      "DOM_VK_WIN": "number",
      "DOM_VK_CONTEXT_MENU": "number",
      "DOM_VK_SLEEP": "number",
      "DOM_VK_NUMPAD0": "number",
      "DOM_VK_NUMPAD1": "number",
      "DOM_VK_NUMPAD2": "number",
      "DOM_VK_NUMPAD3": "number",
      "DOM_VK_NUMPAD4": "number",
      "DOM_VK_NUMPAD5": "number",
      "DOM_VK_NUMPAD6": "number",
      "DOM_VK_NUMPAD7": "number",
      "DOM_VK_NUMPAD8": "number",
      "DOM_VK_NUMPAD9": "number",
      "DOM_VK_MULTIPLY": "number",
      "DOM_VK_ADD": "number",
      "DOM_VK_SEPARATOR": "number",
      "DOM_VK_SUBTRACT": "number",
      "DOM_VK_DECIMAL": "number",
      "DOM_VK_DIVIDE": "number",
      "DOM_VK_F1": "number",
      "DOM_VK_F2": "number",
      "DOM_VK_F3": "number",
      "DOM_VK_F4": "number",
      "DOM_VK_F5": "number",
      "DOM_VK_F6": "number",
      "DOM_VK_F7": "number",
      "DOM_VK_F8": "number",
      "DOM_VK_F9": "number",
      "DOM_VK_F10": "number",
      "DOM_VK_F11": "number",
      "DOM_VK_F12": "number",
      "DOM_VK_F13": "number",
      "DOM_VK_F14": "number",
      "DOM_VK_F15": "number",
      "DOM_VK_F16": "number",
      "DOM_VK_F17": "number",
      "DOM_VK_F18": "number",
      "DOM_VK_F19": "number",
      "DOM_VK_F20": "number",
      "DOM_VK_F21": "number",
      "DOM_VK_F22": "number",
      "DOM_VK_F23": "number",
      "DOM_VK_F24": "number",
      "DOM_VK_NUM_LOCK": "number",
      "DOM_VK_SCROLL_LOCK": "number",
      "DOM_VK_WIN_OEM_FJ_JISHO": "number",
      "DOM_VK_WIN_OEM_FJ_MASSHOU": "number",
      "DOM_VK_WIN_OEM_FJ_TOUROKU": "number",
      "DOM_VK_WIN_OEM_FJ_LOYA": "number",
      "DOM_VK_WIN_OEM_FJ_ROYA": "number",
      "DOM_VK_CIRCUMFLEX": "number",
      "DOM_VK_EXCLAMATION": "number",
      "DOM_VK_DOUBLE_QUOTE": "number",
      "DOM_VK_HASH": "number",
      "DOM_VK_DOLLAR": "number",
      "DOM_VK_PERCENT": "number",
      "DOM_VK_AMPERSAND": "number",
      "DOM_VK_UNDERSCORE": "number",
      "DOM_VK_OPEN_PAREN": "number",
      "DOM_VK_CLOSE_PAREN": "number",
      "DOM_VK_ASTERISK": "number",
      "DOM_VK_PLUS": "number",
      "DOM_VK_PIPE": "number",
      "DOM_VK_HYPHEN_MINUS": "number",
      "DOM_VK_OPEN_CURLY_BRACKET": "number",
      "DOM_VK_CLOSE_CURLY_BRACKET": "number",
      "DOM_VK_TILDE": "number",
      "DOM_VK_VOLUME_MUTE": "number",
      "DOM_VK_VOLUME_DOWN": "number",
      "DOM_VK_VOLUME_UP": "number",
      "DOM_VK_COMMA": "number",
      "DOM_VK_PERIOD": "number",
      "DOM_VK_SLASH": "number",
      "DOM_VK_BACK_QUOTE": "number",
      "DOM_VK_OPEN_BRACKET": "number",
      "DOM_VK_BACK_SLASH": "number",
      "DOM_VK_CLOSE_BRACKET": "number",
      "DOM_VK_QUOTE": "number",
      "DOM_VK_META": "number",
      "DOM_VK_ALTGR": "number",
      "DOM_VK_WIN_ICO_HELP": "number",
      "DOM_VK_WIN_ICO_00": "number",
      "DOM_VK_WIN_ICO_CLEAR": "number",
      "DOM_VK_WIN_OEM_RESET": "number",
      "DOM_VK_WIN_OEM_JUMP": "number",
      "DOM_VK_WIN_OEM_PA1": "number",
      "DOM_VK_WIN_OEM_PA2": "number",
      "DOM_VK_WIN_OEM_PA3": "number",
      "DOM_VK_WIN_OEM_WSCTRL": "number",
      "DOM_VK_WIN_OEM_CUSEL": "number",
      "DOM_VK_WIN_OEM_ATTN": "number",
      "DOM_VK_WIN_OEM_FINISH": "number",
      "DOM_VK_WIN_OEM_COPY": "number",
      "DOM_VK_WIN_OEM_AUTO": "number",
      "DOM_VK_WIN_OEM_ENLW": "number",
      "DOM_VK_WIN_OEM_BACKTAB": "number",
      "DOM_VK_ATTN": "number",
      "DOM_VK_CRSEL": "number",
      "DOM_VK_EXSEL": "number",
      "DOM_VK_EREOF": "number",
      "DOM_VK_PLAY": "number",
      "DOM_VK_ZOOM": "number",
      "DOM_VK_PA1": "number",
      "DOM_VK_WIN_OEM_CLEAR": "number",
      "initKeyEvent": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, keyCode: number, charCode: number)"
    }
  },
  "KeyframeEffectReadOnly": {
    "!type": "fn(target: HTMLElement, frames?: object, options?: number)",
    "prototype": {
      "!proto": "AnimationEffectReadOnly",
      "target": "HTMLElement",
      "iterationComposite": "IterationCompositeOperation",
      "composite": "CompositeOperation",
      "spacing": "string",
      "getFrames": "fn() -> [object]"
    }
  },
  "KillSwitch": {
    "enable": "fn() -> +Promise[value=?]",
    "disable": "fn() -> +Promise[value=?]"
  },
  "IID": {},
  "LocalMediaStream": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream",
    "!doc": "The LocalMediaStream interface represents a stream of media content fetched from a local data source. This is the interface returned by getUserMedia().",
    "!proto": "MediaStream.prototype",
    "stop": "fn()"
  },
  "Location": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Location",
    "!doc": "The Location interface represents the location of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
    "href": "string",
    "origin": "string",
    "protocol": "string",
    "host": "string",
    "hostname": "string",
    "port": "string",
    "pathname": "string",
    "search": "string",
    "hash": "string",
    "assign": {
      "!type": "fn(url: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Location/assign",
      "!doc": "The Location.assign()method causes the window to load and display the document at the URL specified."
    },
    "replace": {
      "!type": "fn(url: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Location/replace",
      "!doc": "The Location.replace()method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it."
    },
    "reload": {
      "!type": "fn(forceget?: bool)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Location/reload",
      "!doc": "The Location.reload() method reloads the resource from the current URL. Its optional unique parameter is a Boolean, which, when it is true, causes the page to always be reloaded from the server. If it is false or not specified, the browser may reload the page from its cache."
    }
  },
  "MMICall": {
    "result": "+Promise[value=MozMMIResult]"
  },
  "MediaDeviceInfo": {
    "deviceId": "string",
    "kind": "MediaDeviceKind",
    "label": "string",
    "groupId": "string"
  },
  "MediaDevices": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaDevices",
    "!doc": "The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screensharing.",
    "!proto": "EventTarget",
    "getSupportedConstraints": "fn() -> MediaTrackSupportedConstraints",
    "enumerateDevices": {
      "!type": "fn() -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices",
      "!doc": "The MediaDevices.enumeratedDevices() method collects information about the media input and output devices available on the system."
    },
    "getUserMedia": {
      "!type": "fn(constraints?: MediaStreamConstraints) -> +Promise[value=+MediaStream]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",
      "!doc": "The MediaDevices.getUserMedia() method prompts the user for permission to use one video and/or one audio input device such as a camera or screensharing and/or a microphone. If the user provides permission, then the returned Promise is resolved with the resulting MediaStream object. If the user denies permission, or media is not available, then the promise is rejected with PermissionDeniedError or NotFoundError respectively. Note that it is possible for the returned promise to neither resolve nor reject, as the user is not required to make a choice."
    }
  },
  "MediaElementAudioSourceNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode",
    "!doc": "The MediaElementAudioSourceNode interface represents an audio source consisting of an HTML5 <audio> or <video> element. It is an AudioNode that acts as an audio source.",
    "!proto": "AudioNode",
    "passThrough": "bool"
  },
  "MediaEncryptedEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaKeyNeededEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "initDataType": "string",
      "initData": "+ArrayBuffer"
    }
  },
  "MediaError": {
    "MEDIA_ERR_ABORTED": "number",
    "MEDIA_ERR_NETWORK": "number",
    "MEDIA_ERR_DECODE": "number",
    "MEDIA_ERR_SRC_NOT_SUPPORTED": "number",
    "code": "number"
  },
  "MediaKeyError": {
    "!proto": "Event.prototype",
    "systemCode": "number"
  },
  "MediaKeyMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaKeyMessageEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent",
    "!doc": "The MediaKeyMessageEvent interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.",
    "prototype": {
      "!proto": "Event.prototype",
      "messageType": {
        "!type": "MediaKeyMessageType",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType",
        "!doc": "The MediaKeyMessageEvent.messageType read-only property indicates the type of message. It may be one of license-request, license-renewal, license-renewal, or individualization-request."
      },
      "message": {
        "!type": "+ArrayBuffer",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message",
        "!doc": "The MediaKeyMessageEvent.message read-only property returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system."
      }
    }
  },
  "MediaKeySession": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession",
    "!doc": "The MediaKeySession interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).",
    "!proto": "EventTarget",
    "error": "MediaKeyError",
    "keySystem": "string",
    "sessionId": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId",
      "!doc": "The MediaKeySession.sessionId read-only property contains a unique string generated by the CDM for the current media object and its associated keys or licenses."
    },
    "expiration": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration",
      "!doc": "The MediaKeySession.expiration read-only property returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window."
    },
    "closed": {
      "!type": "+Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed",
      "!doc": "The MediaKeySession.closed read-only property returns a Promise signaling when a MediaKeySession closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data."
    },
    "keyStatuses": {
      "!type": "MediaKeyStatusMap",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses",
      "!doc": "The MediaKeySession.keyStatuses read-only property returns a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses."
    },
    "generateRequest": {
      "!type": "fn(initDataType: string, initData: BufferSource) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/generateRequest",
      "!doc": "The MediaKeySession.generateRequest() method returns a Promise after generating a media request based on initialization data."
    },
    "load": {
      "!type": "fn(sessionId: string) -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/load",
      "!doc": "The MediaKeySession.load() method returns a Promise that resolves to a boolean value after loading data for a specified session object."
    },
    "update": {
      "!type": "fn(response: BufferSource) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/update",
      "!doc": "The MediaKeySession.update() method returns a Promise after loading messages and licenses to the CDM."
    },
    "close": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/close",
      "!doc": "The MediaKeySession.close() method returns a Promise after notifying the current media session is no longer needed and that the content decryption module should release any resources associated with this object and close it."
    },
    "remove": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/remove",
      "!doc": "The MediaKeySession.remove() method returns a Promise after removing any session data associated with the current object."
    }
  },
  "MediaKeyStatusMap": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap",
    "!doc": "The MediaKeyStatusMap interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.",
    "size": "number",
    "has": "fn(keyId: BufferSource) -> bool",
    "get": "fn(keyId: BufferSource) -> MediaKeyStatus"
  },
  "MediaKeySystemAccess": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess",
    "!doc": "The MediaKeySystemAccess interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.",
    "keySystem": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/keySystem",
      "!doc": "The MediaKeySystemAccess.keySystem read-only property returns a DOMString identifying the key system being used."
    },
    "getConfiguration": "fn() -> MediaKeySystemConfiguration",
    "createMediaKeys": {
      "!type": "fn() -> +Promise[value=MediaKeys]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/createMediaKeys",
      "!doc": "The MediaKeySystemAccess.createMediaKeys() method returns a Promise that resolves to a new MediaKeys object."
    }
  },
  "MediaKeys": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeys",
    "!doc": "The MediaKeys interface of EncryptedMediaExtensions API the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.",
    "keySystem": "string",
    "createSession": {
      "!type": "fn(sessionType?: SessionType) -> MediaKeySession",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/createSession",
      "!doc": "The MediaKeys.createSession() method returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM)."
    },
    "setServerCertificate": {
      "!type": "fn(serverCertificate: ArrayBufferView) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/setServerCertificate",
      "!doc": "The MediaKeys.setServerCertificate() method a Promise to a server certificate to be used to encrypt messages to the license server."
    }
  },
  "MediaList": {
    "mediaText": "string",
    "length": "number",
    "item": "fn(index: number) -> string",
    "deleteMedium": "fn(oldMedium: string)",
    "appendMedium": "fn(newMedium: string)",
    "<i>": "string"
  },
  "MediaQueryList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList",
    "!doc": "A MediaQueryList object maintains a list of media queries on a document, and handles sending notifications to listeners when the media queries on the document change.",
    "media": "string",
    "matches": "bool",
    "addListener": "fn(listener: fn(list: MediaQueryList))",
    "removeListener": "fn(listener: fn(list: MediaQueryList))"
  },
  "MediaRecorder": {
    "!type": "fn(node: AudioNode, output?: number, options?: MediaRecorderOptions)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder",
    "!doc": "The MediaRecorder interface of the MediaRecorder API provides functionality to easily capture media. It is created by the invocation of the MediaRecorder() constructor.",
    "prototype": {
      "!proto": "EventTarget",
      "stream": {
        "!type": "+MediaStream",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream",
        "!doc": "The MediaRecorder.stream property (part of the MediaRecorder API) returns the stream that was passed into the MediaRecorder() constructor when the MediaRecorder was created."
      },
      "state": {
        "!type": "RecordingState",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state",
        "!doc": "The MediaRecorder.state property (part of the MediaRecorder API) returns the current state of the current MediaRecorder object."
      },
      "mimeType": "string",
      "ondataavailable": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable",
        "!doc": "The MediaRecorder.ondataavailable event handler (part of the MediaRecorder API) handles the dataavailable event, allowing you to run code in response to Blob data being made available for use."
      },
      "onerror": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror",
        "!doc": "The MediaRecorder.onerror event handler (part of the MediaRecorder API) handles the DOMError event, allowing you to run code in response to fatal errors occurring that prevent media capture."
      },
      "onstart": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart",
        "!doc": "The MediaRecorder.onstart event handler (part of the MediaRecorder API) handles the start event, allowing you to run code in response to media recording being started by a MediaRecorder."
      },
      "onstop": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop",
        "!doc": "The MediaRecorder.onstop event handler (part of the MediaRecorder API) handles the stop event, allowing you to run code in response to media recording via a MediaRecorder being stopped."
      },
      "onwarning": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onwarning",
        "!doc": "The MediaRecorder.onwarning event handler (part of the MediaRecorder API) handles the recordingwarning event, allowing you to run code in response to non-fatal errors being thrown during media recording via a MediaRecorder, which don't halt recording."
      },
      "start": {
        "!type": "fn(timeSlice?: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/start",
        "!doc": "The Media.start() method (part of the MediaRecorder API) is used to start capturing media into a Blob."
      },
      "stop": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop",
        "!doc": "The Media.stop() method (part of the MediaRecorder API) is used to stop media capture."
      },
      "pause": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/pause",
        "!doc": "The Media.pause() method (part of the MediaRecorder API) is used to pause recording of media streams."
      },
      "resume": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/resume",
        "!doc": "The Media.resume() method (part of the MediaRecorder API) is used to resume media recording when it has been previously paused."
      },
      "requestData": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/requestData",
        "!doc": "The Media.requestData() method (part of the MediaRecorder API) is used to raise a dataavailable event containing a Blob object of the captured media as it was when the method was called. This can then be grabbed and manipulated as you wish."
      }
    }
  },
  "MediaSource": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaSource",
    "!doc": "The MediaSource interface represents the source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.",
    "isTypeSupported": "fn(type: string) -> bool",
    "prototype": {
      "!proto": "EventTarget",
      "sourceBuffers": "SourceBufferList",
      "activeSourceBuffers": "SourceBufferList",
      "readyState": "MediaSourceReadyState",
      "duration": "number",
      "addSourceBuffer": "fn(type: string) -> SourceBuffer",
      "removeSourceBuffer": "fn(sourceBuffer: SourceBuffer)",
      "endOfStream": "fn(error?: MediaSourceEndOfStreamError)",
      "mozDebugReaderData": "string"
    }
  },
  "MediaStream": {
    "!type": "fn(tracks: [MediaStreamTrack])",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStream",
    "!doc": "The MediaStream interface represents a stream of media content. A stream consists of several tracks, like video or audio tracks.",
    "prototype": {
      "!proto": "EventTarget",
      "id": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStream/id",
        "!doc": "The MediaStream.id() read-only property is a DOMString containing 36 characters denoting a unique identifier (GUID) for the object."
      },
      "getAudioTracks": "fn() -> [AudioStreamTrack]",
      "getVideoTracks": "fn() -> [VideoStreamTrack]",
      "getTracks": "fn() -> [MediaStreamTrack]",
      "addTrack": "fn(track: MediaStreamTrack)",
      "removeTrack": "fn(track: MediaStreamTrack)",
      "currentTime": "number"
    }
  },
  "MediaStreamAudioDestinationNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode",
    "!doc": "The MediaElementAudioSourceNode interface represents an audio destination consisting of a WebRTC MediaStream with a single AudioMediaStreamTrack, which can be used in a similar way to a MediaStream obtained from Navigator.getUserMedia.",
    "!proto": "AudioNode",
    "stream": {
      "!type": "+MediaStream",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/stream",
      "!doc": "The stream property of the AudioContext interface represents a MediaStream containing a single AudioMediaStreamTrack with the same number of channels as the node itself."
    }
  },
  "MediaStreamAudioSourceNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode",
    "!doc": "The MediaStreamAudioSourceNode interface represents an audio source consisting of a WebRTC MediaStream (such as a webcam or microphone.) It is an AudioNode that acts as an audio source.",
    "!proto": "AudioNode",
    "passThrough": "bool"
  },
  "MediaStreamEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaStreamEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent",
    "!doc": "The MediaStreamEvent interface represents events that occurs in relation to a MediaStream. Two events of this type can be thrown: addstream and removestream.",
    "prototype": {
      "!proto": "Event.prototype",
      "stream": {
        "!type": "+MediaStream",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent/stream",
        "!doc": "The read-only property MediaStreamEvent.stream returns the MediaStream associated with the event."
      }
    }
  },
  "MediaStreamTrack": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack",
    "!doc": "The MediaStream interface represents a stream of media content. A stream consists of several tracks, like video or audio tracks.",
    "!proto": "EventTarget",
    "kind": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind",
      "!doc": "The read-only property MediaStreamTrack.kind returns a DOMString set to \"audio\" if the track is an audio track and to \"video\", if it is a video track. It doesn't change if the track is deassociated from its source."
    },
    "id": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id",
      "!doc": "The read-only property MediaStreamTrack.id returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser."
    },
    "label": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label",
      "!doc": "The read-only property MediaStreamTrack.label returns a DOMString containing a user agent-assigned label that identifies the track source, as in \"internal microphone\". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed."
    },
    "enabled": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled",
      "!doc": "The read-only property MediaStreamTrack.enabled returns a Boolean with a value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect."
    },
    "stop": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop",
      "!doc": "The MediaStreamTrack.stop() method stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to ended."
    },
    "applyConstraints": "fn(constraints?: MediaTrackConstraints) -> +Promise[value=void]"
  },
  "MediaStreamTrackEvent": {
    "!type": "fn(type: string, eventInitDict?: MediaStreamTrackEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "receiver": "RTCRtpReceiver",
      "track": "MediaStreamTrack",
      "stream": "+MediaStream"
    }
  },
  "MenuBoxObject": {
    "!proto": "BoxObject",
    "openMenu": "fn(openFlag: bool)",
    "activeChild": "HTMLElement",
    "handleKeyPress": "fn(keyEvent: +KeyboardEvent) -> bool",
    "openedWithKey": "bool"
  },
  "MessageChannel": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessageChannel",
    "!doc": "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.",
    "prototype": {
      "port1": {
        "!type": "MessagePort",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port1",
        "!doc": "The port1 read-only property of the MessageChannel interface returns the first port of the message channel, the port attached to the context that originated the channel."
      },
      "port2": {
        "!type": "MessagePort",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port2",
        "!doc": "The port2 read-only property of the MessageChannel interface returns second port of the message channel, the port attached to the context at the other end of the channel, which the message is initially sent to."
      }
    }
  },
  "MessageEvent": {
    "!type": "fn(type: string, eventInitDict?: MessageEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessageEvent",
    "!doc": "A MessageEvent is the interface representing a message received by a target, being a WebSocket or a WebRTC RTCDataChannel",
    "prototype": {
      "!proto": "Event.prototype",
      "data": "?",
      "origin": "string",
      "lastEventId": "string",
      "source": "WindowProxy|MessagePort",
      "ports": "MessagePortList",
      "initMessageEvent": "fn(type: string, bubbles: bool, cancelable: bool, data: ?, origin: string, lastEventId: string, source: WindowProxy, ports: [MessagePort])"
    }
  },
  "MessagePort": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessagePort",
    "!doc": "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing sending of messages from one port and listening out for them arriving at the other.",
    "!proto": "EventTarget",
    "postMessage": {
      "!type": "fn(message: ?, transferable?: [Transferable])",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage",
      "!doc": "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts."
    },
    "start": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start",
      "!doc": "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage."
    },
    "close": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close",
      "!doc": "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port."
    },
    "onmessage": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage",
      "!doc": "The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message."
    }
  },
  "MimeType": {
    "description": "string",
    "enabledPlugin": "Plugin",
    "suffixes": "string",
    "type": "string"
  },
  "MimeTypeArray": {
    "length": "number",
    "item": "fn(index: number) -> MimeType",
    "namedItem": "fn(name: string) -> MimeType",
    "<i>": "MimeType",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "MmsMessage": {
    "type": "string",
    "id": "number",
    "threadId": "number",
    "iccId": "string",
    "delivery": "string",
    "deliveryInfo": "[MmsDeliveryInfo]",
    "sender": "string",
    "receivers": "[string]",
    "timestamp": "DOMTimeStamp",
    "sentTimestamp": "DOMTimeStamp",
    "read": "bool",
    "subject": "string",
    "smil": "string",
    "attachments": "[MmsAttachment]",
    "expiryDate": "DOMTimeStamp",
    "readReportRequested": "bool"
  },
  "MobileMessageThread": {
    "id": "number",
    "lastMessageSubject": "string",
    "body": "string",
    "unreadCount": "number",
    "participants": "[string]",
    "timestamp": "DOMTimeStamp",
    "lastMessageType": "string"
  },
  "MouseEvent": {
    "!type": "fn(typeArg: string, mouseEventInitDict?: MouseEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",
    "!doc": "The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.",
    "prototype": {
      "!proto": "UIEvent.prototype",
      "screenX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX",
        "!doc": "The MouseEvent.screenX read-only property provides the horizontal coordinate of the mouse pointer in global (screen) coordinates."
      },
      "screenY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY",
        "!doc": "The MouseEvent.screenY read-only property provides the vertical coordinate of the mouse pointer in global (screen) coordinates."
      },
      "clientX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX",
        "!doc": "The MouseEvent.clientX read-only property provides the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally."
      },
      "clientY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY",
        "!doc": "The MouseEvent.clientY read-only property returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically."
      },
      "offsetX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX",
        "!doc": "The MouseEvent.offsetX read-only property provides the offset in the X coordinate of the mouse pointer between that event and the padding edge of the target node."
      },
      "offsetY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY",
        "!doc": "The MouseEvent.offsetY read-only property provides the offset in the Y coordinate of the mouse pointer between that event and the padding edge of the target node."
      },
      "ctrlKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey",
        "!doc": "The MouseEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured."
      },
      "shiftKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey",
        "!doc": "The MouseEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred."
      },
      "altKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey",
        "!doc": "The MouseEvent.altKey read-only property is a Boolean indicates if the alt key was pressed (true) or not (false) when the event occured."
      },
      "metaKey": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey",
        "!doc": "The MouseEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occured."
      },
      "button": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button",
        "!doc": "The MouseEvent.button read-only property indicates which button was pressed on the mouse to trigger the event."
      },
      "buttons": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons",
        "!doc": "The MouseEvent.buttons read-only property indicates which buttons were pressed on the mouse to trigger the event."
      },
      "relatedTarget": {
        "!type": "EventTarget",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget",
        "!doc": "The MouseEvent.relatedTarget read-only property is the secondary target for the event, if there is one. That is:"
      },
      "region": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/region",
        "!doc": "The MouseEvent.region read-only property returns the id of the canvas hit region affected by the event. If no hit region is affected, null is returned."
      },
      "movementX": "number",
      "movementY": "number",
      "initMouseEvent": {
        "!type": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "getModifierState": {
        "!type": "fn(keyArg: string) -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState",
        "!doc": "The MouseEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (i.e., the modifier key is pressed or locked), otherwise, false."
      },
      "mozMovementX": "number",
      "mozMovementY": "number",
      "mozPressure": "number",
      "MOZ_SOURCE_UNKNOWN": "number",
      "MOZ_SOURCE_MOUSE": "number",
      "MOZ_SOURCE_PEN": "number",
      "MOZ_SOURCE_ERASER": "number",
      "MOZ_SOURCE_CURSOR": "number",
      "MOZ_SOURCE_TOUCH": "number",
      "MOZ_SOURCE_KEYBOARD": "number",
      "mozInputSource": "number",
      "initNSMouseEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, pressure: number, inputSourceArg: number)",
      "hitCluster": "bool"
    }
  },
  "MouseScrollEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent",
    "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time.",
    "!proto": "MouseEvent.prototype",
    "HORIZONTAL_AXIS": "number",
    "VERTICAL_AXIS": "number",
    "axis": "number",
    "initMouseScrollEvent": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, button: number, relatedTarget: EventTarget, axis: number)"
  },
  "MozActivity": {
    "!type": "fn(options?: ActivityOptions)",
    "prototype": {
      "!proto": "DOMRequest"
    }
  },
  "MozCellBroadcast": {
    "!proto": "EventTarget",
    "onreceived": "fn(+Event)"
  },
  "MozCellBroadcastEvent": {
    "!type": "fn(type: string, eventInitDict?: MozCellBroadcastEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "message": "MozCellBroadcastMessage"
    }
  },
  "MozCellBroadcastMessage": {
    "serviceId": "number",
    "gsmGeographicalScope": "CellBroadcastGsmGeographicalScope",
    "messageCode": "number",
    "messageId": "number",
    "language": "string",
    "body": "string",
    "messageClass": "CellBroadcastMessageClass",
    "timestamp": "DOMTimeStamp",
    "etws": "MozCellBroadcastEtwsInfo",
    "cdmaServiceCategory": "number"
  },
  "MozCellBroadcastEtwsInfo": {
    "warningType": "CellBroadcastEtwsWarningType",
    "emergencyUserAlert": "bool",
    "popup": "bool"
  },
  "MozClirModeEvent": {
    "!type": "fn(type: string, eventInitDict?: MozClirModeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "mode": "number"
    }
  },
  "MozContactChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: MozContactChangeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "contactID": "string",
      "reason": "string"
    }
  },
  "MozEmergencyCbModeEvent": {
    "!type": "fn(type: string, eventInitDict?: MozEmergencyCbModeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "active": "bool",
      "timeoutMs": "number"
    }
  },
  "MozIcc": {
    "!proto": "EventTarget",
    "iccInfo": "MozIccInfo|MozGsmIccInfo|MozCdmaIccInfo",
    "oniccinfochange": "fn(+Event)",
    "cardState": "IccCardState",
    "oncardstatechange": "fn(+Event)",
    "sendStkResponse": "fn(command: ?, response: ?)",
    "sendStkMenuSelection": "fn(itemIdentifier: number, helpRequested: bool)",
    "sendStkTimerExpiration": "fn(timer: ?)",
    "sendStkEventDownload": "fn(event: ?)",
    "onstkcommand": "fn(+Event)",
    "onstksessionend": "fn(+Event)",
    "getCardLock": "fn(lockType: IccLockType) -> DOMRequest",
    "unlockCardLock": "fn(info?: IccUnlockCardLockOptions) -> DOMRequest",
    "setCardLock": "fn(info?: IccSetCardLockOptions) -> DOMRequest",
    "getCardLockRetryCount": "fn(lockType: IccLockType) -> DOMRequest",
    "readContacts": "fn(contactType: IccContactType) -> DOMRequest",
    "updateContact": "fn(contactType: IccContactType, contact: +mozContact, pin2?: string) -> DOMRequest",
    "matchMvno": "fn(mvnoType: IccMvnoType, matchData: string) -> DOMRequest",
    "getServiceState": "fn(service: IccService) -> +Promise[value=bool]"
  },
  "MozIccInfo": {
    "iccType": "IccType",
    "iccid": "string",
    "mcc": "string",
    "mnc": "string",
    "spn": "string",
    "isDisplayNetworkNameRequired": "bool",
    "isDisplaySpnRequired": "bool"
  },
  "MozGsmIccInfo": {
    "!proto": "MozIccInfo",
    "msisdn": "string"
  },
  "MozCdmaIccInfo": {
    "!proto": "MozIccInfo",
    "mdn": "string",
    "prlVersion": "number"
  },
  "MozIccManager": {
    "!proto": "EventTarget",
    "STK_MENU_TYPE_NOT_SPECIFIED": "number",
    "STK_MENU_TYPE_DATA_VALUES": "number",
    "STK_MENU_TYPE_NAVIGATION_OPTIONS": "number",
    "STK_BROWSER_MODE_LAUNCH_IF_NOT_ALREADY_LAUNCHED": "number",
    "STK_BROWSER_MODE_USING_EXISTING_BROWSER": "number",
    "STK_BROWSER_MODE_USING_NEW_BROWSER": "number",
    "STK_CMD_REFRESH": "number",
    "STK_CMD_POLL_INTERVAL": "number",
    "STK_CMD_POLL_OFF": "number",
    "STK_CMD_SET_UP_EVENT_LIST": "number",
    "STK_CMD_SET_UP_CALL": "number",
    "STK_CMD_SEND_SS": "number",
    "STK_CMD_SEND_USSD": "number",
    "STK_CMD_SEND_SMS": "number",
    "STK_CMD_SEND_DTMF": "number",
    "STK_CMD_LAUNCH_BROWSER": "number",
    "STK_CMD_PLAY_TONE": "number",
    "STK_CMD_DISPLAY_TEXT": "number",
    "STK_CMD_GET_INKEY": "number",
    "STK_CMD_GET_INPUT": "number",
    "STK_CMD_SELECT_ITEM": "number",
    "STK_CMD_SET_UP_MENU": "number",
    "STK_CMD_PROVIDE_LOCAL_INFO": "number",
    "STK_CMD_TIMER_MANAGEMENT": "number",
    "STK_CMD_SET_UP_IDLE_MODE_TEXT": "number",
    "STK_CMD_OPEN_CHANNEL": "number",
    "STK_CMD_CLOSE_CHANNEL": "number",
    "STK_CMD_RECEIVE_DATA": "number",
    "STK_CMD_SEND_DATA": "number",
    "STK_RESULT_OK": "number",
    "STK_RESULT_PRFRMD_WITH_PARTIAL_COMPREHENSION": "number",
    "STK_RESULT_PRFRMD_WITH_MISSING_INFO": "number",
    "STK_RESULT_PRFRMD_WITH_ADDITIONAL_EFS_READ": "number",
    "STK_RESULT_PRFRMD_ICON_NOT_DISPLAYED": "number",
    "STK_RESULT_PRFRMD_LIMITED_SERVICE": "number",
    "STK_RESULT_UICC_SESSION_TERM_BY_USER": "number",
    "STK_RESULT_BACKWARD_MOVE_BY_USER": "number",
    "STK_RESULT_NO_RESPONSE_FROM_USER": "number",
    "STK_RESULT_HELP_INFO_REQUIRED": "number",
    "STK_RESULT_USSD_SS_SESSION_TERM_BY_USER": "number",
    "STK_RESULT_TERMINAL_CRNTLY_UNABLE_TO_PROCESS": "number",
    "STK_RESULT_NETWORK_CRNTLY_UNABLE_TO_PROCESS": "number",
    "STK_RESULT_USER_NOT_ACCEPT": "number",
    "STK_RESULT_USER_CLEAR_DOWN_CALL": "number",
    "STK_RESULT_ACTION_CONTRADICTION_TIMER_STATE": "number",
    "STK_RESULT_LAUNCH_BROWSER_ERROR": "number",
    "STK_RESULT_BEYOND_TERMINAL_CAPABILITY": "number",
    "STK_RESULT_CMD_TYPE_NOT_UNDERSTOOD": "number",
    "STK_RESULT_CMD_DATA_NOT_UNDERSTOOD": "number",
    "STK_RESULT_CMD_NUM_NOT_KNOWN": "number",
    "STK_RESULT_SS_RETURN_ERROR": "number",
    "STK_RESULT_SMS_RP_ERROR": "number",
    "STK_RESULT_REQUIRED_VALUES_MISSING": "number",
    "STK_RESULT_USSD_RETURN_ERROR": "number",
    "STK_RESULT_MULTI_CARDS_CMD_ERROR": "number",
    "STK_RESULT_USIM_CALL_CONTROL_PERMANENT": "number",
    "STK_RESULT_BIP_ERROR": "number",
    "STK_ADDITIONAL_INFO_ME_PROBLEM_SCREEN_IS_BUSY": "number",
    "STK_EVENT_TYPE_MT_CALL": "number",
    "STK_EVENT_TYPE_CALL_CONNECTED": "number",
    "STK_EVENT_TYPE_CALL_DISCONNECTED": "number",
    "STK_EVENT_TYPE_LOCATION_STATUS": "number",
    "STK_EVENT_TYPE_USER_ACTIVITY": "number",
    "STK_EVENT_TYPE_IDLE_SCREEN_AVAILABLE": "number",
    "STK_EVENT_TYPE_CARD_READER_STATUS": "number",
    "STK_EVENT_TYPE_LANGUAGE_SELECTION": "number",
    "STK_EVENT_TYPE_BROWSER_TERMINATION": "number",
    "STK_EVENT_TYPE_DATA_AVAILABLE": "number",
    "STK_EVENT_TYPE_CHANNEL_STATUS": "number",
    "STK_EVENT_TYPE_SINGLE_ACCESS_TECHNOLOGY_CHANGED": "number",
    "STK_EVENT_TYPE_DISPLAY_PARAMETER_CHANGED": "number",
    "STK_EVENT_TYPE_LOCAL_CONNECTION": "number",
    "STK_EVENT_TYPE_NETWORK_SEARCH_MODE_CHANGED": "number",
    "STK_EVENT_TYPE_BROWSING_STATUS": "number",
    "STK_EVENT_TYPE_FRAMES_INFORMATION_CHANGED": "number",
    "STK_SERVICE_STATE_NORMAL": "number",
    "STK_SERVICE_STATE_LIMITED": "number",
    "STK_SERVICE_STATE_UNAVAILABLE": "number",
    "STK_TONE_TYPE_DIAL_TONE": "number",
    "STK_TONE_TYPE_CALLED_SUBSCRIBER_BUSY": "number",
    "STK_TONE_TYPE_CONGESTION": "number",
    "STK_TONE_TYPE_RADIO_PATH_ACK": "number",
    "STK_TONE_TYPE_RADIO_PATH_NOT_AVAILABLE": "number",
    "STK_TONE_TYPE_ERROR": "number",
    "STK_TONE_TYPE_CALL_WAITING_TONE": "number",
    "STK_TONE_TYPE_RINGING_TONE": "number",
    "STK_TONE_TYPE_GENERAL_BEEP": "number",
    "STK_TONE_TYPE_POSITIVE_ACK_TONE": "number",
    "STK_TONE_TYPE_NEGATIVE_ACK_TONE": "number",
    "STK_TIME_UNIT_MINUTE": "number",
    "STK_TIME_UNIT_SECOND": "number",
    "STK_TIME_UNIT_TENTH_SECOND": "number",
    "STK_LOCAL_INFO_LOCATION_INFO": "number",
    "STK_LOCAL_INFO_IMEI": "number",
    "STK_LOCAL_INFO_DATE_TIME_ZONE": "number",
    "STK_LOCAL_INFO_LANGUAGE": "number",
    "STK_TIMER_START": "number",
    "STK_TIMER_DEACTIVATE": "number",
    "STK_TIMER_GET_CURRENT_VALUE": "number",
    "STK_BROWSER_TERMINATION_CAUSE_USER": "number",
    "STK_BROWSER_TERMINATION_CAUSE_ERROR": "number",
    "STK_NEXT_ACTION_NULL": "number",
    "STK_NEXT_ACTION_END_PROACTIVE_SESSION": "number",
    "iccIds": "[string]",
    "getIccById": "fn(iccId: string) -> MozIcc",
    "oniccdetected": "fn(+Event)",
    "oniccundetected": "fn(+Event)"
  },
  "MozInterAppMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: MozInterAppMessageEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "data": "?"
    }
  },
  "MozIsoDepTech": {
    "transceive": "fn(command: Uint8Array) -> +Promise[value=Uint8Array]"
  },
  "MozMessageDeletedEvent": {
    "!type": "fn(type: string, eventInitDict?: MozMessageDeletedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "deletedMessageIds": "[number]",
      "deletedThreadIds": "[number]"
    }
  },
  "MozMmsEvent": {
    "!type": "fn(type: string, eventInitDict?: MozMmsEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "message": "MmsMessage"
    }
  },
  "MozMobileCellInfo": {
    "gsmLocationAreaCode": "number",
    "gsmCellId": "number",
    "cdmaBaseStationId": "number",
    "cdmaBaseStationLatitude": "number",
    "cdmaBaseStationLongitude": "number",
    "cdmaSystemId": "number",
    "cdmaNetworkId": "number"
  },
  "MozMobileConnection": {
    "!proto": "EventTarget",
    "ICC_SERVICE_CLASS_VOICE": "number",
    "ICC_SERVICE_CLASS_DATA": "number",
    "ICC_SERVICE_CLASS_FAX": "number",
    "ICC_SERVICE_CLASS_SMS": "number",
    "ICC_SERVICE_CLASS_DATA_SYNC": "number",
    "ICC_SERVICE_CLASS_DATA_ASYNC": "number",
    "ICC_SERVICE_CLASS_PACKET": "number",
    "ICC_SERVICE_CLASS_PAD": "number",
    "ICC_SERVICE_CLASS_MAX": "number",
    "CALL_FORWARD_ACTION_DISABLE": "number",
    "CALL_FORWARD_ACTION_ENABLE": "number",
    "CALL_FORWARD_ACTION_QUERY_STATUS": "number",
    "CALL_FORWARD_ACTION_REGISTRATION": "number",
    "CALL_FORWARD_ACTION_ERASURE": "number",
    "CALL_FORWARD_REASON_UNCONDITIONAL": "number",
    "CALL_FORWARD_REASON_MOBILE_BUSY": "number",
    "CALL_FORWARD_REASON_NO_REPLY": "number",
    "CALL_FORWARD_REASON_NOT_REACHABLE": "number",
    "CALL_FORWARD_REASON_ALL_CALL_FORWARDING": "number",
    "CALL_FORWARD_REASON_ALL_CONDITIONAL_CALL_FORWARDING": "number",
    "CALL_BARRING_PROGRAM_ALL_OUTGOING": "number",
    "CALL_BARRING_PROGRAM_OUTGOING_INTERNATIONAL": "number",
    "CALL_BARRING_PROGRAM_OUTGOING_INTERNATIONAL_EXCEPT_HOME": "number",
    "CALL_BARRING_PROGRAM_ALL_INCOMING": "number",
    "CALL_BARRING_PROGRAM_INCOMING_ROAMING": "number",
    "CALL_BARRING_PROGRAM_ALL_SERVICE": "number",
    "CALL_BARRING_PROGRAM_OUTGOING_SERVICE": "number",
    "CALL_BARRING_PROGRAM_INCOMING_SERVICE": "number",
    "CLIR_DEFAULT": "number",
    "CLIR_INVOCATION": "number",
    "CLIR_SUPPRESSION": "number",
    "lastKnownNetwork": "string",
    "lastKnownHomeNetwork": "string",
    "voice": "MozMobileConnectionInfo",
    "data": "MozMobileConnectionInfo",
    "iccId": "string",
    "networkSelectionMode": "MobileNetworkSelectionMode",
    "radioState": "MobileRadioState",
    "supportedNetworkTypes": "[MobileNetworkType]",
    "getNetworks": "fn() -> DOMRequest",
    "selectNetwork": "fn(network: MozMobileNetworkInfo) -> DOMRequest",
    "selectNetworkAutomatically": "fn() -> DOMRequest",
    "setPreferredNetworkType": "fn(type: MobilePreferredNetworkType) -> DOMRequest",
    "getPreferredNetworkType": "fn() -> DOMRequest",
    "setRoamingPreference": "fn(mode: MobileRoamingMode) -> DOMRequest",
    "getRoamingPreference": "fn() -> DOMRequest",
    "setVoicePrivacyMode": "fn(enabled: bool) -> DOMRequest",
    "getVoicePrivacyMode": "fn() -> DOMRequest",
    "setCallForwardingOption": "fn(options?: MozCallForwardingOptions) -> DOMRequest",
    "getCallForwardingOption": "fn(reason: number) -> DOMRequest",
    "setCallBarringOption": "fn(options?: MozCallBarringOptions) -> DOMRequest",
    "getCallBarringOption": "fn(options?: MozCallBarringOptions) -> DOMRequest",
    "changeCallBarringPassword": "fn(options?: MozCallBarringOptions) -> DOMRequest",
    "setCallWaitingOption": "fn(enabled: bool) -> DOMRequest",
    "getCallWaitingOption": "fn() -> DOMRequest",
    "setCallingLineIdRestriction": "fn(mode: number) -> DOMRequest",
    "getCallingLineIdRestriction": "fn() -> DOMRequest",
    "exitEmergencyCbMode": "fn() -> DOMRequest",
    "setRadioEnabled": "fn(enabled: bool) -> DOMRequest",
    "onvoicechange": "fn(+Event)",
    "ondatachange": "fn(+Event)",
    "ondataerror": "fn(+Event)",
    "oncfstatechange": "fn(+Event)",
    "onemergencycbmodechange": "fn(+Event)",
    "onotastatuschange": "fn(+Event)",
    "oniccchange": "fn(+Event)",
    "onradiostatechange": "fn(+Event)",
    "onclirmodechange": "fn(+Event)"
  },
  "MozMobileConnectionArray": {
    "item": "fn(index: number) -> MozMobileConnection",
    "length": "number",
    "<i>": "MozMobileConnection"
  },
  "MozMobileConnectionInfo": {
    "state": "MobileConnectionState",
    "connected": "bool",
    "emergencyCallsOnly": "bool",
    "roaming": "bool",
    "network": "MozMobileNetworkInfo",
    "type": "MobileConnectionType",
    "signalStrength": "number",
    "relSignalStrength": "number",
    "cell": "MozMobileCellInfo"
  },
  "MozMobileMessageManager": {
    "!proto": "EventTarget",
    "getSegmentInfoForText": "fn(text: string) -> DOMRequest",
    "send": "fn(number: string, text: string, sendParameters?: SmsSendParameters) -> DOMRequest",
    "sendMMS": "fn(parameters?: MmsParameters, sendParameters?: MmsSendParameters) -> DOMRequest",
    "getMessage": "fn(id: number) -> DOMRequest",
    "delete": "fn(id: number) -> DOMRequest",
    "getMessages": "fn(filter?: MobileMessageFilter, reverse?: bool) -> DOMCursor",
    "markMessageRead": "fn(id: number, read: bool, sendReadReport?: bool) -> DOMRequest",
    "getThreads": "fn() -> DOMCursor",
    "retrieveMMS": "fn(id: number) -> DOMRequest",
    "getSmscAddress": "fn(serviceId?: number) -> +Promise[value=SmscAddress]",
    "setSmscAddress": "fn(smscAddress?: SmscAddress, serviceId?: number) -> +Promise[value=void]",
    "onreceived": "fn(+Event)",
    "onretrieving": "fn(+Event)",
    "onsending": "fn(+Event)",
    "onsent": "fn(+Event)",
    "onfailed": "fn(+Event)",
    "ondeliverysuccess": "fn(+Event)",
    "ondeliveryerror": "fn(+Event)",
    "onreadsuccess": "fn(+Event)",
    "onreaderror": "fn(+Event)",
    "ondeleted": "fn(+Event)"
  },
  "MozMobileNetworkInfo": {
    "shortName": "string",
    "longName": "string",
    "mcc": "string",
    "mnc": "string",
    "state": "MobileNetworkState"
  },
  "MozNDEFRecord": {
    "!type": "fn(uri: string)",
    "prototype": {
      "tnf": "TNF",
      "type": "Uint8Array",
      "id": "Uint8Array",
      "payload": "Uint8Array",
      "size": "number",
      "getAsURI": "fn() -> string"
    }
  },
  "MozNFC": {
    "!proto": "EventTarget",
    "enabled": "bool",
    "onpeerready": "fn(+Event)",
    "onpeerfound": "fn(+Event)",
    "onpeerlost": "fn(+Event)",
    "ontagfound": "fn(+Event)",
    "ontaglost": "fn(+Event)",
    "eventListenerWasAdded": "fn(aType: string)",
    "eventListenerWasRemoved": "fn(aType: string)"
  },
  "MozNFCPeer": {
    "isLost": "bool",
    "sendNDEF": "fn(records: [+MozNDEFRecord]) -> +Promise[value=void]",
    "sendFile": "fn(blob: +Blob) -> +Promise[value=void]",
    "session": "string",
    "notifyLost": "fn()"
  },
  "MozNFCPeerEvent": {
    "!type": "fn(type: string, eventInitDict?: MozNFCPeerEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "peer": "MozNFCPeer"
    }
  },
  "MozNFCTag": {
    "techList": "[NFCTechType]",
    "id": "Uint8Array",
    "type": "NFCTagType",
    "maxNDEFSize": "number",
    "isReadOnly": "bool",
    "isFormatable": "bool",
    "canBeMadeReadOnly": "bool",
    "isLost": "bool",
    "readNDEF": "fn() -> +Promise",
    "writeNDEF": "fn(records: [+MozNDEFRecord]) -> +Promise[value=void]",
    "makeReadOnly": "fn() -> +Promise[value=void]",
    "format": "fn() -> +Promise[value=void]",
    "selectTech": "fn(tech: NFCTechType) -> MozTagTech",
    "session": "string",
    "notifyLost": "fn()",
    "transceive": "fn(tech: NFCTechType, command: Uint8Array) -> +Promise[value=Uint8Array]"
  },
  "MozNFCTagEvent": {
    "!type": "fn(type: string, eventInitDict?: MozNFCTagEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "tag": "MozNFCTag",
      "ndefRecords": "[+MozNDEFRecord]"
    }
  },
  "MozNetworkStatsInterface": {
    "!type": "fn(networkinterface?: NetworkInterface)",
    "prototype": {
      "type": "number",
      "id": "string"
    }
  },
  "MozNfcATech": {
    "transceive": "fn(command: Uint8Array) -> +Promise[value=Uint8Array]"
  },
  "MozOtaStatusEvent": {
    "!type": "fn(type: string, eventInitDict?: MozOtaStatusEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "status": "string"
    }
  },
  "MozWakeLockListener": {},
  "MozPowerManager": {
    "powerOff": "fn()",
    "reboot": "fn()",
    "factoryReset": "fn(reason?: FactoryResetReason)",
    "addWakeLockListener": "fn(aListener: MozWakeLockListener)",
    "removeWakeLockListener": "fn(aListener: MozWakeLockListener)",
    "getWakeLockState": "fn(aTopic: string) -> string",
    "screenEnabled": "bool",
    "keyLightEnabled": "bool",
    "screenBrightness": "number",
    "cpuSleepAllowed": "bool"
  },
  "MozSettingsEvent": {
    "!type": "fn(type: string, eventInitDict?: MozSettingsEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "settingName": "string",
      "settingValue": "?"
    }
  },
  "MozSettingsTransactionEvent": {
    "!type": "fn(type: string, eventInitDict?: MozSettingsTransactionEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "error": "string"
    }
  },
  "MozSmsEvent": {
    "!type": "fn(type: string, eventInitDict?: MozSmsEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "message": "SmsMessage"
    }
  },
  "MozSpeakerManager": {
    "!type": "fn()",
    "prototype": {
      "!proto": "EventTarget",
      "speakerforced": "bool",
      "forcespeaker": "bool",
      "onspeakerforcedchange": "fn(+Event)"
    }
  },
  "MozStkCommandEvent": {
    "!type": "fn(type: string, eventInitDict?: MozStkCommandEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "command": "?"
    }
  },
  "MozTetheringManager": {
    "setTetheringEnabled": "fn(enabled: bool, type: TetheringType, config?: TetheringConfiguration) -> +Promise[value=?]"
  },
  "MozTimeManager": {
    "set": "fn(time: Date)"
  },
  "MozVoicemail": {
    "!proto": "EventTarget",
    "getStatus": "fn(serviceId?: number) -> MozVoicemailStatus",
    "getNumber": "fn(serviceId?: number) -> string",
    "getDisplayName": "fn(serviceId?: number) -> string",
    "onstatuschanged": "fn(+Event)"
  },
  "MozVoicemailEvent": {
    "!type": "fn(type: string, eventInitDict?: MozVoicemailEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "status": "MozVoicemailStatus"
    }
  },
  "MozVoicemailStatus": {
    "serviceId": "number",
    "hasMessages": "bool",
    "messageCount": "number",
    "returnNumber": "string",
    "returnMessage": "string"
  },
  "MozWakeLock": {
    "topic": "string",
    "unlock": "fn()"
  },
  "MozWifiCapabilities": {
    "security": "[WifiSecurityMethod]",
    "eapMethod": "[WifiWpaMethod]",
    "eapPhase2": "[WifiWpaPhase2Method]",
    "certificate": "[WifiWpaCertificate]"
  },
  "MozWifiConnectionInfoEvent": {
    "!type": "fn(type: string, eventInitDict?: MozWifiConnectionInfoEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "network": "?",
      "signalStrength": "number",
      "relSignalStrength": "number",
      "linkSpeed": "number",
      "ipAddress": "string"
    }
  },
  "MozWifiNetwork": {
    "!type": "fn(properties?: NetworkProperties)",
    "prototype": {
      "ssid": "string",
      "mode": "number",
      "frequency": "number",
      "security": "[string]",
      "capabilities": "[string]",
      "known": "bool",
      "connected": "bool",
      "hidden": "bool",
      "bssid": "string",
      "signalStrength": "string",
      "relSignalStrength": "number",
      "psk": "string",
      "wep": "string",
      "wep_key0": "string",
      "wep_key1": "string",
      "wep_key2": "string",
      "wep_key3": "string",
      "wep_tx_keyidx": "number",
      "priority": "number",
      "scan_ssid": "number",
      "keyManagement": "string",
      "identity": "string",
      "password": "string",
      "auth_alg": "string",
      "phase1": "string",
      "phase2": "string",
      "eap": "string",
      "pin": "string",
      "dontConnect": "bool",
      "serverCertificate": "string",
      "subjectMatch": "string",
      "userCertificate": "string"
    }
  },
  "MozWifiManager": {
    "!proto": "EventTarget",
    "setWifiEnabled": "fn(enabled: bool) -> DOMRequest",
    "getNetworks": "fn() -> DOMRequest",
    "getKnownNetworks": "fn() -> DOMRequest",
    "associate": "fn(network: +MozWifiNetwork) -> DOMRequest",
    "forget": "fn(network: +MozWifiNetwork) -> DOMRequest",
    "wps": "fn(detail?: WifiWPSInfo) -> DOMRequest",
    "setPowerSavingMode": "fn(enabled: bool) -> DOMRequest",
    "setStaticIpMode": "fn(network: +MozWifiNetwork, info?: IPConfiguration) -> DOMRequest",
    "setHttpProxy": "fn(network: +MozWifiNetwork, info: ?) -> DOMRequest",
    "importCert": "fn(certBlob: +Blob, certPassword: string, certNickname: string) -> DOMRequest",
    "getImportedCerts": "fn() -> DOMRequest",
    "deleteCert": "fn(certNickname: string) -> DOMRequest",
    "enabled": "bool",
    "macAddress": "string",
    "connection": "MozWifiConnection",
    "connectionInformation": "MozWifiConnectionInfo",
    "capabilities": "MozWifiCapabilities",
    "onstatuschange": "fn(+Event)",
    "onconnectioninfoupdate": "fn(+Event)",
    "onenabled": "fn(+Event)",
    "ondisabled": "fn(+Event)",
    "onstationinfoupdate": "fn(+Event)"
  },
  "MozWifiP2pGroupOwner": {
    "groupName": "string",
    "macAddress": "string",
    "ipAddress": "string",
    "passphrase": "string",
    "ssid": "string",
    "wpsCapabilities": "?",
    "freq": "number",
    "isLocal": "bool"
  },
  "MozWifiP2pManager": {
    "!proto": "EventTarget",
    "setScanEnabled": "fn(enabled: bool) -> DOMRequest",
    "connect": "fn(address: string, wpsMethod: WPSMethod, goIntent?: number) -> DOMRequest",
    "disconnect": "fn(address: string) -> DOMRequest",
    "getPeerList": "fn() -> DOMRequest",
    "setPairingConfirmation": "fn(accepted: bool, pin?: string) -> DOMRequest",
    "setDeviceName": "fn(deviceName: string) -> DOMRequest",
    "enabled": "bool",
    "groupOwner": "MozWifiP2pGroupOwner",
    "onpeerinfoupdate": "fn(+Event)",
    "onstatuschange": "fn(+Event)",
    "onenabled": "fn(+Event)",
    "ondisabled": "fn(+Event)"
  },
  "MozWifiP2pStatusChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: MozWifiP2pStatusChangeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "peerAddress": "string"
    }
  },
  "MozWifiStationInfoEvent": {
    "!type": "fn(type: string, eventInitDict?: MozWifiStationInfoEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "station": "number"
    }
  },
  "MozWifiStatusChangeEvent": {
    "!type": "fn(type: string, eventInitDict?: MozWifiStatusChangeEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "network": "?",
      "status": "string"
    }
  },
  "MutationEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MutationEvent",
    "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time.",
    "!proto": "Event.prototype",
    "MODIFICATION": "number",
    "ADDITION": "number",
    "REMOVAL": "number",
    "relatedNode": "Node",
    "prevValue": "string",
    "newValue": "string",
    "attrName": "string",
    "attrChange": "number",
    "initMutationEvent": "fn(type: string, canBubble: bool, cancelable: bool, relatedNode: Node, prevValue: string, newValue: string, attrName: string, attrChange: number)"
  },
  "MutationRecord": {
    "type": "string",
    "target": "Node",
    "addedNodes": "NodeList",
    "removedNodes": "NodeList",
    "previousSibling": "Node",
    "nextSibling": "Node",
    "attributeName": "string",
    "attributeNamespace": "string",
    "oldValue": "string",
    "addedAnimations": "[Animation]",
    "changedAnimations": "[Animation]",
    "removedAnimations": "[Animation]",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "MutationObserver": {
    "!type": "fn(mutationCallback: fn(mutations: [MutationRecord], observer: +MutationObserver))",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/MutationObserver",
    "!doc": "MutationObserver provides developers a way to react to changes in a DOM. It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.",
    "prototype": {
      "observe": "fn(target: Node, options?: MutationObserverInit)",
      "disconnect": "fn()",
      "takeRecords": "fn() -> [MutationRecord]",
      "getObservingInfo": "fn() -> [MutationObservingInfo]",
      "mutationCallback": "fn(mutations: [MutationRecord], observer: +MutationObserver)",
      "mergeAttributeRecords": "bool",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "NamedNodeMap": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap",
    "!doc": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
    "getNamedItem": {
      "!type": "fn(name: string) -> Attr",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItem",
      "!doc": "The NamedNodeMap.getNamedItem() method returns the Attr corresponding to the given name, or null if there is no corresponding attribute."
    },
    "setNamedItem": "fn(arg: Attr) -> Attr",
    "removeNamedItem": "fn(name: string) -> Attr",
    "item": "fn(index: number) -> Attr",
    "length": "number",
    "getNamedItemNS": "fn(namespaceURI: string, localName: string) -> Attr",
    "setNamedItemNS": "fn(arg: Attr) -> Attr",
    "removeNamedItemNS": "fn(namespaceURI: string, localName: string) -> Attr",
    "<i>": "Attr",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "Navigator": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator",
    "!doc": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
    "permissions": "Permissions",
    "mimeTypes": "MimeTypeArray",
    "plugins": "PluginArray",
    "doNotTrack": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack",
      "!doc": "Returns the user's do-not-track setting. This is \"yes\" if the user has requested not to be tracked by web sites, content, or advertising."
    },
    "getBattery": "fn() -> +Promise[value=BatteryManager]",
    "battery": "BatteryManager",
    "vibrate": {
      "!type": "fn(duration: number) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate",
      "!doc": "The Navigator.vibrate() method pulses the vibration hardware on the device, if such hardware exists. If the device doesn't support vibration, this method has no effect. If a vibration pattern is already in progress when this method is called, the previous pattern is halted and the new one begins instead."
    },
    "maxTouchPoints": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints",
      "!doc": "Return the maximum number of touch contacts of current device."
    },
    "oscpu": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu",
      "!doc": "Returns a string that identifies the current operating system."
    },
    "vendor": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendor",
      "!doc": "Returns the name of the browser vendor for the current browser."
    },
    "vendorSub": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendorSub",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "productSub": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/productSub",
      "!doc": "The Navigator.productSub read-only property returns the build number of the current browser."
    },
    "cookieEnabled": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled",
      "!doc": "Returns a Boolean value indicating whether cookies are enabled or not (read-only)."
    },
    "buildID": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID",
      "!doc": "Returns the build identifier of the browser."
    },
    "mozPower": "MozPowerManager",
    "javaEnabled": "fn() -> bool",
    "addIdleObserver": {
      "!type": "fn(aIdleObserver: MozIdleObserver)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/addIdleObserver",
      "!doc": "This method is used to add an observer that will check if the user is idle and will act accordingly. Once an observer is added, it can be removed with Navigator.removeIdleObserver."
    },
    "removeIdleObserver": {
      "!type": "fn(aIdleObserver: MozIdleObserver)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/removeIdleObserver",
      "!doc": "This API is available on FirefoxOS only and for certified applications only."
    },
    "requestWakeLock": {
      "!type": "fn(aTopic: string) -> MozWakeLock",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestWakeLock",
      "!doc": "This method is used to request a wake lock on any resource of the device. This means that you can prevent that resource from becoming unavailable as long as your app holds a lock for that resource. For example, a voice recording app can obtain a lock to keep the screen on during recording so that it can give prover visual feedback to the user that recording is progressing."
    },
    "deviceStorageAreaListener": "DeviceStorageAreaListener",
    "getDeviceStorage": {
      "!type": "fn(type: string) -> DeviceStorage",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/getDeviceStorage",
      "!doc": "The getDeviceStorage method is used to access some storage area available on the device."
    },
    "getDeviceStorages": {
      "!type": "fn(type: string) -> [DeviceStorage]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/getDeviceStorages",
      "!doc": "The getDeviceStorages method is used to access individual storage areas available on the device. This method return an Array of DeviceStorage objects, one per physical storage area. Each storage area will have a name, retrievable using the .storageName attribute (see below)."
    },
    "getDeviceStorageByNameAndType": "fn(name: string, type: string) -> DeviceStorage",
    "mozNotification": "DesktopNotificationCenter",
    "connection": "NetworkInformation",
    "mozCameras": "CameraManager",
    "mozSetMessageHandler": "fn(type: string, callback: fn(message?: object))",
    "mozHasPendingMessage": "fn(type: string) -> bool",
    "mozSetMessageHandlerPromise": "fn(promise: +Promise)",
    "getGamepads": {
      "!type": "fn() -> [Gamepad]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads",
      "!doc": "The Navigator.getGamepads() method returns an array of Gamepad objects, one for each gamepad connected to the device."
    },
    "getVRDevices": {
      "!type": "fn() -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/getVRDevices",
      "!doc": "The getVRDevices() method returns a promise that resolves to an array of objects representing any VR devices that are connected to the computer and compatible with the browser."
    },
    "mediaDevices": {
      "!type": "MediaDevices",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices",
      "!doc": "The Navigator.mediaDevices read-only property returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screensharing."
    },
    "mozGetUserMedia": "fn(constraints: MediaStreamConstraints, successCallback: fn(stream: +MediaStream), errorCallback: fn(error: MediaStreamError))",
    "mozGetUserMediaDevices": "fn(constraints: MediaStreamConstraints, onsuccess: fn(devices: nsIVariant), onerror: fn(error: MediaStreamError), innerWindowID?: number)",
    "serviceWorker": {
      "!type": "ServiceWorkerContainer",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker",
      "!doc": "The Navigator.serviceWorker read-only property returns a ServiceWorkerContainer object, which provides access to registration, removal, upgrade, and communication with the ServiceWorker objects for the associated document."
    },
    "sendBeacon": {
      "!type": "fn(url: string, data?: ArrayBufferView) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon",
      "!doc": "The navigator.sendBeacon() method can be used to asynchronously transfer small HTTP data from the User Agent to a web server."
    },
    "tv": "TVManager",
    "inputPortManager": "InputPortManager",
    "presentation": "Presentation",
    "mozTCPSocket": "LegacyMozTCPSocket",
    "requestMediaKeySystemAccess": {
      "!type": "fn(keySystem: string, supportedConfigurations: [MediaKeySystemConfiguration]) -> +Promise[value=MediaKeySystemAccess]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess",
      "!doc": "The Navigator.requestMediaKeySystemAccess() method returns a Promise for a MediaKeySystemAccess object."
    },
    "mozE10sEnabled": "bool",
    "queryInterface": "fn(iid: IID) -> nsISupports",
    "appCodeName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "appName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "appVersion": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "platform": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "userAgent": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent",
      "!doc": "Returns the user agent string for the current browser."
    },
    "product": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "taintEnabled": {
      "!type": "fn() -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled",
      "!doc": "Not available to workers.Although the interface of this feature is available to workers, this feature isn't."
    },
    "language": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language",
      "!doc": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI."
    },
    "languages": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages",
      "!doc": "The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first."
    },
    "onLine": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine",
      "!doc": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection."
    },
    "registerProtocolHandler": "fn(scheme: string, url: string, title: string)",
    "registerContentHandler": "fn(mimeType: string, url: string, title: string)",
    "getFeature": "fn(name: string) -> +Promise[value=?]",
    "hasFeature": "fn(name: string) -> +Promise[value=?]",
    "geolocation": {
      "!type": "Geolocation",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorGeolocation/geolocation",
      "!doc": "The Navigator.geolocation read-only property returns a Geolocation object that gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location."
    },
    "getDataStores": "fn(name: string, owner?: string) -> +Promise",
    "mozInputMethod": "MozInputMethod",
    "mozApps": "DOMApplicationsRegistry",
    "mozChromeNotifications": "ChromeNotifications",
    "updateManager": "SystemUpdateManager",
    "mozPhoneNumberService": "PhoneNumberService",
    "mozId": "IdentityManager",
    "push": "SimplePushManager",
    "engineeringMode": "EngineeringMode",
    "mozTetheringManager": "MozTetheringManager",
    "mozPresentationDeviceInfo": "PresentationDeviceInfoManager",
    "mozWifiManager": "MozWifiManager",
    "mozPaymentProvider": "PaymentProvider",
    "mozDownloadManager": "DOMDownloadManager",
    "mozKillSwitch": "KillSwitch",
    "mozNfc": "MozNFC",
    "seManager": "SEManager",
    "mozSettings": "SettingsManager",
    "mozWifiP2pManager": "MozWifiP2pManager",
    "syncManager": "RequestSyncManager",
    "sync": "RequestSyncScheduler",
    "mozAlarms": "AlarmsManager",
    "mozContacts": "ContactManager",
    "mozPermissionSettings": "PermissionSettings"
  },
  "MozIdleObserver": {
    "time": "number",
    "onidle": "fn()",
    "onactive": "fn()"
  },
  "NetworkInformation": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation",
    "!doc": "The NetworkInformation interface contains methods and properties related to the network type of the browser.",
    "!proto": "EventTarget",
    "type": "ConnectionType",
    "ontypechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/ontypechange",
      "!doc": "The NetworkInformation.ontypechange event handler is a property containing the code to execute when the typechange event, of type Event, is received by this NetworkInformation instance. That event is sent by the browser to let content know that the value of the NetworkInformation.type attribute has changed."
    }
  },
  "Node": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node",
    "!doc": "A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.",
    "!proto": "EventTarget",
    "ELEMENT_NODE": "number",
    "ATTRIBUTE_NODE": "number",
    "TEXT_NODE": "number",
    "CDATA_SECTION_NODE": "number",
    "ENTITY_REFERENCE_NODE": "number",
    "ENTITY_NODE": "number",
    "PROCESSING_INSTRUCTION_NODE": "number",
    "COMMENT_NODE": "number",
    "DOCUMENT_NODE": "number",
    "DOCUMENT_TYPE_NODE": "number",
    "DOCUMENT_FRAGMENT_NODE": "number",
    "NOTATION_NODE": "number",
    "nodeType": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType",
      "!doc": "The read-only Node.nodeType property returns an unsigned short integer representing the type of the node."
    },
    "nodeName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName",
      "!doc": "The Node.nodeName read-only property returns the name of the current node as a string."
    },
    "baseURI": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI",
      "!doc": "The Node.baseURI read-only property returns the absolute base URL of a node."
    },
    "ownerDocument": {
      "!type": "+Document",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument",
      "!doc": "The Node.ownerDocument read-only property returns the top-level document object for this node."
    },
    "parentNode": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode",
      "!doc": "The Node.parentNode read-only property returns the parent of the specified node in the DOM tree."
    },
    "parentElement": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement",
      "!doc": "The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element."
    },
    "hasChildNodes": {
      "!type": "fn() -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes",
      "!doc": "The Node.hasChildNodes() method returns a Boolean value indicating whether the current Node has child nodes or not."
    },
    "childNodes": {
      "!type": "NodeList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes",
      "!doc": "The Node.childNodes read-only property returns a live collection of child nodes of the given element."
    },
    "firstChild": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild",
      "!doc": "The Node.firstChild read-only property returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children."
    },
    "lastChild": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild",
      "!doc": "The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements."
    },
    "previousSibling": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling",
      "!doc": "The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list."
    },
    "nextSibling": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling",
      "!doc": "The Node.nextSibling read-only property returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list."
    },
    "nodeValue": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue",
      "!doc": "The Node.nodeValue property returns or sets the value of the current node."
    },
    "textContent": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/textContent",
      "!doc": "The Node.textContent property represents the text content of a node and its descendants."
    },
    "insertBefore": {
      "!type": "fn(node: Node, child: Node) -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore",
      "!doc": "The Node.insertBefore() method inserts the specified node before a reference node as a child of the current node."
    },
    "appendChild": {
      "!type": "fn(node: Node) -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild",
      "!doc": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (i.e. there is no requirement to remove the node from its parent node before appending it to some other node)."
    },
    "replaceChild": {
      "!type": "fn(node: Node, child: Node) -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild",
      "!doc": "The Node.replaceChild() method replaces one child node of the specified element with another."
    },
    "removeChild": {
      "!type": "fn(child: Node) -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild",
      "!doc": "The Node.removeChild() method removes a child node from the DOM. Returns removed node."
    },
    "normalize": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/normalize",
      "!doc": "The Node.normalize() method puts the specified node and all of its sub-tree into a \"normalized\" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes."
    },
    "cloneNode": {
      "!type": "fn(deep?: bool) -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode",
      "!doc": "The Node.cloneNode() method returns a duplicate of the node on which this method was called."
    },
    "isEqualNode": {
      "!type": "fn(node: Node) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode",
      "!doc": "The Node.isEqualNode() tests whether two nodes are equal."
    },
    "DOCUMENT_POSITION_DISCONNECTED": "number",
    "DOCUMENT_POSITION_PRECEDING": "number",
    "DOCUMENT_POSITION_FOLLOWING": "number",
    "DOCUMENT_POSITION_CONTAINS": "number",
    "DOCUMENT_POSITION_CONTAINED_BY": "number",
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": "number",
    "compareDocumentPosition": {
      "!type": "fn(other: Node) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition",
      "!doc": "The Node.compareDocumentPosition() method compares the position of the current node against another node in any other document."
    },
    "contains": {
      "!type": "fn(other: Node) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/contains",
      "!doc": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node. or not."
    },
    "lookupPrefix": {
      "!type": "fn(namespace: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix",
      "!doc": "The Node.lookupPrefix() method returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent."
    },
    "lookupNamespaceURI": {
      "!type": "fn(prefix: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI",
      "!doc": "The Node.lookupNamespaceURI() method takes a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace."
    },
    "isDefaultNamespace": {
      "!type": "fn(namespace: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace",
      "!doc": "The Node.isDefaultNamespace()method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not."
    },
    "namespaceURI": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/namespaceURI",
      "!doc": "The Node.namespaceURI read-only property returns the namespace URI of the node, or null if the node is not in a namespace (read-only). When the node is a document, it returns the XML namespace for the current document."
    },
    "prefix": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/prefix",
      "!doc": "The Node.prefix read-only property returns the namespace prefix of the specified node, or null if no prefix is specified. This property is read only."
    },
    "localName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/localName",
      "!doc": "The Node.localName read-only property returns the local part of the qualified name of this node."
    },
    "setUserData": {
      "!type": "fn(key: string, data: ?) -> ?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/setUserData",
      "!doc": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it."
    },
    "getUserData": {
      "!type": "fn(key: string) -> ?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/getUserData",
      "!doc": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it."
    },
    "nodePrincipal": {
      "!type": "Principal",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/nodePrincipal",
      "!doc": "The Node.nodePrincipal read-only property returns the nsIPrincipal object representing current security context of the node."
    },
    "baseURIObject": {
      "!type": "URI",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Node/baseURIObject",
      "!doc": "The Node.baseURIObject property returns the nsIURI representing the node's (typically a document or an element) base URL. It's similar to Node.baseURI, except it returns an nsIURI instead of a string."
    },
    "getBoundMutationObservers": "fn() -> [+MutationObserver]"
  },
  "NodeFilter": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
    "!doc": "A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.",
    "FILTER_ACCEPT": "number",
    "FILTER_REJECT": "number",
    "FILTER_SKIP": "number",
    "SHOW_ALL": "number",
    "SHOW_ELEMENT": "number",
    "SHOW_ATTRIBUTE": "number",
    "SHOW_TEXT": "number",
    "SHOW_CDATA_SECTION": "number",
    "SHOW_ENTITY_REFERENCE": "number",
    "SHOW_ENTITY": "number",
    "SHOW_PROCESSING_INSTRUCTION": "number",
    "SHOW_COMMENT": "number",
    "SHOW_DOCUMENT": "number",
    "SHOW_DOCUMENT_TYPE": "number",
    "SHOW_DOCUMENT_FRAGMENT": "number",
    "SHOW_NOTATION": "number",
    "acceptNode": {
      "!type": "fn(node: Node) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeFilter/acceptNode",
      "!doc": "The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:"
    }
  },
  "NodeIterator": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator",
    "!doc": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
    "root": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root",
      "!doc": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses."
    },
    "referenceNode": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode",
      "!doc": "The NodeIterator.referenceNode read-only returns the Node to which the iterator is anchored; as new nodes are inserted, the iterator remains anchored to the reference node as specified by this property."
    },
    "pointerBeforeReferenceNode": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode",
      "!doc": "The NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false) the anchor node indicated by the NodeIterator.referenceNode property."
    },
    "whatToShow": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow",
      "!doc": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator."
    },
    "filter": {
      "!type": "NodeFilter",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter",
      "!doc": "The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes."
    },
    "nextNode": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode",
      "!doc": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.  The first call to nextNode() returns the first node in the set."
    },
    "previousNode": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode",
      "!doc": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set."
    },
    "detach": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/detach",
      "!doc": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it."
    },
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "NodeList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "!doc": "NodeList objects are collections of nodes such as those returned by Node.childNodes and the document.querySelectorAll method.",
    "item": {
      "!type": "fn(index: number) -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeList/item",
      "!doc": "Returns a node from a NodeList by index. This method doesn't throw exceptions, a value of null is returned if the index is out of range."
    },
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NodeList/length",
      "!doc": "length returns the number of items in a NodeList."
    },
    "<i>": "Node",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "Notification": {
    "!type": "fn(title: string, options?: NotificationOptions)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification",
    "!doc": "The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.",
    "permission": {
      "!type": "NotificationPermission",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/permission",
      "!doc": "The permission read-only property of the Notification interface indicates the current permission granted by the user for the current origin to display web notifications."
    },
    "requestPermission": {
      "!type": "fn(permissionCallback?: fn(permission: NotificationPermission))",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission",
      "!doc": "The requestPermission() method of the Notification interface requests permission from the user for the current origin to display notifications."
    },
    "get": "fn(filter?: GetNotificationOptions) -> +Promise",
    "prototype": {
      "!proto": "EventTarget",
      "onclick": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/onclick",
        "!doc": "The onclick property of the Notification interface specifies an event listener to receive click events. These events occur when the user clicks on a displayed Notification."
      },
      "onshow": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/onshow",
        "!doc": "The onshow property of the Notification interface specifies an event listener to receive show events. These events occur when a Notification is displayed."
      },
      "onerror": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/onerror",
        "!doc": "The onerror property of the Notification interface specifies an event listener to receive error events. These events occur when something goes wrong with a Notification (in many cases an error preventing the notification from being displayed.)"
      },
      "onclose": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/onclose",
        "!doc": "The onclose property of the Notification interface specifies an event listener to receive close events. These events occur when a Notification is closed."
      },
      "title": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/title",
        "!doc": "The title read-only property of the Notification interface indicates the title of the notification, as specified in the title parameter of the Notification() constructor."
      },
      "dir": {
        "!type": "NotificationDirection",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/dir",
        "!doc": "The dir read-only property of the Notification interface indicates the text direction of the notification, as specified in the dir option of the Notification() constructor."
      },
      "lang": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/lang",
        "!doc": "The lang read-only property of the Notification interface indicates the text direction of the notification, as specified in the lang option of the Notification() constructor."
      },
      "body": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/body",
        "!doc": "The body read-only property of the Notification interface indicates the body string of the notification, as specified in the body option of the Notification() constructor."
      },
      "tag": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/tag",
        "!doc": "The tag read-only property of the Notification interface signifies an identifying tag for the notification, as specified in the tag option of the Notification() constructor."
      },
      "icon": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/icon",
        "!doc": "The icon read-only property of the Notification interface contains the URL of an icon to be displayed as part of the notification, as specified in the icon option of the Notification() constructor."
      },
      "data": {
        "!type": "?",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/data",
        "!doc": "The data read-only property of the Notification interface returns a structured clone of the notification's data, as specified in the data option of the Notification() constructor."
      },
      "close": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Notification/close",
        "!doc": "The close() method of the Notification interface is used to close a previously displayed notification."
      },
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "ServiceWorkerRegistration": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration",
    "!doc": "The ServiceWorkerRegistion interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.",
    "!proto": "EventTarget",
    "installing": {
      "!type": "ServiceWorker",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/installing",
      "!doc": "The installing property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null."
    },
    "waiting": {
      "!type": "ServiceWorker",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/waiting",
      "!doc": "The waiting property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null."
    },
    "active": {
      "!type": "ServiceWorker",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/active",
      "!doc": "The active property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null."
    },
    "scope": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope",
      "!doc": "The scope read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker."
    },
    "update": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/update",
      "!doc": "The update method of the ServiceWorkerRegistration interface allows you to ping the server for an updated service worker script. If you don't explicitly call this, the UA will do this automatically once every 24 hours."
    },
    "unregister": {
      "!type": "fn() -> +Promise[value=bool]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/unregister",
      "!doc": "The unregister method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise. The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register with the same scope.) The service worker will finish any ongoing operations before it is unregistered."
    },
    "onupdatefound": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/onupdatefound",
      "!doc": "The onupdatefound property of the ServiceWorkerRegistration interface is an EventListener property called whenever an event of type statechange is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker."
    },
    "showNotification": "fn(title: string, options?: NotificationOptions) -> +Promise[value=void]",
    "getNotifications": "fn(filter?: GetNotificationOptions) -> +Promise",
    "pushManager": {
      "!type": "PushManager",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/pushManager",
      "!doc": "The pushManager property of the ServiceWorkerRegistration interface returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status."
    }
  },
  "NotificationEvent": {
    "!type": "fn(type: string, eventInitDict?: NotificationEventInit)",
    "prototype": {
      "!proto": "ExtendableEvent.prototype",
      "notification": "+Notification"
    }
  },
  "ServiceWorkerGlobalScope": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope",
    "!doc": "The ServiceWorkerGlobalScope interface of the ServiceWorker API represents the global execution context of a service worker.",
    "!proto": "WorkerGlobalScope",
    "clients": {
      "!type": "Clients",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/clients",
      "!doc": "The clients read-only property of the ServiceWorkerGlobalScope interface contains the available Clients object associated with the service worker."
    },
    "registration": {
      "!type": "ServiceWorkerRegistration",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/registration",
      "!doc": "The registration read-only property of the ServiceWorkerGlobalScope interface returns a reference to the ServiceWorkerRegistration object, which represents the service worker's registration."
    },
    "skipWaiting": "fn() -> +Promise[value=bool]",
    "oninstall": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/oninstall",
      "!doc": "The oninstall property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an install event occurs (when the service worker installs). This happens before activation."
    },
    "onactivate": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onactivate",
      "!doc": "The onactivate property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an activate event occurs (when the service worker activates). This happens after installation, when the page to be controlled by the service worker refreshes."
    },
    "onfetch": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onfetch",
      "!doc": "The onfetch property of the ServiceWorkerGlobalScope interface is an event handler fired whenever a fetch event occurs (usually when the ServiceWorkerGlobalScope.fetch method is called.)"
    },
    "onmessage": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onmessage",
      "!doc": "The ServiceWorkerGlobalScope.onmessage event of the ServiceWorkerGlobalScope interface is called whenever incoming messages are received."
    },
    "onnotificationclick": "fn(+Event)",
    "onpush": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onpush",
      "!doc": "The ServiceWorkerGlobalScope.onpush event of the ServiceWorkerGlobalScope interface is called whenever a notification is received from a server through a push subscription."
    },
    "onpushsubscriptionchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onpushsubscriptionchange",
      "!doc": "The ServiceWorkerGlobalScope.onpushsubscriptionchange event of the ServiceWorkerGlobalScope interface is called whenever a notification is received from a server through a push subscription."
    }
  },
  "NotifyPaintEvent": {
    "!proto": "Event.prototype",
    "clientRects": "DOMRectList",
    "boundingClientRect": "+DOMRect",
    "paintRequests": "PaintRequestList"
  },
  "OfflineAudioCompletionEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent",
    "!doc": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.",
    "!proto": "Event.prototype",
    "renderedBuffer": "AudioBuffer"
  },
  "OfflineAudioContext": {
    "!type": "fn(numberOfChannels: number, length: number, sampleRate: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext",
    "!doc": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
    "prototype": {
      "!proto": "AudioContext.prototype",
      "startRendering": {
        "!type": "fn() -> +Promise[value=AudioBuffer]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering",
        "!doc": "The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes."
      },
      "oncomplete": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete",
        "!doc": "The oncomplete event handler of the OfflineAudioContext interface is called when the audio processing is terminated, that is when the complete event (of type OfflineAudioCompletionEvent) is raised."
      }
    }
  },
  "OfflineResourceList": {
    "!proto": "EventTarget",
    "UNCACHED": "number",
    "IDLE": "number",
    "CHECKING": "number",
    "DOWNLOADING": "number",
    "UPDATEREADY": "number",
    "OBSOLETE": "number",
    "status": "number",
    "update": "fn()",
    "swapCache": "fn()",
    "onchecking": "fn(+Event)",
    "onerror": "fn(+Event)",
    "onnoupdate": "fn(+Event)",
    "ondownloading": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onupdateready": "fn(+Event)",
    "oncached": "fn(+Event)",
    "onobsolete": "fn(+Event)",
    "mozItems": "DOMStringList",
    "mozHasItem": "fn(uri: string) -> bool",
    "mozLength": "number",
    "mozItem": "fn(index: number) -> string",
    "mozAdd": "fn(uri: string)",
    "mozRemove": "fn(uri: string)",
    "<i>": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "OffscreenCanvas": {
    "!type": "fn(width: number, height: number)",
    "prototype": {
      "!proto": "EventTarget",
      "width": "number",
      "height": "number",
      "getContext": "fn(contextId: string, contextOptions?: ?) -> nsISupports",
      "transferToImageBitmap": "fn() -> ImageBitmap",
      "toBlob": "fn(type?: string, encoderOptions?: ?) -> +Promise[value=+Blob]"
    }
  },
  "OscillatorNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode",
    "!doc": "The OscillatorNode interface represents a periodic waveform, like a sine wave. It is an AudioNode audio-processing module that causes a given frequency of sine wave to be created — in effect, a constant tone.",
    "!proto": "AudioNode",
    "type": {
      "!type": "OscillatorType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type",
      "!doc": "The type property of the OscillatorNode interface represents the shape of the oscillator wave generated. Different waves will produce different tones."
    },
    "frequency": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency",
      "!doc": "The frequency property of the OscillatorNode interface is an a-rate AudioParam representing the frequency of oscillation in hertz."
    },
    "detune": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune",
      "!doc": "The detune property of the OscillatorNode interface is an a-rate AudioParam representing detuning of oscillation in cents."
    },
    "start": {
      "!type": "fn(when?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/start",
      "!doc": "The start method of the OscillatorNode interface specifies the exact time to start playing the tone. Its parameter is optional and default to 0."
    },
    "stop": {
      "!type": "fn(when?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/stop",
      "!doc": "The stop method of the OscillatorNode interface specifies the exact time to stop playing the tone. Its parameter is optional and default to 0."
    },
    "setPeriodicWave": {
      "!type": "fn(periodicWave: PeriodicWave)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave",
      "!doc": "The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type = \"custom\" is used."
    },
    "onended": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended",
      "!doc": "The onended property of the OscillatorNode interface is used to set the event handler for the ended event, which fires when the tone has stopped playing."
    },
    "passThrough": "bool"
  },
  "PageTransitionEvent": {
    "!type": "fn(type: string, eventInitDict?: PageTransitionEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent",
    "!doc": "Page transition events fire when a webpage is being loaded or unloaded.",
    "prototype": {
      "!proto": "Event.prototype",
      "persisted": "bool"
    }
  },
  "PaintRequest": {
    "clientRect": "+DOMRect",
    "reason": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "PaintRequestList": {
    "length": "number",
    "item": "fn(index: number) -> PaintRequest",
    "<i>": "PaintRequest",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "PannerNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode",
    "!doc": "The PannerNode interface represents the position and behavior of an audio source signal in space. It is an AudioNode audio-processing module describing its position with right-hand Cartesian coordinates, its movement using a velocity vector and its directionality using a directionality cone.",
    "!proto": "AudioNode",
    "panningModel": {
      "!type": "PanningModelType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel",
      "!doc": "The panningModel property of the PannerNode interface is an enumerated value determining which spatialisation algorithm to use to position the audio in 3D space."
    },
    "setPosition": {
      "!type": "fn(x: number, y: number, z: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition",
      "!doc": "The setPosition() method of the PannerNode Interface defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the AudioContext.listener attribute.) The three parameters x, y and z are unitless and describe the source's position in 3D space using the right-hand Cartesian coordinate system."
    },
    "setOrientation": {
      "!type": "fn(x: number, y: number, z: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setOrientation",
      "!doc": "The setOrientation() method of the PannerNode Interface defines the direction the audio source is playing in."
    },
    "setVelocity": {
      "!type": "fn(x: number, y: number, z: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setVelocity",
      "!doc": "The setVelocity() method of the PannerNode Interface defines the velocity vector of the audio source — how fast it is moving and in what direction."
    },
    "distanceModel": {
      "!type": "DistanceModelType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel",
      "!doc": "The distanceModel property of the PannerNode interface is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener."
    },
    "refDistance": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance",
      "!doc": "The refDistance property of the PannerNode interface is a double value representing the reference distance for reducing volume as the audio source moves further from the listener. This value is used by all distance models."
    },
    "maxDistance": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance",
      "!doc": "The maxDistance property of the PannerNode interface is a double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further. This value is used only by the linear distance model."
    },
    "rolloffFactor": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor",
      "!doc": "The rolloffFactor property of the PannerNode interface is a double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models."
    },
    "coneInnerAngle": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle",
      "!doc": "The coneInnerAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction."
    },
    "coneOuterAngle": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle",
      "!doc": "The coneOuterAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain property."
    },
    "coneOuterGain": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain",
      "!doc": "The coneOuterGain property of the PannerNode interface is a double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute."
    },
    "passThrough": "bool"
  },
  "Performance": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Performance",
    "!doc": "The Performance interface represents timing-related performance information for the given page.",
    "now": {
      "!type": "fn() -> DOMHighResTimeStamp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Performance/now",
      "!doc": "The Performance.now() method returns a DOMHighResTimeStamp, measured in milliseconds, accurate to one thousandth of a millisecond."
    },
    "translateTime": "fn(time: DOMHighResTimeStamp, timeSource: Window) -> DOMHighResTimeStamp",
    "timing": {
      "!type": "PerformanceTiming",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Performance/timing",
      "!doc": "Not available to workers.Although the interface of this feature is available to workers, this feature isn't."
    },
    "navigation": {
      "!type": "PerformanceNavigation",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation",
      "!doc": "Not available to workers.Although the interface of this feature is available to workers, this feature isn't."
    },
    "getEntries": "fn() -> PerformanceEntryList",
    "getEntriesByType": "fn(entryType: string) -> PerformanceEntryList",
    "getEntriesByName": "fn(name: string, entryType?: string) -> PerformanceEntryList",
    "clearResourceTimings": "fn()",
    "setResourceTimingBufferSize": "fn(maxSize: number)",
    "onresourcetimingbufferfull": "fn(+Event)",
    "mozMemory": "object",
    "mark": "fn(markName: string)",
    "clearMarks": "fn(markName?: string)",
    "measure": "fn(measureName: string, startMark?: string, endMark?: string)",
    "clearMeasures": "fn(measureName?: string)",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "PerformanceCompositeTiming": {
    "!proto": "PerformanceEntry",
    "sourceFrameNumber": "number"
  },
  "PerformanceEntry": {
    "name": "string",
    "entryType": "string",
    "startTime": "DOMHighResTimeStamp",
    "duration": "DOMHighResTimeStamp"
  },
  "PerformanceMark": {
    "!proto": "PerformanceEntry"
  },
  "PerformanceMeasure": {
    "!proto": "PerformanceEntry"
  },
  "PerformanceNavigation": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation",
    "!doc": "The PerformanceNavigation interface represents information about how the navigation to the current document was done.",
    "TYPE_NAVIGATE": "number",
    "TYPE_RELOAD": "number",
    "TYPE_BACK_FORWARD": "number",
    "TYPE_RESERVED": "number",
    "type": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/type",
      "!doc": "The PerformanceNavigation.type read-only property returns an unsigned short containing a constant describing how the navigation to this page was done. Possible values are:"
    },
    "redirectCount": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/redirectCount",
      "!doc": "The PerformanceNavigation.redirectCount read-only property returns an unsigned short representing the number of REDIRECTs done before reaching the page."
    }
  },
  "PerformanceObserver": {
    "!type": "fn(callback: fn(entries: PerformanceObserverEntryList, observer: +PerformanceObserver))",
    "prototype": {
      "observe": "fn(options: PerformanceObserverInit)",
      "disconnect": "fn()"
    }
  },
  "PerformanceObserverEntryList": {
    "getEntries": "fn(filter?: PerformanceEntryFilterOptions) -> PerformanceEntryList",
    "getEntriesByType": "fn(entryType: string) -> PerformanceEntryList",
    "getEntriesByName": "fn(name: string, entryType?: string) -> PerformanceEntryList"
  },
  "PerformanceRenderTiming": {
    "!proto": "PerformanceEntry",
    "sourceFrameNumber": "number"
  },
  "PerformanceResourceTiming": {
    "!proto": "PerformanceEntry",
    "initiatorType": "string",
    "nextHopProtocol": "string",
    "redirectStart": "DOMHighResTimeStamp",
    "redirectEnd": "DOMHighResTimeStamp",
    "fetchStart": "DOMHighResTimeStamp",
    "domainLookupStart": "DOMHighResTimeStamp",
    "domainLookupEnd": "DOMHighResTimeStamp",
    "connectStart": "DOMHighResTimeStamp",
    "connectEnd": "DOMHighResTimeStamp",
    "secureConnectionStart": "DOMHighResTimeStamp",
    "requestStart": "DOMHighResTimeStamp",
    "responseStart": "DOMHighResTimeStamp",
    "responseEnd": "DOMHighResTimeStamp",
    "transferSize": "number",
    "encodedBodySize": "number",
    "decodedBodySize": "number"
  },
  "PerformanceTiming": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming",
    "!doc": "The PerformanceTiming interface represents timing-related performance information for the given page.",
    "navigationStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart",
      "!doc": "The PerformanceTiming.navigationStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as PerformanceTiming.fetchStart."
    },
    "unloadEventStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventStart",
      "!doc": "The PerformanceTiming.unloadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event has been thrown. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0."
    },
    "unloadEventEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventEnd",
      "!doc": "The PerformanceTiming.unloadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0."
    },
    "redirectStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectStart",
      "!doc": "The PerformanceTiming.redirectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the first HTTP redirect starts. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0."
    },
    "redirectEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectEnd",
      "!doc": "The PerformanceTiming.redirectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0."
    },
    "fetchStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/fetchStart",
      "!doc": "The PerformanceTiming.fetchStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache."
    },
    "domainLookupStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupStart",
      "!doc": "The PerformanceTiming.domainLookupStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart."
    },
    "domainLookupEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupEnd",
      "!doc": "The PerformanceTiming.domainLookupEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart."
    },
    "connectStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectStart",
      "!doc": "The PerformanceTiming.connectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment start time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart."
    },
    "connectEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectEnd",
      "!doc": "The PerformanceTiming.connectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment end time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated."
    },
    "requestStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/requestStart",
      "!doc": "The PerformanceTiming.requestStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request."
    },
    "responseStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart",
      "!doc": "The PerformanceTiming.responseStart read-only property returns an unsigned long long representing the moment in time (in milliseconds since the UNIX epoch) when the browser received the first byte of the response from the server, cache, or local resource."
    },
    "responseEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseEnd",
      "!doc": "The PerformanceTiming.responseEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache, of from a local resource."
    },
    "domLoading": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domLoading",
      "!doc": "The PerformanceTiming.domLoading read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser started its work, that is when its Document.readyState changes to 'loading' and the corresponding readystatechange event is thrown."
    },
    "domInteractive": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domInteractive",
      "!doc": "The PerformanceTiming.domInteractive read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'interactive' and the corresponding readystatechange event is thrown."
    },
    "domContentLoadedEventStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventStart",
      "!doc": "The PerformanceTiming.domContentLoadedEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right before the parser sent the DOMContentLoaded event, that is right after all the scripts that need to be executed right after parsing has been executed."
    },
    "domContentLoadedEventEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd",
      "!doc": "The PerformanceTiming.domContentLoadedEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed."
    },
    "domComplete": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domComplete",
      "!doc": "The PerformanceTiming.domComplete read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'complete' and the corresponding readystatechange event is thrown."
    },
    "loadEventStart": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventStart",
      "!doc": "The PerformanceTiming.loadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event was sent for the current document. If this event has not yet been sent, it returns 0."
    },
    "loadEventEnd": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventEnd",
      "!doc": "The PerformanceTiming.loadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns 0."
    }
  },
  "PeriodicWave": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave",
    "!doc": "The PeriodicWave interface defines a periodic waveform that can be used to shape the output of an OscillatorNode."
  },
  "PermissionSettings": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PermissionSettings",
    "!doc": "The PermissionSettings interface provides ways to let the user manage all the permissions requested by all apps on a Firefox OS device.",
    "get": {
      "!type": "fn(permission: string, manifestURI: string, origin: string, browserFlag: bool) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PermissionSettings/get",
      "!doc": "The get method allows to retrieve the current status of a given permission for a given app."
    },
    "set": {
      "!type": "fn(permission: string, value: string, manifestURI: string, origin: string, browserFlag: bool)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PermissionSettings/set",
      "!doc": "The set method allows to change a given permission for a given app."
    },
    "isExplicit": {
      "!type": "fn(permission: string, manifestURI: string, origin: string, browserFlag: bool) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PermissionSettings/isExplicit",
      "!doc": "The isExplicit method allows to know if the setting is explicit (true) or implicit (false)."
    },
    "remove": {
      "!type": "fn(permission: string, manifestURI: string, origin: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PermissionSettings/remove",
      "!doc": "The remove method allows to simply reset a permission for an app which is running inside the browser app."
    }
  },
  "PermissionStatus": {
    "!proto": "EventTarget",
    "state": "PermissionState",
    "onchange": "fn(+Event)"
  },
  "Permissions": {
    "query": "fn(permission: object) -> +Promise[value=PermissionStatus]"
  },
  "PhoneNumberService": {
    "fuzzyMatch": "fn(number1?: string, number2?: string) -> DOMRequest",
    "normalize": "fn(number: string) -> string"
  },
  "Plugin": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Plugin",
    "!doc": "The Plugin interface provides information about a browser plugin.",
    "description": "string",
    "filename": "string",
    "version": "string",
    "name": "string",
    "length": "number",
    "item": "fn(index: number) -> MimeType",
    "namedItem": "fn(name: string) -> MimeType",
    "<i>": "MimeType",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "PluginArray": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PluginArray",
    "!doc": "The PluginArray interface is used to store a list of available plugins; it's returned by the window.navigator.plugins property.",
    "length": "number",
    "item": "fn(index: number) -> Plugin",
    "namedItem": "fn(name: string) -> Plugin",
    "refresh": "fn(reloadDocuments?: bool)",
    "<i>": "Plugin",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "PointerEvent": {
    "!type": "fn(type: string, eventInitDict?: PointerEventInit)",
    "prototype": {
      "!proto": "MouseEvent.prototype",
      "pointerId": "number",
      "width": "number",
      "height": "number",
      "pressure": "number",
      "tiltX": "number",
      "tiltY": "number",
      "pointerType": "string",
      "isPrimary": "bool"
    }
  },
  "PopStateEvent": {
    "!type": "fn(type: string, eventInitDict?: PopStateEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent",
    "!doc": "An event handler for the popstate event on the window.",
    "prototype": {
      "!proto": "Event.prototype",
      "state": "?"
    }
  },
  "PopupBlockedEvent": {
    "!type": "fn(type: string, eventInitDict?: PopupBlockedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "requestingWindow": "Window",
      "popupWindowURI": "URI",
      "popupWindowName": "string",
      "popupWindowFeatures": "string"
    }
  },
  "PopupBoxObject": {
    "!proto": "BoxObject",
    "showPopup": "fn(srcContent: HTMLElement, popupContent: HTMLElement, xpos: number, ypos: number, popupType?: string, anchorAlignment?: string, popupAlignment?: string)",
    "hidePopup": "fn(cancel?: bool)",
    "autoPosition": "bool",
    "enableKeyboardNavigator": "fn(enableKeyboardNavigator: bool)",
    "enableRollup": "fn(enableRollup: bool)",
    "ROLLUP_DEFAULT": "number",
    "ROLLUP_CONSUME": "number",
    "ROLLUP_NO_CONSUME": "number",
    "setConsumeRollupEvent": "fn(consume: number)",
    "sizeTo": "fn(width: number, height: number)",
    "moveTo": "fn(left: number, top: number)",
    "openPopup": "fn(anchorElement: HTMLElement, position?: string, x: number, y: number, isContextMenu: bool, attributesOverride: bool, triggerEvent: +Event)",
    "openPopupAtScreen": "fn(x: number, y: number, isContextMenu: bool, triggerEvent: +Event)",
    "openPopupAtScreenRect": "fn(position?: string, x: number, y: number, width: number, height: number, isContextMenu: bool, attributesOverride: bool, triggerEvent: +Event)",
    "popupState": "string",
    "triggerNode": "Node",
    "anchorNode": "HTMLElement",
    "getOuterScreenRect": "fn() -> +DOMRect",
    "moveToAnchor": "fn(anchorElement: HTMLElement, position?: string, x: number, y: number, attributesOverride: bool)",
    "alignmentPosition": "string",
    "alignmentOffset": "number"
  },
  "Presentation": {
    "!proto": "EventTarget",
    "defaultRequest": "+PresentationRequest",
    "receiver": "PresentationReceiver"
  },
  "PresentationAvailability": {
    "!proto": "EventTarget",
    "value": "bool",
    "onchange": "fn(+Event)"
  },
  "PresentationAvailableEvent": {
    "!type": "fn(typeArg: string, eventInitDict?: PresentationAvailableEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "available": "bool"
    }
  },
  "PresentationConnection": {
    "!proto": "EventTarget",
    "id": "string",
    "state": "PresentationConnectionState",
    "onstatechange": "fn(+Event)",
    "send": "fn(data: string)",
    "onmessage": "fn(+Event)",
    "terminate": "fn()"
  },
  "PresentationConnectionAvailableEvent": {
    "!type": "fn(type: string, eventInitDict?: PresentationConnectionAvailableEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "connection": "PresentationConnection"
    }
  },
  "PresentationDeviceInfoManager": {
    "!proto": "EventTarget",
    "ondevicechange": "fn(+Event)",
    "getAll": "fn() -> +Promise",
    "forceDiscovery": "fn()"
  },
  "PresentationReceiver": {
    "!proto": "EventTarget",
    "getConnection": "fn() -> +Promise[value=PresentationConnection]",
    "getConnections": "fn() -> +Promise",
    "onconnectionavailable": "fn(+Event)"
  },
  "PresentationRequest": {
    "!type": "fn(url: string)",
    "prototype": {
      "!proto": "EventTarget",
      "start": "fn() -> +Promise[value=PresentationConnection]",
      "getAvailability": "fn() -> +Promise[value=PresentationAvailability]",
      "onconnectionavailable": "fn(+Event)"
    }
  },
  "PresentationSession": {
    "!proto": "EventTarget",
    "id": "string",
    "state": "PresentationSessionState",
    "onstatechange": "fn(+Event)",
    "send": "fn(data: string)",
    "onmessage": "fn(+Event)",
    "close": "fn()"
  },
  "ProcessingInstruction": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction",
    "!doc": "A processing instruction provides an opportunity for application-specific instructions to be embedded within XML and which can be ignored by XML processors which do not support processing their instructions (outside of their having a place in the DOM).",
    "!proto": "CharacterData",
    "target": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "ProgressEvent": {
    "!type": "fn(type: string, eventInitDict?: ProgressEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent",
    "!doc": "The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).",
    "prototype": {
      "!proto": "Event.prototype",
      "lengthComputable": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable",
        "!doc": "The ProgressEvent.lengthComputable read-only property is a Boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value."
      },
      "loaded": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/loaded",
        "!doc": "The ProgressEvent.loaded read-only property is an unsigned long long representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and ProgressEvent.total. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead."
      },
      "total": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/total",
        "!doc": "The ProgressEvent.total read-only property is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead."
      }
    }
  },
  "UncaughtRejectionObserver": {
    "onLeftUncaught": "fn(p: +Promise)",
    "onConsumed": "fn(p: +Promise)"
  },
  "PushEvent": {
    "!type": "fn(type: string, eventInitDict?: PushEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushEvent",
    "!doc": "Doesn't implement any specific properties, but inherits properties from its parent, ExtendableEvent.",
    "prototype": {
      "!proto": "ExtendableEvent.prototype",
      "data": {
        "!type": "PushMessageData",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushEvent/data",
        "!doc": "A PushMessageData object."
      }
    }
  },
  "PushManager": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushManager",
    "!doc": "The PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.",
    "setPushManagerImpl": "fn(store: PushManagerImpl)",
    "subscribe": {
      "!type": "fn() -> +Promise[value=PushSubscription]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushManager/subscribe",
      "!doc": "The subscribe() method of the PushManager interface subscribes to a push service."
    },
    "getSubscription": {
      "!type": "fn() -> +Promise[value=PushSubscription]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushManager/getSubscription",
      "!doc": "The PushManager.getSubscription() method of the PushManager interface retrieves an existing push subscription."
    },
    "permissionState": "fn() -> +Promise[value=PushPermissionState]"
  },
  "PushMessageData": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushMessageData",
    "!doc": "The PushMessageData interface of the Push API provides access to push data sent by a server, and methods to manipulate the data.",
    "arrayBuffer": {
      "!type": "fn() -> +ArrayBuffer",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/arrayBuffer",
      "!doc": "The arrayBuffer()method of the PushMessageData interface extracts the data as an ArrayBuffer object."
    },
    "blob": {
      "!type": "fn() -> +Blob",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/blob",
      "!doc": "The blob()method of the PushMessageData interface extracts the data as an Blob object."
    },
    "json": {
      "!type": "fn() -> ?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/json",
      "!doc": "The json()method of the PushMessageData interface extracts the data as a JSON object."
    },
    "text": {
      "!type": "fn() -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/text",
      "!doc": "The text()method of the PushMessageData interface extracts the data as a plain text string."
    }
  },
  "PushSubscription": {
    "endpoint": "string",
    "getKey": "fn(name: PushEncryptionKeyName) -> +ArrayBuffer",
    "unsubscribe": "fn() -> +Promise[value=bool]",
    "toJSON": "fn() -> PushSubscriptionJSON",
    "setPrincipal": "fn(principal: Principal)"
  },
  "RGBColor": {
    "red": "CSSPrimitiveValue",
    "green": "CSSPrimitiveValue",
    "blue": "CSSPrimitiveValue",
    "alpha": "CSSPrimitiveValue"
  },
  "RTCCertificate": {
    "expires": "DOMTimeStamp"
  },
  "RTCDataChannel": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel",
    "!doc": "The RTCDataChannel interface represents a bi-directional data channel between two peers of a connection."
  },
  "RTCDataChannelEvent": {
    "!type": "fn(type: string, eventInitDict?: RTCDataChannelEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent",
    "!doc": "The RTCDataChannelEvent interface represents events that occurs while attaching a RTCDataChannel to a RTCPeerConnection. The only event sent with this interface is datachannel.",
    "prototype": {
      "!proto": "Event.prototype",
      "channel": {
        "!type": "RTCDataChannel",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent/channel",
        "!doc": "The read-only property RTCDataChannelEvent.channel returns the RTCDataChannel associated with the event."
      }
    }
  },
  "RTCIceCandidate": {
    "!type": "fn(candidateInitDict?: RTCIceCandidateInit)",
    "prototype": {
      "candidate": "string",
      "sdpMid": "string",
      "sdpMLineIndex": "number"
    }
  },
  "RTCIdentityProvider": {
    "generateAssertion": "fn(contents: string, origin: string, usernameHint?: string) -> +Promise[value=RTCIdentityAssertionResult]",
    "validateAssertion": "fn(assertion: string, origin: string) -> +Promise[value=RTCIdentityValidationResult]"
  },
  "RTCPeerConnection": {
    "!type": "fn(configuration?: RTCConfiguration, constraints?: object)",
    "generateCertificate": "fn(keygenAlgorithm: AlgorithmIdentifier) -> +Promise[value=RTCCertificate]",
    "prototype": {
      "!proto": "EventTarget",
      "setIdentityProvider": "fn(provider: string, protocol?: string, username?: string)",
      "getIdentityAssertion": "fn() -> +Promise[value=string]",
      "createOffer": "fn(options?: RTCOfferOptions) -> +Promise[value=+RTCSessionDescription]",
      "createAnswer": "fn(options?: RTCAnswerOptions) -> +Promise[value=+RTCSessionDescription]",
      "setLocalDescription": "fn(description: +RTCSessionDescription) -> +Promise[value=void]",
      "setRemoteDescription": "fn(description: +RTCSessionDescription) -> +Promise[value=void]",
      "localDescription": "+RTCSessionDescription",
      "remoteDescription": "+RTCSessionDescription",
      "signalingState": "RTCSignalingState",
      "updateIce": "fn(configuration?: RTCConfiguration)",
      "addIceCandidate": "fn(candidate: +RTCIceCandidate) -> +Promise[value=void]",
      "iceGatheringState": "RTCIceGatheringState",
      "iceConnectionState": "RTCIceConnectionState",
      "peerIdentity": "+Promise[value=RTCIdentityAssertion]",
      "idpLoginUrl": "string",
      "id": "string",
      "getConfiguration": "fn() -> RTCConfiguration",
      "getLocalStreams": "fn() -> [+MediaStream]",
      "getRemoteStreams": "fn() -> [+MediaStream]",
      "getStreamById": "fn(streamId: string) -> +MediaStream",
      "addStream": "fn(stream: +MediaStream)",
      "removeStream": "fn(stream: +MediaStream)",
      "addTrack": "fn(track: MediaStreamTrack, stream: +MediaStream, moreStreams: +MediaStream) -> RTCRtpSender",
      "removeTrack": "fn(sender: RTCRtpSender)",
      "getSenders": "fn() -> [RTCRtpSender]",
      "getReceivers": "fn() -> [RTCRtpReceiver]",
      "close": "fn()",
      "onnegotiationneeded": "fn(+Event)",
      "onicecandidate": "fn(+Event)",
      "onsignalingstatechange": "fn(+Event)",
      "onaddstream": "fn(+Event)",
      "onaddtrack": "fn(+Event)",
      "onremovestream": "fn(+Event)",
      "oniceconnectionstatechange": "fn(+Event)",
      "getStats": "fn(selector?: MediaStreamTrack) -> +Promise[value=RTCStatsReport]",
      "createDataChannel": "fn(label: string, dataChannelDict?: RTCDataChannelInit) -> RTCDataChannel",
      "ondatachannel": "fn(+Event)"
    }
  },
  "RTCPeerConnectionIceEvent": {
    "!type": "fn(type: string, eventInitDict?: RTCPeerConnectionIceEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent",
    "!doc": "The RTCPeerConnectionIceEvent interface represents events that occurs in relation to ICE candidates with the target, usually a RTCPeerConnection. Only one event is of this type: icecandidate.",
    "prototype": {
      "!proto": "Event.prototype",
      "candidate": {
        "!type": "+RTCIceCandidate",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/candidate",
        "!doc": "The read-only property RTCPeerConnectionIceEvent.candidate returns the RTCIceCandidate associated with the event."
      }
    }
  },
  "RTCRtpReceiver": {
    "track": "MediaStreamTrack"
  },
  "RTCRtpSender": {
    "track": "MediaStreamTrack",
    "setParameters": "fn(parameters?: RTCRtpParameters)",
    "getParameters": "fn() -> RTCRtpParameters",
    "replaceTrack": "fn(track: MediaStreamTrack) -> +Promise[value=void]"
  },
  "RTCSessionDescription": {
    "!type": "fn(descriptionInitDict?: RTCSessionDescriptionInit)",
    "prototype": {
      "type": "RTCSdpType",
      "sdp": "string"
    }
  },
  "RTCStatsReport": {
    "mozPcid": "string",
    "forEach": "fn(callbackFn: fn(obj: RTCStatsReport), thisArg?: ?)",
    "get": "fn(key: string) -> object",
    "has": "fn(key: string) -> bool"
  },
  "RadioNodeList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList",
    "!doc": "The RadioNodeList interface represents a collection of elements in a <form> or a <fieldset> element.",
    "!proto": "NodeList",
    "value": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value",
      "!doc": "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked."
    }
  },
  "Range": {
    "!type": "fn()",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range",
    "!doc": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.",
    "prototype": {
      "startContainer": {
        "!type": "Node",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer",
        "!doc": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods."
      },
      "startOffset": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset",
        "!doc": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts."
      },
      "endContainer": {
        "!type": "Node",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer",
        "!doc": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one."
      },
      "endOffset": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset",
        "!doc": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends."
      },
      "collapsed": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed",
        "!doc": "The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not."
      },
      "commonAncestorContainer": {
        "!type": "Node",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer",
        "!doc": "The Range.commonAncestorContainer read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the commonAncestorContainer."
      },
      "setStart": {
        "!type": "fn(refNode: Node, offset: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/setStart",
        "!doc": "The Range.setStart() method sets the start position of a Range."
      },
      "setEnd": {
        "!type": "fn(refNode: Node, offset: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd",
        "!doc": "The Range.setEnd() method sets the end position of a Range."
      },
      "setStartBefore": {
        "!type": "fn(refNode: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore",
        "!doc": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode."
      },
      "setStartAfter": {
        "!type": "fn(refNode: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter",
        "!doc": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode."
      },
      "setEndBefore": {
        "!type": "fn(refNode: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore",
        "!doc": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode."
      },
      "setEndAfter": {
        "!type": "fn(refNode: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter",
        "!doc": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode."
      },
      "collapse": {
        "!type": "fn(toStart?: bool)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/collapse",
        "!doc": "The Range.collapse() method collapses the Range to one of its boundary points."
      },
      "selectNode": {
        "!type": "fn(refNode: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode",
        "!doc": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode."
      },
      "selectNodeContents": {
        "!type": "fn(refNode: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents",
        "!doc": "The Range.selectNodeContents() sets the Range to contain the contents of a Node."
      },
      "START_TO_START": "number",
      "START_TO_END": "number",
      "END_TO_END": "number",
      "END_TO_START": "number",
      "compareBoundaryPoints": {
        "!type": "fn(how: number, sourceRange: +Range) -> number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints",
        "!doc": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with another one."
      },
      "deleteContents": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents",
        "!doc": "The Range.deleteContents() removes the contents of the Range from the Document."
      },
      "extractContents": {
        "!type": "fn() -> +DocumentFragment",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents",
        "!doc": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment."
      },
      "cloneContents": {
        "!type": "fn() -> +DocumentFragment",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents",
        "!doc": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range."
      },
      "insertNode": {
        "!type": "fn(node: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode",
        "!doc": "The Range.insertNode() method inserts a node at the start of the Range."
      },
      "surroundContents": {
        "!type": "fn(newParent: Node)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents",
        "!doc": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range."
      },
      "cloneRange": {
        "!type": "fn() -> +Range",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange",
        "!doc": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range."
      },
      "detach": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/detach",
        "!doc": "The Range.detach() method releases a Range from use. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR."
      },
      "isPointInRange": {
        "!type": "fn(node: Node, offset: number) -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange",
        "!doc": "The Range.isPointInRange() method returns a boolean indicating whether the given point is in the Range. It returns true if the point (cursor position) at offset within ReferenceNode is within this range."
      },
      "comparePoint": {
        "!type": "fn(node: Node, offset: number) -> number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint",
        "!doc": "The Range.comparePoint() method returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the Range."
      },
      "intersectsNode": {
        "!type": "fn(node: Node) -> bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode",
        "!doc": "The Range.intersectsNode() method returns a boolean indicating whether the given Node intersects the Range."
      },
      "createContextualFragment": {
        "!type": "fn(fragment: string) -> +DocumentFragment",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment",
        "!doc": "The Range.createContextualFragment() method returns a DocumentFragment by invoking the HTML fragment parsing algorithm or the XML fragment parsing algorithm with the start of the range (the parent of the selected node) as the context node. The HTML fragment parsing algorithm is used if the range belongs to a Document whose HTMLness bit is set. In the HTML case, if the context node would be html, for historical reasons the fragment parsing algorithm is invoked with body as the context instead."
      },
      "getClientRects": {
        "!type": "fn() -> DOMRectList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects",
        "!doc": "The Range.getClientRects() method returns a list of ClientRect objects representing the area of the screen occupied by the range. This is created by aggregating the results of calls to Element.getClientRects() for all the elements in the range."
      },
      "getBoundingClientRect": {
        "!type": "fn() -> +DOMRect",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect",
        "!doc": "The Range.getBoundingClientRect() method returns a ClientRect object that bounds the contents of the range; this a rectangle enclosing the union of the bounding rectangles for all the elements in the range."
      },
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "RecordErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: RecordErrorEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "name": "string"
    }
  },
  "Rect": {
    "top": "CSSPrimitiveValue",
    "right": "CSSPrimitiveValue",
    "bottom": "CSSPrimitiveValue",
    "left": "CSSPrimitiveValue",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "Request": {
    "!type": "fn(input: RequestInfo, init?: RequestInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request",
    "!doc": "The Request interface of the Fetch API represents a resource request.",
    "prototype": {
      "method": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/method",
        "!doc": "The method read-only property of the Request interface contains the request's method (GET, POST, etc.)"
      },
      "url": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/url",
        "!doc": "The url read-only property of the Request interface contains the URL of the request."
      },
      "headers": {
        "!type": "+Headers",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/headers",
        "!doc": "The headers read-only property of the Request interface contains the Headers object associated with the request."
      },
      "context": {
        "!type": "RequestContext",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/context",
        "!doc": "The context read-only property of the Request interface contains the context of the Request (e.g., audio, image, iframe). This defines what sort of resource is being fetched."
      },
      "referrer": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/referrer",
        "!doc": "The referrer read-only property of the Request interface is set by the user agent to be the referrer of the Request. (e.g., about:client, no-referrer, or a URL.)"
      },
      "mode": {
        "!type": "RequestMode",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/mode",
        "!doc": "The mode read-only property of the Request interface contains the mode of the request (e.g., cors, no-cors, cors-with-forced-preflight, or same-origin.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable:"
      },
      "credentials": {
        "!type": "RequestCredentials",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/credentials",
        "!doc": "The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests. This is similar to XHR’s withCredentials flag, but with three available values (instead of two):"
      },
      "cache": {
        "!type": "RequestCache",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/cache",
        "!doc": "The cache read-only property of the Request interface contains the cache mode of the request (e.g., default, no-store, reload, no-cache, force-cache, only-if-cached.)"
      },
      "redirect": "RequestRedirect",
      "clone": {
        "!type": "fn() -> +Request",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Request/clone",
        "!doc": "The clone() method of the Request interface creates a copy of the current Request object."
      },
      "setContentPolicyType": "fn(context: nsContentPolicyType)",
      "bodyUsed": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed",
        "!doc": "The bodyUsed read-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet."
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=+ArrayBuffer]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer",
        "!doc": "The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer."
      },
      "blob": {
        "!type": "fn() -> +Promise[value=+Blob]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/blob",
        "!doc": "The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob."
      },
      "formData": {
        "!type": "fn() -> +Promise[value=+FormData]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/formData",
        "!doc": "The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object."
      },
      "json": {
        "!type": "fn() -> +Promise[value=object]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/json",
        "!doc": "The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an object literal containing the JSON data."
      },
      "text": {
        "!type": "fn() -> +Promise[value=string]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/text",
        "!doc": "The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text)."
      }
    }
  },
  "RequestSyncApp": {
    "origin": "string",
    "manifestURL": "string",
    "isInBrowserElement": "bool"
  },
  "RequestSyncTask": {
    "app": "RequestSyncApp",
    "state": "RequestSyncTaskPolicyState",
    "overwrittenMinInterval": "number",
    "task": "string",
    "lastSync": "DOMTimeStamp",
    "wakeUpPage": "string",
    "oneShot": "bool",
    "minInterval": "number",
    "wifiOnly": "bool",
    "data": "?",
    "setPolicy": "fn(aState: RequestSyncTaskPolicyState, ovewrittenMinInterval?: number) -> +Promise[value=void]",
    "runNow": "fn() -> +Promise[value=void]"
  },
  "RequestSyncManager": {
    "registrations": "fn() -> +Promise"
  },
  "RequestSyncScheduler": {
    "register": "fn(task: string, params?: RequestTaskParams) -> +Promise[value=void]",
    "unregister": "fn(task: string) -> +Promise[value=void]",
    "registrations": "fn() -> +Promise",
    "registration": "fn(task: string) -> +Promise[value=RequestTaskFull]"
  },
  "NetworkStatsData": {
    "receivedBytes": "number",
    "sentBytes": "number",
    "timestamp": "DOMTimeStamp"
  },
  "PowerStatsData": {
    "consumedPower": "number",
    "timestamp": "DOMTimeStamp"
  },
  "ResourceStats": {
    "type": "ResourceType",
    "component": "string",
    "serviceType": "SystemService",
    "manifestURL": "string",
    "getData": "fn() -> [NetworkStatsData|PowerStatsData]",
    "start": "DOMTimeStamp",
    "end": "DOMTimeStamp"
  },
  "ResourceStatsAlarm": {
    "alarmId": "number",
    "type": "ResourceType",
    "component": "string",
    "serviceType": "SystemService",
    "manifestURL": "string",
    "threshold": "number",
    "data": "?"
  },
  "ResourceStatsManager": {
    "!type": "fn(type: ResourceType)",
    "prototype": {
      "getStats": "fn(statsOptions?: ResourceStatsOptions, start?: DOMTimeStamp, end?: DOMTimeStamp) -> +Promise[value=ResourceStats]",
      "clearStats": "fn(statsOptions?: ResourceStatsOptions, start?: DOMTimeStamp, end?: DOMTimeStamp) -> +Promise[value=?]",
      "clearAllStats": "fn() -> +Promise[value=?]",
      "addAlarm": "fn(threshold: number, statsOptions?: ResourceStatsOptions, alarmOptions?: ResourceStatsAlarmOptions) -> +Promise[value=number]",
      "getAlarms": "fn(statsOptions?: ResourceStatsOptions) -> +Promise",
      "removeAlarm": "fn(alarmId: number) -> +Promise[value=?]",
      "removeAllAlarms": "fn() -> +Promise[value=?]",
      "getAvailableComponents": "fn() -> +Promise",
      "resourceTypes": "[string]",
      "sampleRate": "number",
      "maxStorageAge": "number"
    }
  },
  "Response": {
    "!type": "fn(body?: BodyInit, init?: ResponseInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response",
    "!doc": "The Response interface of the Fetch API represents the response to a request.",
    "error": {
      "!type": "fn() -> +Response",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/error",
      "!doc": "The error() method of the Response interface returns a new Response object associated with a network error."
    },
    "redirect": {
      "!type": "fn(url: string, status?: number) -> +Response",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/redirect",
      "!doc": "The redirect() method of the Response interface returns a Response resulting in a redirect to the specified URL."
    },
    "prototype": {
      "type": {
        "!type": "ResponseType",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/type",
        "!doc": "The type read-only property of the Response interface contains the type of the response. It can be one of the following:"
      },
      "url": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/url",
        "!doc": "The url read-only property of the Response interface contains the URL of the response."
      },
      "status": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/status",
        "!doc": "The status read-only property of the Response interface contains the status code of the response (e.g., 200 for a success)."
      },
      "ok": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/ok",
        "!doc": "The ok read-only property of the Response interface contains a boolean stating whether the response was successful (status in the range 200-299) or not."
      },
      "statusText": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/statusText",
        "!doc": "The statusText read-only property of the Response interface contains the status message corresponding to the status code (e.g., OK for 200)."
      },
      "headers": {
        "!type": "+Headers",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/headers",
        "!doc": "The headers read-only property of the Response interface contains the Headers object associated with the response."
      },
      "clone": {
        "!type": "fn() -> +Response",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Response/clone",
        "!doc": "The clone() method of the Response interface creates a clone of a response object, identical in every way, but stored in a different variable."
      },
      "bodyUsed": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed",
        "!doc": "The bodyUsed read-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet."
      },
      "arrayBuffer": {
        "!type": "fn() -> +Promise[value=+ArrayBuffer]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer",
        "!doc": "The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer."
      },
      "blob": {
        "!type": "fn() -> +Promise[value=+Blob]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/blob",
        "!doc": "The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob."
      },
      "formData": {
        "!type": "fn() -> +Promise[value=+FormData]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/formData",
        "!doc": "The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object."
      },
      "json": {
        "!type": "fn() -> +Promise[value=object]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/json",
        "!doc": "The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an object literal containing the JSON data."
      },
      "text": {
        "!type": "fn() -> +Promise[value=string]",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Body/text",
        "!doc": "The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text)."
      }
    }
  },
  "SVGAElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAElement",
    "!doc": "The SVGAElement interface provides access to the properties of <a> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "target": "SVGAnimatedString",
    "download": "string",
    "href": "SVGAnimatedString"
  },
  "SVGAltGlyphElement": {
    "!proto": "SVGTextPositioningElement",
    "glyphRef": "string",
    "format": "string",
    "href": "SVGAnimatedString"
  },
  "SVGAngle": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAngle",
    "!doc": "The SVGAngle interface correspond to the <angle> basic data type.",
    "SVG_ANGLETYPE_UNKNOWN": "number",
    "SVG_ANGLETYPE_UNSPECIFIED": "number",
    "SVG_ANGLETYPE_DEG": "number",
    "SVG_ANGLETYPE_RAD": "number",
    "SVG_ANGLETYPE_GRAD": "number",
    "unitType": "number",
    "value": "number",
    "valueInSpecifiedUnits": "number",
    "valueAsString": "string",
    "newValueSpecifiedUnits": "fn(unitType: number, valueInSpecifiedUnits: number)",
    "convertToSpecifiedUnits": "fn(unitType: number)"
  },
  "SVGAnimateElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement",
    "!doc": "The SVGAnimateElement interface corresponds to the <animate> element.",
    "!proto": "SVGAnimationElement"
  },
  "SVGAnimateMotionElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement",
    "!doc": "The SVGAnimateMotionElement interface corresponds to the <animateMotion> element.",
    "!proto": "SVGAnimationElement"
  },
  "SVGAnimateTransformElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement",
    "!doc": "The SVGAnimateTransformElement interface corresponds to the <animateTransform> element.",
    "!proto": "SVGAnimationElement"
  },
  "SVGAnimatedAngle": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle",
    "!doc": "The SVGAnimatedAngle interface is used for attributes of basic type <angle> which can be animated.",
    "baseVal": "SVGAngle",
    "animVal": "SVGAngle"
  },
  "SVGAnimatedBoolean": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean",
    "!doc": "The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.",
    "baseVal": "bool",
    "animVal": "bool"
  },
  "SVGAnimatedEnumeration": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration",
    "!doc": "The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.",
    "baseVal": "number",
    "animVal": "number",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGAnimatedInteger": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger",
    "!doc": "The SVGAnimatedInteger interface is used for attributes of basic type <integer> which can be animated.",
    "baseVal": "number",
    "animVal": "number",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGAnimatedLength": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength",
    "!doc": "The SVGAnimatedLength interface is used for attributes of basic type <length> which can be animated.",
    "baseVal": "SVGLength",
    "animVal": "SVGLength"
  },
  "SVGAnimatedLengthList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList",
    "!doc": "The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.",
    "baseVal": "SVGLengthList",
    "animVal": "SVGLengthList"
  },
  "SVGAnimatedNumber": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber",
    "!doc": "The SVGAnimatedNumber interface is used for attributes of basic type <Number> which can be animated.",
    "baseVal": "number",
    "animVal": "number",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGAnimatedNumberList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList",
    "!doc": "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.",
    "baseVal": "SVGNumberList",
    "animVal": "SVGNumberList",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGAnimatedPreserveAspectRatio": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio",
    "!doc": "The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.",
    "baseVal": "SVGPreserveAspectRatio",
    "animVal": "SVGPreserveAspectRatio",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGAnimatedRect": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect",
    "!doc": "The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.",
    "baseVal": "SVGRect",
    "animVal": "SVGRect"
  },
  "SVGAnimatedString": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString",
    "!doc": "The SVGAnimatedString interface is used for attributes of type DOMString which can be animated.",
    "baseVal": "string",
    "animVal": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGAnimatedTransformList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList",
    "!doc": "The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.",
    "baseVal": "SVGTransformList",
    "animVal": "SVGTransformList"
  },
  "SVGAnimationElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement",
    "!doc": "The SVGAnimationElement interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.",
    "!proto": "SVGElement",
    "targetElement": "SVGElement",
    "getStartTime": "fn() -> number",
    "getCurrentTime": "fn() -> number",
    "getSimpleDuration": "fn() -> number",
    "beginElement": "fn()",
    "beginElementAt": "fn(offset: number)",
    "endElement": "fn()",
    "endElementAt": "fn(offset: number)",
    "requiredFeatures": "SVGStringList",
    "requiredExtensions": "SVGStringList",
    "systemLanguage": "SVGStringList",
    "hasExtension": "fn(extension: string) -> bool"
  },
  "SVGCircleElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement",
    "!doc": "The SVGCircleElement interface provides access to the properties of <circle> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "cx": "SVGAnimatedLength",
    "cy": "SVGAnimatedLength",
    "r": "SVGAnimatedLength"
  },
  "SVGClipPathElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement",
    "!doc": "The SVGClipPathElement interface provides access to the properties of <clipPath> elements, as well as methods to manipulate them.",
    "!proto": "SVGElement",
    "clipPathUnits": "SVGAnimatedEnumeration",
    "transform": "SVGAnimatedTransformList",
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number"
  },
  "SVGComponentTransferFunctionElement": {
    "!proto": "SVGElement",
    "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_TABLE": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA": "number",
    "type": "SVGAnimatedEnumeration",
    "tableValues": "SVGAnimatedNumberList",
    "slope": "SVGAnimatedNumber",
    "intercept": "SVGAnimatedNumber",
    "amplitude": "SVGAnimatedNumber",
    "exponent": "SVGAnimatedNumber",
    "offset": "SVGAnimatedNumber"
  },
  "SVGDefsElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement",
    "!doc": "The SVGDefsElement interface corresponds to the <defs> element.",
    "!proto": "SVGGraphicsElement"
  },
  "SVGDescElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement",
    "!doc": "The SVGDescElement interface corresponds to the <desc> element.",
    "!proto": "SVGElement"
  },
  "SVGDocument": {
    "!proto": "Document.prototype",
    "domain": "string",
    "rootElement": "SVGElement"
  },
  "SVGElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGElement",
    "!doc": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.",
    "!proto": "Element",
    "id": "string",
    "className": "SVGAnimatedString",
    "style": "CSS2Properties",
    "ownerSVGElement": "SVGSVGElement",
    "viewportElement": "SVGElement",
    "oncopy": "fn(+Event)",
    "oncut": "fn(+Event)",
    "onpaste": "fn(+Event)",
    "onabort": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
      "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
    },
    "onblur": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
      "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
    },
    "onfocus": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
      "!doc": "The onfocus property returns the onFocus event handler code on the current element."
    },
    "oncanplay": "fn(+Event)",
    "oncanplaythrough": "fn(+Event)",
    "onchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
      "!doc": "The onchange property sets and returns the event handler for the change event."
    },
    "onclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
      "!doc": "The onclick property returns the click event handler code on the current element."
    },
    "oncontextmenu": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
      "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
    },
    "ondblclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
      "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
    },
    "ondrag": "fn(+Event)",
    "ondragend": "fn(+Event)",
    "ondragenter": "fn(+Event)",
    "ondragleave": "fn(+Event)",
    "ondragover": "fn(+Event)",
    "ondragstart": "fn(+Event)",
    "ondrop": "fn(+Event)",
    "ondurationchange": "fn(+Event)",
    "onemptied": "fn(+Event)",
    "onended": "fn(+Event)",
    "oninput": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
      "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
    },
    "oninvalid": "fn(+Event)",
    "onkeydown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
      "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
    },
    "onkeypress": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
      "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
    },
    "onkeyup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
      "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
    },
    "onload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
      "!doc": "An event handler for the load event of a window."
    },
    "onloadeddata": "fn(+Event)",
    "onloadedmetadata": "fn(+Event)",
    "onloadstart": "fn(+Event)",
    "onmousedown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
      "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
    },
    "onmouseenter": "fn(+Event)",
    "onmouseleave": "fn(+Event)",
    "onmousemove": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
      "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
    },
    "onmouseout": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
      "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
    },
    "onmouseover": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
      "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
    },
    "onmouseup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
      "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
    },
    "onpause": "fn(+Event)",
    "onplay": "fn(+Event)",
    "onplaying": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onratechange": "fn(+Event)",
    "onreset": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
      "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
    },
    "onresize": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
      "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
    },
    "onscroll": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
      "!doc": "An event handler for scroll events on element."
    },
    "onseeked": "fn(+Event)",
    "onseeking": "fn(+Event)",
    "onselect": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
      "!doc": "An event handler for the select event on the window."
    },
    "onshow": "fn(+Event)",
    "onstalled": "fn(+Event)",
    "onsubmit": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
      "!doc": "An event handler for the submit event on the window."
    },
    "onsuspend": "fn(+Event)",
    "ontimeupdate": "fn(+Event)",
    "onvolumechange": "fn(+Event)",
    "onwaiting": "fn(+Event)",
    "onselectstart": "fn(+Event)",
    "onpointercancel": "fn(+Event)",
    "onpointerdown": "fn(+Event)",
    "onpointerup": "fn(+Event)",
    "onpointermove": "fn(+Event)",
    "onpointerout": "fn(+Event)",
    "onpointerover": "fn(+Event)",
    "onpointerenter": "fn(+Event)",
    "onpointerleave": "fn(+Event)",
    "ongotpointercapture": "fn(+Event)",
    "onlostpointercapture": "fn(+Event)",
    "onmozfullscreenchange": "fn(+Event)",
    "onmozfullscreenerror": "fn(+Event)",
    "onmozpointerlockchange": "fn(+Event)",
    "onmozpointerlockerror": "fn(+Event)",
    "ontouchstart": "fn(+Event)",
    "ontouchend": "fn(+Event)",
    "ontouchmove": "fn(+Event)",
    "ontouchcancel": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "SVGEllipseElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement",
    "!doc": "The SVGEllipseElement interface provides access to the properties of <ellipse> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "cx": "SVGAnimatedLength",
    "cy": "SVGAnimatedLength",
    "rx": "SVGAnimatedLength",
    "ry": "SVGAnimatedLength"
  },
  "SVGFEBlendElement": {
    "!proto": "SVGElement",
    "SVG_FEBLEND_MODE_UNKNOWN": "number",
    "SVG_FEBLEND_MODE_NORMAL": "number",
    "SVG_FEBLEND_MODE_MULTIPLY": "number",
    "SVG_FEBLEND_MODE_SCREEN": "number",
    "SVG_FEBLEND_MODE_DARKEN": "number",
    "SVG_FEBLEND_MODE_LIGHTEN": "number",
    "SVG_FEBLEND_MODE_OVERLAY": "number",
    "SVG_FEBLEND_MODE_COLOR_DODGE": "number",
    "SVG_FEBLEND_MODE_COLOR_BURN": "number",
    "SVG_FEBLEND_MODE_HARD_LIGHT": "number",
    "SVG_FEBLEND_MODE_SOFT_LIGHT": "number",
    "SVG_FEBLEND_MODE_DIFFERENCE": "number",
    "SVG_FEBLEND_MODE_EXCLUSION": "number",
    "SVG_FEBLEND_MODE_HUE": "number",
    "SVG_FEBLEND_MODE_SATURATION": "number",
    "SVG_FEBLEND_MODE_COLOR": "number",
    "SVG_FEBLEND_MODE_LUMINOSITY": "number",
    "in1": "SVGAnimatedString",
    "in2": "SVGAnimatedString",
    "mode": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEColorMatrixElement": {
    "!proto": "SVGElement",
    "SVG_FECOLORMATRIX_TYPE_UNKNOWN": "number",
    "SVG_FECOLORMATRIX_TYPE_MATRIX": "number",
    "SVG_FECOLORMATRIX_TYPE_SATURATE": "number",
    "SVG_FECOLORMATRIX_TYPE_HUEROTATE": "number",
    "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA": "number",
    "in1": "SVGAnimatedString",
    "type": "SVGAnimatedEnumeration",
    "values": "SVGAnimatedNumberList",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEComponentTransferElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFECompositeElement": {
    "!proto": "SVGElement",
    "SVG_FECOMPOSITE_OPERATOR_UNKNOWN": "number",
    "SVG_FECOMPOSITE_OPERATOR_OVER": "number",
    "SVG_FECOMPOSITE_OPERATOR_IN": "number",
    "SVG_FECOMPOSITE_OPERATOR_OUT": "number",
    "SVG_FECOMPOSITE_OPERATOR_ATOP": "number",
    "SVG_FECOMPOSITE_OPERATOR_XOR": "number",
    "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC": "number",
    "in1": "SVGAnimatedString",
    "in2": "SVGAnimatedString",
    "operator": "SVGAnimatedEnumeration",
    "k1": "SVGAnimatedNumber",
    "k2": "SVGAnimatedNumber",
    "k3": "SVGAnimatedNumber",
    "k4": "SVGAnimatedNumber",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEConvolveMatrixElement": {
    "!proto": "SVGElement",
    "SVG_EDGEMODE_UNKNOWN": "number",
    "SVG_EDGEMODE_DUPLICATE": "number",
    "SVG_EDGEMODE_WRAP": "number",
    "SVG_EDGEMODE_NONE": "number",
    "in1": "SVGAnimatedString",
    "orderX": "SVGAnimatedInteger",
    "orderY": "SVGAnimatedInteger",
    "kernelMatrix": "SVGAnimatedNumberList",
    "divisor": "SVGAnimatedNumber",
    "bias": "SVGAnimatedNumber",
    "targetX": "SVGAnimatedInteger",
    "targetY": "SVGAnimatedInteger",
    "edgeMode": "SVGAnimatedEnumeration",
    "kernelUnitLengthX": "SVGAnimatedNumber",
    "kernelUnitLengthY": "SVGAnimatedNumber",
    "preserveAlpha": "SVGAnimatedBoolean",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEDiffuseLightingElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "surfaceScale": "SVGAnimatedNumber",
    "diffuseConstant": "SVGAnimatedNumber",
    "kernelUnitLengthX": "SVGAnimatedNumber",
    "kernelUnitLengthY": "SVGAnimatedNumber",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEDisplacementMapElement": {
    "!proto": "SVGElement",
    "SVG_CHANNEL_UNKNOWN": "number",
    "SVG_CHANNEL_R": "number",
    "SVG_CHANNEL_G": "number",
    "SVG_CHANNEL_B": "number",
    "SVG_CHANNEL_A": "number",
    "in1": "SVGAnimatedString",
    "in2": "SVGAnimatedString",
    "scale": "SVGAnimatedNumber",
    "xChannelSelector": "SVGAnimatedEnumeration",
    "yChannelSelector": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEDistantLightElement": {
    "!proto": "SVGElement",
    "azimuth": "SVGAnimatedNumber",
    "elevation": "SVGAnimatedNumber"
  },
  "SVGFEDropShadowElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "dx": "SVGAnimatedNumber",
    "dy": "SVGAnimatedNumber",
    "stdDeviationX": "SVGAnimatedNumber",
    "stdDeviationY": "SVGAnimatedNumber",
    "setStdDeviation": "fn(stdDeviationX: number, stdDeviationY: number)",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEFloodElement": {
    "!proto": "SVGElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEFuncAElement": {
    "!proto": "SVGComponentTransferFunctionElement"
  },
  "SVGFEFuncBElement": {
    "!proto": "SVGComponentTransferFunctionElement"
  },
  "SVGFEFuncGElement": {
    "!proto": "SVGComponentTransferFunctionElement"
  },
  "SVGFEFuncRElement": {
    "!proto": "SVGComponentTransferFunctionElement"
  },
  "SVGFEGaussianBlurElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "stdDeviationX": "SVGAnimatedNumber",
    "stdDeviationY": "SVGAnimatedNumber",
    "setStdDeviation": "fn(stdDeviationX: number, stdDeviationY: number)",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEImageElement": {
    "!proto": "SVGElement",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString",
    "href": "SVGAnimatedString"
  },
  "SVGFEMergeElement": {
    "!proto": "SVGElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEMergeNodeElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString"
  },
  "SVGFEMorphologyElement": {
    "!proto": "SVGElement",
    "SVG_MORPHOLOGY_OPERATOR_UNKNOWN": "number",
    "SVG_MORPHOLOGY_OPERATOR_ERODE": "number",
    "SVG_MORPHOLOGY_OPERATOR_DILATE": "number",
    "in1": "SVGAnimatedString",
    "operator": "SVGAnimatedEnumeration",
    "radiusX": "SVGAnimatedNumber",
    "radiusY": "SVGAnimatedNumber",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEOffsetElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "dx": "SVGAnimatedNumber",
    "dy": "SVGAnimatedNumber",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFEPointLightElement": {
    "!proto": "SVGElement",
    "x": "SVGAnimatedNumber",
    "y": "SVGAnimatedNumber",
    "z": "SVGAnimatedNumber"
  },
  "SVGFESpecularLightingElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "surfaceScale": "SVGAnimatedNumber",
    "specularConstant": "SVGAnimatedNumber",
    "specularExponent": "SVGAnimatedNumber",
    "kernelUnitLengthX": "SVGAnimatedNumber",
    "kernelUnitLengthY": "SVGAnimatedNumber",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFESpotLightElement": {
    "!proto": "SVGElement",
    "x": "SVGAnimatedNumber",
    "y": "SVGAnimatedNumber",
    "z": "SVGAnimatedNumber",
    "pointsAtX": "SVGAnimatedNumber",
    "pointsAtY": "SVGAnimatedNumber",
    "pointsAtZ": "SVGAnimatedNumber",
    "specularExponent": "SVGAnimatedNumber",
    "limitingConeAngle": "SVGAnimatedNumber"
  },
  "SVGFETileElement": {
    "!proto": "SVGElement",
    "in1": "SVGAnimatedString",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFETurbulenceElement": {
    "!proto": "SVGElement",
    "SVG_TURBULENCE_TYPE_UNKNOWN": "number",
    "SVG_TURBULENCE_TYPE_FRACTALNOISE": "number",
    "SVG_TURBULENCE_TYPE_TURBULENCE": "number",
    "SVG_STITCHTYPE_UNKNOWN": "number",
    "SVG_STITCHTYPE_STITCH": "number",
    "SVG_STITCHTYPE_NOSTITCH": "number",
    "baseFrequencyX": "SVGAnimatedNumber",
    "baseFrequencyY": "SVGAnimatedNumber",
    "numOctaves": "SVGAnimatedInteger",
    "seed": "SVGAnimatedNumber",
    "stitchTiles": "SVGAnimatedEnumeration",
    "type": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "SVGFilterElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement",
    "!doc": "The SVGFilterElement interface provides access to the properties of <filter> elements, as well as methods to manipulate them.",
    "!proto": "SVGElement",
    "filterUnits": "SVGAnimatedEnumeration",
    "primitiveUnits": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "href": "SVGAnimatedString",
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number"
  },
  "SVGForeignObjectElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement",
    "!doc": "The SVGForeignObjectElement interface provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength"
  },
  "SVGGElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGGElement",
    "!doc": "The SVGGElement interface corresponds to the <g> element.",
    "!proto": "SVGGraphicsElement"
  },
  "SVGGradientElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement",
    "!doc": "The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.",
    "!proto": "SVGElement",
    "SVG_SPREADMETHOD_UNKNOWN": "number",
    "SVG_SPREADMETHOD_PAD": "number",
    "SVG_SPREADMETHOD_REFLECT": "number",
    "SVG_SPREADMETHOD_REPEAT": "number",
    "gradientUnits": "SVGAnimatedEnumeration",
    "gradientTransform": "SVGAnimatedTransformList",
    "spreadMethod": "SVGAnimatedEnumeration",
    "href": "SVGAnimatedString",
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number"
  },
  "SVGGraphicsElement": {
    "!proto": "SVGElement",
    "transform": "SVGAnimatedTransformList",
    "nearestViewportElement": "SVGElement",
    "farthestViewportElement": "SVGElement",
    "getBBox": "fn(aOptions?: SVGBoundingBoxOptions) -> SVGRect",
    "getCTM": "fn() -> SVGMatrix",
    "getScreenCTM": "fn() -> SVGMatrix",
    "getTransformToElement": "fn(element: SVGGraphicsElement) -> SVGMatrix",
    "requiredFeatures": "SVGStringList",
    "requiredExtensions": "SVGStringList",
    "systemLanguage": "SVGStringList",
    "hasExtension": "fn(extension: string) -> bool"
  },
  "SVGImageElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement",
    "!doc": "The SVGImageElement interface corresponds to the <image> element.",
    "!proto": "SVGGraphicsElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "href": "SVGAnimatedString"
  },
  "SVGLength": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGLength",
    "!doc": "The SVGLength interface correspond to the <length> basic data type.",
    "SVG_LENGTHTYPE_UNKNOWN": "number",
    "SVG_LENGTHTYPE_NUMBER": "number",
    "SVG_LENGTHTYPE_PERCENTAGE": "number",
    "SVG_LENGTHTYPE_EMS": "number",
    "SVG_LENGTHTYPE_EXS": "number",
    "SVG_LENGTHTYPE_PX": "number",
    "SVG_LENGTHTYPE_CM": "number",
    "SVG_LENGTHTYPE_MM": "number",
    "SVG_LENGTHTYPE_IN": "number",
    "SVG_LENGTHTYPE_PT": "number",
    "SVG_LENGTHTYPE_PC": "number",
    "unitType": "number",
    "value": "number",
    "valueInSpecifiedUnits": "number",
    "valueAsString": "string",
    "newValueSpecifiedUnits": "fn(unitType: number, valueInSpecifiedUnits: number)",
    "convertToSpecifiedUnits": "fn(unitType: number)"
  },
  "SVGLengthList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList",
    "!doc": "The SVGLengthList defines a list of SVGLength objects.",
    "numberOfItems": "number",
    "clear": "fn()",
    "initialize": "fn(newItem: SVGLength) -> SVGLength",
    "getItem": "fn(index: number) -> SVGLength",
    "insertItemBefore": "fn(newItem: SVGLength, index: number) -> SVGLength",
    "replaceItem": "fn(newItem: SVGLength, index: number) -> SVGLength",
    "removeItem": "fn(index: number) -> SVGLength",
    "appendItem": "fn(newItem: SVGLength) -> SVGLength",
    "length": "number",
    "<i>": "SVGLength",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGLineElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement",
    "!doc": "The SVGLineElement interface provides access to the properties of <line> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "x1": "SVGAnimatedLength",
    "y1": "SVGAnimatedLength",
    "x2": "SVGAnimatedLength",
    "y2": "SVGAnimatedLength"
  },
  "SVGLinearGradientElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement",
    "!doc": "The SVGLinearGradientElement interface corresponds to the <linearGradient> element.",
    "!proto": "SVGGradientElement",
    "x1": "SVGAnimatedLength",
    "y1": "SVGAnimatedLength",
    "x2": "SVGAnimatedLength",
    "y2": "SVGAnimatedLength"
  },
  "SVGMPathElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement",
    "!doc": "The SVGMPathElement interface corresponds to the <mpath> element.",
    "!proto": "SVGElement",
    "href": "SVGAnimatedString"
  },
  "SVGMarkerElement": {
    "!proto": "SVGElement",
    "SVG_MARKERUNITS_UNKNOWN": "number",
    "SVG_MARKERUNITS_USERSPACEONUSE": "number",
    "SVG_MARKERUNITS_STROKEWIDTH": "number",
    "SVG_MARKER_ORIENT_UNKNOWN": "number",
    "SVG_MARKER_ORIENT_AUTO": "number",
    "SVG_MARKER_ORIENT_ANGLE": "number",
    "refX": "SVGAnimatedLength",
    "refY": "SVGAnimatedLength",
    "markerUnits": "SVGAnimatedEnumeration",
    "markerWidth": "SVGAnimatedLength",
    "markerHeight": "SVGAnimatedLength",
    "orientType": "SVGAnimatedEnumeration",
    "orientAngle": "SVGAnimatedAngle",
    "setOrientToAuto": "fn()",
    "setOrientToAngle": "fn(angle: SVGAngle)",
    "viewBox": "SVGAnimatedRect",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio"
  },
  "SVGMaskElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement",
    "!doc": "The SVGMaskElement interface provides access to the properties of <mask> elements, as well as methods to manipulate them.",
    "!proto": "SVGElement",
    "SVG_MASKTYPE_LUMINANCE": "number",
    "SVG_MASKTYPE_ALPHA": "number",
    "maskUnits": "SVGAnimatedEnumeration",
    "maskContentUnits": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number"
  },
  "SVGMatrix": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix",
    "!doc": "Many of SVG's graphics operations utilize 2x3 matrices of the form:",
    "a": "number",
    "b": "number",
    "c": "number",
    "d": "number",
    "e": "number",
    "f": "number",
    "multiply": "fn(secondMatrix: SVGMatrix) -> SVGMatrix",
    "inverse": "fn() -> SVGMatrix",
    "translate": "fn(x: number, y: number) -> SVGMatrix",
    "scale": "fn(scaleFactor: number) -> SVGMatrix",
    "scaleNonUniform": "fn(scaleFactorX: number, scaleFactorY: number) -> SVGMatrix",
    "rotate": "fn(angle: number) -> SVGMatrix",
    "rotateFromVector": "fn(x: number, y: number) -> SVGMatrix",
    "flipX": "fn() -> SVGMatrix",
    "flipY": "fn() -> SVGMatrix",
    "skewX": "fn(angle: number) -> SVGMatrix",
    "skewY": "fn(angle: number) -> SVGMatrix"
  },
  "SVGMetadataElement": {
    "!proto": "SVGElement"
  },
  "SVGNumber": {
    "!type": "fn(value: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGNumber",
    "!doc": "The SVGNumber interface correspond to the <number> basic data type.",
    "prototype": {
      "value": "number"
    }
  },
  "SVGNumberList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList",
    "!doc": "The SVGNumberList defines a list of SVGNumber objects.",
    "numberOfItems": "number",
    "clear": "fn()",
    "initialize": "fn(newItem: +SVGNumber) -> +SVGNumber",
    "getItem": "fn(index: number) -> +SVGNumber",
    "insertItemBefore": "fn(newItem: +SVGNumber, index: number) -> +SVGNumber",
    "replaceItem": "fn(newItem: +SVGNumber, index: number) -> +SVGNumber",
    "removeItem": "fn(index: number) -> +SVGNumber",
    "appendItem": "fn(newItem: +SVGNumber) -> +SVGNumber",
    "length": "number",
    "<i>": "+SVGNumber",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGPathElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement",
    "!doc": "The SVGPathElement interface corresponds to the <path> element.",
    "!proto": "SVGGraphicsElement",
    "pathLength": "SVGAnimatedNumber",
    "getTotalLength": "fn() -> number",
    "getPointAtLength": "fn(distance: number) -> SVGPoint",
    "getPathSegAtLength": "fn(distance: number) -> number",
    "createSVGPathSegClosePath": "fn() -> SVGPathSegClosePath",
    "createSVGPathSegMovetoAbs": "fn(x: number, y: number) -> SVGPathSegMovetoAbs",
    "createSVGPathSegMovetoRel": "fn(x: number, y: number) -> SVGPathSegMovetoRel",
    "createSVGPathSegLinetoAbs": "fn(x: number, y: number) -> SVGPathSegLinetoAbs",
    "createSVGPathSegLinetoRel": "fn(x: number, y: number) -> SVGPathSegLinetoRel",
    "createSVGPathSegCurvetoCubicAbs": "fn(x: number, y: number, x1: number, y1: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicAbs",
    "createSVGPathSegCurvetoCubicRel": "fn(x: number, y: number, x1: number, y1: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicRel",
    "createSVGPathSegCurvetoQuadraticAbs": "fn(x: number, y: number, x1: number, y1: number) -> SVGPathSegCurvetoQuadraticAbs",
    "createSVGPathSegCurvetoQuadraticRel": "fn(x: number, y: number, x1: number, y1: number) -> SVGPathSegCurvetoQuadraticRel",
    "createSVGPathSegArcAbs": "fn(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool) -> SVGPathSegArcAbs",
    "createSVGPathSegArcRel": "fn(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool) -> SVGPathSegArcRel",
    "createSVGPathSegLinetoHorizontalAbs": "fn(x: number) -> SVGPathSegLinetoHorizontalAbs",
    "createSVGPathSegLinetoHorizontalRel": "fn(x: number) -> SVGPathSegLinetoHorizontalRel",
    "createSVGPathSegLinetoVerticalAbs": "fn(y: number) -> SVGPathSegLinetoVerticalAbs",
    "createSVGPathSegLinetoVerticalRel": "fn(y: number) -> SVGPathSegLinetoVerticalRel",
    "createSVGPathSegCurvetoCubicSmoothAbs": "fn(x: number, y: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicSmoothAbs",
    "createSVGPathSegCurvetoCubicSmoothRel": "fn(x: number, y: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicSmoothRel",
    "createSVGPathSegCurvetoQuadraticSmoothAbs": "fn(x: number, y: number) -> SVGPathSegCurvetoQuadraticSmoothAbs",
    "createSVGPathSegCurvetoQuadraticSmoothRel": "fn(x: number, y: number) -> SVGPathSegCurvetoQuadraticSmoothRel",
    "pathSegList": "SVGPathSegList",
    "animatedPathSegList": "SVGPathSegList"
  },
  "SVGPathSeg": {
    "PATHSEG_UNKNOWN": "number",
    "PATHSEG_CLOSEPATH": "number",
    "PATHSEG_MOVETO_ABS": "number",
    "PATHSEG_MOVETO_REL": "number",
    "PATHSEG_LINETO_ABS": "number",
    "PATHSEG_LINETO_REL": "number",
    "PATHSEG_CURVETO_CUBIC_ABS": "number",
    "PATHSEG_CURVETO_CUBIC_REL": "number",
    "PATHSEG_CURVETO_QUADRATIC_ABS": "number",
    "PATHSEG_CURVETO_QUADRATIC_REL": "number",
    "PATHSEG_ARC_ABS": "number",
    "PATHSEG_ARC_REL": "number",
    "PATHSEG_LINETO_HORIZONTAL_ABS": "number",
    "PATHSEG_LINETO_HORIZONTAL_REL": "number",
    "PATHSEG_LINETO_VERTICAL_ABS": "number",
    "PATHSEG_LINETO_VERTICAL_REL": "number",
    "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS": "number",
    "PATHSEG_CURVETO_CUBIC_SMOOTH_REL": "number",
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS": "number",
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL": "number",
    "pathSegType": "number",
    "pathSegTypeAsLetter": "string"
  },
  "SVGPathSegClosePath": {
    "!proto": "SVGPathSeg"
  },
  "SVGPathSegMovetoAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number"
  },
  "SVGPathSegMovetoRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number"
  },
  "SVGPathSegLinetoAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number"
  },
  "SVGPathSegLinetoRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number"
  },
  "SVGPathSegCurvetoCubicAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "x1": "number",
    "y1": "number",
    "x2": "number",
    "y2": "number"
  },
  "SVGPathSegCurvetoCubicRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "x1": "number",
    "y1": "number",
    "x2": "number",
    "y2": "number"
  },
  "SVGPathSegCurvetoQuadraticAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "x1": "number",
    "y1": "number"
  },
  "SVGPathSegCurvetoQuadraticRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "x1": "number",
    "y1": "number"
  },
  "SVGPathSegArcAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "r1": "number",
    "r2": "number",
    "angle": "number",
    "largeArcFlag": "bool",
    "sweepFlag": "bool"
  },
  "SVGPathSegArcRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "r1": "number",
    "r2": "number",
    "angle": "number",
    "largeArcFlag": "bool",
    "sweepFlag": "bool"
  },
  "SVGPathSegLinetoHorizontalAbs": {
    "!proto": "SVGPathSeg",
    "x": "number"
  },
  "SVGPathSegLinetoHorizontalRel": {
    "!proto": "SVGPathSeg",
    "x": "number"
  },
  "SVGPathSegLinetoVerticalAbs": {
    "!proto": "SVGPathSeg",
    "y": "number"
  },
  "SVGPathSegLinetoVerticalRel": {
    "!proto": "SVGPathSeg",
    "y": "number"
  },
  "SVGPathSegCurvetoCubicSmoothAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "x2": "number",
    "y2": "number"
  },
  "SVGPathSegCurvetoCubicSmoothRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number",
    "x2": "number",
    "y2": "number"
  },
  "SVGPathSegCurvetoQuadraticSmoothAbs": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number"
  },
  "SVGPathSegCurvetoQuadraticSmoothRel": {
    "!proto": "SVGPathSeg",
    "x": "number",
    "y": "number"
  },
  "SVGPathSegList": {
    "numberOfItems": "number",
    "clear": "fn()",
    "initialize": "fn(newItem: SVGPathSeg) -> SVGPathSeg",
    "getItem": "fn(index: number) -> SVGPathSeg",
    "insertItemBefore": "fn(newItem: SVGPathSeg, index: number) -> SVGPathSeg",
    "replaceItem": "fn(newItem: SVGPathSeg, index: number) -> SVGPathSeg",
    "removeItem": "fn(index: number) -> SVGPathSeg",
    "appendItem": "fn(newItem: SVGPathSeg) -> SVGPathSeg",
    "length": "number",
    "<i>": "SVGPathSeg",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGPatternElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement",
    "!doc": "The SVGPatternElement interface corresponds to the <pattern> element.",
    "!proto": "SVGElement",
    "patternUnits": "SVGAnimatedEnumeration",
    "patternContentUnits": "SVGAnimatedEnumeration",
    "patternTransform": "SVGAnimatedTransformList",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "viewBox": "SVGAnimatedRect",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "href": "SVGAnimatedString",
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number"
  },
  "SVGPoint": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGPoint",
    "!doc": "test content",
    "x": "number",
    "y": "number",
    "matrixTransform": "fn(matrix: SVGMatrix) -> SVGPoint",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGPointList": {
    "numberOfItems": "number",
    "clear": "fn()",
    "initialize": "fn(newItem: SVGPoint) -> SVGPoint",
    "getItem": "fn(index: number) -> SVGPoint",
    "insertItemBefore": "fn(newItem: SVGPoint, index: number) -> SVGPoint",
    "replaceItem": "fn(newItem: SVGPoint, index: number) -> SVGPoint",
    "removeItem": "fn(index: number) -> SVGPoint",
    "appendItem": "fn(newItem: SVGPoint) -> SVGPoint",
    "length": "number",
    "<i>": "SVGPoint",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGPolygonElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement",
    "!doc": "The SVGPolygonElement interface provides access to the properties of <polygon> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "points": "SVGPointList",
    "animatedPoints": "SVGPointList"
  },
  "SVGPolylineElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement",
    "!doc": "The SVGPolylineElement interface provides access to the properties of <polyline> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "points": "SVGPointList",
    "animatedPoints": "SVGPointList"
  },
  "SVGPreserveAspectRatio": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio",
    "!doc": "The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.",
    "SVG_PRESERVEASPECTRATIO_UNKNOWN": "number",
    "SVG_PRESERVEASPECTRATIO_NONE": "number",
    "SVG_PRESERVEASPECTRATIO_XMINYMIN": "number",
    "SVG_PRESERVEASPECTRATIO_XMIDYMIN": "number",
    "SVG_PRESERVEASPECTRATIO_XMAXYMIN": "number",
    "SVG_PRESERVEASPECTRATIO_XMINYMID": "number",
    "SVG_PRESERVEASPECTRATIO_XMIDYMID": "number",
    "SVG_PRESERVEASPECTRATIO_XMAXYMID": "number",
    "SVG_PRESERVEASPECTRATIO_XMINYMAX": "number",
    "SVG_PRESERVEASPECTRATIO_XMIDYMAX": "number",
    "SVG_PRESERVEASPECTRATIO_XMAXYMAX": "number",
    "SVG_MEETORSLICE_UNKNOWN": "number",
    "SVG_MEETORSLICE_MEET": "number",
    "SVG_MEETORSLICE_SLICE": "number",
    "align": "number",
    "meetOrSlice": "number",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGRadialGradientElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement",
    "!doc": "The SVGRadialGradientElement interface corresponds to the <radialGradient> element.",
    "!proto": "SVGGradientElement",
    "cx": "SVGAnimatedLength",
    "cy": "SVGAnimatedLength",
    "r": "SVGAnimatedLength",
    "fx": "SVGAnimatedLength",
    "fy": "SVGAnimatedLength"
  },
  "SVGRect": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGRect",
    "!doc": "The SVGRect represents rectangular geometry. Rectangles are defined as consisting of a (x,y) coordinate pair identifying a minimum X value, a minimum Y value, and a width and height, which are usually constrained to be non-negative.",
    "x": "number",
    "y": "number",
    "width": "number",
    "height": "number",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGRectElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement",
    "!doc": "The SVGRectElement interface provides access to the properties of <rect> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "rx": "SVGAnimatedLength",
    "ry": "SVGAnimatedLength"
  },
  "SVGViewSpec": {},
  "SVGSVGElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement",
    "!doc": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
    "!proto": "SVGGraphicsElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "pixelUnitToMillimeterX": "number",
    "pixelUnitToMillimeterY": "number",
    "screenPixelToMillimeterX": "number",
    "screenPixelToMillimeterY": "number",
    "useCurrentView": "bool",
    "currentScale": "number",
    "currentTranslate": "SVGPoint",
    "suspendRedraw": "fn(maxWaitMilliseconds: number) -> number",
    "unsuspendRedraw": "fn(suspendHandleID: number)",
    "unsuspendRedrawAll": "fn()",
    "forceRedraw": "fn()",
    "pauseAnimations": "fn()",
    "unpauseAnimations": "fn()",
    "animationsPaused": "fn() -> bool",
    "getCurrentTime": "fn() -> number",
    "setCurrentTime": "fn(seconds: number)",
    "deselectAll": "fn()",
    "createSVGNumber": "fn() -> +SVGNumber",
    "createSVGLength": "fn() -> SVGLength",
    "createSVGAngle": "fn() -> SVGAngle",
    "createSVGPoint": "fn() -> SVGPoint",
    "createSVGMatrix": "fn() -> SVGMatrix",
    "createSVGRect": "fn() -> SVGRect",
    "createSVGTransform": "fn() -> SVGTransform",
    "createSVGTransformFromMatrix": "fn(matrix: SVGMatrix) -> SVGTransform",
    "getElementById": "fn(elementId: string) -> HTMLElement",
    "viewBox": "SVGAnimatedRect",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "SVG_ZOOMANDPAN_UNKNOWN": "number",
    "SVG_ZOOMANDPAN_DISABLE": "number",
    "SVG_ZOOMANDPAN_MAGNIFY": "number",
    "zoomAndPan": "number"
  },
  "SVGScriptElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement",
    "!doc": "The SVGScriptElement interface corresponds to the SVG <script> element.",
    "!proto": "SVGElement",
    "type": "string",
    "crossOrigin": "string",
    "href": "SVGAnimatedString"
  },
  "SVGSetElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement",
    "!doc": "The SVGSetElement interface corresponds to the <set> element.",
    "!proto": "SVGAnimationElement"
  },
  "SVGStopElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement",
    "!doc": "The SVGStopElement interface corresponds to the <stop> element.",
    "!proto": "SVGElement",
    "offset": "SVGAnimatedNumber"
  },
  "SVGStringList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGStringList",
    "!doc": "The SVGStringList defines a list of DOMString objects.",
    "length": "number",
    "numberOfItems": "number",
    "clear": "fn()",
    "initialize": "fn(newItem: string) -> string",
    "getItem": "fn(index: number) -> string",
    "insertItemBefore": "fn(newItem: string, index: number) -> string",
    "replaceItem": "fn(newItem: string, index: number) -> string",
    "removeItem": "fn(index: number) -> string",
    "appendItem": "fn(newItem: string) -> string",
    "<i>": "string",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGStyleElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement",
    "!doc": "The SVGStyleElement interface corresponds to the SVG <style> element.",
    "!proto": "SVGElement",
    "xmlspace": "string",
    "type": "string",
    "media": "string",
    "title": "string",
    "scoped": "bool"
  },
  "SVGSwitchElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement",
    "!doc": "The SVGSwitchElement interface corresponds to the <switch> element.",
    "!proto": "SVGGraphicsElement"
  },
  "SVGSymbolElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement",
    "!doc": "The SVGSymbolElement interface corresponds to the <symbol> element.",
    "!proto": "SVGElement",
    "viewBox": "SVGAnimatedRect",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "requiredFeatures": "SVGStringList",
    "requiredExtensions": "SVGStringList",
    "systemLanguage": "SVGStringList",
    "hasExtension": "fn(extension: string) -> bool"
  },
  "SVGTSpanElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement",
    "!doc": "The SVGTSpanElement interface provides access to the properties of <tspan> elements, as well as methods to manipulate them.",
    "!proto": "SVGTextPositioningElement"
  },
  "SVGTextContentElement": {
    "!proto": "SVGGraphicsElement",
    "LENGTHADJUST_UNKNOWN": "number",
    "LENGTHADJUST_SPACING": "number",
    "LENGTHADJUST_SPACINGANDGLYPHS": "number",
    "textLength": "SVGAnimatedLength",
    "lengthAdjust": "SVGAnimatedEnumeration",
    "getNumberOfChars": "fn() -> number",
    "getComputedTextLength": "fn() -> number",
    "getSubStringLength": "fn(charnum: number, nchars: number) -> number",
    "getStartPositionOfChar": "fn(charnum: number) -> SVGPoint",
    "getEndPositionOfChar": "fn(charnum: number) -> SVGPoint",
    "getExtentOfChar": "fn(charnum: number) -> SVGRect",
    "getRotationOfChar": "fn(charnum: number) -> number",
    "getCharNumAtPosition": "fn(point: SVGPoint) -> number",
    "selectSubString": "fn(charnum: number, nchars: number)"
  },
  "SVGTextElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement",
    "!doc": "The SVGTextElement interface corresponds to the <text> elements.",
    "!proto": "SVGTextPositioningElement"
  },
  "SVGTextPathElement": {
    "!proto": "SVGTextContentElement",
    "TEXTPATH_METHODTYPE_UNKNOWN": "number",
    "TEXTPATH_METHODTYPE_ALIGN": "number",
    "TEXTPATH_METHODTYPE_STRETCH": "number",
    "TEXTPATH_SPACINGTYPE_UNKNOWN": "number",
    "TEXTPATH_SPACINGTYPE_AUTO": "number",
    "TEXTPATH_SPACINGTYPE_EXACT": "number",
    "startOffset": "SVGAnimatedLength",
    "method": "SVGAnimatedEnumeration",
    "spacing": "SVGAnimatedEnumeration",
    "href": "SVGAnimatedString"
  },
  "SVGTextPositioningElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement",
    "!doc": "The SVGTextPositioningElement interface is inherited by text-related interfaces: SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.",
    "!proto": "SVGTextContentElement",
    "x": "SVGAnimatedLengthList",
    "y": "SVGAnimatedLengthList",
    "dx": "SVGAnimatedLengthList",
    "dy": "SVGAnimatedLengthList",
    "rotate": "SVGAnimatedNumberList"
  },
  "SVGTitleElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement",
    "!doc": "The SVGTitleElement interface corresponds to the <title> element.",
    "!proto": "SVGElement"
  },
  "SVGTransform": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTransform",
    "!doc": "SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.",
    "SVG_TRANSFORM_UNKNOWN": "number",
    "SVG_TRANSFORM_MATRIX": "number",
    "SVG_TRANSFORM_TRANSLATE": "number",
    "SVG_TRANSFORM_SCALE": "number",
    "SVG_TRANSFORM_ROTATE": "number",
    "SVG_TRANSFORM_SKEWX": "number",
    "SVG_TRANSFORM_SKEWY": "number",
    "type": "number",
    "matrix": "SVGMatrix",
    "angle": "number",
    "setMatrix": "fn(matrix: SVGMatrix)",
    "setTranslate": "fn(tx: number, ty: number)",
    "setScale": "fn(sx: number, sy: number)",
    "setRotate": "fn(angle: number, cx: number, cy: number)",
    "setSkewX": "fn(angle: number)",
    "setSkewY": "fn(angle: number)"
  },
  "SVGTransformList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList",
    "!doc": "The SVGTransformList defines a list of SVGTransform objects.",
    "numberOfItems": "number",
    "clear": "fn()",
    "initialize": "fn(newItem: SVGTransform) -> SVGTransform",
    "getItem": "fn(index: number) -> SVGTransform",
    "insertItemBefore": "fn(newItem: SVGTransform, index: number) -> SVGTransform",
    "replaceItem": "fn(newItem: SVGTransform, index: number) -> SVGTransform",
    "removeItem": "fn(index: number) -> SVGTransform",
    "appendItem": "fn(newItem: SVGTransform) -> SVGTransform",
    "createSVGTransformFromMatrix": "fn(matrix: SVGMatrix) -> SVGTransform",
    "consolidate": "fn() -> SVGTransform",
    "length": "number",
    "<i>": "SVGTransform",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "SVGUnitTypes": {
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number"
  },
  "SVGUseElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement",
    "!doc": "The SVGUseElement interface provides access to the properties of <use> elements, as well as methods to manipulate them.",
    "!proto": "SVGGraphicsElement",
    "x": "SVGAnimatedLength",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "href": "SVGAnimatedString"
  },
  "SVGViewElement": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement",
    "!doc": "The SVGViewElement interface provides access to the properties of <view> elements, as well as methods to manipulate them.",
    "!proto": "SVGElement",
    "viewTarget": "SVGStringList",
    "viewBox": "SVGAnimatedRect",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "SVG_ZOOMANDPAN_UNKNOWN": "number",
    "SVG_ZOOMANDPAN_DISABLE": "number",
    "SVG_ZOOMANDPAN_MAGNIFY": "number",
    "zoomAndPan": "number"
  },
  "SVGZoomAndPan": {
    "SVG_ZOOMANDPAN_UNKNOWN": "number",
    "SVG_ZOOMANDPAN_DISABLE": "number",
    "SVG_ZOOMANDPAN_MAGNIFY": "number",
    "zoomAndPan": "number"
  },
  "SVGZoomEvent": {
    "!proto": "UIEvent.prototype",
    "previousScale": "number",
    "previousTranslate": "SVGPoint",
    "newScale": "number",
    "newTranslate": "SVGPoint"
  },
  "Screen": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen",
    "!doc": "The Screen interface represents a screen, usually the one on which the current window is being rendered.",
    "!proto": "EventTarget",
    "availWidth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth",
      "!doc": "Returns the amount of horizontal space in pixels available to the window."
    },
    "availHeight": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight",
      "!doc": "Returns the amount of vertical space available to the window on the screen."
    },
    "width": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/width",
      "!doc": "Returns the width of the screen."
    },
    "height": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/height",
      "!doc": "Returns the height of the screen in pixels."
    },
    "colorDepth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth",
      "!doc": "Returns the color depth of the screen."
    },
    "pixelDepth": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth",
      "!doc": "Returns the bit depth of the screen."
    },
    "top": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/top",
      "!doc": "Returns the distance in pixels from the top side of the current screen."
    },
    "left": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/left",
      "!doc": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen."
    },
    "availTop": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop",
      "!doc": "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features."
    },
    "availLeft": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft",
      "!doc": "Returns the first available pixel available from the left side of the screen."
    },
    "mozOrientation": "string",
    "onmozorientationchange": "fn(+Event)",
    "mozLockOrientation": "fn(orientation: string) -> bool",
    "mozUnlockOrientation": "fn()",
    "orientation": "ScreenOrientation",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "ScreenOrientation": {
    "!proto": "EventTarget",
    "lock": "fn(orientation: OrientationLockType) -> +Promise[value=void]",
    "unlock": "fn()",
    "type": "OrientationType",
    "angle": "number",
    "onchange": "fn(+Event)"
  },
  "ScriptProcessorNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode",
    "!doc": "There was a scripting error on this page. While it is being addressed by site editors, you can view partial content below.",
    "!proto": "AudioNode",
    "onaudioprocess": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess",
      "!doc": "Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by Audio Workers."
    },
    "bufferSize": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize",
      "!doc": "Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by Audio Workers."
    },
    "passThrough": "bool"
  },
  "ScrollAreaEvent": {
    "!proto": "UIEvent.prototype",
    "x": "number",
    "y": "number",
    "width": "number",
    "height": "number",
    "initScrollAreaEvent": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, x: number, y: number, width: number, height: number)"
  },
  "SEReader": {
    "isSEPresent": "bool",
    "type": "SEType",
    "openSession": "fn() -> +Promise[value=SESession]",
    "closeAll": "fn() -> +Promise[value=void]"
  },
  "SESession": {
    "reader": "SEReader",
    "isClosed": "bool",
    "openLogicalChannel": "fn(aid: Uint8Array) -> +Promise[value=SEChannel]",
    "closeAll": "fn() -> +Promise[value=void]"
  },
  "SEChannel": {
    "session": "SESession",
    "openResponse": "Uint8Array",
    "isClosed": "bool",
    "type": "SEChannelType",
    "transmit": "fn(command?: SECommand) -> +Promise[value=SEResponse]",
    "close": "fn() -> +Promise[value=void]"
  },
  "SEResponse": {
    "channel": "SEChannel",
    "sw1": "number",
    "sw2": "number",
    "data": "[number]"
  },
  "Selection": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection",
    "!doc": "Calling the Selection.toString() method returns the text contained in the selection, e.g.:",
    "anchorNode": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorNode",
      "!doc": "The Selection.anchorNode read-only property returns the Node in which the selection begins."
    },
    "anchorOffset": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorOffset",
      "!doc": "The Selection.anchorOffset read-only property returns the number of characters that the selection's anchor is offset within the Selection.anchorNode."
    },
    "focusNode": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/focusNode",
      "!doc": "The Selection.focusNode read-only property returns the Node in which the selection ends."
    },
    "focusOffset": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/focusOffset",
      "!doc": "The Selection.focusOffset read-only property returns the number of characters that the selection's focus is offset within the Selection.focusNode."
    },
    "isCollapsed": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/isCollapsed",
      "!doc": "The Selection.isCollapsed read-only property returns a Boolean which indicates whether or not there is currently any text selected; That is to say that the selection's start and end points are at the same position in the content."
    },
    "collapse": {
      "!type": "fn(node: Node, offset: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/collapse",
      "!doc": "The Selection.collapse() method collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there."
    },
    "collapseToStart": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToStart",
      "!doc": "The Selection.collapseToStart() method collapses the selection to the start of the first range in the selection.  If the content of the selection is focused and editable, the caret will blink there."
    },
    "collapseToEnd": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToEnd",
      "!doc": "The Selection.collapseToEnd() method collapses the selection to the end of the last range in the selection.  If the content the selection is in is focused and editable, the caret will blink there."
    },
    "extend": {
      "!type": "fn(node: Node, offset: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/extend",
      "!doc": "The Selection.extend() method moves the focus of the selection to a specified point. The anchor of the selection does not move. The selection will be from the anchor to the new focus regardless of direction."
    },
    "selectAllChildren": {
      "!type": "fn(node: Node)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/selectAllChildren",
      "!doc": "The Selection.selectAllChildren() method adds all the children of the specified node to the selection. Previous selection is lost."
    },
    "deleteFromDocument": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/deleteFromDocument",
      "!doc": "The Selection.deleteFromDocument() method deletes the actual text being represented by a selection object from the document's DOM."
    },
    "rangeCount": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/rangeCount",
      "!doc": "The Selection.rangeCount read-only property returns the number of ranges in the selection."
    },
    "getRangeAt": {
      "!type": "fn(index: number) -> +Range",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt",
      "!doc": "The Selection.getRangeAt() method returns a range object representing one of the ranges currently selected."
    },
    "addRange": {
      "!type": "fn(range: +Range)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/addRange",
      "!doc": "The Selection.addRange() method adds a Range to a Selection."
    },
    "removeRange": {
      "!type": "fn(range: +Range)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange",
      "!doc": "The Selection.removeRange() method removes a range from the selection."
    },
    "removeAllRanges": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/removeAllRanges",
      "!doc": "The Selection.removeAllRanges() method removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected."
    },
    "containsNode": {
      "!type": "fn(node: Node, allowPartialContainment: bool) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/containsNode",
      "!doc": "The Selection.containsNode() method indicates if the node is part of the selection."
    },
    "modify": {
      "!type": "fn(alter: string, direction: string, granularity: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Selection/modify",
      "!doc": "The Selection.modify() method applies a change to the current selection or cursor position, using simple textual commands."
    },
    "ENDOFPRECEDINGLINE": "number",
    "STARTOFNEXTLINE": "number",
    "interlinePosition": "bool",
    "caretBidiLevel": "number",
    "toStringWithFormat": "fn(formatType: string, flags: number, wrapColumn: number) -> string",
    "addSelectionListener": "fn(newListener: nsISelectionListener)",
    "removeSelectionListener": "fn(listenerToRemove: nsISelectionListener)",
    "type": "number",
    "GetRangesForInterval": "fn(beginNode: Node, beginOffset: number, endNode: Node, endOffset: number, allowAdjacent: bool) -> [+Range]",
    "scrollIntoView": "fn(aRegion: number, aIsSynchronous: bool, aVPercent: number, aHPercent: number)",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "nsISelectionListener": {},
  "ServiceWorker": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker",
    "!doc": "The ServiceWorker interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.",
    "!proto": "EventTarget",
    "scriptURL": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL",
      "!doc": "Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. Must be on the same origin as the document that registers the ServiceWorker."
    },
    "state": {
      "!type": "ServiceWorkerState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state",
      "!doc": "The state read-only property of the ServiceWorker interface returns a string representing the current state of the service worker. It can be one of the following values: installing, installed, activating, activated, or redundant."
    },
    "onstatechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange",
      "!doc": "An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes."
    },
    "postMessage": "fn(message: ?, transferable?: [Transferable])",
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
      "!doc": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker."
    }
  },
  "ServiceWorkerContainer": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer",
    "!doc": "The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.",
    "!proto": "EventTarget",
    "controller": {
      "!type": "ServiceWorker",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller",
      "!doc": "The controller read-only property of the ServiceWorkerContainer interface returns a ServiceWorker object if its state is activated (the same object returned by ServiceWorkerRegistration.active). This property returns null if the request is a force refresh (Shift + refresh) or if there is no active worker."
    },
    "ready": {
      "!type": "+Promise[value=ServiceWorkerRegistration]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready",
      "!doc": "The ready read-only property of the ServiceWorkerContainer interface defines whether a service worker is ready to control a page or not. It returns a Promise that will never reject, which resolves to a ServiceWorkerRegistration with an ServiceWorkerRegistration.active worker."
    },
    "register": {
      "!type": "fn(scriptURL: string, options?: RegistrationOptions) -> +Promise[value=ServiceWorkerRegistration]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register",
      "!doc": "The register() method of the ServiceWorkerContainer interface creates or updates a ServiceWorkerRegistration for the given scriptURL."
    },
    "getRegistration": {
      "!type": "fn(documentURL?: string) -> +Promise[value=ServiceWorkerRegistration]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistration",
      "!doc": "The getRegistration() method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided document URL.  If the method can't return a ServiceWorkerRegistration, it returns a Promise."
    },
    "getRegistrations": {
      "!type": "fn() -> +Promise",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistrations",
      "!doc": "The getRegistrations() method of the ServiceWorkerContainer interface returns all ServiceWorkerRegistrations associated with a ServiceWorkerContainer in an array.  If the method can't return ServiceWorkerRegistrations, it returns a Promise."
    },
    "oncontrollerchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange",
      "!doc": "The oncontrollerchange property of the ServiceWorkerContainer interface is an event handler fired whenever a controllerchange event occurs — when the document's associated ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker."
    },
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror",
      "!doc": "The onerror property of the ServiceWorkerContainer interface is an event handler fired whenever an error event occurs in the associated service workers."
    },
    "onmessage": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage",
      "!doc": "The onmessage property of the ServiceWorkerContainer interface is an event handler fired whenever a message event occurs — when incoming messages are received to the ServiceWorkerContainer object (e.g., via a MessagePort.postMessage() call)."
    },
    "getScopeForUrl": "fn(url: string) -> string"
  },
  "ServiceWorkerMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: ServiceWorkerMessageEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "data": "?",
      "origin": "string",
      "lastEventId": "string",
      "source": "ServiceWorker|MessagePort",
      "ports": "MessagePortList"
    }
  },
  "SettingsLock": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsLock",
    "!doc": "Each call to SettingsManager.createLock() create a new SettingsLock object.",
    "!proto": "EventTarget",
    "closed": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsLock/closed",
      "!doc": "The closed property indicates whether or not the settings lock is closed."
    },
    "set": {
      "!type": "fn(settings: object) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsLock/set",
      "!doc": "This method is changes the value of one or more given settings."
    },
    "get": {
      "!type": "fn(name: string) -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsLock/get",
      "!doc": "This method fetches the value of a specified setting."
    },
    "clear": {
      "!type": "fn() -> DOMRequest",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsLock/clear",
      "!doc": "This method clears the queue of SettingsLock objects."
    },
    "onsettingstransactionsuccess": "fn(+Event)",
    "onsettingstransactionfailure": "fn(+Event)"
  },
  "SettingsManager": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsManager",
    "!doc": "Provides access to the device's settings.",
    "!proto": "EventTarget",
    "createLock": {
      "!type": "fn() -> SettingsLock",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsManager/createLock",
      "!doc": "This method returns a SettingsLock object. This object is used to access and modify all the settings asynchronously and safely."
    },
    "addObserver": {
      "!type": "fn(name: string, callback: fn(setting: SettingChange))",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsManager/addObserver",
      "!doc": "Sets up a callback function to be notified when a specific setting's value changes."
    },
    "removeObserver": {
      "!type": "fn(name: string, callback: fn(setting: SettingChange))",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsManager/removeObserver",
      "!doc": "This method is used to remove a callback function that has been added with SettingsManager.addObserver()."
    },
    "onsettingchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SettingsManager/onsettingchange",
      "!doc": "The onsettingchange property lets you set an event handler to be called for all setting changes."
    }
  },
  "ShadowRoot": {
    "!proto": "DocumentFragment.prototype",
    "getElementById": "fn(elementId: string) -> HTMLElement",
    "getElementsByTagName": "fn(localName: string) -> HTMLCollection",
    "getElementsByTagNameNS": "fn(namespace: string, localName: string) -> HTMLCollection",
    "getElementsByClassName": "fn(classNames: string) -> HTMLCollection",
    "innerHTML": "string",
    "host": "HTMLElement",
    "olderShadowRoot": "ShadowRoot",
    "applyAuthorStyles": "bool",
    "styleSheets": "StyleSheetList"
  },
  "SharedWorker": {
    "!type": "fn(scriptURL: string, name?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SharedWorker",
    "!doc": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
    "prototype": {
      "!proto": "EventTarget",
      "port": {
        "!type": "MessagePort",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port",
        "!doc": "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker."
      },
      "onerror": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
        "!doc": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker."
      }
    }
  },
  "SharedWorkerGlobalScope": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope",
    "!doc": "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
    "!proto": "WorkerGlobalScope",
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/name",
      "!doc": "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope."
    },
    "onconnect": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/onconnect",
      "!doc": "The onconnect property of the SharedWorkerGlobalScope interface is an EventHandler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread."
    }
  },
  "SimpleGestureEvent": {
    "!proto": "MouseEvent.prototype",
    "DIRECTION_UP": "number",
    "DIRECTION_DOWN": "number",
    "DIRECTION_LEFT": "number",
    "DIRECTION_RIGHT": "number",
    "ROTATION_COUNTERCLOCKWISE": "number",
    "ROTATION_CLOCKWISE": "number",
    "allowedDirections": "number",
    "direction": "number",
    "delta": "number",
    "clickCount": "number",
    "initSimpleGestureEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, allowedDirectionsArg: number, directionArg: number, deltaArg: number, clickCount: number)"
  },
  "SimplePushManager": {
    "register": "fn() -> DOMRequest",
    "unregister": "fn(pushEndpoint: string) -> DOMRequest",
    "registrations": "fn() -> DOMRequest"
  },
  "SmsMessage": {
    "type": "string",
    "id": "number",
    "threadId": "number",
    "iccId": "string",
    "delivery": "string",
    "deliveryStatus": "string",
    "sender": "string",
    "receiver": "string",
    "body": "string",
    "messageClass": "string",
    "timestamp": "DOMTimeStamp",
    "sentTimestamp": "DOMTimeStamp",
    "deliveryTimestamp": "DOMTimeStamp",
    "read": "bool"
  },
  "SourceBuffer": {
    "!proto": "EventTarget",
    "mode": "SourceBufferAppendMode",
    "updating": "bool",
    "buffered": "TimeRanges",
    "timestampOffset": "number",
    "appendWindowStart": "number",
    "appendWindowEnd": "number",
    "appendBuffer": "fn(data: +ArrayBuffer)",
    "abort": "fn()",
    "remove": "fn(start: number, end: number)"
  },
  "SourceBufferList": {
    "!proto": "EventTarget",
    "length": "number",
    "<i>": "SourceBuffer"
  },
  "SpeechGrammar": {
    "!type": "fn()",
    "prototype": {
      "src": "string",
      "weight": "number"
    }
  },
  "SpeechGrammarList": {
    "!type": "fn()",
    "prototype": {
      "length": "number",
      "item": "fn(index: number) -> +SpeechGrammar",
      "addFromURI": "fn(src: string, weight?: number)",
      "addFromString": "fn(string: string, weight?: number)",
      "<i>": "+SpeechGrammar"
    }
  },
  "SpeechRecognition": {
    "!type": "fn()",
    "prototype": {
      "!proto": "EventTarget",
      "grammars": "+SpeechGrammarList",
      "lang": "string",
      "continuous": "bool",
      "interimResults": "bool",
      "maxAlternatives": "number",
      "serviceURI": "string",
      "start": "fn(stream?: +MediaStream)",
      "stop": "fn()",
      "abort": "fn()",
      "onaudiostart": "fn(+Event)",
      "onsoundstart": "fn(+Event)",
      "onspeechstart": "fn(+Event)",
      "onspeechend": "fn(+Event)",
      "onsoundend": "fn(+Event)",
      "onaudioend": "fn(+Event)",
      "onresult": "fn(+Event)",
      "onnomatch": "fn(+Event)",
      "onerror": "fn(+Event)",
      "onstart": "fn(+Event)",
      "onend": "fn(+Event)"
    }
  },
  "SpeechRecognitionAlternative": {
    "transcript": "string",
    "confidence": "number"
  },
  "SpeechRecognitionError": {
    "!type": "fn(type: string, eventInitDict?: SpeechRecognitionErrorInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "error": "SpeechRecognitionErrorCode",
      "message": "string"
    }
  },
  "SpeechRecognitionEvent": {
    "!type": "fn(type: string, eventInitDict?: SpeechRecognitionEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "resultIndex": "number",
      "results": "SpeechRecognitionResultList",
      "interpretation": "?",
      "emma": "+Document"
    }
  },
  "SpeechRecognitionResult": {
    "length": "number",
    "item": "fn(index: number) -> SpeechRecognitionAlternative",
    "isFinal": "bool",
    "<i>": "SpeechRecognitionAlternative"
  },
  "SpeechRecognitionResultList": {
    "length": "number",
    "item": "fn(index: number) -> SpeechRecognitionResult",
    "<i>": "SpeechRecognitionResult"
  },
  "SpeechSynthesis": {
    "pending": "bool",
    "speaking": "bool",
    "paused": "bool",
    "speak": "fn(utterance: +SpeechSynthesisUtterance)",
    "cancel": "fn()",
    "pause": "fn()",
    "resume": "fn()",
    "getVoices": "fn() -> [SpeechSynthesisVoice]",
    "forceEnd": "fn()"
  },
  "SpeechSynthesisErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: SpeechSynthesisErrorEventInit)",
    "prototype": {
      "!proto": "SpeechSynthesisEvent.prototype",
      "error": "SpeechSynthesisErrorCode"
    }
  },
  "SpeechSynthesisEvent": {
    "!type": "fn(type: string, eventInitDict?: SpeechSynthesisEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "utterance": "+SpeechSynthesisUtterance",
      "charIndex": "number",
      "elapsedTime": "number",
      "name": "string"
    }
  },
  "SpeechSynthesisUtterance": {
    "!type": "fn(text: string)",
    "prototype": {
      "!proto": "EventTarget",
      "text": "string",
      "lang": "string",
      "voice": "SpeechSynthesisVoice",
      "volume": "number",
      "rate": "number",
      "pitch": "number",
      "onstart": "fn(+Event)",
      "onend": "fn(+Event)",
      "onerror": "fn(+Event)",
      "onpause": "fn(+Event)",
      "onresume": "fn(+Event)",
      "onmark": "fn(+Event)",
      "onboundary": "fn(+Event)",
      "chosenVoiceURI": "string"
    }
  },
  "SpeechSynthesisVoice": {
    "voiceURI": "string",
    "name": "string",
    "lang": "string",
    "localService": "bool",
    "default": "bool"
  },
  "StereoPannerNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode",
    "!doc": "The StereoPannerNode interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an AudioNode audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.",
    "!proto": "AudioNode",
    "pan": {
      "!type": "AudioParam",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/pan",
      "!doc": "The pan property of the StereoPannerNode interface is an a-rate AudioParam representing the amount of panning to apply. The value can range between -1 (full left pan) and 1 (full right pan)."
    },
    "passThrough": "bool"
  },
  "Storage": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage",
    "!doc": "The Storage interface of the Web Storage API provides access to the session storage or local storage for a particular domain, allowing you to for example add, modify or delete stored data items.",
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage/length",
      "!doc": "The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object."
    },
    "key": {
      "!type": "fn(index: number) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage/key",
      "!doc": "The key() method of the Storage interface, passed a number n, will return the name of the nth key in the storage."
    },
    "getItem": {
      "!type": "fn(key: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem",
      "!doc": "The getItem() method of the Storage interface, when passed a key name, will return that key's value."
    },
    "setItem": {
      "!type": "fn(key: string, value: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem",
      "!doc": "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists."
    },
    "removeItem": {
      "!type": "fn(key: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem",
      "!doc": "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the storage."
    },
    "clear": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Storage/clear",
      "!doc": "The clear() method of the Storage interface, when invoked, will empty all keys out of the storage."
    },
    "<i>": "string"
  },
  "StorageEvent": {
    "!type": "fn(type: string, eventInitDict?: StorageEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StorageEvent",
    "!doc": "A StorageEvent is sent to a window when a storage area changes.",
    "prototype": {
      "!proto": "Event.prototype",
      "key": "string",
      "oldValue": "string",
      "newValue": "string",
      "url": "string",
      "storageArea": "Storage",
      "initStorageEvent": "fn(type: string, canBubble: bool, cancelable: bool, key: string, oldValue: string, newValue: string, url: string, storageArea: Storage)"
    }
  },
  "StyleSheet": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet",
    "!doc": "An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.",
    "type": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/type",
      "!doc": "type specifies the style sheet language for this style sheet."
    },
    "href": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/href",
      "!doc": "Returns the location of the stylesheet."
    },
    "ownerNode": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/ownerNode",
      "!doc": "ownerNode returns the node that associates this style sheet with the document."
    },
    "parentStyleSheet": {
      "!type": "StyleSheet",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/parentStyleSheet",
      "!doc": "Returns the stylesheet that is including this one, if any."
    },
    "title": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/title",
      "!doc": "title returns the advisory title of the current style sheet."
    },
    "media": {
      "!type": "MediaList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/media",
      "!doc": "media specifies the intended destination medium for style information."
    },
    "disabled": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/disabled",
      "!doc": "This property indicates whether the current stylesheet is applied or not."
    },
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "StyleSheetList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList",
    "!doc": "The StyleSheetList interface represents a list of StyleSheet.",
    "length": "number",
    "item": "fn(index: number) -> StyleSheet",
    "<i>": "StyleSheet"
  },
  "CryptoKey": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CryptoKey",
    "!doc": "The CryptoKey interface represents a cryptographic key derived from a specific key algorithm.",
    "type": {
      "!type": "KeyType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/type",
      "!doc": "The CryptoKey.type read-only property that indicates the type of the key: if it is the key for a symmetric algorithm (\"secret\") or for an asymmetric algorithm (\"public\" or \"private\", depending of its purpose)."
    },
    "extractable": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/extractable",
      "!doc": "The CryptoKey.extractable read-only property that indicates if the raw material key can be extracted, for example for archiving it."
    },
    "algorithm": {
      "!type": "object",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/algorithm",
      "!doc": "The CryptoKey.algorithm read-only property is an opaque value containing all the information about the algorithm related to the key."
    },
    "usages": {
      "!type": "[KeyUsage]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/usages",
      "!doc": "The CryptoKey.usages read-only property is an array of enumerated that indicates the purposes of the key."
    }
  },
  "SubtleCrypto": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto",
    "!doc": "The SubtleCrypto interface represents a set of cryptographic primitives. It is available via the Crypto.subtle properties available in a window context (via Window.crypto).",
    "encrypt": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, data: CryptoOperationData) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt",
      "!doc": "The SubtleCrypto.encrypt() method returns a Promise of the encrypted data corresponding to the cleartext, algorithm and key given as parameters."
    },
    "decrypt": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, data: CryptoOperationData) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt",
      "!doc": "The SubtleCrypto.decrypt() method returns a Promise of the cleartext corresponding to the ciphertext, algorithm and key given as parameters."
    },
    "sign": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, data: CryptoOperationData) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign",
      "!doc": "The SubtleCrypto.sign() method returns a Promise containing the signature corresponding to the text, algorithm and key given as parameters."
    },
    "verify": {
      "!type": "fn(algorithm: AlgorithmIdentifier, key: CryptoKey, signature: CryptoOperationData, data: CryptoOperationData) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify",
      "!doc": "The SubtleCrypto.verify() method returns a Promise of a Boolean value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters."
    },
    "digest": {
      "!type": "fn(algorithm: AlgorithmIdentifier, data: CryptoOperationData) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest",
      "!doc": "The SubtleCrypto.digest() method returns a Promise of a digest generated from the hash function and text given as parameters."
    },
    "generateKey": {
      "!type": "fn(algorithm: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey",
      "!doc": "The SubtleCrypto.generateKey() method returns a Promise of a newly generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters."
    },
    "deriveKey": {
      "!type": "fn(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey",
      "!doc": "The SubtleCrypto.deriveKey() method returns a Promise of a newly generated CryptoKey derivated from a master key and a specific algorithm given as parameters."
    },
    "deriveBits": "fn(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, length: number) -> +Promise[value=?]",
    "importKey": {
      "!type": "fn(format: KeyFormat, keyData: object, algorithm: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey",
      "!doc": "The SubtleCrypto.importKey() method returns a Promise of the CryptoKey generated from the data given in parameters."
    },
    "exportKey": {
      "!type": "fn(format: KeyFormat, key: CryptoKey) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey",
      "!doc": "The SubtleCrypto.exportKey() method returns a Promise of the key encrypted in the requested format. If the key is not extractable, that is if CryptoKey.extractable returns false, the promise fails with an InvalidAccessError exception; it the format is unknown, the promive fails with a NotSupported exception."
    },
    "wrapKey": {
      "!type": "fn(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey",
      "!doc": "The SubtleCrypto.wrapKey() method returns a Promise of a wrapped symmetric key for usage (transfer, storage) in unsecure environments. The wrapped buffer returned is in the format given in parameters, and contained the key wrapped by the give wrapping key with the given algorithm."
    },
    "unwrapKey": {
      "!type": "fn(format: KeyFormat, wrappedKey: CryptoOperationData, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier, unwrappedKeyAlgorithm: AlgorithmIdentifier, extractable: bool, keyUsages: [KeyUsage]) -> +Promise[value=?]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey",
      "!doc": "The SubtleCrypto.wrapKey() method returns a Promise of a CryptoKey corresponding to the wrapped key given in parameter."
    }
  },
  "SystemUpdateProvider": {
    "!proto": "EventTarget",
    "name": "string",
    "uuid": "string",
    "onupdateavailable": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onupdateready": "fn(+Event)",
    "onerror": "fn(+Event)",
    "checkForUpdate": "fn()",
    "startDownload": "fn()",
    "stopDownload": "fn()",
    "applyUpdate": "fn()",
    "setParameter": "fn(name: string, value: string) -> bool",
    "getParameter": "fn(name: string) -> string"
  },
  "SystemUpdateManager": {
    "getProviders": "fn() -> +Promise",
    "setActiveProvider": "fn(uuid: string) -> +Promise[value=SystemUpdateProvider]",
    "getActiveProvider": "fn() -> +Promise[value=SystemUpdateProvider]"
  },
  "TCPServerSocket": {
    "!type": "fn(port: number, options?: ServerSocketOptions, backlog?: number)",
    "prototype": {
      "!proto": "EventTarget",
      "localPort": "number",
      "onconnect": "fn(+Event)",
      "onerror": "fn(+Event)",
      "close": "fn()"
    }
  },
  "TCPServerSocketEvent": {
    "!type": "fn(type: string, eventInitDict?: TCPServerSocketEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "socket": "+TCPSocket"
    }
  },
  "TCPSocket": {
    "!type": "fn(host: string, port: number, options?: SocketOptions)",
    "prototype": {
      "!proto": "EventTarget",
      "upgradeToSecure": "fn()",
      "host": "string",
      "port": "number",
      "ssl": "bool",
      "bufferedAmount": "number",
      "suspend": "fn()",
      "resume": "fn()",
      "close": "fn()",
      "send": "fn(data: string) -> bool",
      "readyState": "TCPReadyState",
      "binaryType": "TCPSocketBinaryType",
      "onopen": "fn(+Event)",
      "ondrain": "fn(+Event)",
      "ondata": "fn(+Event)",
      "onerror": "fn(+Event)",
      "onclose": "fn(+Event)"
    }
  },
  "TCPSocketErrorEvent": {
    "!type": "fn(type: string, eventInitDict?: TCPSocketErrorEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "name": "string",
      "message": "string"
    }
  },
  "TCPSocketEvent": {
    "!type": "fn(type: string, eventInitDict?: TCPSocketEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "data": "?"
    }
  },
  "TVChannel": {
    "!proto": "EventTarget",
    "getPrograms": "fn(options?: TVGetProgramsOptions) -> +Promise",
    "getCurrentProgram": "fn() -> +Promise[value=TVProgram]",
    "networkId": "string",
    "transportStreamId": "string",
    "serviceId": "string",
    "source": "TVSource",
    "type": "TVChannelType",
    "name": "string",
    "number": "string",
    "isEmergency": "bool",
    "isFree": "bool"
  },
  "TVCurrentChannelChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVCurrentChannelChangedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "channel": "TVChannel"
    }
  },
  "TVCurrentSourceChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVCurrentSourceChangedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "source": "TVSource"
    }
  },
  "TVEITBroadcastedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVEITBroadcastedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "programs": "[TVProgram]"
    }
  },
  "TVManager": {
    "!proto": "EventTarget",
    "getTuners": "fn() -> +Promise"
  },
  "TVProgram": {
    "getAudioLanguages": "fn() -> [string]",
    "getSubtitleLanguages": "fn() -> [string]",
    "eventId": "string",
    "channel": "TVChannel",
    "title": "string",
    "startTime": "number",
    "duration": "number",
    "description": "string",
    "rating": "string"
  },
  "TVScanningStateChangedEvent": {
    "!type": "fn(type: string, eventInitDict?: TVScanningStateChangedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "state": "TVScanningState",
      "channel": "TVChannel"
    }
  },
  "TVSource": {
    "!proto": "EventTarget",
    "getChannels": "fn() -> +Promise",
    "setCurrentChannel": "fn(channelNumber: string) -> +Promise[value=void]",
    "startScanning": "fn(options?: TVStartScanningOptions) -> +Promise[value=void]",
    "stopScanning": "fn() -> +Promise[value=void]",
    "tuner": "TVTuner",
    "type": "TVSourceType",
    "isScanning": "bool",
    "currentChannel": "TVChannel",
    "oncurrentchannelchanged": "fn(+Event)",
    "oneitbroadcasted": "fn(+Event)",
    "onscanningstatechanged": "fn(+Event)"
  },
  "TVTuner": {
    "!proto": "EventTarget",
    "getSupportedSourceTypes": "fn() -> [TVSourceType]",
    "getSources": "fn() -> +Promise",
    "setCurrentSource": "fn(sourceType: TVSourceType) -> +Promise[value=void]",
    "id": "string",
    "currentSource": "TVSource",
    "stream": "+MediaStream",
    "oncurrentsourcechanged": "fn(+Event)"
  },
  "Telephony": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony",
    "!doc": "The Telephony interface of the Web Telephony API provides support for dialing, answering, and managing phone calls on a device with telephony support.",
    "!proto": "EventTarget",
    "dial": {
      "!type": "fn(number: string, serviceId?: number) -> +Promise[value=TelephonyCall|MMICall]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/dial",
      "!doc": "The dial() method of the Telephony interface dials a phone number and returns a new TelephonyCall object representing the new call."
    },
    "dialEmergency": {
      "!type": "fn(number: string, serviceId?: number) -> +Promise[value=TelephonyCall]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/dialEmergency",
      "!doc": "The dialEmergency() method of the Telephony interface dials an emergency phone number and returns a new TelephonyCall object representing the new call."
    },
    "sendTones": {
      "!type": "fn(tones: string, pauseDuration?: number, toneDuration?: number, serviceId?: number) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/sendTones",
      "!doc": "The sendTones() method of the Telephony Interface generates multiple DTMF tones, with a specified duration for each tone, and an optional delay before generation starts. The tones are sent to the currently active call."
    },
    "startTone": {
      "!type": "fn(tone: string, serviceId?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/startTone",
      "!doc": "The startTone() method of the Telephony Interface begins generating the tone for the specified DTMF character. The tone is sent to the currently active call, and continues to sound until a corresponding call to Telephony.stopTone()."
    },
    "stopTone": {
      "!type": "fn(serviceId?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/stopTone",
      "!doc": "The startTone() method of the Telephony Interface stops transmitting the currently-playing DTMF tone started by a prior call to Telephony.startTone()."
    },
    "ownAudioChannel": "fn()",
    "muted": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/muted",
      "!doc": "The muted property of the Telephony interface indicates whether or not the microphone is muted for the purposes of telephony."
    },
    "speakerEnabled": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/speakerEnabled",
      "!doc": "The speakerEnabled property of the Telephony interface indicates whether or not the speakerphone functionality of the phone is enabled."
    },
    "active": {
      "!type": "TelephonyCall|TelephonyCallGroup",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/active",
      "!doc": "The active read-only property of the Telephony interface returns a TelephonyCall object indicating the call that is currently active. The active call is the one that is currently receiving input from the microphone, or tones generated by calls to the Telephony.startTone() method."
    },
    "calls": {
      "!type": "CallsList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/calls",
      "!doc": "The calls read-only property of the Telephony interface returns a list of TelephonyCall objects representing the currently connected telephone calls."
    },
    "conferenceGroup": {
      "!type": "TelephonyCallGroup",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/conferenceGroup",
      "!doc": "The conferenceGroup read-only property of the Telephony interface returns a TelephonyCallGroup object, allowing programmatic control over a multi-person call/conference call."
    },
    "ready": {
      "!type": "+Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/ready",
      "!doc": "The ready read-only property of the Telephony interface provides an asynchronous notification that the object is initialized."
    },
    "onincoming": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/onincoming",
      "!doc": "The onincoming property of the Telephony interface specifies an event listener to receive incoming events; these indicate when a new call is arriving."
    },
    "oncallschanged": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/oncallschanged",
      "!doc": "The oncallschanged property of the Telephony interface specifies an event listener to receive callschanged events. These events occur when the list of ongoing calls, as indicated by Telephony.calls, changes."
    },
    "onremoteheld": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/onremoteheld",
      "!doc": "The onremoteheld property of the Telephony interface specifies an event listener to receive remoteheld events. These events occur whenever a remote party (e.g. the person you called) puts the call on hold.."
    },
    "onremoteresumed": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Telephony/onremoteresumed",
      "!doc": "The onremoteresumed property of the Telephony interface specifies an event listener to receive remoteresumed events. These events occur when when a remote party (e.g. the person you called) resumes a call previously put on hold."
    }
  },
  "TelephonyCall": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall",
    "!doc": "The TelephonyCall interface of the Web Telephony API represents one telephone call, providing information about the call and offering mechanisms for controlling it and detecting changes to its status.",
    "!proto": "EventTarget",
    "serviceId": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/serviceId",
      "!doc": "The serviceId read-only property of the TelephonyCall interface indicates which telephony service a call comes from."
    },
    "id": {
      "!type": "TelephonyCallId",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/id",
      "!doc": "The id read-only property of the TelephonyCall interface indicates the caller id (usually the telephone number) associated with the current phone call."
    },
    "secondId": {
      "!type": "TelephonyCallId",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/secondId",
      "!doc": "The secondId read-only property of the TelephonyCall interface indicates the second caller's id (usually their phone number) in the case of a CDMA network where you have a 2nd waiting call."
    },
    "state": {
      "!type": "TelephonyCallState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/state",
      "!doc": "The state read-only property of the TelephonyCall interface returns the current state of the phone call."
    },
    "emergency": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/emergency",
      "!doc": "The emergency read-only property of the TelephonyCall interface indicates whether the current telephone number is an emergency number."
    },
    "switchable": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/switchable",
      "!doc": "The switchable read-only property of the TelephonyCall interface indicates whether the current call can be switched between \"connected\" and \"held\" states."
    },
    "mergeable": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/mergeable",
      "!doc": "The mergeable read-only property of the TelephonyCall interface indicates whether the current call can be added into a TelephonyCallGroup (multi-person call.)"
    },
    "error": {
      "!type": "+DOMError",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/error",
      "!doc": "The error read-only property of the TelephonyCall interface indicates a returned error when a call does connect successfully."
    },
    "disconnectedReason": {
      "!type": "TelephonyCallDisconnectedReason",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/disconnectedReason",
      "!doc": "The disconnectedReason read-only property of the TelephonyCall interface indicates the reason why the call was disconnected (either because there was an error somewhere, or the call ended or wasn't answered.)"
    },
    "group": {
      "!type": "TelephonyCallGroup",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/group",
      "!doc": "The group read-only property of the TelephonyCall interface indicates the TelephonyCallGroup (multi-person call) the call belongs to, if any."
    },
    "answer": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/answer",
      "!doc": "The answer() method of the TelephonyCall interface answers an incoming call."
    },
    "hangUp": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/hangUp",
      "!doc": "The hangUp() method of the TelephonyCall interface hangs up an ongoing call."
    },
    "hold": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/hold",
      "!doc": "The hold() method of the TelephonyCall interface is used to put a call on hold."
    },
    "resume": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/resume",
      "!doc": "The resume() method of the TelephonyCall interface is used to resume a call that was previously put on hold."
    },
    "onstatechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/onstatechange",
      "!doc": "The onstatechange event handler of the TelephonyCall interface is a reference to a function to be called to handle the Telephony API's statechange event."
    },
    "ondialing": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/ondialing",
      "!doc": "The ondialing event handler of the TelephonyCall interface is a reference to a function to be called to handle the Telephony API's dialing event."
    },
    "onalerting": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/onalerting",
      "!doc": "The onalerting event handler of the TelephonyCall interface is a reference to a function to be called to handle the Telephony API's alerting event."
    },
    "onconnected": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/onconnected",
      "!doc": "The onconnected event handler of the TelephonyCall interface is a reference to a function to be called to handle the Telephony API's connected event."
    },
    "ondisconnected": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/ondisconnected",
      "!doc": "The ondisconnected event handler of the TelephonyCall interface is a reference to a function to be called to handle the Telephony API's disconnected event."
    },
    "onheld": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/onheld",
      "!doc": "The onheld event handler of the TelephonyCall interface is a reference to a function to be called when the current call has been held."
    },
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/onerror",
      "!doc": "The onerror event handler of the TelephonyCall interface is a reference to a function to be called when the call does not succeed due to error. This is being obsoleted as it is very similar to TelephonyCall.ondisconnected, but semantically more narrow and therefore not as useful."
    },
    "ongroupchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCall/ongroupchange",
      "!doc": "The ongroupchange event handler of the TelephonyCall interface is a reference to a function to call when the call's TelephonyCallGroup (and therefore TelephonyCall.group property) changes."
    }
  },
  "TelephonyCallGroup": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup",
    "!doc": "The TelephonyCallGroup interface of the Web Telephony API represents a multi-person/conference call, providing functions to allow callers to be added and removed from the conference call, hanging up of the entire call, and more.",
    "!proto": "EventTarget",
    "calls": {
      "!type": "CallsList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/calls",
      "!doc": "The calls read-only property of the TelephonyCallGroup interface returns an array containing all the TelephonyCall objects representing the calls currently added to the call group."
    },
    "add": {
      "!type": "fn(call: TelephonyCall) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/add",
      "!doc": "The add() method of the TelephonyCallGroup interface adds a specific TelephonyCall object to the call group."
    },
    "remove": {
      "!type": "fn(call: TelephonyCall) -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/remove",
      "!doc": "The remove() method of the TelephonyCallGroup interface removes a specific TelephonyCall object from the call group."
    },
    "hangUp": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/hangUp",
      "!doc": "The hangUp() method of the TelephonyCallGroup interface hangs up the entire conference call, i.e. every TelephonyCall object within it."
    },
    "hold": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/hold",
      "!doc": "The hold() method of the TelephonyCallGroup interface puts the entire conference call on hold, i.e. every TelephonyCall object within it."
    },
    "resume": {
      "!type": "fn() -> +Promise[value=void]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/resume",
      "!doc": "The resume() method of the TelephonyCallGroup interface resumes a previously held conference call."
    },
    "state": {
      "!type": "TelephonyCallGroupState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/state",
      "!doc": "The state read-only property of the TelephonyCallGroup interface returns a DOMString indicating the state of the call group."
    },
    "onstatechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/onstatechange",
      "!doc": "The onstatechange property of the Telephony interface specifies an event listener to receive statechange events. These events occur when the call group's state (i.e. the value of Telephony.state) changes."
    },
    "onconnected": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/onconnected",
      "!doc": "The onconnected property of the Telephony interface specifies an event listener to receive connected events. These events occur when the phone is connected to the call group."
    },
    "onheld": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/onheld",
      "!doc": "The onheld property of the Telephony interface specifies an event listener to receive held events. These events occur when the call group is successfully put on hold."
    },
    "oncallschanged": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/oncallschanged",
      "!doc": "The oncallschanged property of the Telephony interface specifies an event listener to receive callschanged events. These events occur when the list of ongoing calls, as indicated by TelephonyCallGroup.calls, changes."
    },
    "onerror": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TelephonyCallGroup/onerror",
      "!doc": "The onerror property of the Telephony interface specifies an event listener to receive error events. These events occur when an error occurs with the call group."
    }
  },
  "TelephonyCallId": {
    "number": "string",
    "numberPresentation": "CallIdPresentation",
    "name": "string",
    "namePresentation": "CallIdPresentation"
  },
  "Text": {
    "!type": "fn(data?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Text",
    "!doc": "The Text interface represents the textual content of Element or Attr.  If an element has no markup within its content, it has a single child implementing Text that contains the element's text.  However, if the element contains markup, it is parsed into information items and Text nodes that form its children.",
    "prototype": {
      "!proto": "CharacterData",
      "splitText": {
        "!type": "fn(offset: number) -> +Text",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Text/splitText",
        "!doc": "The Text.splitText() method breaks the Textnode into two nodes at the specified offset, keeping both nodes in the tree as siblings."
      },
      "wholeText": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText",
        "!doc": "The Text.wholeText read-only property returns all text of all Text nodes logically adjacent to the node. The text is concatenated in document order.  This allows to specify any text node and obtain all adjacent text as a single string."
      },
      "queryInterface": "fn(iid: IID) -> nsISupports",
      "getBoxQuads": "fn(options?: BoxQuadOptions) -> [+DOMQuad]",
      "convertQuadFromNode": "fn(quad: +DOMQuad, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
      "convertRectFromNode": "fn(rect: DOMRectReadOnly, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMQuad",
      "convertPointFromNode": "fn(point: DOMPointInit, from: GeometryNode, options?: ConvertCoordinateOptions) -> +DOMPoint"
    }
  },
  "TextDecoder": {
    "!type": "fn(label?: string, options?: TextDecoderOptions)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextDecoder",
    "!doc": "The TextDecoder interface represents a decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, ... A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.",
    "prototype": {
      "encoding": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/encoding",
        "!doc": "The TextDecoder.encoding read-only property returns a DOMString containing the name of the decoding algorithm used by the specific decoder."
      },
      "fatal": "bool",
      "decode": {
        "!type": "fn(input?: BufferSource, options?: TextDecodeOptions) -> string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/decode",
        "!doc": "The TextDecoder.decode method returns a DOMString containing the text, given in parameters, decoded with the specific method for that TextDecoder object."
      }
    }
  },
  "TextEncoder": {
    "!type": "fn(utfLabel?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextEncoder",
    "!doc": "The TextEncoder interface represents an encoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, ... An encoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.",
    "prototype": {
      "encoding": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encoding",
        "!doc": "The TextEncoder.encoding read-only property returns a DOMString containing the name of the encoding algorithm used by the specific encoder."
      },
      "encode": {
        "!type": "fn(input?: string) -> Uint8Array",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encode",
        "!doc": "The TextEncoder.encode method returns a Uint8Array containing the text given in parameters encoded with the specific method for that TextEncoder object."
      }
    }
  },
  "TextTrack": {
    "!proto": "EventTarget",
    "kind": "TextTrackKind",
    "label": "string",
    "language": "string",
    "id": "string",
    "inBandMetadataTrackDispatchType": "string",
    "mode": "TextTrackMode",
    "cues": "TextTrackCueList",
    "activeCues": "TextTrackCueList",
    "addCue": "fn(cue: +VTTCue)",
    "removeCue": "fn(cue: +VTTCue)",
    "textTrackList": "TextTrackList"
  },
  "TextTrackCue": {
    "!proto": "EventTarget",
    "track": "TextTrack",
    "id": "string",
    "startTime": "number",
    "endTime": "number",
    "pauseOnExit": "bool",
    "onenter": "fn(+Event)",
    "onexit": "fn(+Event)"
  },
  "TextTrackCueList": {
    "length": "number",
    "getCueById": "fn(id: string) -> +VTTCue",
    "<i>": "+VTTCue"
  },
  "TextTrackList": {
    "!proto": "EventTarget",
    "length": "number",
    "getTrackById": "fn(id: string) -> TextTrack",
    "onchange": "fn(+Event)",
    "onaddtrack": "fn(+Event)",
    "onremovetrack": "fn(+Event)",
    "mediaElement": "HTMLMediaElement",
    "<i>": "TextTrack"
  },
  "TimeEvent": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TimeEvent",
    "!doc": "Extends Event.",
    "!proto": "Event.prototype",
    "detail": "number",
    "view": "WindowProxy",
    "initTimeEvent": "fn(aType: string, aView: Window, aDetail: number)"
  },
  "TimeRanges": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TimeRanges",
    "!doc": "The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements.",
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/length",
      "!doc": "The TimeRanges.length read-only property returns the number of ranges in the object."
    },
    "start": {
      "!type": "fn(index: number) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/start",
      "!doc": "Returns the time offset at which a specified time range begins."
    },
    "end": {
      "!type": "fn(index: number) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/end",
      "!doc": "Returns the time offset at which a specified time range ends."
    }
  },
  "Touch": {
    "!type": "fn(touchInitDict: TouchInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch",
    "!doc": "A Touch object represents a single point of contact between the user and a touch-sensitive interface device (which may be, for example, a touchscreen or a trackpad).",
    "prototype": {
      "identifier": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier",
        "!doc": "Returns a value uniquely identifying this point of contact with the touch surface. This value remains consistent for every event involving this finger's (or stylus's) movement on the surface until it is lifted off the surface."
      },
      "target": "EventTarget",
      "screenX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX",
        "!doc": "Returns the X coordinate of the touch point relative to the screen, not including any scroll offset."
      },
      "screenY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY",
        "!doc": "Returns the Y coordinate of the touch point relative to the screen, not including any scroll offset."
      },
      "clientX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX",
        "!doc": "Returns the X coordinate of the touch point relative to the viewport, not including any scroll offset."
      },
      "clientY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY",
        "!doc": "Returns the Y coordinate of the touch point relative to the viewport, not including any scroll offset."
      },
      "pageX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/pageX",
        "!doc": "Returns the X coordinate of the touch point relative to the viewport, including any scroll offset."
      },
      "pageY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/pageY",
        "!doc": "Returns the Y coordinate of the touch point relative to the viewport, including any scroll offset."
      },
      "radiusX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusX",
        "!doc": "Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenX."
      },
      "radiusY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusY",
        "!doc": "Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenY."
      },
      "rotationAngle": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle",
        "!doc": "Returns the rotation angle, in degrees, of the contact area ellipse defined by Touch.radiusX and Touch.radiusY. The value may be between 0 and 90. Together, these three values describe an ellipse that approximates the size and shape of the area of contact between the user and the screen. This may be a large ellipse representing the contact between a fingertip and the screen or a small one representing the tip of a stylus, for example."
      },
      "force": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Touch/force",
        "!doc": "Returns the amount of pressure the user is applying to the touch surface for this Touch."
      },
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "TouchEvent": {
    "!type": "fn(type: string, eventInitDict?: TouchEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchEvent",
    "!doc": "A TouchEvent interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.",
    "prototype": {
      "!proto": "UIEvent.prototype",
      "touches": {
        "!type": "TouchList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches",
        "!doc": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface, regardless of whether or not they've changed or what their target was at touchstart time."
      },
      "targetTouches": {
        "!type": "TouchList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches",
        "!doc": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element."
      },
      "changedTouches": {
        "!type": "TouchList",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches",
        "!doc": "A TouchList listing all the Touch objects for touch points that contributed to this touch event."
      },
      "altKey": "bool",
      "metaKey": "bool",
      "ctrlKey": "bool",
      "shiftKey": "bool",
      "initTouchEvent": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, touches: TouchList, targetTouches: TouchList, changedTouches: TouchList)"
    }
  },
  "TouchList": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchList",
    "!doc": "A TouchList represents a list of all of the points of contact with a touch surface; for example, if the user has three fingers on the screen (or trackpad), the corresponding TouchList would have one Touch object for each finger, for a total of three entries.",
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchList/length",
      "!doc": "This read-only property indicates the number of items in a TouchList."
    },
    "item": {
      "!type": "fn(index: number) -> +Touch",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchList/item",
      "!doc": "Returns the Touch object at the specified index into the TouchList. You may also use standard array syntax to access items in the list."
    },
    "identifiedTouch": {
      "!type": "fn(identifier: number) -> +Touch",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TouchList/identifiedTouch",
      "!doc": "This method returns the first Touch item in the TouchList matching the specified identifier."
    },
    "<i>": "+Touch",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "TrackEvent": {
    "!type": "fn(type: string, eventInitDict?: TrackEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "track": "VideoTrack|AudioTrack|TextTrack"
    }
  },
  "TransitionEvent": {
    "!type": "fn(type: string, eventInitDict?: TransitionEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent",
    "!doc": "The TransitionEvent interface represents events providing information related to transitions.",
    "prototype": {
      "!proto": "Event.prototype",
      "propertyName": "string",
      "elapsedTime": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime",
        "!doc": "The TransitionEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired. This value is not affected by the transition-delay property."
      },
      "pseudoElement": {
        "!type": "string",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement",
        "!doc": "The TransitionEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''."
      }
    }
  },
  "MozTreeView": {},
  "nsIScriptableRegion": {},
  "TreeColumn": {
    "element": "HTMLElement",
    "columns": "TreeColumns",
    "x": "number",
    "width": "number",
    "id": "string",
    "index": "number",
    "primary": "bool",
    "cycler": "bool",
    "editable": "bool",
    "selectable": "bool",
    "TYPE_TEXT": "number",
    "TYPE_CHECKBOX": "number",
    "TYPE_PROGRESSMETER": "number",
    "TYPE_PASSWORD": "number",
    "type": "number",
    "getNext": "fn() -> TreeColumn",
    "getPrevious": "fn() -> TreeColumn",
    "invalidate": "fn()"
  },
  "TreeColumns": {
    "tree": "TreeBoxObject",
    "count": "number",
    "length": "number",
    "getFirstColumn": "fn() -> TreeColumn",
    "getLastColumn": "fn() -> TreeColumn",
    "getPrimaryColumn": "fn() -> TreeColumn",
    "getSortedColumn": "fn() -> TreeColumn",
    "getKeyColumn": "fn() -> TreeColumn",
    "getColumnFor": "fn(element: HTMLElement) -> TreeColumn",
    "getNamedColumn": "fn(name: string) -> TreeColumn",
    "getColumnAt": "fn(index: number) -> TreeColumn",
    "invalidateColumns": "fn()",
    "restoreNaturalOrder": "fn()",
    "<i>": "TreeColumn",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "TreeWalker": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker",
    "!doc": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
    "root": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root",
      "!doc": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses."
    },
    "whatToShow": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow",
      "!doc": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:"
    },
    "filter": {
      "!type": "NodeFilter",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter",
      "!doc": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker."
    },
    "currentNode": {
      "!type": "Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode",
      "!doc": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at."
    },
    "parentNode": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode",
      "!doc": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, returns null and the current node is not changed."
    },
    "firstChild": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild",
      "!doc": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed."
    },
    "lastChild": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild",
      "!doc": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed."
    },
    "previousSibling": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling",
      "!doc": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed."
    },
    "nextSibling": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling",
      "!doc": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed."
    },
    "previousNode": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode",
      "!doc": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed."
    },
    "nextNode": {
      "!type": "fn() -> Node",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode",
      "!doc": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed."
    },
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "UDPMessageEvent": {
    "!type": "fn(type: string, eventInitDict?: UDPMessageEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "remoteAddress": "string",
      "remotePort": "number",
      "data": "?"
    }
  },
  "UDPSocket": {
    "!type": "fn(options?: UDPOptions)",
    "prototype": {
      "!proto": "EventTarget",
      "localAddress": "string",
      "localPort": "number",
      "remoteAddress": "string",
      "remotePort": "number",
      "addressReuse": "bool",
      "loopback": "bool",
      "readyState": "SocketReadyState",
      "opened": "+Promise[value=void]",
      "closed": "+Promise[value=void]",
      "onmessage": "fn(+Event)",
      "close": "fn() -> +Promise[value=void]",
      "joinMulticastGroup": "fn(multicastGroupAddress: string)",
      "leaveMulticastGroup": "fn(multicastGroupAddress: string)",
      "send": "fn(data: string, remoteAddress?: string, remotePort?: number) -> bool"
    }
  },
  "UIEvent": {
    "!type": "fn(type: string, eventInitDict?: UIEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent",
    "!doc": "The UIEvent interface represents simple user interface events.",
    "prototype": {
      "!proto": "Event.prototype",
      "view": {
        "!type": "WindowProxy",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view",
        "!doc": "The UIEvent.view read-only property returns the WindowProxy object from which the event was generated. In browsers, this is the Window object the event happened in."
      },
      "detail": "number",
      "initUIEvent": {
        "!type": "fn(aType: string, aCanBubble: bool, aCancelable: bool, aView: Window, aDetail: number)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/initUIEvent",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "SCROLL_PAGE_UP": "number",
      "SCROLL_PAGE_DOWN": "number",
      "layerX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/layerX",
        "!doc": "The UIEvent.layerX read-only property returns the horizontal coordinate of the event relative to the current layer."
      },
      "layerY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/layerY",
        "!doc": "The UIEvent.layerY read-only property returns the vertical coordinate of the event relative to the current layer."
      },
      "pageX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageX",
        "!doc": "The UIEvent.pageX read-only property returns the horizontal coordinate of the event relative to the whole document."
      },
      "pageY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageY",
        "!doc": "The UIEvent.pageY read-only property returns the vertical coordinate of the event relative to the whole document."
      },
      "which": "number",
      "rangeParent": "Node",
      "rangeOffset": "number",
      "cancelBubble": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/cancelBubble",
        "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
      },
      "isChar": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UIEvent/isChar",
        "!doc": "The UIEvent.isChar read-only property returns a Boolean indicating whether the event produced a key character or not."
      }
    }
  },
  "URL": {
    "!type": "fn(url: string, base?: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URL",
    "!doc": "The URL interface represent an object providing static methods used for creating object URLs.",
    "createObjectURL": {
      "!type": "fn(blob: +Blob, options?: objectURLOptions) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL",
      "!doc": "The URL.createObjectURL() static method creates a DOMString containing an URL representing the object given in parameter. The URL lifetime is tied to the document in the window on which it was created. The new object URL represents the specified File object or Blob object."
    },
    "revokeObjectURL": {
      "!type": "fn(url: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL",
      "!doc": "The URL.revokeObjectURL() static method releases an existing object URL which was previously created by calling window.URL.createObjectURL().  Call this method when you've finished using a object URL, in order to let the browser know it doesn't need to keep the reference to the file any longer."
    },
    "prototype": {
      "href": "string",
      "origin": "string",
      "protocol": "string",
      "username": "string",
      "password": "string",
      "host": "string",
      "hostname": "string",
      "port": "string",
      "pathname": "string",
      "search": "string",
      "searchParams": "+URLSearchParams",
      "hash": "string"
    }
  },
  "URLSearchParams": {
    "!type": "fn(init: +URLSearchParams)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",
    "!doc": "The URLSearchParams interface defines utility methods to work with the query string of a URL.",
    "prototype": {
      "append": "fn(name: string, value: string)",
      "delete": "fn(name: string)",
      "get": "fn(name: string) -> string",
      "getAll": "fn(name: string) -> [string]",
      "has": "fn(name: string) -> bool",
      "set": "fn(name: string, value: string)"
    }
  },
  "USSDReceivedEvent": {
    "!type": "fn(type: string, eventInitDict?: USSDReceivedEventInit)",
    "prototype": {
      "!proto": "Event.prototype",
      "serviceId": "number",
      "message": "string",
      "session": "+USSDSession"
    }
  },
  "USSDSession": {
    "!type": "fn(serviceId: number)",
    "prototype": {
      "send": "fn(ussd: string) -> +Promise[value=void]",
      "cancel": "fn() -> +Promise[value=void]"
    }
  },
  "UndoManager": {
    "transact": "fn(transaction: DOMTransaction, merge: bool)",
    "undo": "fn()",
    "redo": "fn()",
    "item": "fn(index: number) -> [DOMTransaction]",
    "length": "number",
    "position": "number",
    "clearUndo": "fn()",
    "clearRedo": "fn()",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "UserProximityEvent": {
    "!type": "fn(type: string, eventInitDict?: UserProximityEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UserProximityEvent",
    "!doc": "The UserProximityEvent indicates whether a nearby physical object is present by using the proximity sensor of a device.",
    "prototype": {
      "!proto": "Event.prototype",
      "near": {
        "!type": "bool",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/UserProximityEvent/near",
        "!doc": "The near property tell if there is an object close to the device (true) or not (false)."
      }
    }
  },
  "VRFieldOfViewReadOnly": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly",
    "!doc": "The VRFieldOfViewReadOnly interface of the WebVR API contains the raw definition for the degree value properties required to define a field of view. Inherited by VRFieldOfView.",
    "upDegrees": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/upDegrees",
      "!doc": "The upDegrees read-only property of the VRFieldOfViewReadOnly interface returns the number of degrees upwards that the field of view extends in."
    },
    "rightDegrees": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/rightDegrees",
      "!doc": "The rightDegrees read-only property of the VRFieldOfViewReadOnly interface returns the number of degrees to the right that the field of view extends in."
    },
    "downDegrees": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/downDegrees",
      "!doc": "The downDegrees read-only property of the VRFieldOfViewReadOnly interface returns the number of degrees downwards that the field of view extends in."
    },
    "leftDegrees": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/leftDegrees",
      "!doc": "The leftDegrees read-only property of the VRFieldOfViewReadOnly interface returns the number of degrees to the left that the field of view extends in."
    }
  },
  "VRFieldOfView": {
    "!type": "fn(upDegrees: number, rightDegrees: number, downDegrees: number, leftDegrees: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView",
    "!doc": "The VRFieldOfView interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.",
    "prototype": {
      "!proto": "VRFieldOfViewReadOnly",
      "upDegrees": "number",
      "rightDegrees": "number",
      "downDegrees": "number",
      "leftDegrees": "number"
    }
  },
  "VRPositionState": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState",
    "!doc": "The VRPositionState interface of the WebVR API represents the position state at a given timestamp (which includes orientation, position, velocity, and acceleration information.)",
    "timeStamp": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/timeStamp",
      "!doc": "The timestamp read-only property of the VRPositionState interface returns the current time stamp of the system — a monotonically increasing value representing the time since the current app was started."
    },
    "hasPosition": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/hasPosition",
      "!doc": "The hasPosition read-only property of the VRPositionState interface returns a boolean indicating whether the VRPositionState.position property is valid (i.e. if the hardware is currently registering a valid position). If it is false, the position property will return null."
    },
    "position": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/position",
      "!doc": "The position read-only property of the VRPositionState interface returns the current position of the sensor relative to the head mounted display, as a 3D vector (DOMPoint value.)"
    },
    "linearVelocity": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/linearVelocity",
      "!doc": "The linearVelocity read-only property of the VRPositionState interface returns the current linear velocity of the sensor."
    },
    "linearAcceleration": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/linearAcceleration",
      "!doc": "The linearAcceleration read-only property of the VRPositionState interface returns the current linear acceleration of the sensor."
    },
    "hasOrientation": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/hasOrientation",
      "!doc": "The hasPosition read-only property of the VRPositionState interface returns a boolean indicating whether the VRPositionState.orientation property is valid (i.e. if the hardware is currently registering a valid orientation). If it is false, the orientation property will return null."
    },
    "orientation": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/orientation",
      "!doc": "The orientation read-only property of the VRPositionState interface returns the current orientation of the sensor relative to the head mounted display, as a quarternion value."
    },
    "angularVelocity": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/angularVelocity",
      "!doc": "The angularVelocity read-only property of the VRPositionState interface returns the current angular velocity of the sensor."
    },
    "angularAcceleration": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/angularAcceleration",
      "!doc": "The angularAcceleration read-only property of the VRPositionState interface returns the current angular acceleration of the sensor."
    }
  },
  "VREyeParameters": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters",
    "!doc": "The VREyeParameters interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.",
    "minimumFieldOfView": {
      "!type": "+VRFieldOfView",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/minimumFieldOfView",
      "!doc": "The minimumFieldOfView read-only property of the VREyeParameters interface describes the minimum supported field of view for the current eye."
    },
    "maximumFieldOfView": {
      "!type": "+VRFieldOfView",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/maximumFieldOfView",
      "!doc": "The maximumFieldOfView read-only property of the VREyeParameters interface describes the maximum supported field of view for the current eye."
    },
    "recommendedFieldOfView": {
      "!type": "+VRFieldOfView",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/recommendedFieldOfView",
      "!doc": "The recommendedFieldOfView read-only property of the VREyeParameters interface describes the recommended field of view for the current eye — ideally based on user calibration."
    },
    "eyeTranslation": {
      "!type": "+DOMPoint",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/eyeTranslation",
      "!doc": "The eyeTranslation read-only property of the VREyeParameters interface represents the offset from the center of the user's head to the eye, measured in meters."
    },
    "currentFieldOfView": {
      "!type": "+VRFieldOfView",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/currentFieldOfView",
      "!doc": "The currentFieldOfView read-only property of the VREyeParameters interface describes the current field of view for the eye, as specified using HMDVRDevice.setFieldOfView. It defaults to VREyeParameters.recommendedFieldOfView."
    },
    "renderRect": {
      "!type": "+DOMRect",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/renderRect",
      "!doc": "The renderRect read-only property of the VREyeParameters interface specifies the viewport of a canvas into which visuals for the current eye should be rendered."
    }
  },
  "VRDevice": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRDevice",
    "!doc": "The VRDevice interface of the WebVR API represents a generic VR device connected to the user's computer.",
    "hardwareUnitId": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRDevice/hardwareUnitId",
      "!doc": "The hardwareUnitId read-only property of the VRDevice interface returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. All devices that are part of the same physical piece of hardware will have the same hardwareUnitId."
    },
    "deviceId": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRDevice/deviceId",
      "!doc": "The deviceId read-only property of the VRDevice interface returns the ID for this specific VRDevice. The ID shouldn’t change across browser restarts, allowing configuration data to be saved based on it."
    },
    "deviceName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VRDevice/deviceName",
      "!doc": "The deviceName read-only property of the VRDevice interface returns a human-readable name to identify the VRDevice. This will generally be something like \"Oculus VR HMD (HMD)\" or \"Oculus VR HMD (Sensor)\"."
    }
  },
  "HMDVRDevice": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice",
    "!doc": "The HMDVRDevice interface of the WebVR API represents a head mounted display, providing access to information about each eye, and allowing us to modify the current field of view.",
    "!proto": "VRDevice",
    "getEyeParameters": {
      "!type": "fn(whichEye: VREye) -> VREyeParameters",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice/getEyeParameters",
      "!doc": "The getEyeParameters() method of the HMDVRDevice interface returns current parameters for the eye specified as its argument (\"left\" or \"right\") — stored in a VREyeParameters object."
    },
    "setFieldOfView": {
      "!type": "fn(leftFOV?: VRFieldOfViewInit, rightFOV?: VRFieldOfViewInit, zNear?: number, zFar?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice/setFieldOfView",
      "!doc": "The setFieldOfView() method of the HMDVRDevice interface can be used to set the field of view for one eye, or both eyes simultaneously."
    }
  },
  "PositionSensorVRDevice": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionSensorVRDevice",
    "!doc": "The PositionSensorVRDevice interface of the WebVR API represents VR hardware's position sensor. You can access information such as the current position and orientation of the sensor in relation to the head mounted display through the PositionSensorVRDevice.getState() method.",
    "!proto": "VRDevice",
    "getState": {
      "!type": "fn() -> VRPositionState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionSensorVRDevice/getState",
      "!doc": "The getState() method of the PositionSensorVRDevice interface returns the current state of the position sensor for the current frame (e.g. within the current window.requestAnimationFrame callback) or for the previous frame, contained with a VRPositionState object. This is the method you'd normally want to use, versus PositionSensorVRDevice.getImmediateState."
    },
    "getImmediateState": {
      "!type": "fn() -> VRPositionState",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionSensorVRDevice/getImmediateState",
      "!doc": "The getImmediateState() method of the VRDevice interface returns the current instantaneous position sensor state. This is intended to only be used rarely, for certain special uses, for example sampling the immediate position of a hand orientation sensor — or at least it will be, in the future."
    },
    "resetSensor": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/PositionSensorVRDevice/resetSensor",
      "!doc": "The resetSensor() method of the VRDevice interface can be used to reset the sensor if desired, returning the position and orientation values to zero."
    }
  },
  "VTTCue": {
    "!type": "fn(startTime: number, endTime: number, text: string)",
    "prototype": {
      "!proto": "TextTrackCue",
      "region": "+VTTRegion",
      "vertical": "DirectionSetting",
      "snapToLines": "bool",
      "line": "number|AutoKeyword",
      "lineAlign": "AlignSetting",
      "position": "number",
      "positionAlign": "AlignSetting",
      "size": "number",
      "align": "AlignSetting",
      "text": "string",
      "getCueAsHTML": "fn() -> +DocumentFragment",
      "displayState": "HTMLDivElement",
      "hasBeenReset": "bool"
    }
  },
  "VTTRegion": {
    "!type": "fn()",
    "prototype": {
      "width": "number",
      "lines": "number",
      "regionAnchorX": "number",
      "regionAnchorY": "number",
      "viewportAnchorX": "number",
      "viewportAnchorY": "number",
      "scroll": "string"
    }
  },
  "ValidityState": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ValidityState",
    "!doc": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
    "valueMissing": "bool",
    "typeMismatch": "bool",
    "patternMismatch": "bool",
    "tooLong": "bool",
    "rangeUnderflow": "bool",
    "rangeOverflow": "bool",
    "stepMismatch": "bool",
    "badInput": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput",
      "!doc": "The read-only property ValidityState.badInput indicates if if the user has provided input that the browser is unable to convert. For example, if you have a mail input element whose content does not have a '@'."
    },
    "customError": "bool",
    "valid": "bool",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "VideoPlaybackQuality": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality",
    "!doc": "The VideoPlaybackQuality interface represents the set of metrics describing the quality of the restitution of a video.",
    "creationTime": {
      "!type": "DOMHighResTimeStamp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/creationTime",
      "!doc": "The VideoPlaybackQuality.creationTime read-only property returns a DOMHighResTimeStamp containing the time in miliseconds since the start of the navigation and the creation of the object."
    },
    "totalVideoFrames": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/totalVideoFrames",
      "!doc": "The VideoPlaybackQuality.totalVideoFrames read-only property returns an unsigned long containing the number of video frames created and dropped since the creation of the associated HTMLVideoElement."
    },
    "droppedVideoFrames": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames",
      "!doc": "The VideoPlaybackQuality.droppedVideoFrames read-only property returns an unsigned long containing the number of video frames dropped since the creation of the associated HTMLVideoElement."
    },
    "corruptedVideoFrames": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames",
      "!doc": "The VideoPlaybackQuality.corruptedVideoFrames read-only property returns an unsigned long containing the number of corrupted video frames since the creation of the associated HTMLVideoElement. A corrupted frame may or may not be dropped, depending of the corruption and of the browser algorithm."
    }
  },
  "VideoStreamTrack": {
    "!proto": "MediaStreamTrack"
  },
  "VideoTrack": {
    "id": "string",
    "kind": "string",
    "label": "string",
    "language": "string",
    "selected": "bool"
  },
  "VideoTrackList": {
    "!proto": "EventTarget",
    "length": "number",
    "getTrackById": "fn(id: string) -> VideoTrack",
    "selectedIndex": "number",
    "onchange": "fn(+Event)",
    "onaddtrack": "fn(+Event)",
    "onremovetrack": "fn(+Event)",
    "<i>": "VideoTrack"
  },
  "WaveShaperNode": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode",
    "!doc": "The WaveShaperNode interface represents a non-linear distorter. It is an AudioNode that uses a curve to apply a wave shaping distortion to the signal. Beside obvious distortion effects, it is often used to add a warm feeling to the signal.",
    "!proto": "AudioNode",
    "curve": {
      "!type": "Float32Array",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve",
      "!doc": "The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply."
    },
    "oversample": {
      "!type": "OverSampleType",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample",
      "!doc": "The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal."
    },
    "passThrough": "bool"
  },
  "WebGLQuery": {},
  "WebGLSampler": {},
  "WebGLSync": {},
  "WebGLTransformFeedback": {},
  "WebGLVertexArrayObject": {},
  "WebGL2RenderingContext": {
    "!proto": "WebGLRenderingContext",
    "READ_BUFFER": "GLenum",
    "UNPACK_ROW_LENGTH": "GLenum",
    "UNPACK_SKIP_ROWS": "GLenum",
    "UNPACK_SKIP_PIXELS": "GLenum",
    "PACK_ROW_LENGTH": "GLenum",
    "PACK_SKIP_ROWS": "GLenum",
    "PACK_SKIP_PIXELS": "GLenum",
    "COLOR": "GLenum",
    "DEPTH": "GLenum",
    "STENCIL": "GLenum",
    "RED": "GLenum",
    "RGB8": "GLenum",
    "RGBA8": "GLenum",
    "RGB10_A2": "GLenum",
    "TEXTURE_BINDING_3D": "GLenum",
    "UNPACK_SKIP_IMAGES": "GLenum",
    "UNPACK_IMAGE_HEIGHT": "GLenum",
    "TEXTURE_3D": "GLenum",
    "TEXTURE_WRAP_R": "GLenum",
    "MAX_3D_TEXTURE_SIZE": "GLenum",
    "UNSIGNED_INT_2_10_10_10_REV": "GLenum",
    "MAX_ELEMENTS_VERTICES": "GLenum",
    "MAX_ELEMENTS_INDICES": "GLenum",
    "TEXTURE_MIN_LOD": "GLenum",
    "TEXTURE_MAX_LOD": "GLenum",
    "TEXTURE_BASE_LEVEL": "GLenum",
    "TEXTURE_MAX_LEVEL": "GLenum",
    "MIN": "GLenum",
    "MAX": "GLenum",
    "DEPTH_COMPONENT24": "GLenum",
    "MAX_TEXTURE_LOD_BIAS": "GLenum",
    "TEXTURE_COMPARE_MODE": "GLenum",
    "TEXTURE_COMPARE_FUNC": "GLenum",
    "CURRENT_QUERY": "GLenum",
    "QUERY_RESULT": "GLenum",
    "QUERY_RESULT_AVAILABLE": "GLenum",
    "STREAM_READ": "GLenum",
    "STREAM_COPY": "GLenum",
    "STATIC_READ": "GLenum",
    "STATIC_COPY": "GLenum",
    "DYNAMIC_READ": "GLenum",
    "DYNAMIC_COPY": "GLenum",
    "MAX_DRAW_BUFFERS": "GLenum",
    "DRAW_BUFFER0": "GLenum",
    "DRAW_BUFFER1": "GLenum",
    "DRAW_BUFFER2": "GLenum",
    "DRAW_BUFFER3": "GLenum",
    "DRAW_BUFFER4": "GLenum",
    "DRAW_BUFFER5": "GLenum",
    "DRAW_BUFFER6": "GLenum",
    "DRAW_BUFFER7": "GLenum",
    "DRAW_BUFFER8": "GLenum",
    "DRAW_BUFFER9": "GLenum",
    "DRAW_BUFFER10": "GLenum",
    "DRAW_BUFFER11": "GLenum",
    "DRAW_BUFFER12": "GLenum",
    "DRAW_BUFFER13": "GLenum",
    "DRAW_BUFFER14": "GLenum",
    "DRAW_BUFFER15": "GLenum",
    "MAX_FRAGMENT_UNIFORM_COMPONENTS": "GLenum",
    "MAX_VERTEX_UNIFORM_COMPONENTS": "GLenum",
    "SAMPLER_3D": "GLenum",
    "SAMPLER_2D_SHADOW": "GLenum",
    "FRAGMENT_SHADER_DERIVATIVE_HINT": "GLenum",
    "PIXEL_PACK_BUFFER": "GLenum",
    "PIXEL_UNPACK_BUFFER": "GLenum",
    "PIXEL_PACK_BUFFER_BINDING": "GLenum",
    "PIXEL_UNPACK_BUFFER_BINDING": "GLenum",
    "FLOAT_MAT2x3": "GLenum",
    "FLOAT_MAT2x4": "GLenum",
    "FLOAT_MAT3x2": "GLenum",
    "FLOAT_MAT3x4": "GLenum",
    "FLOAT_MAT4x2": "GLenum",
    "FLOAT_MAT4x3": "GLenum",
    "SRGB": "GLenum",
    "SRGB8": "GLenum",
    "SRGB8_ALPHA8": "GLenum",
    "COMPARE_REF_TO_TEXTURE": "GLenum",
    "RGBA32F": "GLenum",
    "RGB32F": "GLenum",
    "RGBA16F": "GLenum",
    "RGB16F": "GLenum",
    "VERTEX_ATTRIB_ARRAY_INTEGER": "GLenum",
    "MAX_ARRAY_TEXTURE_LAYERS": "GLenum",
    "MIN_PROGRAM_TEXEL_OFFSET": "GLenum",
    "MAX_PROGRAM_TEXEL_OFFSET": "GLenum",
    "MAX_VARYING_COMPONENTS": "GLenum",
    "TEXTURE_2D_ARRAY": "GLenum",
    "TEXTURE_BINDING_2D_ARRAY": "GLenum",
    "R11F_G11F_B10F": "GLenum",
    "UNSIGNED_INT_10F_11F_11F_REV": "GLenum",
    "RGB9_E5": "GLenum",
    "UNSIGNED_INT_5_9_9_9_REV": "GLenum",
    "TRANSFORM_FEEDBACK_BUFFER_MODE": "GLenum",
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS": "GLenum",
    "TRANSFORM_FEEDBACK_VARYINGS": "GLenum",
    "TRANSFORM_FEEDBACK_BUFFER_START": "GLenum",
    "TRANSFORM_FEEDBACK_BUFFER_SIZE": "GLenum",
    "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN": "GLenum",
    "RASTERIZER_DISCARD": "GLenum",
    "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS": "GLenum",
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS": "GLenum",
    "INTERLEAVED_ATTRIBS": "GLenum",
    "SEPARATE_ATTRIBS": "GLenum",
    "TRANSFORM_FEEDBACK_BUFFER": "GLenum",
    "TRANSFORM_FEEDBACK_BUFFER_BINDING": "GLenum",
    "RGBA32UI": "GLenum",
    "RGB32UI": "GLenum",
    "RGBA16UI": "GLenum",
    "RGB16UI": "GLenum",
    "RGBA8UI": "GLenum",
    "RGB8UI": "GLenum",
    "RGBA32I": "GLenum",
    "RGB32I": "GLenum",
    "RGBA16I": "GLenum",
    "RGB16I": "GLenum",
    "RGBA8I": "GLenum",
    "RGB8I": "GLenum",
    "RED_INTEGER": "GLenum",
    "RGB_INTEGER": "GLenum",
    "RGBA_INTEGER": "GLenum",
    "SAMPLER_2D_ARRAY": "GLenum",
    "SAMPLER_2D_ARRAY_SHADOW": "GLenum",
    "SAMPLER_CUBE_SHADOW": "GLenum",
    "UNSIGNED_INT_VEC2": "GLenum",
    "UNSIGNED_INT_VEC3": "GLenum",
    "UNSIGNED_INT_VEC4": "GLenum",
    "INT_SAMPLER_2D": "GLenum",
    "INT_SAMPLER_3D": "GLenum",
    "INT_SAMPLER_CUBE": "GLenum",
    "INT_SAMPLER_2D_ARRAY": "GLenum",
    "UNSIGNED_INT_SAMPLER_2D": "GLenum",
    "UNSIGNED_INT_SAMPLER_3D": "GLenum",
    "UNSIGNED_INT_SAMPLER_CUBE": "GLenum",
    "UNSIGNED_INT_SAMPLER_2D_ARRAY": "GLenum",
    "DEPTH_COMPONENT32F": "GLenum",
    "DEPTH32F_STENCIL8": "GLenum",
    "FLOAT_32_UNSIGNED_INT_24_8_REV": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_RED_SIZE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE": "GLenum",
    "FRAMEBUFFER_DEFAULT": "GLenum",
    "DEPTH_STENCIL_ATTACHMENT": "GLenum",
    "DEPTH_STENCIL": "GLenum",
    "UNSIGNED_INT_24_8": "GLenum",
    "DEPTH24_STENCIL8": "GLenum",
    "UNSIGNED_NORMALIZED": "GLenum",
    "DRAW_FRAMEBUFFER_BINDING": "GLenum",
    "READ_FRAMEBUFFER": "GLenum",
    "DRAW_FRAMEBUFFER": "GLenum",
    "READ_FRAMEBUFFER_BINDING": "GLenum",
    "RENDERBUFFER_SAMPLES": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER": "GLenum",
    "MAX_COLOR_ATTACHMENTS": "GLenum",
    "COLOR_ATTACHMENT1": "GLenum",
    "COLOR_ATTACHMENT2": "GLenum",
    "COLOR_ATTACHMENT3": "GLenum",
    "COLOR_ATTACHMENT4": "GLenum",
    "COLOR_ATTACHMENT5": "GLenum",
    "COLOR_ATTACHMENT6": "GLenum",
    "COLOR_ATTACHMENT7": "GLenum",
    "COLOR_ATTACHMENT8": "GLenum",
    "COLOR_ATTACHMENT9": "GLenum",
    "COLOR_ATTACHMENT10": "GLenum",
    "COLOR_ATTACHMENT11": "GLenum",
    "COLOR_ATTACHMENT12": "GLenum",
    "COLOR_ATTACHMENT13": "GLenum",
    "COLOR_ATTACHMENT14": "GLenum",
    "COLOR_ATTACHMENT15": "GLenum",
    "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE": "GLenum",
    "MAX_SAMPLES": "GLenum",
    "HALF_FLOAT": "GLenum",
    "RG": "GLenum",
    "RG_INTEGER": "GLenum",
    "R8": "GLenum",
    "RG8": "GLenum",
    "R16F": "GLenum",
    "R32F": "GLenum",
    "RG16F": "GLenum",
    "RG32F": "GLenum",
    "R8I": "GLenum",
    "R8UI": "GLenum",
    "R16I": "GLenum",
    "R16UI": "GLenum",
    "R32I": "GLenum",
    "R32UI": "GLenum",
    "RG8I": "GLenum",
    "RG8UI": "GLenum",
    "RG16I": "GLenum",
    "RG16UI": "GLenum",
    "RG32I": "GLenum",
    "RG32UI": "GLenum",
    "VERTEX_ARRAY_BINDING": "GLenum",
    "R8_SNORM": "GLenum",
    "RG8_SNORM": "GLenum",
    "RGB8_SNORM": "GLenum",
    "RGBA8_SNORM": "GLenum",
    "SIGNED_NORMALIZED": "GLenum",
    "COPY_READ_BUFFER": "GLenum",
    "COPY_WRITE_BUFFER": "GLenum",
    "COPY_READ_BUFFER_BINDING": "GLenum",
    "COPY_WRITE_BUFFER_BINDING": "GLenum",
    "UNIFORM_BUFFER": "GLenum",
    "UNIFORM_BUFFER_BINDING": "GLenum",
    "UNIFORM_BUFFER_START": "GLenum",
    "UNIFORM_BUFFER_SIZE": "GLenum",
    "MAX_VERTEX_UNIFORM_BLOCKS": "GLenum",
    "MAX_FRAGMENT_UNIFORM_BLOCKS": "GLenum",
    "MAX_COMBINED_UNIFORM_BLOCKS": "GLenum",
    "MAX_UNIFORM_BUFFER_BINDINGS": "GLenum",
    "MAX_UNIFORM_BLOCK_SIZE": "GLenum",
    "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS": "GLenum",
    "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS": "GLenum",
    "UNIFORM_BUFFER_OFFSET_ALIGNMENT": "GLenum",
    "ACTIVE_UNIFORM_BLOCKS": "GLenum",
    "UNIFORM_TYPE": "GLenum",
    "UNIFORM_SIZE": "GLenum",
    "UNIFORM_BLOCK_INDEX": "GLenum",
    "UNIFORM_OFFSET": "GLenum",
    "UNIFORM_ARRAY_STRIDE": "GLenum",
    "UNIFORM_MATRIX_STRIDE": "GLenum",
    "UNIFORM_IS_ROW_MAJOR": "GLenum",
    "UNIFORM_BLOCK_BINDING": "GLenum",
    "UNIFORM_BLOCK_DATA_SIZE": "GLenum",
    "UNIFORM_BLOCK_ACTIVE_UNIFORMS": "GLenum",
    "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES": "GLenum",
    "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER": "GLenum",
    "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER": "GLenum",
    "INVALID_INDEX": "GLenum",
    "MAX_VERTEX_OUTPUT_COMPONENTS": "GLenum",
    "MAX_FRAGMENT_INPUT_COMPONENTS": "GLenum",
    "MAX_SERVER_WAIT_TIMEOUT": "GLenum",
    "OBJECT_TYPE": "GLenum",
    "SYNC_CONDITION": "GLenum",
    "SYNC_STATUS": "GLenum",
    "SYNC_FLAGS": "GLenum",
    "SYNC_FENCE": "GLenum",
    "SYNC_GPU_COMMANDS_COMPLETE": "GLenum",
    "UNSIGNALED": "GLenum",
    "SIGNALED": "GLenum",
    "ALREADY_SIGNALED": "GLenum",
    "TIMEOUT_EXPIRED": "GLenum",
    "CONDITION_SATISFIED": "GLenum",
    "WAIT_FAILED": "GLenum",
    "SYNC_FLUSH_COMMANDS_BIT": "GLenum",
    "VERTEX_ATTRIB_ARRAY_DIVISOR": "GLenum",
    "ANY_SAMPLES_PASSED": "GLenum",
    "ANY_SAMPLES_PASSED_CONSERVATIVE": "GLenum",
    "SAMPLER_BINDING": "GLenum",
    "RGB10_A2UI": "GLenum",
    "GREEN": "GLenum",
    "BLUE": "GLenum",
    "INT_2_10_10_10_REV": "GLenum",
    "TRANSFORM_FEEDBACK": "GLenum",
    "TRANSFORM_FEEDBACK_PAUSED": "GLenum",
    "TRANSFORM_FEEDBACK_ACTIVE": "GLenum",
    "TRANSFORM_FEEDBACK_BINDING": "GLenum",
    "COMPRESSED_R11_EAC": "GLenum",
    "COMPRESSED_SIGNED_R11_EAC": "GLenum",
    "COMPRESSED_RG11_EAC": "GLenum",
    "COMPRESSED_SIGNED_RG11_EAC": "GLenum",
    "COMPRESSED_RGB8_ETC2": "GLenum",
    "COMPRESSED_SRGB8_ETC2": "GLenum",
    "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2": "GLenum",
    "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2": "GLenum",
    "COMPRESSED_RGBA8_ETC2_EAC": "GLenum",
    "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC": "GLenum",
    "TEXTURE_IMMUTABLE_FORMAT": "GLenum",
    "MAX_ELEMENT_INDEX": "GLenum",
    "NUM_SAMPLE_COUNTS": "GLenum",
    "TEXTURE_IMMUTABLE_LEVELS": "GLenum",
    "TIMEOUT_IGNORED": "GLint64",
    "MAX_CLIENT_WAIT_TIMEOUT_WEBGL": "GLenum",
    "copyBufferSubData": "fn(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr)",
    "getBufferSubData": "fn(target: GLenum, offset: GLintptr, returnedData: +ArrayBuffer)",
    "blitFramebuffer": "fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum)",
    "framebufferTextureLayer": "fn(target: GLenum, attachment: GLenum, texture: WebGLTexture, level: GLint, layer: GLint)",
    "invalidateFramebuffer": "fn(target: GLenum, attachments: [GLenum])",
    "invalidateSubFramebuffer": "fn(target: GLenum, attachments: [GLenum], x: GLint, y: GLint, width: GLsizei, height: GLsizei)",
    "readBuffer": "fn(src: GLenum)",
    "getInternalformatParameter": "fn(target: GLenum, internalformat: GLenum, pname: GLenum) -> ?",
    "renderbufferStorageMultisample": "fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)",
    "texStorage2D": "fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)",
    "texStorage3D": "fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)",
    "texImage3D": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView)",
    "texSubImage3D": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView)",
    "copyTexSubImage3D": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)",
    "compressedTexImage3D": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, data: ArrayBufferView)",
    "compressedTexSubImage3D": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, data: ArrayBufferView)",
    "getFragDataLocation": "fn(program: WebGLProgram, name: string) -> GLint",
    "uniform1ui": "fn(location: WebGLUniformLocation, v0: GLuint)",
    "uniform2ui": "fn(location: WebGLUniformLocation, v0: GLuint, v1: GLuint)",
    "uniform3ui": "fn(location: WebGLUniformLocation, v0: GLuint, v1: GLuint, v2: GLuint)",
    "uniform4ui": "fn(location: WebGLUniformLocation, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint)",
    "uniform1uiv": "fn(location: WebGLUniformLocation, value: Uint32Array)",
    "uniform2uiv": "fn(location: WebGLUniformLocation, value: Uint32Array)",
    "uniform3uiv": "fn(location: WebGLUniformLocation, value: Uint32Array)",
    "uniform4uiv": "fn(location: WebGLUniformLocation, value: Uint32Array)",
    "uniformMatrix2x3fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix3x2fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix2x4fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix4x2fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix3x4fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix4x3fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "vertexAttribI4i": "fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint)",
    "vertexAttribI4iv": "fn(index: GLuint, v: [GLint])",
    "vertexAttribI4ui": "fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint)",
    "vertexAttribI4uiv": "fn(index: GLuint, v: [GLuint])",
    "vertexAttribIPointer": "fn(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)",
    "vertexAttribDivisor": "fn(index: GLuint, divisor: GLuint)",
    "drawArraysInstanced": "fn(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei)",
    "drawElementsInstanced": "fn(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei)",
    "drawRangeElements": "fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr)",
    "drawBuffers": "fn(buffers: [GLenum])",
    "clearBufferiv": "fn(buffer: GLenum, drawbuffer: GLint, value: Int32Array)",
    "clearBufferuiv": "fn(buffer: GLenum, drawbuffer: GLint, value: Uint32Array)",
    "clearBufferfv": "fn(buffer: GLenum, drawbuffer: GLint, value: Float32Array)",
    "clearBufferfi": "fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint)",
    "createQuery": "fn() -> WebGLQuery",
    "deleteQuery": "fn(query: WebGLQuery)",
    "isQuery": "fn(query: WebGLQuery) -> GLboolean",
    "beginQuery": "fn(target: GLenum, query: WebGLQuery)",
    "endQuery": "fn(target: GLenum)",
    "getQuery": "fn(target: GLenum, pname: GLenum) -> WebGLQuery",
    "getQueryParameter": "fn(query: WebGLQuery, pname: GLenum) -> ?",
    "createSampler": "fn() -> WebGLSampler",
    "deleteSampler": "fn(sampler: WebGLSampler)",
    "isSampler": "fn(sampler: WebGLSampler) -> GLboolean",
    "bindSampler": "fn(unit: GLuint, sampler: WebGLSampler)",
    "samplerParameteri": "fn(sampler: WebGLSampler, pname: GLenum, param: GLint)",
    "samplerParameterf": "fn(sampler: WebGLSampler, pname: GLenum, param: GLfloat)",
    "getSamplerParameter": "fn(sampler: WebGLSampler, pname: GLenum) -> ?",
    "fenceSync": "fn(condition: GLenum, flags: GLbitfield) -> WebGLSync",
    "isSync": "fn(sync: WebGLSync) -> GLboolean",
    "deleteSync": "fn(sync: WebGLSync)",
    "clientWaitSync": "fn(sync: WebGLSync, flags: GLbitfield, timeout: GLint64) -> GLenum",
    "waitSync": "fn(sync: WebGLSync, flags: GLbitfield, timeout: GLint64)",
    "getSyncParameter": "fn(sync: WebGLSync, pname: GLenum) -> ?",
    "createTransformFeedback": "fn() -> WebGLTransformFeedback",
    "deleteTransformFeedback": "fn(tf: WebGLTransformFeedback)",
    "isTransformFeedback": "fn(tf: WebGLTransformFeedback) -> GLboolean",
    "bindTransformFeedback": "fn(target: GLenum, tf: WebGLTransformFeedback)",
    "beginTransformFeedback": "fn(primitiveMode: GLenum)",
    "endTransformFeedback": "fn()",
    "transformFeedbackVaryings": "fn(program: WebGLProgram, varyings: [string], bufferMode: GLenum)",
    "getTransformFeedbackVarying": "fn(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo",
    "pauseTransformFeedback": "fn()",
    "resumeTransformFeedback": "fn()",
    "bindBufferBase": "fn(target: GLenum, index: GLuint, buffer: WebGLBuffer)",
    "bindBufferRange": "fn(target: GLenum, index: GLuint, buffer: WebGLBuffer, offset: GLintptr, size: GLsizeiptr)",
    "getIndexedParameter": "fn(target: GLenum, index: GLuint) -> WebGLBuffer|GLintptr",
    "getUniformIndices": "fn(program: WebGLProgram, uniformNames: [string]) -> [GLuint]",
    "getActiveUniforms": "fn(program: WebGLProgram, uniformIndices: [GLuint], pname: GLenum) -> [GLint]",
    "getUniformBlockIndex": "fn(program: WebGLProgram, uniformBlockName: string) -> GLuint",
    "getActiveUniformBlockParameter": "fn(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum) -> GLuint|Uint32Array|GLboolean",
    "getActiveUniformBlockName": "fn(program: WebGLProgram, uniformBlockIndex: GLuint) -> string",
    "uniformBlockBinding": "fn(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint)",
    "createVertexArray": "fn() -> WebGLVertexArrayObject",
    "deleteVertexArray": "fn(vertexArray: WebGLVertexArrayObject)",
    "isVertexArray": "fn(vertexArray: WebGLVertexArrayObject) -> GLboolean",
    "bindVertexArray": "fn(array: WebGLVertexArrayObject)"
  },
  "WebGLBuffer": {},
  "WebGLFramebuffer": {},
  "WebGLProgram": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram",
    "!doc": "See WebGLShader for information on creating the vertexShader and fragmentShader in the above example."
  },
  "WebGLRenderbuffer": {},
  "WebGLShader": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLShader",
    "!doc": "See WebGLProgram for information on creating attaching the shaders."
  },
  "WebGLTexture": {},
  "WebGLUniformLocation": {},
  "WebGLActiveInfo": {
    "size": "GLint",
    "type": "GLenum",
    "name": "string"
  },
  "WebGLShaderPrecisionFormat": {
    "rangeMin": "GLint",
    "rangeMax": "GLint",
    "precision": "GLint"
  },
  "WebGLRenderingContext": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext",
    "!doc": "The WebGLRenderingContext interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML <canvas> element.",
    "DEPTH_BUFFER_BIT": "GLenum",
    "STENCIL_BUFFER_BIT": "GLenum",
    "COLOR_BUFFER_BIT": "GLenum",
    "POINTS": "GLenum",
    "LINES": "GLenum",
    "LINE_LOOP": "GLenum",
    "LINE_STRIP": "GLenum",
    "TRIANGLES": "GLenum",
    "TRIANGLE_STRIP": "GLenum",
    "TRIANGLE_FAN": "GLenum",
    "ZERO": "GLenum",
    "ONE": "GLenum",
    "SRC_COLOR": "GLenum",
    "ONE_MINUS_SRC_COLOR": "GLenum",
    "SRC_ALPHA": "GLenum",
    "ONE_MINUS_SRC_ALPHA": "GLenum",
    "DST_ALPHA": "GLenum",
    "ONE_MINUS_DST_ALPHA": "GLenum",
    "DST_COLOR": "GLenum",
    "ONE_MINUS_DST_COLOR": "GLenum",
    "SRC_ALPHA_SATURATE": "GLenum",
    "FUNC_ADD": "GLenum",
    "BLEND_EQUATION": "GLenum",
    "BLEND_EQUATION_RGB": "GLenum",
    "BLEND_EQUATION_ALPHA": "GLenum",
    "FUNC_SUBTRACT": "GLenum",
    "FUNC_REVERSE_SUBTRACT": "GLenum",
    "BLEND_DST_RGB": "GLenum",
    "BLEND_SRC_RGB": "GLenum",
    "BLEND_DST_ALPHA": "GLenum",
    "BLEND_SRC_ALPHA": "GLenum",
    "CONSTANT_COLOR": "GLenum",
    "ONE_MINUS_CONSTANT_COLOR": "GLenum",
    "CONSTANT_ALPHA": "GLenum",
    "ONE_MINUS_CONSTANT_ALPHA": "GLenum",
    "BLEND_COLOR": "GLenum",
    "ARRAY_BUFFER": "GLenum",
    "ELEMENT_ARRAY_BUFFER": "GLenum",
    "ARRAY_BUFFER_BINDING": "GLenum",
    "ELEMENT_ARRAY_BUFFER_BINDING": "GLenum",
    "STREAM_DRAW": "GLenum",
    "STATIC_DRAW": "GLenum",
    "DYNAMIC_DRAW": "GLenum",
    "BUFFER_SIZE": "GLenum",
    "BUFFER_USAGE": "GLenum",
    "CURRENT_VERTEX_ATTRIB": "GLenum",
    "FRONT": "GLenum",
    "BACK": "GLenum",
    "FRONT_AND_BACK": "GLenum",
    "CULL_FACE": "GLenum",
    "BLEND": "GLenum",
    "DITHER": "GLenum",
    "STENCIL_TEST": "GLenum",
    "DEPTH_TEST": "GLenum",
    "SCISSOR_TEST": "GLenum",
    "POLYGON_OFFSET_FILL": "GLenum",
    "SAMPLE_ALPHA_TO_COVERAGE": "GLenum",
    "SAMPLE_COVERAGE": "GLenum",
    "NO_ERROR": "GLenum",
    "INVALID_ENUM": "GLenum",
    "INVALID_VALUE": "GLenum",
    "INVALID_OPERATION": "GLenum",
    "OUT_OF_MEMORY": "GLenum",
    "CW": "GLenum",
    "CCW": "GLenum",
    "LINE_WIDTH": "GLenum",
    "ALIASED_POINT_SIZE_RANGE": "GLenum",
    "ALIASED_LINE_WIDTH_RANGE": "GLenum",
    "CULL_FACE_MODE": "GLenum",
    "FRONT_FACE": "GLenum",
    "DEPTH_RANGE": "GLenum",
    "DEPTH_WRITEMASK": "GLenum",
    "DEPTH_CLEAR_VALUE": "GLenum",
    "DEPTH_FUNC": "GLenum",
    "STENCIL_CLEAR_VALUE": "GLenum",
    "STENCIL_FUNC": "GLenum",
    "STENCIL_FAIL": "GLenum",
    "STENCIL_PASS_DEPTH_FAIL": "GLenum",
    "STENCIL_PASS_DEPTH_PASS": "GLenum",
    "STENCIL_REF": "GLenum",
    "STENCIL_VALUE_MASK": "GLenum",
    "STENCIL_WRITEMASK": "GLenum",
    "STENCIL_BACK_FUNC": "GLenum",
    "STENCIL_BACK_FAIL": "GLenum",
    "STENCIL_BACK_PASS_DEPTH_FAIL": "GLenum",
    "STENCIL_BACK_PASS_DEPTH_PASS": "GLenum",
    "STENCIL_BACK_REF": "GLenum",
    "STENCIL_BACK_VALUE_MASK": "GLenum",
    "STENCIL_BACK_WRITEMASK": "GLenum",
    "VIEWPORT": "GLenum",
    "SCISSOR_BOX": "GLenum",
    "COLOR_CLEAR_VALUE": "GLenum",
    "COLOR_WRITEMASK": "GLenum",
    "UNPACK_ALIGNMENT": "GLenum",
    "PACK_ALIGNMENT": "GLenum",
    "MAX_TEXTURE_SIZE": "GLenum",
    "MAX_VIEWPORT_DIMS": "GLenum",
    "SUBPIXEL_BITS": "GLenum",
    "RED_BITS": "GLenum",
    "GREEN_BITS": "GLenum",
    "BLUE_BITS": "GLenum",
    "ALPHA_BITS": "GLenum",
    "DEPTH_BITS": "GLenum",
    "STENCIL_BITS": "GLenum",
    "POLYGON_OFFSET_UNITS": "GLenum",
    "POLYGON_OFFSET_FACTOR": "GLenum",
    "TEXTURE_BINDING_2D": "GLenum",
    "SAMPLE_BUFFERS": "GLenum",
    "SAMPLES": "GLenum",
    "SAMPLE_COVERAGE_VALUE": "GLenum",
    "SAMPLE_COVERAGE_INVERT": "GLenum",
    "COMPRESSED_TEXTURE_FORMATS": "GLenum",
    "DONT_CARE": "GLenum",
    "FASTEST": "GLenum",
    "NICEST": "GLenum",
    "GENERATE_MIPMAP_HINT": "GLenum",
    "BYTE": "GLenum",
    "UNSIGNED_BYTE": "GLenum",
    "SHORT": "GLenum",
    "UNSIGNED_SHORT": "GLenum",
    "INT": "GLenum",
    "UNSIGNED_INT": "GLenum",
    "FLOAT": "GLenum",
    "DEPTH_COMPONENT": "GLenum",
    "ALPHA": "GLenum",
    "RGB": "GLenum",
    "RGBA": "GLenum",
    "LUMINANCE": "GLenum",
    "LUMINANCE_ALPHA": "GLenum",
    "UNSIGNED_SHORT_4_4_4_4": "GLenum",
    "UNSIGNED_SHORT_5_5_5_1": "GLenum",
    "UNSIGNED_SHORT_5_6_5": "GLenum",
    "FRAGMENT_SHADER": "GLenum",
    "VERTEX_SHADER": "GLenum",
    "MAX_VERTEX_ATTRIBS": "GLenum",
    "MAX_VERTEX_UNIFORM_VECTORS": "GLenum",
    "MAX_VARYING_VECTORS": "GLenum",
    "MAX_COMBINED_TEXTURE_IMAGE_UNITS": "GLenum",
    "MAX_VERTEX_TEXTURE_IMAGE_UNITS": "GLenum",
    "MAX_TEXTURE_IMAGE_UNITS": "GLenum",
    "MAX_FRAGMENT_UNIFORM_VECTORS": "GLenum",
    "SHADER_TYPE": "GLenum",
    "DELETE_STATUS": "GLenum",
    "LINK_STATUS": "GLenum",
    "VALIDATE_STATUS": "GLenum",
    "ATTACHED_SHADERS": "GLenum",
    "ACTIVE_UNIFORMS": "GLenum",
    "ACTIVE_ATTRIBUTES": "GLenum",
    "SHADING_LANGUAGE_VERSION": "GLenum",
    "CURRENT_PROGRAM": "GLenum",
    "NEVER": "GLenum",
    "LESS": "GLenum",
    "EQUAL": "GLenum",
    "LEQUAL": "GLenum",
    "GREATER": "GLenum",
    "NOTEQUAL": "GLenum",
    "GEQUAL": "GLenum",
    "ALWAYS": "GLenum",
    "KEEP": "GLenum",
    "REPLACE": "GLenum",
    "INCR": "GLenum",
    "DECR": "GLenum",
    "INVERT": "GLenum",
    "INCR_WRAP": "GLenum",
    "DECR_WRAP": "GLenum",
    "VENDOR": "GLenum",
    "RENDERER": "GLenum",
    "VERSION": "GLenum",
    "NEAREST": "GLenum",
    "LINEAR": "GLenum",
    "NEAREST_MIPMAP_NEAREST": "GLenum",
    "LINEAR_MIPMAP_NEAREST": "GLenum",
    "NEAREST_MIPMAP_LINEAR": "GLenum",
    "LINEAR_MIPMAP_LINEAR": "GLenum",
    "TEXTURE_MAG_FILTER": "GLenum",
    "TEXTURE_MIN_FILTER": "GLenum",
    "TEXTURE_WRAP_S": "GLenum",
    "TEXTURE_WRAP_T": "GLenum",
    "TEXTURE_2D": "GLenum",
    "TEXTURE": "GLenum",
    "TEXTURE_CUBE_MAP": "GLenum",
    "TEXTURE_BINDING_CUBE_MAP": "GLenum",
    "TEXTURE_CUBE_MAP_POSITIVE_X": "GLenum",
    "TEXTURE_CUBE_MAP_NEGATIVE_X": "GLenum",
    "TEXTURE_CUBE_MAP_POSITIVE_Y": "GLenum",
    "TEXTURE_CUBE_MAP_NEGATIVE_Y": "GLenum",
    "TEXTURE_CUBE_MAP_POSITIVE_Z": "GLenum",
    "TEXTURE_CUBE_MAP_NEGATIVE_Z": "GLenum",
    "MAX_CUBE_MAP_TEXTURE_SIZE": "GLenum",
    "TEXTURE0": "GLenum",
    "TEXTURE1": "GLenum",
    "TEXTURE2": "GLenum",
    "TEXTURE3": "GLenum",
    "TEXTURE4": "GLenum",
    "TEXTURE5": "GLenum",
    "TEXTURE6": "GLenum",
    "TEXTURE7": "GLenum",
    "TEXTURE8": "GLenum",
    "TEXTURE9": "GLenum",
    "TEXTURE10": "GLenum",
    "TEXTURE11": "GLenum",
    "TEXTURE12": "GLenum",
    "TEXTURE13": "GLenum",
    "TEXTURE14": "GLenum",
    "TEXTURE15": "GLenum",
    "TEXTURE16": "GLenum",
    "TEXTURE17": "GLenum",
    "TEXTURE18": "GLenum",
    "TEXTURE19": "GLenum",
    "TEXTURE20": "GLenum",
    "TEXTURE21": "GLenum",
    "TEXTURE22": "GLenum",
    "TEXTURE23": "GLenum",
    "TEXTURE24": "GLenum",
    "TEXTURE25": "GLenum",
    "TEXTURE26": "GLenum",
    "TEXTURE27": "GLenum",
    "TEXTURE28": "GLenum",
    "TEXTURE29": "GLenum",
    "TEXTURE30": "GLenum",
    "TEXTURE31": "GLenum",
    "ACTIVE_TEXTURE": "GLenum",
    "REPEAT": "GLenum",
    "CLAMP_TO_EDGE": "GLenum",
    "MIRRORED_REPEAT": "GLenum",
    "FLOAT_VEC2": "GLenum",
    "FLOAT_VEC3": "GLenum",
    "FLOAT_VEC4": "GLenum",
    "INT_VEC2": "GLenum",
    "INT_VEC3": "GLenum",
    "INT_VEC4": "GLenum",
    "BOOL": "GLenum",
    "BOOL_VEC2": "GLenum",
    "BOOL_VEC3": "GLenum",
    "BOOL_VEC4": "GLenum",
    "FLOAT_MAT2": "GLenum",
    "FLOAT_MAT3": "GLenum",
    "FLOAT_MAT4": "GLenum",
    "SAMPLER_2D": "GLenum",
    "SAMPLER_CUBE": "GLenum",
    "VERTEX_ATTRIB_ARRAY_ENABLED": "GLenum",
    "VERTEX_ATTRIB_ARRAY_SIZE": "GLenum",
    "VERTEX_ATTRIB_ARRAY_STRIDE": "GLenum",
    "VERTEX_ATTRIB_ARRAY_TYPE": "GLenum",
    "VERTEX_ATTRIB_ARRAY_NORMALIZED": "GLenum",
    "VERTEX_ATTRIB_ARRAY_POINTER": "GLenum",
    "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": "GLenum",
    "IMPLEMENTATION_COLOR_READ_TYPE": "GLenum",
    "IMPLEMENTATION_COLOR_READ_FORMAT": "GLenum",
    "COMPILE_STATUS": "GLenum",
    "LOW_FLOAT": "GLenum",
    "MEDIUM_FLOAT": "GLenum",
    "HIGH_FLOAT": "GLenum",
    "LOW_INT": "GLenum",
    "MEDIUM_INT": "GLenum",
    "HIGH_INT": "GLenum",
    "FRAMEBUFFER": "GLenum",
    "RENDERBUFFER": "GLenum",
    "RGBA4": "GLenum",
    "RGB5_A1": "GLenum",
    "RGB565": "GLenum",
    "DEPTH_COMPONENT16": "GLenum",
    "STENCIL_INDEX": "GLenum",
    "STENCIL_INDEX8": "GLenum",
    "DEPTH_STENCIL": "GLenum",
    "RENDERBUFFER_WIDTH": "GLenum",
    "RENDERBUFFER_HEIGHT": "GLenum",
    "RENDERBUFFER_INTERNAL_FORMAT": "GLenum",
    "RENDERBUFFER_RED_SIZE": "GLenum",
    "RENDERBUFFER_GREEN_SIZE": "GLenum",
    "RENDERBUFFER_BLUE_SIZE": "GLenum",
    "RENDERBUFFER_ALPHA_SIZE": "GLenum",
    "RENDERBUFFER_DEPTH_SIZE": "GLenum",
    "RENDERBUFFER_STENCIL_SIZE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": "GLenum",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": "GLenum",
    "COLOR_ATTACHMENT0": "GLenum",
    "DEPTH_ATTACHMENT": "GLenum",
    "STENCIL_ATTACHMENT": "GLenum",
    "DEPTH_STENCIL_ATTACHMENT": "GLenum",
    "NONE": "GLenum",
    "FRAMEBUFFER_COMPLETE": "GLenum",
    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": "GLenum",
    "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": "GLenum",
    "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": "GLenum",
    "FRAMEBUFFER_UNSUPPORTED": "GLenum",
    "FRAMEBUFFER_BINDING": "GLenum",
    "RENDERBUFFER_BINDING": "GLenum",
    "MAX_RENDERBUFFER_SIZE": "GLenum",
    "INVALID_FRAMEBUFFER_OPERATION": "GLenum",
    "UNPACK_FLIP_Y_WEBGL": "GLenum",
    "UNPACK_PREMULTIPLY_ALPHA_WEBGL": "GLenum",
    "CONTEXT_LOST_WEBGL": "GLenum",
    "UNPACK_COLORSPACE_CONVERSION_WEBGL": "GLenum",
    "BROWSER_DEFAULT_WEBGL": "GLenum",
    "canvas": {
      "!type": "HTMLCanvasElement|+OffscreenCanvas",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/canvas",
      "!doc": "The WebGLRenderingContext.canvas property is a read-only reference to the HTMLCanvasElement that is associated with the context. It might be null if it is not associated with a <canvas> element."
    },
    "drawingBufferWidth": "GLsizei",
    "drawingBufferHeight": "GLsizei",
    "getContextAttributes": "fn() -> WebGLContextAttributes",
    "isContextLost": "fn() -> bool",
    "getSupportedExtensions": "fn() -> [string]",
    "getExtension": "fn(name: string) -> object",
    "activeTexture": "fn(texture: GLenum)",
    "attachShader": {
      "!type": "fn(program: WebGLProgram, shader: WebGLShader)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader",
      "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
    },
    "bindAttribLocation": "fn(program: WebGLProgram, index: GLuint, name: string)",
    "bindBuffer": "fn(target: GLenum, buffer: WebGLBuffer)",
    "bindFramebuffer": "fn(target: GLenum, framebuffer: WebGLFramebuffer)",
    "bindRenderbuffer": "fn(target: GLenum, renderbuffer: WebGLRenderbuffer)",
    "bindTexture": "fn(target: GLenum, texture: WebGLTexture)",
    "blendColor": "fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)",
    "blendEquation": "fn(mode: GLenum)",
    "blendEquationSeparate": "fn(modeRGB: GLenum, modeAlpha: GLenum)",
    "blendFunc": "fn(sfactor: GLenum, dfactor: GLenum)",
    "blendFuncSeparate": "fn(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum)",
    "bufferData": "fn(target: GLenum, size: GLsizeiptr, usage: GLenum)",
    "bufferSubData": "fn(target: GLenum, offset: GLintptr, data: ArrayBufferView)",
    "checkFramebufferStatus": "fn(target: GLenum) -> GLenum",
    "clear": "fn(mask: GLbitfield)",
    "clearColor": "fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)",
    "clearDepth": "fn(depth: GLclampf)",
    "clearStencil": "fn(s: GLint)",
    "colorMask": "fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean)",
    "compileShader": "fn(shader: WebGLShader)",
    "compressedTexImage2D": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView)",
    "compressedTexSubImage2D": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView)",
    "copyTexImage2D": "fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)",
    "copyTexSubImage2D": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)",
    "createBuffer": "fn() -> WebGLBuffer",
    "createFramebuffer": "fn() -> WebGLFramebuffer",
    "createProgram": "fn() -> WebGLProgram",
    "createRenderbuffer": "fn() -> WebGLRenderbuffer",
    "createShader": {
      "!type": "fn(type: GLenum) -> WebGLShader",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader",
      "!doc": "See WebGLShader for usage and examples."
    },
    "createTexture": "fn() -> WebGLTexture",
    "cullFace": "fn(mode: GLenum)",
    "deleteBuffer": "fn(buffer: WebGLBuffer)",
    "deleteFramebuffer": "fn(framebuffer: WebGLFramebuffer)",
    "deleteProgram": "fn(program: WebGLProgram)",
    "deleteRenderbuffer": "fn(renderbuffer: WebGLRenderbuffer)",
    "deleteShader": "fn(shader: WebGLShader)",
    "deleteTexture": "fn(texture: WebGLTexture)",
    "depthFunc": "fn(func: GLenum)",
    "depthMask": "fn(flag: GLboolean)",
    "depthRange": "fn(zNear: GLclampf, zFar: GLclampf)",
    "detachShader": {
      "!type": "fn(program: WebGLProgram, shader: WebGLShader)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/detachShader",
      "!doc": "© 2005-2015 Mozilla Developer Network and individual contributors Content is available under these licenses · About MDN · Terms · Privacy · Cookies · Contribute to the code"
    },
    "disable": "fn(cap: GLenum)",
    "disableVertexAttribArray": "fn(index: GLuint)",
    "drawArrays": "fn(mode: GLenum, first: GLint, count: GLsizei)",
    "drawElements": "fn(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr)",
    "enable": "fn(cap: GLenum)",
    "enableVertexAttribArray": "fn(index: GLuint)",
    "finish": "fn()",
    "flush": "fn()",
    "framebufferRenderbuffer": "fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer)",
    "framebufferTexture2D": "fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture, level: GLint)",
    "frontFace": "fn(mode: GLenum)",
    "generateMipmap": "fn(target: GLenum)",
    "getActiveAttrib": "fn(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo",
    "getActiveUniform": "fn(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo",
    "getAttachedShaders": "fn(program: WebGLProgram) -> [WebGLShader]",
    "getAttribLocation": "fn(program: WebGLProgram, name: string) -> GLint",
    "getBufferParameter": "fn(target: GLenum, pname: GLenum) -> ?",
    "getParameter": "fn(pname: GLenum) -> ?",
    "getError": "fn() -> GLenum",
    "getFramebufferAttachmentParameter": "fn(target: GLenum, attachment: GLenum, pname: GLenum) -> ?",
    "getProgramParameter": "fn(program: WebGLProgram, pname: GLenum) -> ?",
    "getProgramInfoLog": "fn(program: WebGLProgram) -> string",
    "getRenderbufferParameter": "fn(target: GLenum, pname: GLenum) -> ?",
    "getShaderParameter": "fn(shader: WebGLShader, pname: GLenum) -> ?",
    "getShaderPrecisionFormat": "fn(shadertype: GLenum, precisiontype: GLenum) -> WebGLShaderPrecisionFormat",
    "getShaderInfoLog": "fn(shader: WebGLShader) -> string",
    "getShaderSource": "fn(shader: WebGLShader) -> string",
    "getTexParameter": "fn(target: GLenum, pname: GLenum) -> ?",
    "getUniform": "fn(program: WebGLProgram, location: WebGLUniformLocation) -> ?",
    "getUniformLocation": "fn(program: WebGLProgram, name: string) -> WebGLUniformLocation",
    "getVertexAttrib": "fn(index: GLuint, pname: GLenum) -> ?",
    "getVertexAttribOffset": "fn(index: GLuint, pname: GLenum) -> GLsizeiptr",
    "hint": "fn(target: GLenum, mode: GLenum)",
    "isBuffer": "fn(buffer: WebGLBuffer) -> GLboolean",
    "isEnabled": "fn(cap: GLenum) -> GLboolean",
    "isFramebuffer": "fn(framebuffer: WebGLFramebuffer) -> GLboolean",
    "isProgram": "fn(program: WebGLProgram) -> GLboolean",
    "isRenderbuffer": "fn(renderbuffer: WebGLRenderbuffer) -> GLboolean",
    "isShader": "fn(shader: WebGLShader) -> GLboolean",
    "isTexture": "fn(texture: WebGLTexture) -> GLboolean",
    "lineWidth": "fn(width: GLfloat)",
    "linkProgram": "fn(program: WebGLProgram)",
    "pixelStorei": "fn(pname: GLenum, param: GLint)",
    "polygonOffset": "fn(factor: GLfloat, units: GLfloat)",
    "readPixels": "fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView)",
    "renderbufferStorage": "fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei)",
    "sampleCoverage": "fn(value: GLclampf, invert: GLboolean)",
    "scissor": "fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei)",
    "shaderSource": "fn(shader: WebGLShader, source: string)",
    "stencilFunc": "fn(func: GLenum, ref: GLint, mask: GLuint)",
    "stencilFuncSeparate": "fn(face: GLenum, func: GLenum, ref: GLint, mask: GLuint)",
    "stencilMask": "fn(mask: GLuint)",
    "stencilMaskSeparate": "fn(face: GLenum, mask: GLuint)",
    "stencilOp": "fn(fail: GLenum, zfail: GLenum, zpass: GLenum)",
    "stencilOpSeparate": "fn(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum)",
    "texImage2D": "fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView)",
    "texParameterf": "fn(target: GLenum, pname: GLenum, param: GLfloat)",
    "texParameteri": "fn(target: GLenum, pname: GLenum, param: GLint)",
    "texSubImage2D": "fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView)",
    "uniform1f": "fn(location: WebGLUniformLocation, x: GLfloat)",
    "uniform1fv": "fn(location: WebGLUniformLocation, v: Float32Array)",
    "uniform1i": "fn(location: WebGLUniformLocation, x: GLint)",
    "uniform1iv": "fn(location: WebGLUniformLocation, v: Int32Array)",
    "uniform2f": "fn(location: WebGLUniformLocation, x: GLfloat, y: GLfloat)",
    "uniform2fv": "fn(location: WebGLUniformLocation, v: Float32Array)",
    "uniform2i": "fn(location: WebGLUniformLocation, x: GLint, y: GLint)",
    "uniform2iv": "fn(location: WebGLUniformLocation, v: Int32Array)",
    "uniform3f": "fn(location: WebGLUniformLocation, x: GLfloat, y: GLfloat, z: GLfloat)",
    "uniform3fv": "fn(location: WebGLUniformLocation, v: Float32Array)",
    "uniform3i": "fn(location: WebGLUniformLocation, x: GLint, y: GLint, z: GLint)",
    "uniform3iv": "fn(location: WebGLUniformLocation, v: Int32Array)",
    "uniform4f": "fn(location: WebGLUniformLocation, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)",
    "uniform4fv": "fn(location: WebGLUniformLocation, v: Float32Array)",
    "uniform4i": "fn(location: WebGLUniformLocation, x: GLint, y: GLint, z: GLint, w: GLint)",
    "uniform4iv": "fn(location: WebGLUniformLocation, v: Int32Array)",
    "uniformMatrix2fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix3fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "uniformMatrix4fv": "fn(location: WebGLUniformLocation, transpose: GLboolean, value: Float32Array)",
    "useProgram": "fn(program: WebGLProgram)",
    "validateProgram": "fn(program: WebGLProgram)",
    "vertexAttrib1f": "fn(indx: GLuint, x: GLfloat)",
    "vertexAttrib1fv": "fn(indx: GLuint, values: Float32Array)",
    "vertexAttrib2f": "fn(indx: GLuint, x: GLfloat, y: GLfloat)",
    "vertexAttrib2fv": "fn(indx: GLuint, values: Float32Array)",
    "vertexAttrib3f": "fn(indx: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)",
    "vertexAttrib3fv": "fn(indx: GLuint, values: Float32Array)",
    "vertexAttrib4f": "fn(indx: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)",
    "vertexAttrib4fv": "fn(indx: GLuint, values: Float32Array)",
    "vertexAttribPointer": "fn(indx: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr)",
    "viewport": "fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei)",
    "commit": "fn()"
  },
  "WebSocket": {
    "!type": "fn(url: string, protocols: [string])",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WebSocket",
    "!doc": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",
    "prototype": {
      "!proto": "EventTarget",
      "url": "string",
      "CONNECTING": "number",
      "OPEN": "number",
      "CLOSING": "number",
      "CLOSED": "number",
      "readyState": "number",
      "bufferedAmount": "number",
      "onopen": "fn(+Event)",
      "onerror": "fn(+Event)",
      "onclose": "fn(+Event)",
      "extensions": "string",
      "protocol": "string",
      "close": "fn(code?: number, reason?: string)",
      "onmessage": "fn(+Event)",
      "binaryType": "BinaryType",
      "send": "fn(data: string)",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "mozRTCIceCandidate": {
    "!type": "fn(candidateInitDict?: RTCIceCandidateInit)",
    "prototype": {
      "!proto": "RTCIceCandidate.prototype"
    }
  },
  "mozRTCPeerConnection": {
    "!type": "fn(configuration?: RTCConfiguration, constraints?: object)",
    "prototype": {
      "!proto": "RTCPeerConnection.prototype"
    }
  },
  "mozRTCSessionDescription": {
    "!type": "fn(descriptionInitDict?: RTCSessionDescriptionInit)",
    "prototype": {
      "!proto": "RTCSessionDescription.prototype"
    }
  },
  "WheelEvent": {
    "!type": "fn(type: string, eventInitDict?: WheelEventInit)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WheelEvent",
    "!doc": "The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.",
    "prototype": {
      "!proto": "MouseEvent.prototype",
      "DOM_DELTA_PIXEL": "number",
      "DOM_DELTA_LINE": "number",
      "DOM_DELTA_PAGE": "number",
      "deltaX": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX",
        "!doc": "The WheelEvent.deltaX read-only property is a double representing the horizontal scroll amount in the WheelEvent.deltaMode unit."
      },
      "deltaY": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY",
        "!doc": "The WheelEvent.deltaY read-only property is a double representing the vertical scroll amount in the WheelEvent.deltaMode unit."
      },
      "deltaZ": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ",
        "!doc": "The WheelEvent.deltaZ read-only property is a double representing the scroll amount along the z-axis, in the WheelEvent.deltaMode unit."
      },
      "deltaMode": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode",
        "!doc": "The WheelEvent.deltaMode read-only property returns an unsigned long representing the unit of the delta values scroll amount. Permitted values are:"
      }
    }
  },
  "ApplicationCache": {},
  "nsIBrowserDOMWindow": {},
  "nsIMessageBroadcaster": {},
  "nsIDOMCrypto": {},
  "Window": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window",
    "!doc": "The window object represents a window containing a DOM document; the document property points to the DOM document loaded in that window. A window for a given document can be obtained using the document.defaultView property.",
    "!proto": "EventTarget",
    "window": {
      "!type": "Window",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/window",
      "!doc": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:"
    },
    "self": {
      "!type": "Window",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/self",
      "!doc": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self)."
    },
    "document": {
      "!type": "+Document",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/document",
      "!doc": "Returns a reference to the document contained in the window."
    },
    "name": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/name",
      "!doc": "Gets/sets the name of the window."
    },
    "location": {
      "!type": "Location",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/location",
      "!doc": "The Window.location read-only property returns a Location object with information about the current location of the document."
    },
    "history": {
      "!type": "History",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/history",
      "!doc": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in)."
    },
    "locationbar": {
      "!type": "BarProp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar",
      "!doc": "Returns the locationbar object, whose visibility can be checked."
    },
    "menubar": {
      "!type": "BarProp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/menubar",
      "!doc": "Returns the menubar object, whose visibility can be checked."
    },
    "personalbar": {
      "!type": "BarProp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar",
      "!doc": "Returns the personalbar object, whose visibility can be toggled in the window."
    },
    "scrollbars": {
      "!type": "BarProp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars",
      "!doc": "Returns the scrollbars object, whose visibility can be checked."
    },
    "statusbar": {
      "!type": "BarProp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar",
      "!doc": "Returns the statusbar object, whose visibility can be toggled in the window."
    },
    "toolbar": {
      "!type": "BarProp",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar",
      "!doc": "Returns the toolbar object, whose visibility can be toggled in the window."
    },
    "status": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/status",
      "!doc": "Sets the text in the status bar at the bottom of the browser or returns the previously set text."
    },
    "close": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/close",
      "!doc": "Closes the current window, or the window on which it was called."
    },
    "closed": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/closed",
      "!doc": "This read-only property indicates whether the referenced window is closed or not."
    },
    "stop": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/stop",
      "!doc": "This method stops window loading."
    },
    "focus": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/focus",
      "!doc": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns."
    },
    "blur": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/blur",
      "!doc": "Shifts focus away from the window."
    },
    "frames": {
      "!type": "WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/frames",
      "!doc": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window."
    },
    "length": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/length",
      "!doc": "Returns the number of frames (either frame or iframe elements) in the window."
    },
    "top": {
      "!type": "WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/top",
      "!doc": "Returns a reference to the topmost window in the window hierarchy."
    },
    "opener": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/opener",
      "!doc": "Returns a reference to the window that opened this current window."
    },
    "parent": {
      "!type": "WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/parent",
      "!doc": "A reference to the parent of the current window or subframe."
    },
    "frameElement": {
      "!type": "HTMLElement",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement",
      "!doc": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level."
    },
    "open": {
      "!type": "fn(url?: string, target?: string, features?: string) -> WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/open",
      "!doc": "Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters."
    },
    "navigator": {
      "!type": "Navigator",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/navigator",
      "!doc": "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script."
    },
    "external": "External",
    "applicationCache": {
      "!type": "ApplicationCache",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/applicationCache",
      "!doc": "Returns a reference to the application cache object for the window."
    },
    "alert": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/alert",
      "!doc": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button."
    },
    "confirm": {
      "!type": "fn(message?: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/confirm",
      "!doc": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel."
    },
    "prompt": {
      "!type": "fn(message?: string, default?: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",
      "!doc": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text."
    },
    "print": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/print",
      "!doc": "Opens the Print Dialog to print the current document."
    },
    "showModalDialog": {
      "!type": "fn(url: string, argument?: ?, options?: string) -> ?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "postMessage": {
      "!type": "fn(message: ?, targetOrigin: string, transfer?: [Transferable])",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",
      "!doc": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both https), port number (443 being the default for https), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used."
    },
    "captureEvents": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents",
      "!doc": "Deprecated since Gecko 1.9 (Firefox 3)This feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "releaseEvents": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents",
      "!doc": "Deprecated since Gecko 1.9 (Firefox 3)This feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "getSelection": {
      "!type": "fn() -> Selection",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection",
      "!doc": "Returns a Selection object representing the range of text selected by the user or the current position of the caret."
    },
    "getComputedStyle": {
      "!type": "fn(elt: HTMLElement, pseudoElt?: string) -> CSS2Properties",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle",
      "!doc": "The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain."
    },
    "matchMedia": {
      "!type": "fn(query: string) -> MediaQueryList",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia",
      "!doc": "Returns a new MediaQueryList object representing the parsed results of the specified media query string."
    },
    "screen": {
      "!type": "Screen",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/screen",
      "!doc": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered."
    },
    "moveTo": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo",
      "!doc": "Moves the window to the specified coordinates."
    },
    "moveBy": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy",
      "!doc": "Moves the current window by a specified amount."
    },
    "resizeTo": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo",
      "!doc": "Dynamically resizes window."
    },
    "resizeBy": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy",
      "!doc": "Resizes the current window by a certain amount."
    },
    "innerWidth": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth",
      "!doc": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar."
    },
    "innerHeight": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight",
      "!doc": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar."
    },
    "scroll": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scroll",
      "!doc": "Scrolls the window to a particular place in the document."
    },
    "scrollTo": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo",
      "!doc": "Scrolls to a particular set of coordinates in the document."
    },
    "scrollBy": {
      "!type": "fn(x: number, y: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy",
      "!doc": "Scrolls the document in the window by the given amount."
    },
    "mozScrollSnap": "fn()",
    "scrollX": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX",
      "!doc": "Returns the number of pixels that the document has already been scrolled horizontally."
    },
    "pageXOffset": "number",
    "scrollY": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY",
      "!doc": "Returns the number of pixels that the document has already been scrolled vertically."
    },
    "pageYOffset": "number",
    "screenX": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/screenX",
      "!doc": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser from the left side of the screen."
    },
    "screenY": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/screenY",
      "!doc": "The Window.screenY read-only property returns the vertical distance, in CSS pixels of the top border of the user's browser from the top edge of the screen."
    },
    "outerWidth": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth",
      "!doc": "Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles."
    },
    "outerHeight": {
      "!type": "?",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight",
      "!doc": "Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles."
    },
    "mozRequestOverfill": "fn(callback: fn(overfill: number))",
    "requestAnimationFrame": {
      "!type": "fn(callback: fn(time: DOMHighResTimeStamp)) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame",
      "!doc": "You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. The callback rate may be reduced to a lower rate when running in background tabs."
    },
    "cancelAnimationFrame": {
      "!type": "fn(handle: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame",
      "!doc": "Cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame()."
    },
    "performance": {
      "!type": "Performance",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/performance",
      "!doc": "The Web Performance API allows web pages access to certain functions for measuring the performance of web pages and web applications, including the Navigation Timing API and high-resolution time data."
    },
    "caches": {
      "!type": "CacheStorage",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/caches",
      "!doc": "The Window.caches read-only property returns the CacheStorage object associated with the current origin. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests."
    },
    "getDefaultComputedStyle": {
      "!type": "fn(elt: HTMLElement, pseudoElt?: string) -> CSS2Properties",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/getDefaultComputedStyle",
      "!doc": "getDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling.  That is, only user-agent and user styles are taken into account."
    },
    "scrollByLines": {
      "!type": "fn(numLines: number, options?: ScrollOptions)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines",
      "!doc": "Scrolls the document by the given number of lines."
    },
    "scrollByPages": {
      "!type": "fn(numPages: number, options?: ScrollOptions)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages",
      "!doc": "Scrolls the current document by the specified number of pages."
    },
    "sizeToContent": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent",
      "!doc": "The Window.sizeToContent() method sizes the window according to its content. In order for it to work, the DOM content should be loaded when this function is called, for example once the DOMContentLoaded event has been thrown."
    },
    "controllers": {
      "!type": "MozControllers",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/controllers",
      "!doc": "Returns the XUL controllers of the chrome window."
    },
    "realFrameElement": "HTMLElement",
    "mozInnerScreenX": "number",
    "mozInnerScreenY": "number",
    "devicePixelRatio": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio",
      "!doc": "The Window.devicePixelRatio read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one CSS pixel. Note that as the page is zoomed in the number of device pixels that one CSS pixel covers increases, and therefore the value of devicePixelRatio will also increase."
    },
    "scrollMinX": "number",
    "scrollMinY": "number",
    "scrollMaxX": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxX",
      "!doc": "Returns the maximum number of pixels that the document can be scrolled horizontally."
    },
    "scrollMaxY": {
      "!type": "number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY",
      "!doc": "Returns the maximum number of pixels that the document can be scrolled vertically."
    },
    "fullScreen": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen",
      "!doc": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below."
    },
    "back": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/back",
      "!doc": "Obsolete since Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it."
    },
    "forward": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/forward",
      "!doc": "Obsolete since Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it."
    },
    "home": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/home",
      "!doc": "Obsolete since Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it."
    },
    "updateCommands": {
      "!type": "fn(action: string, sel?: Selection, reason?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands",
      "!doc": "Updates the state of commands of the current chrome window (UI)."
    },
    "find": {
      "!type": "fn(str?: string, caseSensitive?: bool, backwards?: bool, wrapAround?: bool, wholeWord?: bool, searchInFrames?: bool, showDialog?: bool) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/find",
      "!doc": "Finds a string in a window."
    },
    "mozPaintCount": "number",
    "MozSelfSupport": "MozSelfSupport",
    "onwheel": "fn(+Event)",
    "ondevicemotion": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion",
      "!doc": "An event handler for the devicemotion events sent to the window."
    },
    "ondeviceorientation": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation",
      "!doc": "An event handler for the deviceorientation events sent to the window."
    },
    "ondeviceproximity": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceproximity",
      "!doc": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device."
    },
    "onuserproximity": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/onuserproximity",
      "!doc": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby."
    },
    "ondevicelight": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight",
      "!doc": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level."
    },
    "dump": {
      "!type": "fn(str: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/dump",
      "!doc": "Prints messages to the (native) console."
    },
    "setResizable": "fn(resizable: bool)",
    "openDialog": {
      "!type": "fn(url?: string, name?: string, options?: string, extraArguments: ?) -> WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/openDialog",
      "!doc": "window.openDialog() is an extension to window.open(). It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently."
    },
    "content": {
      "!type": "object",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/content",
      "!doc": "Returns a Window object for the primary content window. This is useful in XUL windows that have a <browser> (or tabbrowser or <iframe>) with type=\"content-primary\" attribute on it - the most famous example is Firefox main window, browser.xul. In such cases, content returns a reference to the Window object for the document currently displayed in the browser. It is a shortcut for browserRef.contentWindow."
    },
    "_content": "object",
    "getInterface": "fn(iid: IID) -> ?",
    "windowRoot": "WindowRoot",
    "console": "Console",
    "sidebar": {
      "!type": "External|WindowProxy",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Window/sidebar",
      "!doc": "Returns a sidebar object, which contains several methods for registering add-ons with browser."
    },
    "<i>": "object",
    "queryInterface": "fn(iid: IID) -> nsISupports",
    "onabort": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
      "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
    },
    "onblur": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
      "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
    },
    "onfocus": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
      "!doc": "The onfocus property returns the onFocus event handler code on the current element."
    },
    "oncanplay": "fn(+Event)",
    "oncanplaythrough": "fn(+Event)",
    "onchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
      "!doc": "The onchange property sets and returns the event handler for the change event."
    },
    "onclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
      "!doc": "The onclick property returns the click event handler code on the current element."
    },
    "oncontextmenu": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
      "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
    },
    "ondblclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
      "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
    },
    "ondrag": "fn(+Event)",
    "ondragend": "fn(+Event)",
    "ondragenter": "fn(+Event)",
    "ondragleave": "fn(+Event)",
    "ondragover": "fn(+Event)",
    "ondragstart": "fn(+Event)",
    "ondrop": "fn(+Event)",
    "ondurationchange": "fn(+Event)",
    "onemptied": "fn(+Event)",
    "onended": "fn(+Event)",
    "oninput": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
      "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
    },
    "oninvalid": "fn(+Event)",
    "onkeydown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
      "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
    },
    "onkeypress": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
      "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
    },
    "onkeyup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
      "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
    },
    "onload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
      "!doc": "An event handler for the load event of a window."
    },
    "onloadeddata": "fn(+Event)",
    "onloadedmetadata": "fn(+Event)",
    "onloadstart": "fn(+Event)",
    "onmousedown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
      "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
    },
    "onmouseenter": "fn(+Event)",
    "onmouseleave": "fn(+Event)",
    "onmousemove": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
      "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
    },
    "onmouseout": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
      "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
    },
    "onmouseover": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
      "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
    },
    "onmouseup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
      "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
    },
    "onpause": "fn(+Event)",
    "onplay": "fn(+Event)",
    "onplaying": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onratechange": "fn(+Event)",
    "onreset": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
      "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
    },
    "onresize": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
      "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
    },
    "onscroll": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
      "!doc": "An event handler for scroll events on element."
    },
    "onseeked": "fn(+Event)",
    "onseeking": "fn(+Event)",
    "onselect": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
      "!doc": "An event handler for the select event on the window."
    },
    "onshow": "fn(+Event)",
    "onstalled": "fn(+Event)",
    "onsubmit": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
      "!doc": "An event handler for the submit event on the window."
    },
    "onsuspend": "fn(+Event)",
    "ontimeupdate": "fn(+Event)",
    "onvolumechange": "fn(+Event)",
    "onwaiting": "fn(+Event)",
    "onselectstart": "fn(+Event)",
    "onpointercancel": "fn(+Event)",
    "onpointerdown": "fn(+Event)",
    "onpointerup": "fn(+Event)",
    "onpointermove": "fn(+Event)",
    "onpointerout": "fn(+Event)",
    "onpointerover": "fn(+Event)",
    "onpointerenter": "fn(+Event)",
    "onpointerleave": "fn(+Event)",
    "ongotpointercapture": "fn(+Event)",
    "onlostpointercapture": "fn(+Event)",
    "onmozfullscreenchange": "fn(+Event)",
    "onmozfullscreenerror": "fn(+Event)",
    "onmozpointerlockchange": "fn(+Event)",
    "onmozpointerlockerror": "fn(+Event)",
    "onafterprint": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
      "!doc": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window."
    },
    "onbeforeprint": "fn(+Event)",
    "onbeforeunload": {
      "!type": "OnBeforeUnloadEventHandler",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
      "!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
    },
    "onhashchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
      "!doc": "The hashchange event fires when a window's hash changes (see location.hash)."
    },
    "onlanguagechange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
      "!doc": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages."
    },
    "onmessage": "fn(+Event)",
    "onoffline": "fn(+Event)",
    "ononline": "fn(+Event)",
    "onpagehide": "fn(+Event)",
    "onpageshow": "fn(+Event)",
    "onpopstate": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
      "!doc": "An event handler for the popstate event on the window."
    },
    "onstorage": "fn(+Event)",
    "onunload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
      "!doc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
    },
    "setTimeout": {
      "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout",
      "!doc": "Calls a function or executes a code snippet after a specified delay."
    },
    "clearTimeout": {
      "!type": "fn(handle?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout",
      "!doc": "Clears the delay set by WindowTimers.setTimeout()."
    },
    "setInterval": {
      "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",
      "!doc": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function. Returns an intervalID."
    },
    "clearInterval": {
      "!type": "fn(handle?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",
      "!doc": "Cancels repeated action which was set up using setInterval."
    },
    "btoa": {
      "!type": "fn(btoa: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa",
      "!doc": "Creates a base-64 encoded ASCII string from a \"string\" of binary data."
    },
    "atob": {
      "!type": "fn(atob: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob",
      "!doc": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31."
    },
    "sessionStorage": "Storage",
    "localStorage": "Storage",
    "indexedDB": {
      "!type": "IDBFactory",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB",
      "!doc": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases."
    },
    "crypto": "Crypto",
    "speechSynthesis": "SpeechSynthesis",
    "dialogArguments": "?",
    "returnValue": "?",
    "ontouchstart": "fn(+Event)",
    "ontouchend": "fn(+Event)",
    "ontouchmove": "fn(+Event)",
    "ontouchcancel": "fn(+Event)",
    "onerror": "OnErrorEventHandler",
    "STATE_MAXIMIZED": "number",
    "STATE_MINIMIZED": "number",
    "STATE_NORMAL": "number",
    "STATE_FULLSCREEN": "number",
    "windowState": "number",
    "browserDOMWindow": "nsIBrowserDOMWindow",
    "getAttention": "fn()",
    "getAttentionWithCycleCount": "fn(aCycleCount: number)",
    "setCursor": "fn(cursor: string)",
    "maximize": "fn()",
    "minimize": "fn()",
    "restore": "fn()",
    "notifyDefaultButtonLoaded": "fn(defaultButton: HTMLElement)",
    "messageManager": "nsIMessageBroadcaster",
    "getGroupMessageManager": "fn(aGroup: string) -> nsIMessageBroadcaster",
    "beginWindowMove": "fn(mouseDownEvent: +Event, panel?: HTMLElement)",
    "fetch": {
      "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=+Response]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch",
      "!doc": "The fetch() method of the GlobalFetch interface starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request."
    },
    "createImageBitmap": "fn(aImage: ImageBitmapSource) -> +Promise[value=ImageBitmap]"
  },
  "ChromeWindow": {
    "STATE_MAXIMIZED": "number",
    "STATE_MINIMIZED": "number",
    "STATE_NORMAL": "number",
    "STATE_FULLSCREEN": "number",
    "windowState": "number",
    "browserDOMWindow": "nsIBrowserDOMWindow",
    "getAttention": "fn()",
    "getAttentionWithCycleCount": "fn(aCycleCount: number)",
    "setCursor": "fn(cursor: string)",
    "maximize": "fn()",
    "minimize": "fn()",
    "restore": "fn()",
    "notifyDefaultButtonLoaded": "fn(defaultButton: HTMLElement)",
    "messageManager": "nsIMessageBroadcaster",
    "getGroupMessageManager": "fn(aGroup: string) -> nsIMessageBroadcaster",
    "beginWindowMove": "fn(mouseDownEvent: +Event, panel?: HTMLElement)"
  },
  "Worker": {
    "!type": "fn(scriptURL: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Worker",
    "!doc": "The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.",
    "prototype": {
      "!proto": "EventTarget",
      "terminate": {
        "!type": "fn()",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate",
        "!doc": "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once."
      },
      "postMessage": {
        "!type": "fn(message: ?, transfer?: [?])",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage",
        "!doc": "The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references."
      },
      "onmessage": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage",
        "!doc": "The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method."
      },
      "onerror": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
        "!doc": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker."
      }
    }
  },
  "ChromeWorker": {
    "!type": "fn(scriptURL: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/ChromeWorker",
    "!doc": "If you're developing privileged code, and would like to create a worker that can use js-ctypes to perform calls to native code, you can do so by using ChromeWorker instead of the standard Worker object. It works exactly like a standard Worker, except that it has access to js-ctypes via a global ctypes object available in the global scope of the worker. Examples of ChromeWorker's using js-ctypes are availabe on Github and are linked to from the See Also section below. To use a postMessage with callback version of ChromeWorker that features promises, see PromiseWorker.",
    "prototype": {
      "!proto": "Worker.prototype"
    }
  },
  "WorkerDebuggerGlobalScope": {
    "!proto": "EventTarget",
    "global": "object",
    "createSandbox": "fn(name: string, prototype: object) -> object",
    "loadSubScript": "fn(url: string, sandbox?: object)",
    "enterEventLoop": "fn()",
    "leaveEventLoop": "fn()",
    "postMessage": "fn(message: string)",
    "onmessage": "fn(+Event)",
    "setImmediate": "fn(handler: fn(arguments: ?))",
    "reportError": "fn(message: string)",
    "dump": "fn(string?: string)"
  },
  "WorkerGlobalScope": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope",
    "!doc": "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.",
    "!proto": "EventTarget",
    "self": {
      "!type": "WorkerGlobalScope",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self",
      "!doc": "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope,  SharedWorkerGlobalScope, or ServiceWorkerGlobalScope."
    },
    "console": {
      "!type": "Console",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console",
      "!doc": "The console read-only property of the WorkerGlobalScope interface returns a Console object providing access to the browser console for the worker."
    },
    "location": {
      "!type": "WorkerLocation",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location",
      "!doc": "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers."
    },
    "close": {
      "!type": "fn()",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/close",
      "!doc": "The close() method of the WorkerGlobalScope interface discards any tasks queued in the WorkerGlobalScope's event loop, effectively closing this particular scope."
    },
    "onerror": {
      "!type": "OnErrorEventHandler",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror",
      "!doc": "The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker."
    },
    "onoffline": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onoffline",
      "!doc": "The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker."
    },
    "ononline": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/ononline",
      "!doc": "The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker."
    },
    "importScripts": {
      "!type": "fn(urls: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts",
      "!doc": "The importScripts() method of the WorkerGlobalScope interface imports one or more scripts into the worker's scope."
    },
    "navigator": {
      "!type": "WorkerNavigator",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator",
      "!doc": "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers."
    },
    "caches": {
      "!type": "CacheStorage",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/caches",
      "!doc": "The caches read-only property of the WorkerGlobalScope interface returns the CacheStorage object associated with the current worker context. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests."
    },
    "onclose": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose",
      "!doc": "The onclose property of the WorkerGlobalScope interface represents an EventHandler to be called when the close event occurs and bubbles through the Worker."
    },
    "dump": {
      "!type": "fn(str?: string)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump",
      "!doc": "The dump() method of the WorkerGlobalScope interface allows you to write a message to stdout — i.e. in your terminal, in Firefox only. This is the same as Firefox's window.dump, but for workers."
    },
    "performance": {
      "!type": "Performance",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/performance",
      "!doc": "The  performance read-only property of the WorkerGlobalScope interface returns a Performance object to be used on the worker."
    },
    "setTimeout": {
      "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout",
      "!doc": "Calls a function or executes a code snippet after a specified delay."
    },
    "clearTimeout": {
      "!type": "fn(handle?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout",
      "!doc": "Clears the delay set by WindowTimers.setTimeout()."
    },
    "setInterval": {
      "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",
      "!doc": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function. Returns an intervalID."
    },
    "clearInterval": {
      "!type": "fn(handle?: number)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",
      "!doc": "Cancels repeated action which was set up using setInterval."
    },
    "btoa": {
      "!type": "fn(btoa: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa",
      "!doc": "Creates a base-64 encoded ASCII string from a \"string\" of binary data."
    },
    "atob": {
      "!type": "fn(atob: string) -> string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob",
      "!doc": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31."
    },
    "fetch": {
      "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=+Response]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch",
      "!doc": "The fetch() method of the GlobalFetch interface starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request."
    },
    "indexedDB": {
      "!type": "IDBFactory",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB",
      "!doc": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases."
    },
    "createImageBitmap": "fn(aImage: ImageBitmapSource) -> +Promise[value=ImageBitmap]"
  },
  "WorkerLocation": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation",
    "!doc": "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling window.self.location.",
    "href": "string",
    "origin": "string",
    "protocol": "string",
    "host": "string",
    "hostname": "string",
    "port": "string",
    "pathname": "string",
    "search": "string",
    "hash": "string"
  },
  "WorkerNavigator": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator",
    "!doc": "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.",
    "appCodeName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "appName": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "appVersion": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "platform": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "userAgent": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent",
      "!doc": "Returns the user agent string for the current browser."
    },
    "product": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product",
      "!doc": "DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time."
    },
    "taintEnabled": {
      "!type": "fn() -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled",
      "!doc": "Not available to workers.Although the interface of this feature is available to workers, this feature isn't."
    },
    "language": {
      "!type": "string",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language",
      "!doc": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI."
    },
    "languages": {
      "!type": "[string]",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages",
      "!doc": "The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first."
    },
    "onLine": {
      "!type": "bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine",
      "!doc": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection."
    },
    "getDataStores": "fn(name: string, owner?: string) -> +Promise"
  },
  "XMLDocument": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/XMLDocument",
    "!doc": "The XMLDocument interface represent an XML document. It inherits from the generic Document and do not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
    "!proto": "Document.prototype",
    "load": {
      "!type": "fn(url: string) -> bool",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/XMLDocument/load",
      "!doc": "document.load() is a part of an old version of the W3C DOM Level 3 Load & Save module. Can be used with document.async to indicate whether the request is synchronous or asynchronous (the default). As of at least Gecko 1.9, this no longer supports cross-site loading of documents (Use XMLHttpRequest instead)."
    },
    "async": "bool"
  },
  "XMLHttpRequest": {
    "!type": "fn(ignored: string)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",
    "!doc": "XMLHttpRequest is a JavaScript object that was designed by Microsoft and adopted by Mozilla, Apple, and Google. It's now being standardized in the W3C. It provides an easy way to retrieve data from a URL without having to do a full page refresh. A Web page can update just a part of the page without disrupting what the user is doing.  XMLHttpRequest is used heavily in AJAX programming.",
    "prototype": {
      "!proto": "XMLHttpRequestEventTarget",
      "onreadystatechange": {
        "!type": "fn(+Event)",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange",
        "!doc": "The onreadystatechange event is triggered every time the readyState attribute of the XMLHttpRequest changes. The callback is called from the user interface thread."
      },
      "UNSENT": "number",
      "OPENED": "number",
      "HEADERS_RECEIVED": "number",
      "LOADING": "number",
      "DONE": "number",
      "readyState": {
        "!type": "number",
        "!url": "http://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState",
        "!doc": "XMLHttpRequest.response  link at https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest points to a 404 page"
      },
      "open": "fn(method: string, url: string)",
      "setRequestHeader": "fn(header: string, value: string)",
      "timeout": "number",
      "withCredentials": "bool",
      "upload": "XMLHttpRequestUpload",
      "send": "fn()",
      "abort": "fn()",
      "responseURL": "string",
      "status": "number",
      "statusText": "string",
      "getResponseHeader": "fn(header: string) -> string",
      "getAllResponseHeaders": "fn() -> string",
      "overrideMimeType": "fn(mime: string)",
      "responseType": "XMLHttpRequestResponseType",
      "response": "?",
      "responseText": "string",
      "responseXML": "+Document",
      "mozBackgroundRequest": "bool",
      "channel": "MozChannel",
      "networkInterfaceId": "string",
      "getInterface": "fn(iid: IID) -> ?",
      "mozAnon": "bool",
      "mozSystem": "bool",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "XMLHttpRequestEventTarget": {
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget",
    "!doc": "XMLHttpRequestEventTarget is the interface that describes the event handlers you can implement in an object that will handle events for an XMLHttpRequest.",
    "!proto": "EventTarget",
    "onloadstart": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onabort": "fn(+Event)",
    "onerror": "fn(+Event)",
    "onload": "fn(+Event)",
    "ontimeout": "fn(+Event)",
    "onloadend": "fn(+Event)"
  },
  "XMLHttpRequestUpload": {
    "!proto": "XMLHttpRequestEventTarget",
    "queryInterface": "fn(iid: IID) -> nsISupports"
  },
  "OutputStream": {},
  "XMLSerializer": {
    "!type": "fn()",
    "prototype": {
      "serializeToString": "fn(root: Node) -> string",
      "serializeToStream": "fn(root: Node, stream: OutputStream, charset: string)",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "XMLStylesheetProcessingInstruction": {
    "!proto": "ProcessingInstruction",
    "sheet": "StyleSheet"
  },
  "XPathEvaluator": {
    "!type": "fn()",
    "prototype": {
      "createExpression": "fn(expression: string, resolver: fn(prefix: string)) -> XPathExpression",
      "createNSResolver": "fn(nodeResolver: Node) -> Node",
      "evaluate": "fn(expression: string, contextNode: Node, resolver: fn(prefix: string), type: number, result: object) -> XPathResult",
      "queryInterface": "fn(iid: IID) -> nsISupports"
    }
  },
  "XPathExpression": {
    "evaluate": "fn(contextNode: Node, type: number, result: object) -> XPathResult",
    "evaluateWithContext": "fn(contextNode: Node, contextPosition: number, contextSize: number, type: number, result: object) -> XPathResult"
  },
  "XPathResult": {
    "ANY_TYPE": "number",
    "NUMBER_TYPE": "number",
    "STRING_TYPE": "number",
    "BOOLEAN_TYPE": "number",
    "UNORDERED_NODE_ITERATOR_TYPE": "number",
    "ORDERED_NODE_ITERATOR_TYPE": "number",
    "UNORDERED_NODE_SNAPSHOT_TYPE": "number",
    "ORDERED_NODE_SNAPSHOT_TYPE": "number",
    "ANY_UNORDERED_NODE_TYPE": "number",
    "FIRST_ORDERED_NODE_TYPE": "number",
    "resultType": "number",
    "numberValue": "number",
    "stringValue": "string",
    "booleanValue": "bool",
    "singleNodeValue": "Node",
    "invalidIteratorState": "bool",
    "snapshotLength": "number",
    "iterateNext": "fn() -> Node",
    "snapshotItem": "fn(index: number) -> Node"
  },
  "XSLTProcessor": {
    "!type": "fn()",
    "prototype": {
      "importStylesheet": "fn(style: Node)",
      "transformToFragment": "fn(source: Node, output: +Document) -> +DocumentFragment",
      "transformToDocument": "fn(source: Node) -> +Document",
      "setParameter": "fn(namespaceURI: string, localName: string, value: ?)",
      "getParameter": "fn(namespaceURI: string, localName: string) -> nsIVariant",
      "removeParameter": "fn(namespaceURI: string, localName: string)",
      "clearParameters": "fn()",
      "reset": "fn()",
      "DISABLE_ALL_LOADS": "number",
      "flags": "number"
    }
  },
  "XULCommandEvent": {
    "!proto": "UIEvent.prototype",
    "ctrlKey": "bool",
    "shiftKey": "bool",
    "altKey": "bool",
    "metaKey": "bool",
    "sourceEvent": "+Event",
    "initCommandEvent": "fn(type: string, canBubble: bool, cancelable: bool, view: Window, detail: number, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, sourceEvent: +Event)"
  },
  "XULCommandDispatcher": {},
  "XULDocument": {
    "!proto": "Document.prototype",
    "popupNode": "Node",
    "popupRangeParent": "Node",
    "popupRangeOffset": "number",
    "tooltipNode": "Node",
    "commandDispatcher": "XULCommandDispatcher",
    "width": "number",
    "height": "number",
    "getElementsByAttribute": "fn(name: string, value: string) -> NodeList",
    "getElementsByAttributeNS": "fn(namespaceURI: string, name: string, value: string) -> NodeList",
    "addBroadcastListenerFor": "fn(broadcaster: HTMLElement, observer: HTMLElement, attr: string)",
    "removeBroadcastListenerFor": "fn(broadcaster: HTMLElement, observer: HTMLElement, attr: string)",
    "persist": "fn(id: string, attr: string)",
    "getBoxObjectFor": "fn(element: HTMLElement) -> BoxObject",
    "loadOverlay": "fn(url: string, observer: MozObserver)"
  },
  "MozFrameLoader": {},
  "MozRDFCompositeDataSource": {},
  "MozRDFResource": {},
  "MozXULTemplateBuilder": {},
  "XULElement": {
    "!proto": "Element",
    "className": "string",
    "align": "string",
    "dir": "string",
    "flex": "string",
    "flexGroup": "string",
    "ordinal": "string",
    "orient": "string",
    "pack": "string",
    "hidden": "bool",
    "collapsed": "bool",
    "observes": "string",
    "menu": "string",
    "contextMenu": "string",
    "tooltip": "string",
    "width": "string",
    "height": "string",
    "minWidth": "string",
    "minHeight": "string",
    "maxWidth": "string",
    "maxHeight": "string",
    "persist": "string",
    "left": "string",
    "top": "string",
    "datasources": "string",
    "ref": "string",
    "tooltipText": "string",
    "statusText": "string",
    "allowEvents": "bool",
    "database": "MozRDFCompositeDataSource",
    "builder": "MozXULTemplateBuilder",
    "resource": "MozRDFResource",
    "controllers": "MozControllers",
    "boxObject": "BoxObject",
    "focus": "fn()",
    "blur": "fn()",
    "click": "fn()",
    "doCommand": "fn()",
    "getElementsByAttribute": "fn(name: string, value: string) -> NodeList",
    "getElementsByAttributeNS": "fn(namespaceURI: string, name: string, value: string) -> NodeList",
    "style": "CSS2Properties",
    "onabort": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
      "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
    },
    "onblur": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
      "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
    },
    "onfocus": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
      "!doc": "The onfocus property returns the onFocus event handler code on the current element."
    },
    "oncanplay": "fn(+Event)",
    "oncanplaythrough": "fn(+Event)",
    "onchange": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
      "!doc": "The onchange property sets and returns the event handler for the change event."
    },
    "onclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
      "!doc": "The onclick property returns the click event handler code on the current element."
    },
    "oncontextmenu": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
      "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
    },
    "ondblclick": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
      "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
    },
    "ondrag": "fn(+Event)",
    "ondragend": "fn(+Event)",
    "ondragenter": "fn(+Event)",
    "ondragleave": "fn(+Event)",
    "ondragover": "fn(+Event)",
    "ondragstart": "fn(+Event)",
    "ondrop": "fn(+Event)",
    "ondurationchange": "fn(+Event)",
    "onemptied": "fn(+Event)",
    "onended": "fn(+Event)",
    "oninput": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
      "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
    },
    "oninvalid": "fn(+Event)",
    "onkeydown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
      "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
    },
    "onkeypress": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
      "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
    },
    "onkeyup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
      "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
    },
    "onload": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
      "!doc": "An event handler for the load event of a window."
    },
    "onloadeddata": "fn(+Event)",
    "onloadedmetadata": "fn(+Event)",
    "onloadstart": "fn(+Event)",
    "onmousedown": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
      "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
    },
    "onmouseenter": "fn(+Event)",
    "onmouseleave": "fn(+Event)",
    "onmousemove": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
      "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
    },
    "onmouseout": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
      "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
    },
    "onmouseover": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
      "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
    },
    "onmouseup": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
      "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
    },
    "onpause": "fn(+Event)",
    "onplay": "fn(+Event)",
    "onplaying": "fn(+Event)",
    "onprogress": "fn(+Event)",
    "onratechange": "fn(+Event)",
    "onreset": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
      "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
    },
    "onresize": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
      "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
    },
    "onscroll": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
      "!doc": "An event handler for scroll events on element."
    },
    "onseeked": "fn(+Event)",
    "onseeking": "fn(+Event)",
    "onselect": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
      "!doc": "An event handler for the select event on the window."
    },
    "onshow": "fn(+Event)",
    "onstalled": "fn(+Event)",
    "onsubmit": {
      "!type": "fn(+Event)",
      "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
      "!doc": "An event handler for the submit event on the window."
    },
    "onsuspend": "fn(+Event)",
    "ontimeupdate": "fn(+Event)",
    "onvolumechange": "fn(+Event)",
    "onwaiting": "fn(+Event)",
    "onselectstart": "fn(+Event)",
    "onpointercancel": "fn(+Event)",
    "onpointerdown": "fn(+Event)",
    "onpointerup": "fn(+Event)",
    "onpointermove": "fn(+Event)",
    "onpointerout": "fn(+Event)",
    "onpointerover": "fn(+Event)",
    "onpointerenter": "fn(+Event)",
    "onpointerleave": "fn(+Event)",
    "ongotpointercapture": "fn(+Event)",
    "onlostpointercapture": "fn(+Event)",
    "onmozfullscreenchange": "fn(+Event)",
    "onmozfullscreenerror": "fn(+Event)",
    "onmozpointerlockchange": "fn(+Event)",
    "onmozpointerlockerror": "fn(+Event)",
    "ontouchstart": "fn(+Event)",
    "ontouchend": "fn(+Event)",
    "ontouchmove": "fn(+Event)",
    "ontouchcancel": "fn(+Event)",
    "onerror": "fn(+Event)"
  },
  "window": "Window",
  "self": "Window",
  "document": "+Document",
  "name": "string",
  "location": "Location",
  "history": "History",
  "locationbar": "BarProp",
  "menubar": "BarProp",
  "personalbar": "BarProp",
  "scrollbars": "BarProp",
  "statusbar": "BarProp",
  "toolbar": "BarProp",
  "status": "string",
  "close": "fn()",
  "closed": "bool",
  "stop": "fn()",
  "focus": "fn()",
  "blur": "fn()",
  "frames": "WindowProxy",
  "length": "number",
  "top": "WindowProxy",
  "opener": "?",
  "parent": "WindowProxy",
  "frameElement": "HTMLElement",
  "open": "fn(url?: string, target?: string, features?: string) -> WindowProxy",
  "navigator": "Navigator",
  "external": "External",
  "applicationCache": "ApplicationCache",
  "alert": "fn()",
  "confirm": "fn(message?: string) -> bool",
  "prompt": "fn(message?: string, default?: string) -> string",
  "print": "fn()",
  "showModalDialog": "fn(url: string, argument?: ?, options?: string) -> ?",
  "postMessage": "fn(message: ?, targetOrigin: string, transfer?: [Transferable])",
  "captureEvents": "fn()",
  "releaseEvents": "fn()",
  "getSelection": "fn() -> Selection",
  "getComputedStyle": "fn(elt: HTMLElement, pseudoElt?: string) -> CSS2Properties",
  "matchMedia": "fn(query: string) -> MediaQueryList",
  "screen": "Screen",
  "moveTo": "fn(x: number, y: number)",
  "moveBy": "fn(x: number, y: number)",
  "resizeTo": "fn(x: number, y: number)",
  "resizeBy": "fn(x: number, y: number)",
  "innerWidth": "?",
  "innerHeight": "?",
  "scroll": "fn(x: number, y: number)",
  "scrollTo": "fn(x: number, y: number)",
  "scrollBy": "fn(x: number, y: number)",
  "mozScrollSnap": "fn()",
  "scrollX": "number",
  "pageXOffset": "number",
  "scrollY": "number",
  "pageYOffset": "number",
  "screenX": "?",
  "screenY": "?",
  "outerWidth": "?",
  "outerHeight": "?",
  "mozRequestOverfill": "fn(callback: fn(overfill: number))",
  "requestAnimationFrame": "fn(callback: fn(time: DOMHighResTimeStamp)) -> number",
  "cancelAnimationFrame": "fn(handle: number)",
  "performance": "Performance",
  "caches": "CacheStorage",
  "getDefaultComputedStyle": "fn(elt: HTMLElement, pseudoElt?: string) -> CSS2Properties",
  "scrollByLines": "fn(numLines: number, options?: ScrollOptions)",
  "scrollByPages": "fn(numPages: number, options?: ScrollOptions)",
  "sizeToContent": "fn()",
  "controllers": "MozControllers",
  "realFrameElement": "HTMLElement",
  "mozInnerScreenX": "number",
  "mozInnerScreenY": "number",
  "devicePixelRatio": "number",
  "scrollMinX": "number",
  "scrollMinY": "number",
  "scrollMaxX": "number",
  "scrollMaxY": "number",
  "fullScreen": "bool",
  "back": "fn()",
  "forward": "fn()",
  "home": "fn()",
  "updateCommands": "fn(action: string, sel?: Selection, reason?: number)",
  "find": "fn(str?: string, caseSensitive?: bool, backwards?: bool, wrapAround?: bool, wholeWord?: bool, searchInFrames?: bool, showDialog?: bool) -> bool",
  "mozPaintCount": "number",
  "MozSelfSupport": "MozSelfSupport",
  "onwheel": "fn(+Event)",
  "ondevicemotion": "fn(+Event)",
  "ondeviceorientation": "fn(+Event)",
  "ondeviceproximity": "fn(+Event)",
  "onuserproximity": "fn(+Event)",
  "ondevicelight": "fn(+Event)",
  "dump": "fn(str: string)",
  "setResizable": "fn(resizable: bool)",
  "openDialog": "fn(url?: string, name?: string, options?: string, extraArguments: ?) -> WindowProxy",
  "content": "object",
  "_content": "object",
  "getInterface": "fn(iid: IID) -> ?",
  "windowRoot": "WindowRoot",
  "console": "Console",
  "sidebar": "External|WindowProxy",
  "<i>": "object",
  "queryInterface": "fn(iid: IID) -> nsISupports",
  "onabort": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
    "!doc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)"
  },
  "onblur": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
    "!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
  },
  "onfocus": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
    "!doc": "The onfocus property returns the onFocus event handler code on the current element."
  },
  "oncanplay": "fn(+Event)",
  "oncanplaythrough": "fn(+Event)",
  "onchange": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
    "!doc": "The onchange property sets and returns the event handler for the change event."
  },
  "onclick": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
    "!doc": "The onclick property returns the click event handler code on the current element."
  },
  "oncontextmenu": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
    "!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
  },
  "ondblclick": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
    "!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
  },
  "ondrag": "fn(+Event)",
  "ondragend": "fn(+Event)",
  "ondragenter": "fn(+Event)",
  "ondragleave": "fn(+Event)",
  "ondragover": "fn(+Event)",
  "ondragstart": "fn(+Event)",
  "ondrop": "fn(+Event)",
  "ondurationchange": "fn(+Event)",
  "onemptied": "fn(+Event)",
  "onended": "fn(+Event)",
  "oninput": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
    "!doc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
  },
  "oninvalid": "fn(+Event)",
  "onkeydown": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
    "!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
  },
  "onkeypress": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
    "!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
  },
  "onkeyup": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
    "!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
  },
  "onload": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
    "!doc": "An event handler for the load event of a window."
  },
  "onloadeddata": "fn(+Event)",
  "onloadedmetadata": "fn(+Event)",
  "onloadstart": "fn(+Event)",
  "onmousedown": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
    "!doc": "The onmousedown property returns the onmousedown event handler code on the current element."
  },
  "onmouseenter": "fn(+Event)",
  "onmouseleave": "fn(+Event)",
  "onmousemove": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
    "!doc": "The onmousemove property returns the mousemove event handler code on the current element."
  },
  "onmouseout": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
    "!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
  },
  "onmouseover": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
    "!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
  },
  "onmouseup": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
    "!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
  },
  "onpause": "fn(+Event)",
  "onplay": "fn(+Event)",
  "onplaying": "fn(+Event)",
  "onprogress": "fn(+Event)",
  "onratechange": "fn(+Event)",
  "onreset": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
    "!doc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
  },
  "onresize": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
    "!doc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
  },
  "onscroll": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
    "!doc": "An event handler for scroll events on element."
  },
  "onseeked": "fn(+Event)",
  "onseeking": "fn(+Event)",
  "onselect": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
    "!doc": "An event handler for the select event on the window."
  },
  "onshow": "fn(+Event)",
  "onstalled": "fn(+Event)",
  "onsubmit": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
    "!doc": "An event handler for the submit event on the window."
  },
  "onsuspend": "fn(+Event)",
  "ontimeupdate": "fn(+Event)",
  "onvolumechange": "fn(+Event)",
  "onwaiting": "fn(+Event)",
  "onselectstart": "fn(+Event)",
  "onpointercancel": "fn(+Event)",
  "onpointerdown": "fn(+Event)",
  "onpointerup": "fn(+Event)",
  "onpointermove": "fn(+Event)",
  "onpointerout": "fn(+Event)",
  "onpointerover": "fn(+Event)",
  "onpointerenter": "fn(+Event)",
  "onpointerleave": "fn(+Event)",
  "ongotpointercapture": "fn(+Event)",
  "onlostpointercapture": "fn(+Event)",
  "onmozfullscreenchange": "fn(+Event)",
  "onmozfullscreenerror": "fn(+Event)",
  "onmozpointerlockchange": "fn(+Event)",
  "onmozpointerlockerror": "fn(+Event)",
  "onafterprint": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
    "!doc": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window."
  },
  "onbeforeprint": "fn(+Event)",
  "onbeforeunload": {
    "!type": "OnBeforeUnloadEventHandler",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
    "!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
  },
  "onhashchange": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
    "!doc": "The hashchange event fires when a window's hash changes (see location.hash)."
  },
  "onlanguagechange": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
    "!doc": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages."
  },
  "onmessage": "fn(+Event)",
  "onoffline": "fn(+Event)",
  "ononline": "fn(+Event)",
  "onpagehide": "fn(+Event)",
  "onpageshow": "fn(+Event)",
  "onpopstate": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
    "!doc": "An event handler for the popstate event on the window."
  },
  "onstorage": "fn(+Event)",
  "onunload": {
    "!type": "fn(+Event)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
    "!doc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
  },
  "setTimeout": {
    "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout",
    "!doc": "Calls a function or executes a code snippet after a specified delay."
  },
  "clearTimeout": {
    "!type": "fn(handle?: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout",
    "!doc": "Clears the delay set by WindowTimers.setTimeout()."
  },
  "setInterval": {
    "!type": "fn(handler: fn(arguments: ?), timeout?: number, arguments: ?) -> number",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",
    "!doc": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function. Returns an intervalID."
  },
  "clearInterval": {
    "!type": "fn(handle?: number)",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",
    "!doc": "Cancels repeated action which was set up using setInterval."
  },
  "btoa": {
    "!type": "fn(btoa: string) -> string",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa",
    "!doc": "Creates a base-64 encoded ASCII string from a \"string\" of binary data."
  },
  "atob": {
    "!type": "fn(atob: string) -> string",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob",
    "!doc": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31."
  },
  "sessionStorage": "Storage",
  "localStorage": "Storage",
  "indexedDB": {
    "!type": "IDBFactory",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB",
    "!doc": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases."
  },
  "crypto": "Crypto",
  "speechSynthesis": "SpeechSynthesis",
  "dialogArguments": "?",
  "returnValue": "?",
  "ontouchstart": "fn(+Event)",
  "ontouchend": "fn(+Event)",
  "ontouchmove": "fn(+Event)",
  "ontouchcancel": "fn(+Event)",
  "onerror": "OnErrorEventHandler",
  "STATE_MAXIMIZED": "number",
  "STATE_MINIMIZED": "number",
  "STATE_NORMAL": "number",
  "STATE_FULLSCREEN": "number",
  "windowState": "number",
  "browserDOMWindow": "nsIBrowserDOMWindow",
  "getAttention": "fn()",
  "getAttentionWithCycleCount": "fn(aCycleCount: number)",
  "setCursor": "fn(cursor: string)",
  "maximize": "fn()",
  "minimize": "fn()",
  "restore": "fn()",
  "notifyDefaultButtonLoaded": "fn(defaultButton: HTMLElement)",
  "messageManager": "nsIMessageBroadcaster",
  "getGroupMessageManager": "fn(aGroup: string) -> nsIMessageBroadcaster",
  "beginWindowMove": "fn(mouseDownEvent: +Event, panel?: HTMLElement)",
  "fetch": {
    "!type": "fn(input: RequestInfo, init?: RequestInit) -> +Promise[value=+Response]",
    "!url": "http://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch",
    "!doc": "The fetch() method of the GlobalFetch interface starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request."
  },
  "createImageBitmap": "fn(aImage: ImageBitmapSource) -> +Promise[value=ImageBitmap]"
}