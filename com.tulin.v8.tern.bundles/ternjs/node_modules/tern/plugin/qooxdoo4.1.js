(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(require("tern/lib/infer"), require("tern/lib/tern"));
  if (typeof define == "function" && define.amd) // AMD
    return define([ "tern/lib/infer", "tern/lib/tern" ], mod);
  mod(tern, tern);
})(function(infer, tern) {
  "use strict";

  tern.registerPlugin("qooxdoo4.1", function(server, options) {
    server._ckeditor = {};
    return {
      defs : defs
    };
  });

  var defs = {"!name":"qooxdoo","!define":{},"q":{"!proto":"qxWeb","!doc":"<p>Compatibility class for {@link qxWeb}.</p>"},"qx":{"application":{"AbstractGui":{"!proto":"qx.core.Object","!doc":"<p>Abstract base class for <span class=\"caps\">GUI</span> applications using qooxdoo widgets.</p>","prototype":{"_createRootWidget":{"!doc":"<p>Create the root widget. This method is abstract and must be overridden\nby sub classes.</p>","!type":"fn() -> +qx.ui.core.Widget"},"close":{"!type":"fn(val: +undefined)"},"finalize":{"!type":"fn()"},"getRoot":{"!doc":"<p>Returns the application&#8217;s root widget. The root widgets can act as container\nfor popups. It is configured with a {@link qx.ui.layout.Basic} (if the\napplication is an inline application) layout or a {@link qx.ui.layout.Canvas}\n(if the application is a standalone application) layout .</p>\n\n<p>The root has the same add method as the configured layout\n({@link qx.ui.layout.Basic} or {@link qx.ui.layout.Canvas}).</p>","!type":"fn() -> +qx.ui.core.Widget"},"main":{"!type":"fn()"},"render":{"!doc":"<p>Updates the <span class=\"caps\">GUI</span> rendering</p>","!type":"fn()"},"terminate":{"!type":"fn()"}}},"Basic":{"!proto":"qx.core.Object","!doc":"<p>For a basic, out-of-browser application (running e.g. on Node.js, Rhino).</p>","prototype":{"close":{"!type":"fn()"},"finalize":{"!type":"fn()"},"main":{"!type":"fn()"},"terminate":{"!type":"fn()"}}},"IApplication":{"!doc":"<p>This interface defines what an application class has to implement.</p>","prototype":{"close":{"!doc":"<p>Called in the document.beforeunload event of the browser. If the method\nreturns a string value, the user will be asked by the browser, whether\nhe really wants to leave the page. The return string will be displayed in\nthe message box.</p>","!type":"fn() -> string"},"finalize":{"!doc":"<p>Called when the application&#8217;s main method was executed to handle\n&#8220;final&#8221; tasks like rendering or retrieving data.</p>","!type":"fn()"},"main":{"!doc":"<p>Called when the application relevant classes are loaded and ready.</p>","!type":"fn()"},"terminate":{"!doc":"<p>This method contains the last code which is run inside the page and may contain cleanup code.</p>","!type":"fn()"}}},"Inline":{"!proto":"qx.application.AbstractGui","!doc":"<p>For a <span class=\"caps\">GUI</span> application on a traditional, <span class=\"caps\">HTML</span>-dominated web page.</p>\n\n<p>The ideal environment for typical portal sites which use just a few qooxdoo\nwidgets. {@link qx.ui.root.Inline} can be used to embed qooxdoo widgets\ninto the page flow.</p>","prototype":{"_createRootWidget":{"!type":"fn()"}}},"Mobile":{"!proto":"qx.core.Object","!doc":"<p>For a mobile application. Supports the mobile widget set.</p>","!type":"fn()","prototype":{"_createRootWidget":{"!doc":"<p>Creates the application&#8217;s root widget. Override this function to create\nyour own root widget.</p>","!type":"fn() -> +qx.ui.mobile.core.Widget"},"close":{"!type":"fn()"},"finalize":{"!type":"fn()"},"getRoot":{"!doc":"<p>Returns the application&#8217;s root widget.</p>","!type":"fn() -> +qx.ui.mobile.core.Widget"},"getRouting":{"!doc":"<p>Returns the application&#8217;s routing.</p>","!type":"fn() -> +qx.application.Routing"},"main":{"!type":"fn()"},"terminate":{"!type":"fn()"}}},"Native":{"!proto":"qx.core.Object","!doc":"<p>For a Non-GUI application, supporting low-level <span class=\"caps\">DOM</span> operations and <span class=\"caps\">AJAX</span>\ncommunication.</p>","prototype":{"close":{"!type":"fn()"},"finalize":{"!type":"fn()"},"main":{"!type":"fn()"},"terminate":{"!type":"fn()"}}},"Routing":{"!doc":"<p>Basic application routing manager.</p>\n\n<p>Define routes to react on certain <span class=\"caps\">GET</span> / <span class=\"caps\">POST</span> / <span class=\"caps\">DELETE</span> / <span class=\"caps\">PUT</span> operations.</p>\n\n<ul>\n<li><span class=\"caps\">GET</span> is triggered when the hash value of the url is changed. Can be called<br />\n  manually by calling the {@link #executeGet} method.</li>\n<li><span class=\"caps\">POST</span> / <span class=\"caps\">DELETE</span> / <span class=\"caps\">PUT</span> has to be triggered manually right now (will be changed later)<br />\n   by calling the {@link #executePost}, {@link #executeDelete}, {@link #executePut} method.</li>\n</ul>\n\n<p>This manager can also be used to provide browser history.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var r = new qx.application.Routing();\n\n  // show the start page, when no hash is given or the hash is \"#/\"\n  r.onGet(\"/\", function(data) {\n    startPage.show();\n  }, this);\n\n  // whenever the url /address is called show the address book page.\n  r.onGet(\"/address\", function(data) {\n    addressBookPage.show();\n  }, this);\n\n  // address with the parameter \"id\"\n  r.onGet(\"/address/{id}\", function(data) {\n    addressPage.show();\n    model.loadAddress(data.params.id);\n  }, this);\n\n  // Alternative you can use regExp for a route\n  r.onGet(/address\\/(.*)/, function(data) {\n    addressPage.show();\n    model.loadAddress(data.params.0);\n  }, this);\n\n  // make sure that the data is always loaded\n  r.onGet(\"/address.*\", function(data) {\n    if (!model.isLoaded()) {\n      model.loadAddresses();\n    }\n  }, this);\n\n  // update the address\n  r.onPost(\"/address/{id}\", function(data) {\n    model.updateAddress(data.params.id);\n  }, this);\n\n  // delete the address and navigate back\n  r.onDelete(\"/address/{id}\", function(data) {\n    model.deleteAddress(data.params.id);\n    r.executeGet(\"/address\", {reverse:true});\n  }, this);\n</pre>\n\n<p>This example defines different routes to handle navigation events.</p>","!type":"fn()","prototype":{"__addToHistory":{"!doc":"<p>Adds the custom data of a given path to the history.</p>","!type":"fn(path: string, customData: Object)"},"__getFromHistory":{"!doc":"<p>Returns a history entry for a certain path.</p>","!type":"fn(path: string) -> +Map"},"__onChangeHash":{"!doc":"<p>Hash change event handler.</p>","!type":"fn(evt: +qx.event.type.Data)"},"__replaceCustomData":{"!doc":"<p>Replaces the customData in the history objects with the recent custom data.</p>","!type":"fn(path: string, customData: Object)"},"_executeGet":{"!doc":"<p>Executes the get operation and informs all matching route handler.</p>","!type":"fn(path: string, customData: Object, fromEvent: Object)"},"_getPathOrFallback":{"!doc":"<p>Checks if path is valid and registered in channel &#8220;get&#8221; and then just returns it.\nIf the path is not valid either the <code>defaultPath</code> (if given) or the\n{@link #DEFAULT_PATH} will be returned.</p>","!type":"fn(path: string, defaultPath?: string) -> string"},"back":{"!doc":"<p>Navigates back to the previously executed path.</p>","!type":"fn(customData?: +Map)"},"dispose":{"!doc":"<p>Decouples the Routing from the navigation handler.</p>","!type":"fn()"},"execute":{"!doc":"<p>This is a shorthand for {@link #executeGet}.</p>","!type":"fn(path: string, customData: Object)"},"executeDelete":{"!doc":"<p>Executes the delete operation and informs all matching route handler.</p>","!type":"fn(path: string, params: +Map, customData: Object)"},"executeGet":{"!doc":"<p>Executes the get operation and informs all matching route handler.</p>","!type":"fn(path: string, customData: Object)"},"executePost":{"!doc":"<p>Executes the post operation and informs all matching route handler.</p>","!type":"fn(path: string, params: +Map, customData: Object)"},"executePut":{"!doc":"<p>Executes the put operation and informs all matching route handler.</p>","!type":"fn(path: string, params: +Map, customData: Object)"},"getState":{"!doc":"<p>Returns state value (history hash) of the navigation handler.</p>","!type":"fn() -> string"},"init":{"!doc":"<p>Initialization method used to execute the get route for the currently set history path.\nIf no path is set, either the given argument named <code>defaultPath</code>\nor the {@link #DEFAULT_PATH} will be used for initialization.</p>","!type":"fn(defaultPath?: string)"},"on":{"!doc":"<p>This is a shorthand for {@link #onGet}.</p>","!type":"fn(route: string, handler: fn(), scope: Object) -> string"},"onAny":{"!doc":"<p>Adds a route handler for the &#8220;any&#8221; operation. The &#8220;any&#8221; operation is called\nbefore all other operations.</p>","!type":"fn(route: string, handler: fn(), scope: Object) -> string"},"onDelete":{"!doc":"<p>Adds a route handler for the &#8220;delete&#8221; operation. The route gets called\nwhen the {@link #executeDelete} method found a match.</p>","!type":"fn(route: string, handler: fn(), scope: Object) -> string"},"onGet":{"!doc":"<p>Adds a route handler for the &#8220;get&#8221; operation. The route gets called\nwhen the {@link #executeGet} method found a match.</p>","!type":"fn(route: string, handler: fn(), scope: Object) -> string"},"onPost":{"!doc":"<p>Adds a route handler for the &#8220;post&#8221; operation. The route gets called\nwhen the {@link #executePost} method found a match.</p>","!type":"fn(route: string, handler: fn(), scope: Object) -> string"},"onPut":{"!doc":"<p>Adds a route handler for the &#8220;put&#8221; operation. The route gets called\nwhen the {@link #executePut} method found a match.</p>","!type":"fn(route: string, handler: fn(), scope: Object) -> string"},"remove":{"!doc":"<p>Removes a registered route by the given id.</p>","!type":"fn(id: string)"}}},"Standalone":{"!proto":"qx.application.AbstractGui","!doc":"<p>For a <span class=\"caps\">GUI</span> application that looks &amp; feels like native desktop application\n(often called &#8220;RIA&#8221; &#8211; Rich Internet Application).</p>\n\n<p>Such a stand-alone application typically creates and updates all content\ndynamically. Often it is called a &#8220;single-page application&#8221;, since the\ndocument itself is never reloaded or changed. Communication with the server\nis done with <span class=\"caps\">AJAX</span>.</p>","prototype":{"_createRootWidget":{"!type":"fn()"}}}},"bom":{"AnimationFrame":{"!proto":"qx.event.Emitter","!doc":"<p>This is a cross browser wrapper for requestAnimationFrame. For further\ninformation about the feature, take a look at spec:\n<a href=\"http://www.w3.org/TR/animation-timing/\">http://www.w3.org/TR/animation-timing/</a></p>\n\n<p>This class offers two ways of using this feature. First, the plain\n<span class=\"caps\">API</span> the spec describes.</p>\n\n<p>Here is a sample usage:</p>\n\n<pre class=\"javascript\">var start = +(new Date());\nvar clb = function(time) {\n  if (time >= start + duration) {\n    // ... do some last tasks\n  } else {\n    var timePassed = time - start;\n    // ... calculate the current step and apply it\n    qx.bom.AnimationFrame.request(clb, this);\n  }\n};\nqx.bom.AnimationFrame.request(clb, this);\n</pre>\n\n<p>Another way of using it is to use it as an instance emitting events.</p>\n\n<p>Here is a sample usage of that <span class=\"caps\">API</span>:</p>\n\n<pre class=\"javascript\">var frame = new qx.bom.AnimationFrame();\nframe.on(\"end\", function() {\n  // ... do some last tasks\n}, this);\nframe.on(\"frame\", function(timePassed) {\n  // ... calculate the current step and apply it\n}, this);\nframe.startSequence(duration);\n</pre>","prototype":{"cancelSequence":{"!doc":"<p>Cancels a started sequence of frames. It will do nothing if no\nsequence is running.</p>","!type":"fn()"},"startSequence":{"!doc":"<p>Method used to start a series of animation frames. The series will end as\nsoon as the given duration is over.</p>","!type":"fn(duration: number)"}},"calculateTiming":{"!doc":"<p>Calculation of the predefined timing functions. Approximation of the real\nbezier curves has been used for easier calculation. This is good and close\nenough for the predefined functions like <code>ease</code> or\n<code>linear</code>.</p>","!type":"fn(func: string, x: +Integer) -> +Integer"},"request":{"!doc":"<p>Request for an animation frame. If the native <code>requestAnimationFrame</code>\nmethod is supported, it will be used. Otherwise, we use timeouts with a\n30ms delay. The HighResolutionTime will be used if supported but the time given\nto the callback will still be a timestamp starting at 1 January 1970 00:00:00 <span class=\"caps\">UTC</span>.</p>","!type":"fn(callback: fn(), context: Object) -> number"}},"Blocker":{"!proto":"qx.core.Object","!doc":"<p>This class provides an unified blocker which offers three different modes.</p>\n\n<p><strong>Blocker modes</strong></p>\n\n<ul>\n<li>block the whole document</li>\n<li>block the content of an element</li>\n<li>act as an underlying blocker for an element to shim native controls</li>\n</ul>\n\n<p>The third mode is mainly necessary for IE browsers.</p>\n\n<p>The first mode is the easiest to use. Just use the {@link #block} method\nwithout a parameter.\nThe second and third mode are taking a <span class=\"caps\">DOM</span> element as parameter for the\n{@link #block} method. Additionally one need to setup the &#8220;zIndex&#8221; value\ncorrectly to get the right results (see at {@link #setBlockerZIndex} method).</p>\n\n<p>The zIndex value defaults to the value &#8220;10000&#8221;. Either you set an appropiate\nvalue for the blocker zIndex or for your <span class=\"caps\">DOM</span> element to block. If you want\nto block the content of your <span class=\"caps\">DOM</span> element it has to have at least the zIndex\nvalue of &#8220;10001&#8221; with default blocker values.</p>","!type":"fn()","prototype":{"__calculateStyles":{"!doc":"<p>Calculates the necessary styles for the blocker element.\nEither the values of the document or of the element to block are used.</p>","!type":"fn() -> +Map"},"__init":{"!doc":"<p>Setups the elements and registers a &#8220;resize&#8221; event.</p>","!type":"fn()"},"__isWholeDocumentBlockTarget":{"!doc":"<p>Checks whether the whole document is be blocked.</p>","!type":"fn() -> bool"},"__onResize":{"!doc":"<p>Reacts on window resize and adapts the new size for the blocker element\nif the whole document is blocked.</p>","!type":"fn(e: +qx.event.type.Event)"},"__removeBlocker":{"!doc":"<p>Remove the blocker elements.</p>","!type":"fn()"},"__resizeBlocker":{"!doc":"<p>Does the resizing for blocker element and blocker iframe element (IE)</p>","!type":"fn(dimension: Object)"},"__setupBlockerElement":{"!doc":"<p>Create blocker element and set initial styles.</p>","!type":"fn()"},"__setupIframeElement":{"!doc":"<p>Create iframe blocker element and set initial styles.</p>\n\n<p>Needed to block native form elements\n// see: <a href=\"http://www.macridesweb.com/oltest/IframeShim.html\">http://www.macridesweb.com/oltest/IframeShim.html</a></p>","!type":"fn()"},"__styleAndInsertBlocker":{"!doc":"<p>Apply the given styles and inserts the blocker.</p>","!type":"fn(styles: Object)"},"block":{"!doc":"<p>Blocks the whole document (if no parameter is given) or acts as an\nunderlying blocker for native controls.</p>","!type":"fn(element?: +element)"},"getBlockerColor":{"!doc":"<p>Returns the current blocker color.</p>","!type":"fn() -> string"},"getBlockerElement":{"!doc":"<p>Returns the blocker element. Useful if the element should be animated.</p>","!type":"fn() -> +Element"},"getBlockerOpacity":{"!doc":"<p>Returns the blocker opacity value.</p>","!type":"fn() -> +Integer"},"getBlockerZIndex":{"!doc":"<p>Returns the blocker zIndex value</p>","!type":"fn() -> +Integer"},"isBlocked":{"!doc":"<p>Whether the blocker is already active.</p>","!type":"fn() -> bool"},"setBlockerColor":{"!doc":"<p>Sets the color of the blocker element. Be sure to set also a suitable\nopacity value to get the desired result.</p>","!type":"fn(color: string)"},"setBlockerOpacity":{"!doc":"<p>Sets the blocker opacity. Be sure to set also a suitable blocker color\nvalue to get the desired result.</p>","!type":"fn(opacity: string)"},"setBlockerZIndex":{"!doc":"<p>Set the zIndex of the blocker element. For most use cases you do not need\nto manipulate this value.</p>","!type":"fn(zIndex: +Integer)"},"unblock":{"!doc":"<p>Releases the blocking</p>","!type":"fn()"}}},"client":{"Browser":{"!doc":"<p>Basic browser detection for qooxdoo.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getDocumentMode":{"!doc":"<p>Returns in which document mode the current document is (only for IE).</p>","!type":"fn() -> number"},"getName":{"!doc":"<p>Checks for the name of the browser and returns it.</p>","!type":"fn() -> string"},"getQuirksMode":{"!doc":"<p>Check if in quirks mode.</p>","!type":"fn() -> bool"},"getVersion":{"!doc":"<p>Determines the version of the current browser.</p>","!type":"fn() -> string"}},"Css":{"!doc":"<p>The purpose of this class is to contain all checks about css.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__isFilterSupported":{"!doc":"<p>Checks if the given filter is supported.</p>","!type":"fn(filterClass: string, initParams: string) -> bool"},"getAlphaImageLoaderNeeded":{"!doc":"<p>Checks if the Alpha Image Loader must be used to display transparent PNGs.</p>","!type":"fn() -> bool"},"getAppearance":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>appearance</code> style property.</p>","!type":"fn() -> string"},"getBorderImage":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>borderImage</code> style property.</p>","!type":"fn() -> string"},"getBorderImageSyntax":{"!doc":"<p>Returns the type of syntax this client supports for its <span class=\"caps\">CSS</span> border-image\nimplementation. Some browsers do not support the &#8220;fill&#8221; keyword defined\nin the W3C draft (<a href=\"http://www.w3.org/TR/css3-background/\">http://www.w3.org/TR/css3-background/</a>) and will not\nshow the border image if it&#8217;s set. Others follow the standard closely and\nwill omit the center image if &#8220;fill&#8221; is not set.</p>","!type":"fn() -> bool"},"getBorderRadius":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>borderRadius</code> style property.</p>","!type":"fn() -> string"},"getBoxModel":{"!doc":"<p>Checks what box model is used in the current environemnt.</p>","!type":"fn() -> string"},"getBoxShadow":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>boxShadow</code> style property.</p>","!type":"fn() -> string"},"getBoxSizing":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>boxSizing</code> style property.</p>","!type":"fn() -> string"},"getFilterGradient":{"!doc":"<p>Returns <code>true</code> if the browser supports setting gradients\nusing the filter style. This usually only applies for IE browsers\nstarting from IE5.5.\n<a href=\"http://msdn.microsoft.com/en-us/library/ms532997\">http://msdn.microsoft.com/en-us/library/ms532997</a>(v=vs.85).aspx</p>","!type":"fn() -> bool"},"getFilterTextShadow":{"!doc":"<p>Returns <code>true</code> if the browser supports setting text shadow\nusing the filter style. This usually only applies for IE browsers\nstarting from IE5.5.</p>","!type":"fn() -> bool"},"getFlexboxSyntax":{"!doc":"<p>Returns which Flexbox syntax is supported by the browser.\n<code>display: box;</code> old 2009 version of Flexbox.\n<code>display: flexbox;</code> tweener phase in 2011.\n<code>display: flex;</code> current specification.</p>","!type":"fn() -> string"},"getFloat":{"!doc":"<p>Returns the vendor-specific name of the <code>float</code> style property</p>","!type":"fn() -> string"},"getInlineBlock":{"!doc":"<p>Returns the browser-specific name used for the <code>display</code> style\nproperty&#8217;s <code>inline-block</code> value.</p>","!type":"fn() -> string"},"getLegacyWebkitGradient":{"!doc":"<p>Checks if <b>only</b> the old WebKit (version < 534.16) syntax for\nlinear gradients is supported, e.g.\n<code>linear-gradient(0deg, #fff, #000)</code></p>","!type":"fn() -> bool"},"getLinearGradient":{"!doc":"<p>Returns the (possibly vendor-prefixed) name this client uses for\n<code>linear-gradient</code>.\n<a href=\"http://dev.w3.org/csswg/css3-images/#linear-gradients\">http://dev.w3.org/csswg/css3-images/#linear-gradients</a></p>","!type":"fn() -> string"},"getOpacity":{"!doc":"<p>Checks if <span class=\"caps\">CSS</span> opacity is supported</p>","!type":"fn() -> bool"},"getPlaceholder":{"!doc":"<p>Checks if a placeholder could be used.</p>","!type":"fn() -> bool"},"getPointerEvents":{"!doc":"<p>Checks if pointer events are available.</p>","!type":"fn() -> bool"},"getRadialGradient":{"!doc":"<p>Returns the (possibly vendor-prefixed) name this client uses for\n<code>radial-gradient</code>.</p>","!type":"fn() -> string"},"getRgba":{"!doc":"<p>Checks if rgba colors can be used:\n<a href=\"http://www.w3.org/TR/2010/PR-css3-color-20101028/#rgba-color\">http://www.w3.org/TR/2010/PR-css3-color-20101028/#rgba-color</a></p>","!type":"fn() -> bool"},"getTextOverflow":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>textOverflow</code> style property.</p>","!type":"fn() -> string"},"getTextShadow":{"!doc":"<p>Checks if <span class=\"caps\">CSS</span> texShadow is supported</p>","!type":"fn() -> bool"},"getTranslate3d":{"!doc":"<p>Checks if translate3d can be used.</p>","!type":"fn() -> bool"},"getUserModify":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>userModify</code> style property.</p>","!type":"fn() -> string"},"getUserSelect":{"!doc":"<p>Returns the (possibly vendor-prefixed) name the browser uses for the\n<code>userSelect</code> style property.</p>","!type":"fn() -> string"},"getUserSelectNone":{"!doc":"<p>Returns the (possibly vendor-prefixed) value for the\n<code>userSelect</code> style property that disables selection. For Gecko,\n&#8221;-moz-none&#8221; is returned since &#8220;none&#8221; only makes the target element appear\nas if its text could not be selected</p>","!type":"fn() -> string"}},"CssAnimation":{"!doc":"<p>Responsible for checking all relevant animation properties.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-animations/\">http://www.w3.org/TR/css3-animations/</a></p>","getAnimationEnd":{"!doc":"<p>Checks for the event name of animation end.</p>","!type":"fn() -> string"},"getAnimationIteration":{"!doc":"<p>Checks for the event name of animation end.</p>","!type":"fn() -> string"},"getAnimationStart":{"!doc":"<p>Checks for the event name of animation start.</p>","!type":"fn() -> string"},"getFillMode":{"!doc":"<p>Checks for the &#8216;animation-fill-mode&#8217; <span class=\"caps\">CSS</span> style.</p>","!type":"fn() -> string"},"getKeyFrames":{"!doc":"<p>Checks what selector should be used to add keyframes to stylesheets.</p>","!type":"fn() -> string"},"getName":{"!doc":"<p>Checks for the style name used for animations.</p>","!type":"fn() -> string"},"getPlayState":{"!doc":"<p>Checks for the &#8216;animation-play-state&#8217; <span class=\"caps\">CSS</span> style.</p>","!type":"fn() -> string"},"getRequestAnimationFrame":{"!doc":"<p>Checks for the requestAnimationFrame method and return the prefixed name.</p>","!type":"fn() -> string"},"getSupport":{"!doc":"<p>Main check method which returns an object if <span class=\"caps\">CSS</span> animations are\nsupported. This object contains all necessary keys to work with <span class=\"caps\">CSS</span>\nanimations.\n<ul>\n <li><code>name</code> The name of the css animation style</li>\n <li><code>play-state</code> The name of the play-state style</li>\n <li><code>start-event</code> The name of the start event</li>\n <li><code>iternation-event</code> The name of the iternation event</li>\n <li><code>end-event</code> The name of the end event</li>\n <li><code>fill-mode</code> The fill-mode style</li>\n <li><code>keyframes</code> The name of the keyframes selector.</li>\n</ul></p>","!type":"fn() -> Object"}},"CssTransform":{"!doc":"<p>Responsible for checking all relevant <span class=\"caps\">CSS</span> transform properties.</p>\n\n<p>Specs:\n<a href=\"http://www.w3.org/TR/css3-2d-transforms/\">http://www.w3.org/TR/css3-2d-transforms/</a>\n<a href=\"http://www.w3.org/TR/css3-3d-transforms/\">http://www.w3.org/TR/css3-3d-transforms/</a></p>","get3D":{"!doc":"<p>Checks if 3D transforms are supported.</p>","!type":"fn() -> bool"},"getBackFaceVisibility":{"!doc":"<p>Checks for the style name used to set the backface visibility.</p>","!type":"fn() -> string"},"getName":{"!doc":"<p>Checks for the style name used for transforms.</p>","!type":"fn() -> string"},"getOrigin":{"!doc":"<p>Checks for the style name used to set the transform origin.</p>","!type":"fn() -> string"},"getPerspective":{"!doc":"<p>Checks for the style name used to set the transform origin.</p>","!type":"fn() -> string"},"getPerspectiveOrigin":{"!doc":"<p>Checks for the style name used to set the perspective origin.</p>","!type":"fn() -> string"},"getStyle":{"!doc":"<p>Checks for the style name used to set the transform origin.</p>","!type":"fn() -> string"},"getSupport":{"!doc":"<p>Main check method which returns an object if <span class=\"caps\">CSS</span> animations are\nsupported. This object contains all necessary keys to work with <span class=\"caps\">CSS</span>\nanimations.\n<ul>\n <li><code>name</code> The name of the css transform style</li>\n <li><code>style</code> The name of the css transform-style style</li>\n <li><code>origin</code> The name of the transform-origin style</li>\n <li><code>3d</code> Whether 3d transforms are supported</li>\n <li><code>perspective</code> The name of the perspective style</li>\n <li><code>perspective-origin</code> The name of the perspective-origin style</li>\n <li><code>backface-visibility</code> The name of the backface-visibility style</li>\n</ul></p>","!type":"fn() -> Object"}},"CssTransition":{"!doc":"<p><span class=\"caps\">CSS</span> Transition support checks.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-transitions/\">http://www.w3.org/TR/css3-transitions/</a></p>","getSupport":{"!doc":"<p>Main check method which returns an object if <span class=\"caps\">CSS</span> transitions are\nsupported. The object contains the following keys:\n<ul>\n <li><code>name</code> The name of the <span class=\"caps\">CSS</span> transition property</li>\n <li><code>end-event</code> The name of the end event</li>\n</ul></p>","!type":"fn() -> Object"},"getTransitionName":{"!doc":"<p>Returns the (possibly vendor-prefixed) name of the <span class=\"caps\">CSS</span> transition property</p>","!type":"fn() -> string"}},"Device":{"!doc":"<p>The class is responsible for device detection. This is specially usefull\nif you are on a mobile device.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","detectDeviceType":{"!doc":"<p>Detects the device type, based on given userAgentString.</p>","!type":"fn(userAgentString: string) -> string"},"detectMobileDevice":{"!doc":"<p>Detects if a device is a mobile phone. (Tablets excluded.)</p>","!type":"fn(userAgentString: string) -> bool"},"detectTabletDevice":{"!doc":"<p>Detects if a device is a tablet device.</p>","!type":"fn(userAgentString: string) -> bool"},"getDevicePixelRatio":{"!doc":"<p>Detects the device&#8217;s pixel ratio. Returns 1 if detection is not possible.</p>","!type":"fn() -> number"},"getName":{"!doc":"<p>Returns the name of the current device if detectable. It falls back to\n<code>pc</code> if the detection for other devices fails.</p>","!type":"fn() -> string"},"getTouch":{"!doc":"<p>Detects if either touch events or pointer events are supported.\nAdditionally it checks if touch is enabled for pointer events.</p>","!type":"fn() -> bool"},"getType":{"!doc":"<p>Determines on what type of device the application is running.\nValid values are: &#8220;mobile&#8221;, &#8220;tablet&#8221; or &#8220;desktop&#8221;.</p>","!type":"fn() -> string"}},"EcmaScript":{"!doc":"<p>The main purpose of this class to hold all checks about ECMAScript.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getArrayEvery":{"!doc":"<p>Checks if &#8216;every&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayFilter":{"!doc":"<p>Checks if &#8216;filter&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayForEach":{"!doc":"<p>Checks if &#8216;forEach&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayIndexOf":{"!doc":"<p>Checks if &#8216;indexOf&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayLastIndexOf":{"!doc":"<p>Checks if &#8216;lastIndexOf&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayMap":{"!doc":"<p>Checks if &#8216;map&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayReduce":{"!doc":"<p>Checks if &#8216;reduce&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArrayReduceRight":{"!doc":"<p>Checks if &#8216;reduceRight&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getArraySome":{"!doc":"<p>Checks if &#8216;some&#8217; is supported on the Array object.</p>","!type":"fn() -> bool"},"getDateNow":{"!doc":"<p>Checks if &#8216;now&#8217; is supported on the Date object.</p>","!type":"fn() -> bool"},"getErrorToString":{"!doc":"<p>Checks if &#8216;toString&#8217; is supported on the Error object and\nits working as expected.</p>","!type":"fn() -> bool"},"getFunctionBind":{"!doc":"<p>Checks if &#8216;bind&#8217; is supported on the Function object.</p>","!type":"fn() -> bool"},"getObjectKeys":{"!doc":"<p>Checks if &#8216;keys&#8217; is supported on the Object object.</p>","!type":"fn() -> bool"},"getStackTrace":{"!doc":"<p>Returns the name of the Error object property that holds stack trace\ninformation or null if the client does not provide any.</p>","!type":"fn() -> string"},"getStringTrim":{"!doc":"<p>Checks if &#8216;trim&#8217; is supported on the String object.</p>","!type":"fn() -> bool"}},"Engine":{"!doc":"<p>This class comes with all relevant information regarding\nthe client&#8217;s engine.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__isGecko":{"!doc":"<p>Internal helper for checking for gecko.</p>\n\n<p>Note:\n &#8220;window.controllers&#8221; is gone/hidden with Firefox 30+\n &#8220;window.navigator.mozApps&#8221; is supported since Firefox 11+\n &#8220;window.navigator.product&#8221; is actually useless cause the HTML5 spec\n   states it should be the constant &#8220;Gecko&#8221;.</p>\n\n<p>- <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.controllers\">https://developer.mozilla.org/en-US/docs/Web/API/Window.controllers</a>\n &#8211; <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator.mozApps\">https://developer.mozilla.org/en-US/docs/Web/API/Navigator.mozApps</a>\n &#8211; <a href=\"http://www.w3.org/html/wg/drafts/html/master/webappapis.html#navigatorid\">http://www.w3.org/html/wg/drafts/html/master/webappapis.html#navigatorid</a></p>","!type":"fn() -> bool"},"__isMaple":{"!doc":"<p>Internal helper for checking for Maple .\nMaple is used in Samsung <span class=\"caps\">SMART</span> TV 2010-2011 models. It&#8217;s based on Gecko\nengine 1.8.1.11.</p>","!type":"fn() -> bool"},"__isMshtml":{"!doc":"<p>Internal helper to check for <span class=\"caps\">MSHTML</span>.</p>","!type":"fn() -> bool"},"__isOpera":{"!doc":"<p>Internal helper for checking for opera (presto powered).</p>\n\n<p>Note that with opera >= 15 their engine switched to blink, so\nthings like &#8220;window.opera&#8221; don&#8217;t work anymore or changed (e.g. user agent).</p>","!type":"fn() -> bool"},"__isWebkit":{"!doc":"<p>Internal helper for checking for webkit.</p>","!type":"fn() -> bool"},"getName":{"!doc":"<p>Returns the name of the engine.</p>","!type":"fn() -> string"},"getVersion":{"!doc":"<p>Returns the version of the engine.</p>","!type":"fn() -> string"}},"Event":{"!doc":"<p>Internal class which contains the checks used by {@link qx.core.Environment}.\nAll checks in here are marked as internal which means you should never use\nthem directly.</p>\n\n<p>This class should contain all checks about events.</p>","getCustomEvent":{"!doc":"<p>Checks if the CustomEvent constructor is available and supports\ncustom event types.</p>","!type":"fn() -> bool"},"getDispatchEvent":{"!doc":"<p>Checks if the DOM2 dispatchEvent method is available</p>","!type":"fn() -> bool"},"getHashChange":{"!doc":"<p>Checks if the <code>hashchange</code> event is available</p>","!type":"fn() -> bool"},"getHelp":{"!doc":"<p>Checks if the proprietary <code>help</code> event is available.</p>","!type":"fn() -> bool"},"getMouseEvent":{"!doc":"<p>Checks if the MouseEvent constructor is available and supports\ncustom event types.</p>","!type":"fn() -> bool"},"getMouseWheel":{"!doc":"<p>Checks if the MouseWheel event is available and on which target.</p>","!type":"fn(win?: +Window) -> +Map"},"getMsPointer":{"!doc":"<p>Checks if MSPointer events are available.</p>","!type":"fn() -> bool"},"getTouch":{"!doc":"<p>Checks if touch events are supported.</p>","!type":"fn() -> bool"}},"Flash":{"!doc":"<p>This class contains all Flash detection.</p>\n\n<p>It is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__supportsVersion":{"!doc":"<p>Check if the first given version is supported by either the current\nversion available on the system or the optional given second parameter.</p>","!type":"fn(input: string, availableVersion: string) -> bool"},"getExpressInstall":{"!doc":"<p>Checks if the flash installation is an expres installation.</p>","!type":"fn() -> bool"},"getStrictSecurityModel":{"!doc":"<p>Checks if a strict security model is available.</p>","!type":"fn() -> bool"},"getVersion":{"!doc":"<p>Checks for the version of flash and returns it as a string. If the\nversion could not be detected, an empty string will be returned.</p>","!type":"fn() -> string"},"isAvailable":{"!doc":"<p>Checks if the flash plugin is available.</p>","!type":"fn() -> bool"}},"Html":{"!doc":"<p>Internal class which contains the checks used by {@link qx.core.Environment}.\nAll checks in here are marked as internal which means you should never use\nthem directly.</p>\n\n<p>This class should contain all checks about <span class=\"caps\">HTML</span>.</p>","getAudio":{"!doc":"<p>Whether the client supports audio.</p>","!type":"fn() -> bool"},"getAudioAif":{"!doc":"<p>Whether the client can play aif audio format.</p>","!type":"fn() -> string"},"getAudioAu":{"!doc":"<p>Whether the client can play au audio format.</p>","!type":"fn() -> string"},"getAudioMp3":{"!doc":"<p>Whether the client can play mp3 audio format.</p>","!type":"fn() -> string"},"getAudioOgg":{"!doc":"<p>Whether the client can play ogg audio format.</p>","!type":"fn() -> string"},"getAudioWav":{"!doc":"<p>Whether the client can play wave audio wave format.</p>","!type":"fn() -> string"},"getCanvas":{"!doc":"<p>Checks if canvas could be used</p>","!type":"fn() -> bool"},"getClassList":{"!doc":"<p>Whether the browser supports <span class=\"caps\">CSS</span> class lists.\n<a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\">https://developer.mozilla.org/en-US/docs/DOM/element.classList</a></p>","!type":"fn() -> bool"},"getCompareDocumentPosition":{"!doc":"<p>Check for element.compareDocumentPosition</p>","!type":"fn() -> bool"},"getConsole":{"!doc":"<p>Check for a console object.</p>","!type":"fn() -> bool"},"getContains":{"!doc":"<p>Check for element.contains</p>","!type":"fn() -> bool"},"getDataset":{"!doc":"<p>Checks if dataset could be used</p>","!type":"fn() -> bool"},"getDataUrl":{"!doc":"<p>Asynchronous check for using data urls.</p>","!type":"fn(callback: fn())"},"getFileReader":{"!doc":"<p>Whether the client supports File Readers</p>","!type":"fn() -> bool"},"getGeoLocation":{"!doc":"<p>Whether the client supports Geo Location.</p>","!type":"fn() -> bool"},"getHistoryState":{"!doc":"<p>Check for HTML5 history manipulation support.</p>","!type":"fn() -> bool"},"getIsEqualNode":{"!doc":"<p>Check for the isEqualNode <span class=\"caps\">DOM</span> method.</p>","!type":"fn() -> bool"},"getLocalStorage":{"!doc":"<p>Whether the client supports local storage.</p>","!type":"fn() -> bool"},"getNaturalDimensions":{"!doc":"<p>Check for the <code>naturalHeight</code> and <code>naturalWidth</code>\nimage element attributes.</p>","!type":"fn() -> bool"},"getSelection":{"!doc":"<p>Returns the name of the native object/function used to access the\ndocument&#8217;s text selection.</p>","!type":"fn() -> string"},"getSessionStorage":{"!doc":"<p>Whether the client supports session storage.</p>","!type":"fn() -> bool"},"getSvg":{"!doc":"<p>Checks if <span class=\"caps\">SVG</span> could be used</p>","!type":"fn() -> bool"},"getTextContent":{"!doc":"<p>Check for element.textContent. Legacy IEs do not support this, use\ninnerText instead.</p>","!type":"fn() -> bool"},"getUserDataStorage":{"!doc":"<p>Whether the client supports user data to persist data. This is only\nrelevant for IE < 8.</p>","!type":"fn() -> bool"},"getVideo":{"!doc":"<p>Whether the client supports video.</p>","!type":"fn() -> bool"},"getVideoH264":{"!doc":"<p>Whether the client supports mp4 video.</p>","!type":"fn() -> string"},"getVideoOgg":{"!doc":"<p>Whether the client supports ogg video.</p>","!type":"fn() -> string"},"getVideoWebm":{"!doc":"<p>Whether the client supports webm video.</p>","!type":"fn() -> string"},"getVml":{"!doc":"<p>Checks if <span class=\"caps\">VML</span> is supported</p>","!type":"fn() -> bool"},"getWebWorker":{"!doc":"<p>Whether the client supports Web Workers.</p>","!type":"fn() -> bool"},"getXPath":{"!doc":"<p>Checks if XPath could be used.</p>","!type":"fn() -> bool"},"getXul":{"!doc":"<p>Checks if <span class=\"caps\">XUL</span> could be used.</p>","!type":"fn() -> bool"}},"Json":{"!doc":"<p><span class=\"caps\">JSON</span> detection.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getJson":{"!doc":"<p>Checks if native <span class=\"caps\">JSON</span> could be used and is full-featured.</p>","!type":"fn() -> bool"}},"Locale":{"!doc":"<p>This class comes with all relevant information regarding\nthe client&#8217;s selected locale.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__getNavigatorLocale":{"!doc":"<p>Internal helper for accessing the navigators language.</p>","!type":"fn() -> string"},"getLocale":{"!doc":"<p>The name of the system locale e.g. &#8220;de&#8221; when the full locale is &#8220;de_AT&#8221;</p>","!type":"fn() -> string"},"getVariant":{"!doc":"<p>The name of the variant for the system locale e.g. &#8220;at&#8221; when the\nfull locale is &#8220;de_AT&#8221;</p>","!type":"fn() -> string"}},"OperatingSystem":{"!doc":"<p>This class is responsible for checking the operating systems name.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__getVersionForDesktopOs":{"!doc":"<p>Detect OS version for desktop devices</p>","!type":"fn(userAgent: string) -> string"},"__getVersionForMobileOs":{"!doc":"<p>Detect OS version for mobile devices</p>","!type":"fn(userAgent: string) -> string"},"getName":{"!doc":"<p>Checks for the name of the operating system.</p>","!type":"fn() -> string"},"getVersion":{"!doc":"<p>Checks for the version of the operating system using the internal map.</p>","!type":"fn() -> string"}},"Pdfjs":{"!doc":"<p>Exposes PluginDetect_PDFjs to qooxdoo.</p>\n\n<p>Contains detection for <span class=\"caps\">PDF</span>.js which is a Portable Document Format (PDF)\nviewer that is built with HTML5. <span class=\"caps\">PDF</span>.js is built into Firefox 19+ and\nused as default viewer there. You can enable/disable it via &#8220;about:config&#8221;\nand &#8220;pdfjs.disabled&#8221; (true/false).</p>\n\n<p>As soon as there is an official way to detect this, which seems to be\nworked on [1]<sup class=\"footnote\"><a href=\"#fn2\">2</a></sup>, we should switch.</p>\n\n<p>[1] <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=840439\">https://bugzilla.mozilla.org/show_bug.cgi?id=840439</a>\n[2] <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=558184\">https://bugzilla.mozilla.org/show_bug.cgi?id=558184</a></p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__isAvailable":{"!doc":"<p>Internal helper for checking the availability of <span class=\"caps\">PDF</span>.js.</p>","!type":"fn(callback: fn(), context: Object)"},"getPdfjs":{"!doc":"<p>Checks if <span class=\"caps\">PDF</span>.js is available.</p>","!type":"fn(callback: fn(), context: Object)"}},"PhoneGap":{"!doc":"<p>The purpose of this class is to contain all checks for PhoneGap/Cordova.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getNotification":{"!doc":"<p>Checks if notifications can be displayed.</p>","!type":"fn() -> bool"},"getPhoneGap":{"!doc":"<p>Checks if PhoneGap/Cordova is available.</p>","!type":"fn() -> bool"}},"Plugin":{"!doc":"<p>Contains detection for QuickTime, Windows Media, DivX, Silverlight adn gears.\nIf no version could be detected the version is set to an empty string as\ndefault.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","__getVersion":{"!doc":"<p>Internal helper for getting the version of a given plugin.</p>","!type":"fn(activeXName: string, pluginNames: +Array) -> string"},"__isAvailable":{"!doc":"<p>Internal helper for getting the availability of a given plugin.</p>","!type":"fn(activeXName: string, pluginNames: +Array) -> bool"},"getActiveX":{"!doc":"<p>Checks for ActiveX availability.</p>","!type":"fn() -> bool"},"getDivX":{"!doc":"<p>Checks if the divx plugin is available.</p>","!type":"fn() -> bool"},"getDivXVersion":{"!doc":"<p>Fetches the version of the divx plugin.</p>","!type":"fn() -> string"},"getGears":{"!doc":"<p>Checkes for the availability of google gears plugin.</p>","!type":"fn() -> bool"},"getPdf":{"!doc":"<p>Checks if the pdf plugin is available.</p>\n\n<p>There are two built-in <span class=\"caps\">PDF</span> viewer shipped with browsers:</p>\n\n<ul>\n <li>Chrome PDF Viewer</li>\n <li>PDF.js (Firefox)</li>\n</ul>\n\n<p>While the Chrome <span class=\"caps\">PDF</span> Viewer is implemented as plugin and therefore\ndetected by this method <span class=\"caps\">PDF</span>.js is <strong>not</strong>.</p>\n\n<p>See the dedicated environment key (<em>plugin.pdfjs</em>) instead,\nwhich you might check additionally.</p>","!type":"fn() -> bool"},"getPdfVersion":{"!doc":"<p>Fetches the version of the pdf plugin.</p>\n\n<p>There are two built-in <span class=\"caps\">PDF</span> viewer shipped with browsers:</p>\n\n<ul>\n <li>Chrome PDF Viewer</li>\n <li>PDF.js (Firefox)</li>\n</ul>\n\n<p>While the Chrome <span class=\"caps\">PDF</span> Viewer is implemented as plugin and therefore\ndetected by this method <span class=\"caps\">PDF</span>.js is <strong>not</strong>.</p>\n\n<p>See the dedicated environment key (<em>plugin.pdfjs</em>) instead,\nwhich you might check additionally.</p>","!type":"fn() -> string"},"getQuicktime":{"!doc":"<p>Checks if the quicktime plugin is available.</p>","!type":"fn() -> bool"},"getQuicktimeVersion":{"!doc":"<p>Fetches the version of the quicktime plugin.</p>","!type":"fn() -> string"},"getSilverlight":{"!doc":"<p>Checks if the silverlight plugin is available.</p>","!type":"fn() -> bool"},"getSilverlightVersion":{"!doc":"<p>Fetches the version of the silverlight plugin.</p>","!type":"fn() -> string"},"getSkype":{"!doc":"<p>Checks for Skypes &#8216;Click to call&#8217; availability.</p>","!type":"fn() -> bool"},"getWindowsMedia":{"!doc":"<p>Checks if the windows media plugin is available.</p>","!type":"fn() -> bool"},"getWindowsMediaVersion":{"!doc":"<p>Fetches the version of the windows media plugin.</p>","!type":"fn() -> string"}},"Runtime":{"!doc":"<p>Basic runtime detection for qooxdoo.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getName":{"!doc":"<p>Checks for the name of the runtime and returns it. In general, it checks\nfor rhino and node.js and if that could not be detected, it falls back\nto the browser name defined by {@link qx.bom.client.Browser#getName}.</p>","!type":"fn() -> string"}},"Scroll":{"!doc":"<p>This class is responsible for checking the scrolling behavior of the client.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getNativeScroll":{"!doc":"<p>Checks if native scroll can be used for the current mobile device.</p>","!type":"fn() -> bool"},"scrollBarOverlayed":{"!doc":"<p>Check if the scrollbars should be positioned on top of the content. This\nis true of <span class=\"caps\">OSX</span> Lion when the scrollbars disappear automatically.</p>","!type":"fn() -> bool"}},"Stylesheet":{"!doc":"<p>Internal class which contains the checks used by {@link qx.core.Environment}.\nAll checks in here are marked as internal which means you should never use\nthem directly.</p>\n\n<p>This class contains checks related to Stylesheet objects.</p>","__getStylesheet":{"!doc":"<p>Returns a stylesheet to be used for feature checks</p>","!type":"fn() -> +Stylesheet"},"getAddImport":{"!doc":"<p>Decides whether to use the legacy IE-only stylesheet.addImport or the\n<span class=\"caps\">DOM</span>-standard stylesheet.insertRule(&#8217;@import [...]&#8217;)</p>","!type":"fn() -> bool"},"getCreateStyleSheet":{"!doc":"<p>Check for IE&#8217;s non-standard document.createStyleSheet function.\nIn IE9 (standards mode), the typeof check returns &#8220;function&#8221; so false is\nreturned. This is intended since IE9 supports the <span class=\"caps\">DOM</span>-standard\ncreateElement(&#8220;style&#8221;) which should be used instead.</p>","!type":"fn() -> bool"},"getDeleteRule":{"!doc":"<p>Check for stylesheet.deleteRule. Legacy IEs do not support this.</p>","!type":"fn() -> bool"},"getInsertRule":{"!doc":"<p>Check for stylesheet.insertRule. Legacy IEs do not support this.</p>","!type":"fn() -> bool"},"getRemoveImport":{"!doc":"<p>Decides whether to use the legacy IE-only stylesheet.removeImport or the\n<span class=\"caps\">DOM</span>-standard stylesheet.deleteRule(&#8217;@import [...]&#8217;)</p>","!type":"fn() -> bool"}},"Transport":{"!doc":"<p>Determines browser-dependent information about the transport layer.</p>\n\n<p>This class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it.</p>","getMaxConcurrentRequestCount":{"!doc":"<p>Returns the maximum number of parallel requests the current browser\nsupports per host addressed.</p>\n\n<p>Note that this assumes one connection can support one request at a time\nonly. Technically, this is not correct when pipelining is enabled (which\nit currently is only for IE 8 and Opera). In this case, the number\nreturned will be too low, as one connection supports multiple pipelined\nrequests. This is accepted for now because pipelining cannot be\ndetected from JavaScript and because modern browsers have enough\nparallel connections already &#8211; it&#8217;s unlikely an app will require more\nthan 4 parallel XMLHttpRequests to one server at a time.</p>","!type":"fn() -> +Integer"},"getSsl":{"!doc":"<p>Checks whether the app is loaded with <span class=\"caps\">SSL</span> enabled which means via https.</p>","!type":"fn() -> bool"},"getXmlHttpRequest":{"!doc":"<p>Checks what kind of XMLHttpRequest object the browser supports\nfor the current protocol, if any.</p>\n\n<p>The standard XMLHttpRequest is preferred over ActiveX <span class=\"caps\">XMLHTTP</span>.</p>","!type":"fn() -> string"}},"Xml":{"!doc":"<p>Internal class which contains the checks used by {@link qx.core.Environment}.\nAll checks in here are marked as internal which means you should never use\nthem directly.</p>\n\n<p>This class should contain all <span class=\"caps\">XML</span>-related checks</p>","getAttributeNS":{"!doc":"<p>Checks if the getAttributeNS and setAttributeNS methods are supported on\n<span class=\"caps\">XML</span> <span class=\"caps\">DOM</span> elements</p>","!type":"fn() -> bool"},"getCreateElementNS":{"!doc":"<p>Checks if the createElementNS method is supported on <span class=\"caps\">XML</span> <span class=\"caps\">DOM</span> documents</p>","!type":"fn() -> bool"},"getCreateNode":{"!doc":"<p>Checks if the proprietary createNode method is supported on <span class=\"caps\">XML</span> <span class=\"caps\">DOM</span>\ndocuments</p>","!type":"fn() -> bool"},"getDomParser":{"!doc":"<p>Checks if an <span class=\"caps\">XML</span> DOMParser is available</p>","!type":"fn() -> bool"},"getDomProperties":{"!doc":"<p>Checks if <span class=\"caps\">MSXML</span>-style <span class=\"caps\">DOM</span> Level 2 properties are supported.</p>","!type":"fn() -> bool"},"getElementsByTagNameNS":{"!doc":"<p>Checks availablity of the getElementsByTagNameNS <span class=\"caps\">XML</span> <span class=\"caps\">DOM</span> method.</p>","!type":"fn() -> bool"},"getImplementation":{"!doc":"<p>Checks if <span class=\"caps\">XML</span> is supported</p>","!type":"fn() -> bool"},"getQualifiedItem":{"!doc":"<p>Checks if the proprietary getQualifiedItem method is supported for <span class=\"caps\">XML</span>\nelement attributes</p>","!type":"fn() -> bool"},"getSelectNodes":{"!doc":"<p>Checks if the proprietary selectNodes method is available on <span class=\"caps\">XML</span> <span class=\"caps\">DOM</span>\nnodes.</p>","!type":"fn() -> bool"},"getSelectSingleNode":{"!doc":"<p>Checks if the proprietary selectSingleNode method is available on <span class=\"caps\">XML</span> <span class=\"caps\">DOM</span>\nnodes.</p>","!type":"fn() -> bool"}}},"Cookie":{"!doc":"<p>A wrapper for Cookie handling.</p>","del":{"!doc":"<p>Deletes the string value of a cookie.</p>","!type":"fn(key: string, path?: string, domain?: string)"},"get":{"!doc":"<p>Returns the string value of a cookie.</p>","!type":"fn(key: string) -> +null"},"set":{"!doc":"<p>Sets the string value of a cookie.</p>","!type":"fn(key: string, value: string, expires?: number, path?: string, domain?: string, secure?: bool)"}},"Document":{"!doc":"<p>Includes library functions to work with the current document.</p>","getHeight":{"!doc":"<p>Returns the height of the document.</p>\n\n<p>Internet Explorer in standard mode stores the proprietary <code>scrollHeight</code> property\non the <code>documentElement</code>, but in quirks mode on the body element. All\nother known browsers simply store the correct value on the <code>documentElement</code>.</p>\n\n<p>If the viewport is higher than the document the viewport height is returned.</p>\n\n<p>As the html element has no visual appearance it also can not scroll. This\nmeans that we must use the body <code>scrollHeight</code> in all non mshtml clients.</p>\n\n<p>Verified to correctly work with:</p>\n\n<ul>\n<li>Mozilla Firefox 2.0.0.4</li>\n<li>Opera 9.2.1</li>\n<li>Safari 3.0 beta (3.0.2)</li>\n<li>Internet Explorer 7.0</li>\n</ul>","!type":"fn(win?: +Window) -> +Integer"},"getWidth":{"!doc":"<p>Returns the width of the document.</p>\n\n<p>Internet Explorer in standard mode stores the proprietary <code>scrollWidth</code> property\non the <code>documentElement</code>, but in quirks mode on the body element. All\nother known browsers simply store the correct value on the <code>documentElement</code>.</p>\n\n<p>If the viewport is wider than the document the viewport width is returned.</p>\n\n<p>As the html element has no visual appearance it also can not scroll. This\nmeans that we must use the body <code>scrollWidth</code> in all non mshtml clients.</p>\n\n<p>Verified to correctly work with:</p>\n\n<ul>\n<li>Mozilla Firefox 2.0.0.4</li>\n<li>Opera 9.2.1</li>\n<li>Safari 3.0 beta (3.0.2)</li>\n<li>Internet Explorer 7.0</li>\n</ul>","!type":"fn(win?: +Window) -> +Integer"},"isQuirksMode":{"!doc":"<p>Whether the document is in quirks mode (e.g. non <span class=\"caps\">XHTML</span>, HTML4 Strict or missing doctype)</p>","!type":"fn(win?: +Window) -> bool"},"isStandardMode":{"!doc":"<p>Whether the document is in standard mode (e.g. <span class=\"caps\">XHTML</span>, HTML4 Strict or doctype defined)</p>","!type":"fn(win?: +Window) -> bool"}},"element":{"Animation":{"!doc":"<p>Wrapper for {@link qx.bom.element.AnimationCss} and\n{@link qx.bom.element.AnimationJs}. It offers the pubilc <span class=\"caps\">API</span> and decides using\nfeature checks either to use <span class=\"caps\">CSS</span> animations or JS animations.</p>\n\n<p>If you use this class, the restrictions of the JavaScript animations apply.\nThis means that you can not use transforms and custom bezier timing functions.</p>","__hasOnlyCssKeys":{"!doc":"<p>Detection helper which detects if only <span class=\"caps\">CSS</span> keys are in\nthe animations key frames.</p>","!type":"fn(el: +Element, keyFrames: +Map) -> bool"},"animate":{"!doc":"<p>This function takes care of the feature check and starts the animation.\nIt takes a <span class=\"caps\">DOM</span> element to apply the animation to, and a description.\nThe description should be a map, which could look like this:</p>\n\n<pre class=\"javascript\">\n{\n  \"duration\": 1000,\n  \"keep\": 100,\n  \"keyFrames\": {\n    0 : {\"opacity\": 1, \"scale\": 1},\n    100 : {\"opacity\": 0, \"scale\": 0}\n  },\n  \"origin\": \"50% 50%\",\n  \"repeat\": 1,\n  \"timing\": \"ease-out\",\n  \"alternate\": false,\n  \"delay\" : 2000\n}\n</pre>\n\n<p><strong>duration</strong> is the time in milliseconds one animation cycle should take.</p>\n\n<p><strong>keep</strong> is the key frame to apply at the end of the animation. (optional)\n  Keep in mind that the keep key is reversed in case you use an reverse\n  animation or set the alternate key and a even repeat count.</p>\n\n<p><strong>keyFrames</strong> is a map of separate frames. Each frame is defined by a\n  number which is the percentage value of time in the animation. The value\n  is a map itself which holds css properties or transforms\n  {@link qx.bom.element.Transform} (Transforms only for <span class=\"caps\">CSS</span> Animations).</p>\n\n<p><strong>origin</strong> maps to the transform origin {@link qx.bom.element.Transform#setOrigin}\n  (Only for <span class=\"caps\">CSS</span> animations).</p>\n\n<p><strong>repeat</strong> is the amount of time the animation should be run in\n  sequence. You can also use &#8220;infinite&#8221;.</p>\n\n<p><strong>timing</strong> takes one of the predefined value:\n  <code>ease</code> | <code>linear</code> | <code>ease-in</code>\n  | <code>ease-out</code> | <code>ease-in-out</code> |\n  <code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n  (cubic-bezier only available for <span class=\"caps\">CSS</span> animations)</p>\n\n<p><strong>alternate</strong> defines if every other animation should be run in reverse order.</p>\n\n<p><strong>delay</strong> is the time in milliseconds the animation should wait before start.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer) -> +qx.bom.element.AnimationHandle"},"animateReverse":{"!doc":"<p>Starts an animation in reversed order. For further details, take a look at\nthe {@link #animate} method.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer) -> +qx.bom.element.AnimationHandle"}},"AnimationCss":{"!doc":"<p>This class is responsible for applying CSS3 animations to plain <span class=\"caps\">DOM</span> elements.</p>\n\n<p>The implementation is mostly a cross-browser wrapper for applying the\nanimations, including transforms. If the browser does not support\n<span class=\"caps\">CSS</span> animations, but you have set a keep frame, the keep frame will be applied\nimmediately, thus making the animations optional.</p>\n\n<p>The <span class=\"caps\">API</span> aligns closely to the spec wherever possible.</p>\n\n<p><a href=\"http://www.w3.org/TR/css3-animations/\">http://www.w3.org/TR/css3-animations/</a></p>\n\n<p>{@link qx.bom.element.Animation} is the class, which takes care of the\nfeature detection for <span class=\"caps\">CSS</span> animations and decides which implementation\n(CSS or JavaScript) should be used. Most likely, this implementation should\nbe the one to use.</p>","__addKeyFrames":{"!doc":"<p>Helper to add the given frames to an internal <span class=\"caps\">CSS</span> stylesheet. It parses\nthe description and adds the key frames to the sheet.</p>","!type":"fn(frames: +Map, reverse: bool) -> string"},"__keepFrame":{"!doc":"<p>Helper method which takes an element and a key frame description and\napplies the properties defined in the given frame to the element. This\nmethod is used to keep the state of the animation.</p>","!type":"fn(el: +Element, endFrame: +Map)"},"__normalizeDesc":{"!doc":"<p>Preprocessing of the description to make sure every necessary key is\nset to its default.</p>","!type":"fn(desc: +Map)"},"__onAnimationEnd":{"!doc":"<p>Handler for the animation end.</p>","!type":"fn(e: +Event)"},"__onAnimationIteration":{"!doc":"<p>Handler for the animation iteration.</p>","!type":"fn(e: +Event)"},"__onAnimationStart":{"!doc":"<p>Handler for the animation start.</p>","!type":"fn(e: +Event)"},"__validateDesc":{"!doc":"<p>Debugging helper to validate the description.</p>","!type":"fn(desc: +Map)"},"_animate":{"!doc":"<p>Internal method to start an animation either reverse or not.\n{@link qx.bom.element.Animation}.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer, reverse: bool) -> +qx.bom.element.AnimationHandle"},"animate":{"!doc":"<p>This is the main function to start the animation. For further details,\ntake a look at the documentation of the wrapper\n{@link qx.bom.element.Animation}.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer) -> +qx.bom.element.AnimationHandle"},"animateReverse":{"!doc":"<p>This is the main function to start the animation in reverse mode.\nFor further details, take a look at the documentation of the wrapper\n{@link qx.bom.element.Animation}.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer) -> +qx.bom.element.AnimationHandle"}},"AnimationHandle":{"!proto":"qx.event.Emitter","!doc":"<p>This is a simple handle, which will be returned when an animation is\nstarted using the {@link qx.bom.element.Animation#animate} method. It\nbasically controls the animation.</p>","!type":"fn()","prototype":{"isEnded":{"!doc":"<p>Accessor of the ended state.</p>","!type":"fn() -> bool"},"isPaused":{"!doc":"<p>Accessor of the paused state.</p>","!type":"fn() -> bool"},"isPlaying":{"!doc":"<p>Accessor of the playing state.</p>","!type":"fn() -> bool"},"pause":{"!doc":"<p>Pauses the animation, if running. If not running, it will be ignored.</p>","!type":"fn()"},"play":{"!doc":"<p>Resumes an animation. This does not start the animation once it has ended.\nIn this case you need to start a new Animation.</p>","!type":"fn()"},"stop":{"!doc":"<p>Stops the animation if running.</p>","!type":"fn()"}}},"AnimationJs":{"!doc":"<p>This class offers the same <span class=\"caps\">API</span> as the CSS3 animation layer in\n{@link qx.bom.element.AnimationCss} but uses JavaScript to fake the behavior.</p>\n\n<p>{@link qx.bom.element.Animation} is the class, which takes care of the\nfeature detection for <span class=\"caps\">CSS</span> animations and decides which implementation\n(CSS or JavaScript) should be used. Most likely, this implementation should\nbe the one to use.</p>","__applyRepeat":{"!doc":"<p>Takes care of the repeat key of the description.</p>","!type":"fn(steps: +Integer, repeat: +Integer) -> +Integer"},"__applyStyles":{"!doc":"<p>Central method to apply css styles and element properties.</p>","!type":"fn(el: +Element, styles: +Map)"},"__calculateDelta":{"!doc":"<p>Precalculation of the delta which will be applied during the animation.\nThe whole deltas will be calculated prior to the animation and stored\nin a single array. This method takes care of that calculation.</p>","!type":"fn(steps: +Integer, stepTime: +Integer, keys: +Array, keyFrames: +Map, duration: +Integer, timing: string) -> +Array"},"__getNextValue":{"!doc":"<p>Returns the next value based on the given arguments.</p>","!type":"fn(nextItem: string, lastItem: string, timing: string, x: number) -> string"},"__getOrderedKeys":{"!doc":"<p>Helper which returns the orderd keys of the key frame map.</p>","!type":"fn(keyFrames: +Map) -> +Array"},"__getStepTime":{"!doc":"<p>Dynamic calculation of the steps time considering a max step time.</p>","!type":"fn(duration: number, keys: +Array) -> +Integer"},"__getUnit":{"!doc":"<p>Ties to parse out the unit of the given value.</p>","!type":"fn(item: string) -> string"},"__normalizeKeyFrames":{"!doc":"<p>Try to normalize the keyFrames by adding the default / set values of the\nelement.</p>","!type":"fn(keyFrames: +Map, el: +Element)"},"__normalizeKeyFrameTransforms":{"!doc":"<p>Checks for transform keys and returns a cloned frame\nwith the right transform style set.</p>","!type":"fn(frame: +Map) -> +Map"},"_animate":{"!doc":"<p>Helper to start the animation, either in reversed order or not.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer, reverse: bool) -> +qx.bom.element.AnimationHandle"},"animate":{"!doc":"<p>This is the main function to start the animation. For further details,\ntake a look at the documentation of the wrapper\n{@link qx.bom.element.Animation}.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer) -> +qx.bom.element.AnimationHandle"},"animateReverse":{"!doc":"<p>This is the main function to start the animation in reversed mode.\nFor further details, take a look at the documentation of the wrapper\n{@link qx.bom.element.Animation}.</p>","!type":"fn(el: +Element, desc: +Map, duration?: +Integer) -> +qx.bom.element.AnimationHandle"},"pause":{"!doc":"<p>Internal helper for the {@link qx.bom.element.AnimationHandle} to pause\nthe animation.</p>","!type":"fn(handle: +qx.bom.element.AnimationHandle) -> +qx.bom.element.AnimationHandle"},"play":{"!doc":"<p>Internal helper for the {@link qx.bom.element.AnimationHandle} to play\nthe animation.</p>","!type":"fn(handle: +qx.bom.element.AnimationHandle) -> +qx.bom.element.AnimationHandle"},"stop":{"!doc":"<p>Internal helper for the {@link qx.bom.element.AnimationHandle} to stop\nthe animation.</p>","!type":"fn(handle: +qx.bom.element.AnimationHandle) -> +qx.bom.element.AnimationHandle"}},"Attribute":{"!doc":"<p>Attribute/Property handling for <span class=\"caps\">DOM</span> <span class=\"caps\">HTML</span> elements.</p>\n\n<p>Also includes support for <span class=\"caps\">HTML</span> properties like <code>checked</code>\nor <code>value</code>. This feature set is supported cross-browser\nthrough one common interface and is independent of the differences between\nthe multiple implementations.</p>\n\n<p>Supports applying text and <span class=\"caps\">HTML</span> content using the attribute names\n<code>text</code> and <code>html</code>.</p>","compile":{"!doc":"<p>Compiles an incoming attribute map to a string which\ncould be used when building <span class=\"caps\">HTML</span> blocks using innerHTML.</p>\n\n<p>This method silently ignores runtime attributes like\n<code>html</code> or <code>text</code>.</p>","!type":"fn(map: +Map) -> string"},"get":{"!doc":"<p>Returns the value of the given <span class=\"caps\">HTML</span> attribute</p>","!type":"fn(element: +Element, name: string) -> Object"},"reset":{"!doc":"<p>Resets an <span class=\"caps\">HTML</span> attribute on the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element, name: string)"},"set":{"!doc":"<p>Sets an <span class=\"caps\">HTML</span> attribute on the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element, name: string, value: Object)"}},"Background":{"!doc":"<p>The background class contains methods to compute and set the background image\nof a <span class=\"caps\">DOM</span> element.</p>\n\n<p>It fixes a background position issue in Firefox 2.</p>","__computePosition":{"!doc":"<p>Computes the background position <span class=\"caps\">CSS</span> value</p>","!type":"fn(left: +Integer, top: +Integer) -> string"},"__isBase64EncodedImage":{"!doc":"<p>Checks if the given image <span class=\"caps\">URL</span> is a base64-encoded one.</p>","!type":"fn(url: string) -> bool"},"compile":{"!doc":"<p>Compiles the background into a <span class=\"caps\">CSS</span> compatible string.</p>","!type":"fn(source?: string, repeat?: string, left?: +Integer, top?: +Integer) -> string"},"getStyles":{"!doc":"<p>Get standard css background styles</p>","!type":"fn(source: string, repeat?: string, left?: +Integer, top?: +Integer) -> +Map"},"set":{"!doc":"<p>Set the background on the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element, source?: string, repeat?: string, left?: +Integer, top?: +Integer)"}},"BoxSizing":{"!doc":"<p>Contains methods to control and query the element&#8217;s box-sizing property.</p>\n\n<p>Supported values:</p>\n\n<ul>\n<li>&#8220;content-box&#8221; = W3C model (dimensions are content specific)</li>\n<li>&#8220;border-box&#8221; = Microsoft model (dimensions are box specific incl. border and padding)</li>\n</ul>","__usesNativeBorderBox":{"!doc":"<p>Whether the given elements defaults to the &#8220;border-box&#8221; Microsoft model in all cases.</p>","!type":"fn(element: +Element) -> bool"},"compile":{"!doc":"<p>Compiles the given box sizing into a <span class=\"caps\">CSS</span> compatible string.</p>","!type":"fn(value: string) -> string"},"get":{"!doc":"<p>Returns the box sizing for the given element.</p>","!type":"fn(element: +Element) -> string"},"reset":{"!doc":"<p>Removes the local box sizing applied to the element</p>","!type":"fn(element: +Element)"},"set":{"!doc":"<p>Applies a new box sizing to the given element</p>","!type":"fn(element: +Element, value: string)"}},"Class":{"!doc":"<p><span class=\"caps\">CSS</span> class name support for <span class=\"caps\">HTML</span> elements. Supports multiple class names\nfor each element. Can query and apply class names to <span class=\"caps\">HTML</span> elements.</p>","add":{"!doc":"<p>Adds a className to the given element\nIf successfully added the given className will be returned</p>","!type":"fn(element: +Element, name: string) -> string"},"addClasses":{"!doc":"<p>Adds multiple classes to the given element</p>","!type":"fn(element: +Element, classes: string) -> string"},"get":{"!doc":"<p>Gets the classname of the given element</p>","!type":"fn(element: +Element) -> string"},"has":{"!doc":"<p>Whether the given element has the given className.</p>","!type":"fn(element: +Element, name: string) -> bool"},"remove":{"!doc":"<p>Removes a className from the given element</p>","!type":"fn(element: +Element, name: string) -> string"},"removeClasses":{"!doc":"<p>Removes multiple classes from the given element</p>","!type":"fn(element: +Element, classes: string) -> string"},"replace":{"!doc":"<p>Replaces the first given class name with the second one</p>","!type":"fn(element: +Element, oldName: string, newName: string) -> string"},"toggle":{"!doc":"<p>Toggles a className of the given element</p>","!type":"fn(element: +Element, name: string, toggle?: bool) -> string"}},"Clip":{"!doc":"<p>Contains methods to control and query the element&#8217;s clip property</p>","compile":{"!doc":"<p>Compiles the given clipping into a <span class=\"caps\">CSS</span> compatible string. This\nis a simple square which describes the visible area of an <span class=\"caps\">DOM</span> element.\nChanging the clipping does not change the dimensions of\nan element.</p>","!type":"fn(map: +Map) -> string"},"get":{"!doc":"<p>Gets the clipping of the given element.</p>","!type":"fn(element: +Element, mode: number) -> +Map"},"reset":{"!doc":"<p>Resets the clipping of the given <span class=\"caps\">DOM</span> element.</p>","!type":"fn(element: +Element)"},"set":{"!doc":"<p>Sets the clipping of the given element. This is a simple\nsquare which describes the visible area of an <span class=\"caps\">DOM</span> element.\nChanging the clipping does not change the dimensions of\nan element.</p>","!type":"fn(element: +Element, map: +Map)"}},"Cursor":{"!doc":"<p>Contains methods to control and query the element&#8217;s cursor property</p>","compile":{"!doc":"<p>Compiles the given cursor into a <span class=\"caps\">CSS</span> compatible string.</p>","!type":"fn(cursor: string) -> string"},"get":{"!doc":"<p>Returns the computed cursor style for the given element.</p>","!type":"fn(element: +Element, mode: number) -> string"},"reset":{"!doc":"<p>Removes the local cursor style applied to the element</p>","!type":"fn(element: +Element)"},"set":{"!doc":"<p>Applies a new cursor style to the given element</p>","!type":"fn(element: +Element, value: string)"}},"Dataset":{"!doc":"<p>Data-* attribute handling for <span class=\"caps\">DOM</span> <span class=\"caps\">HTML</span> elements.</p>\n\n<p>This feature set is supported cross-browser\nthrough one common interface and is independent of the differences between\nthe multiple implementations.</p>","get":{"!doc":"<p>Returns the value of the given <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute</p>","!type":"fn(element: +Element, name: string) -> Object"},"getAll":{"!doc":"<p>Returns a map containing all the <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attributes of the specified element</p>","!type":"fn(element: +Element) -> +Map"},"remove":{"!doc":"<p>Remove an <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute from the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element, name: string)"},"set":{"!doc":"<p>Sets a data attribute on the given <span class=\"caps\">DOM</span> element.</p>","!type":"fn(element: +Element, name: string, value: Object)"}},"Decoration":{"!doc":"<p>Powerful creation and update features for images used for decoration\npurposes like for rounded borders, icons, etc.</p>\n\n<p>Includes support for image clipping, <span class=\"caps\">PNG</span> alpha channel support, additional\nrepeat options like <code>scale-x</code> or <code>scale-y</code>.</p>","__checkForPotentialClippedImage":{"!doc":"<p>Output a warning if the image can be clipped.</p>","!type":"fn(source: string)"},"__getDimension":{"!doc":"<p>Returns the dimension of the image by calling\n{@link qx.util.ResourceManager} or {@link qx.io.ImageLoader}\ndepending on if the image is a managed one.</p>","!type":"fn(source: string) -> +Map"},"__getStylesForClippedScaleX":{"!doc":"<p>Generates the style infos for horizontally scaled clipped images.</p>","!type":"fn(style: +Map, data: +Array, height: +Integer) -> +Map"},"__getStylesForClippedScaleY":{"!doc":"<p>Generates the style infos for vertically scaled clipped images.</p>","!type":"fn(style: +Map, data: +Array, width: +Integer) -> +Map"},"__getStylesForSingleRepeat":{"!doc":"<p>Generate all style infos for single repeated images</p>","!type":"fn(style: +Map, source: string, repeat: string)"},"__normalizeWidthHeight":{"!doc":"<p>Normalize the given width and height values</p>","!type":"fn(style: +Map, width?: +Integer, height?: +Integer)"},"__processRepeats":{"!doc":"<p>Process repeated images.</p>","!type":"fn(style: +Map, repeat: string, sourceid: string) -> +Map"},"__processScale":{"!doc":"<p>Process scaled images.</p>","!type":"fn(style: +Map, repeat: string, source: string) -> +Map"},"__processScaleXScaleY":{"!doc":"<p>Process images which are either scaled horizontally or\nvertically.</p>","!type":"fn(style: +Map, repeat: string, sourceid: string) -> +Map"},"create":{"!doc":"<p>Creates the <span class=\"caps\">HTML</span> for a decorator image element with the given options.</p>","!type":"fn(source: string, repeat: string, style: +Map) -> string"},"getAttributes":{"!doc":"<p>This method is used to collect all needed attributes for\nthe tag name detected by {@link #getTagName}.</p>","!type":"fn(source: string, repeat: string, style: +Map) -> string"},"getTagName":{"!doc":"<p>Translates the given repeat option to a tag name. Useful\nfor systems which depends on early information of the tag\nname to prepare element like {@link qx.html.Image}.</p>","!type":"fn(repeat: string, source?: string) -> string"},"processAlphaFix":{"!doc":"<p>Get all styles for IE browser which need to load the image\nwith the help of the AlphaImageLoader</p>","!type":"fn(style: +Map, repeat: string, source: string) -> +Map"},"update":{"!doc":"<p>Updates the element to display the given source\nwith the repeat option.</p>","!type":"fn(element: +Element, source: string, repeat: string, style: +Map)"}},"Dimension":{"!doc":"<p>Contains support for calculating dimensions of <span class=\"caps\">HTML</span> elements.</p>\n\n<p>We differ between the box (or border) size which is available via\n{@link #getWidth} and {@link #getHeight} and the content or scroll\nsizes which are available via {@link #getContentWidth} and\n{@link #getContentHeight}.</p>","getContentHeight":{"!doc":"<p>Returns the content height.</p>\n\n<p>The content height is basically the maximum\nheight used or the maximum height which can be used by the content. This\nexcludes all kind of styles of the element like borders, paddings, margins,\nand even scrollbars.</p>\n\n<p>Please note that with visible scrollbars the content height returned\nmay be larger than the box height returned via {@link #getHeight}.</p>","!type":"fn(element: +Element) -> +Integer"},"getContentSize":{"!doc":"<p>Returns the rendered content size of the given element.</p>","!type":"fn(element: +Element) -> +Map"},"getContentWidth":{"!doc":"<p>Returns the content width.</p>\n\n<p>The content width is basically the maximum\nwidth used or the maximum width which can be used by the content. This\nexcludes all kind of styles of the element like borders, paddings, margins,\nand even scrollbars.</p>\n\n<p>Please note that with visible scrollbars the content width returned\nmay be larger than the box width returned via {@link #getWidth}.</p>","!type":"fn(element: +Element) -> +Integer"},"getHeight":{"!doc":"<p>Returns the rendered height of the given element.</p>\n\n<p>This is the visible height of the object, which need not to be identical\nto the height configured via <span class=\"caps\">CSS</span>. This highly depends on the current\nbox-sizing for the document and maybe even for the element.</p>","!type":"fn(element: +Element) -> +Integer"},"getSize":{"!doc":"<p>Returns the rendered size of the given element.</p>","!type":"fn(element: +Element) -> +Map"},"getWidth":{"!doc":"<p>Returns the rendered width of the given element.</p>\n\n<p>This is the visible width of the object, which need not to be identical\nto the width configured via <span class=\"caps\">CSS</span>. This highly depends on the current\nbox-sizing for the document and maybe even for the element.</p>","!type":"fn(element: +Element) -> +Integer"}},"Location":{"!doc":"<p>Query the location of an arbitrary <span class=\"caps\">DOM</span> element in relation to its top\nlevel body element. Works in all major browsers:</p>\n\n<ul>\n<li>Mozilla 1.5 + 2.0</li>\n<li>Internet Explorer 6.0 + 7.0 (both standard &amp; quirks mode)</li>\n<li>Opera 9.2</li>\n<li>Safari 3.0 beta</li>\n</ul>","__computeOffset":{"!doc":"<p>Computes the sum of all offsets of the given element node.</p>","!type":"fn(elem: +Element) -> +Map"},"__computeScroll":{"!doc":"<p>Computes the scroll offset of the given element relative to the document\n<code>body</code>.</p>","!type":"fn(elem: +Element) -> +Map"},"__getBodyLocation":{"!doc":"<p>Get the location of the body element relative to the document.</p>","!type":"fn(body: +Element) -> +Map"},"__num":{"!doc":"<p>Queries a style property for the given element and parses it to an integer value</p>","!type":"fn(elem: +Element, style: string) -> +Integer"},"__style":{"!doc":"<p>Queries a style property for the given element</p>","!type":"fn(elem: +Element, style: string) -> string"},"get":{"!doc":"<p>Computes the location of the given element in context of\nthe document dimensions.</p>\n\n<p>Supported modes:</p>\n\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).</li>\n</ul>","!type":"fn(elem: +Element, mode?: string) -> +Map"},"getBottom":{"!doc":"<p>Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method.</p>","!type":"fn(elem: +Element, mode: string) -> +Integer"},"getLeft":{"!doc":"<p>Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method.</p>","!type":"fn(elem: +Element, mode: string) -> +Integer"},"getOffsetParent":{"!doc":"<p>Detects the offset parent of the given element</p>","!type":"fn(element: +Element) -> +Element"},"getPosition":{"!doc":"<p>Returns the distance between the given element to its offset parent.</p>","!type":"fn(elem: +Element) -> +Map"},"getRelative":{"!doc":"<p>Returns the distance between two <span class=\"caps\">DOM</span> elements. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method.</p>","!type":"fn(elem1: +Element, elem2: +Element, mode1?: string, mode2?: string) -> +Map"},"getRight":{"!doc":"<p>Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method.</p>","!type":"fn(elem: +Element, mode: string) -> +Integer"},"getTop":{"!doc":"<p>Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method.</p>","!type":"fn(elem: +Element, mode: string) -> +Integer"}},"Opacity":{"!doc":"<p>Cross-browser opacity support.</p>\n\n<p>Optimized for animations (contains workarounds for typical flickering\nin some browsers). Reduced class dependencies for optimal size and\nperformance.</p>","compile":{"!doc":"<p>Compiles the given opacity value into a cross-browser <span class=\"caps\">CSS</span> string.\nAccepts numbers between zero and one\nwhere &#8220;0&#8221; means transparent, &#8220;1&#8221; means opaque.</p>","!type":"fn(opacity: +Float) -> string"},"get":{"!doc":"<p>Gets computed opacity of given element. Accepts numbers between zero and one\nwhere &#8220;0&#8221; means transparent, &#8220;1&#8221; means opaque.</p>","!type":"fn(element: +Element, mode: number) -> +Float"},"reset":{"!doc":"<p>Resets opacity of given element.</p>","!type":"fn(element: +Element)"},"set":{"!doc":"<p>Sets opacity of given element. Accepts numbers between zero and one\nwhere &#8220;0&#8221; means transparent, &#8220;1&#8221; means opaque.</p>","!type":"fn(element: +Element, opacity: +Float)"}},"Scroll":{"!doc":"<p>Contains methods to control and query the element&#8217;s scroll properties</p>","getScrollbarWidth":{"!doc":"<p>Get the typical native scrollbar size in the environment</p>","!type":"fn() -> number"},"intoView":{"!doc":"<p>The method scrolls the element into view.</p>","!type":"fn(element: +Element, stop?: +Element, alignX: string, alignY: string)"},"intoViewX":{"!doc":"<p>The method scrolls the element into view (x-axis only).</p>","!type":"fn(element: +Element, stop?: +Element, align?: string)"},"intoViewY":{"!doc":"<p>The method scrolls the element into view (y-axis only).</p>","!type":"fn(element: +Element, stop?: +Element, align?: string)"}},"Style":{"!doc":"<p>Style querying and modification of <span class=\"caps\">HTML</span> elements.</p>\n\n<p>Automatically normalizes cross-browser differences for setting and reading\n<span class=\"caps\">CSS</span> attributes. Optimized for performance.</p>","__detectVendorProperties":{"!doc":"<p>Detect vendor specific properties.</p>","!type":"fn()"},"__getStyleName":{"!doc":"<p>Gets the (possibly vendor-prefixed) name of a style property and stores\nit to avoid multiple checks.</p>","!type":"fn(name: string) -> string"},"compile":{"!doc":"<p>Compiles the given styles into a string which can be used to\nconcat a <span class=\"caps\">HTML</span> string for innerHTML usage.</p>","!type":"fn(map: +Map) -> string"},"get":{"!doc":"<p>Gets the value of a style property.</p>\n\n<p><strong>Computed</strong></p>\n\n<p>Returns the computed value of a style property. Compared to the cascaded style,\nthis one also interprets the values e.g. translates <code>em</code> units to\n<code>px</code>.</p>\n\n<p><strong>Cascaded</strong></p>\n\n<p>Returns the cascaded value of a style property.</p>\n\n<p><strong>Local</strong></p>\n\n<p>Ignores inheritance cascade. Does not interpret values.</p>","!type":"fn(element: +Element, name: string, mode: number, smart?: bool) -> Object"},"getCss":{"!doc":"<p>Returns the full content of the style attribute.</p>","!type":"fn(element: +Element) -> string"},"isPropertySupported":{"!doc":"<p>Checks whether the browser supports the given <span class=\"caps\">CSS</span> property.</p>","!type":"fn(propertyName: string) -> bool"},"reset":{"!doc":"<p>Resets the value of a style property</p>","!type":"fn(element: +Element, name: string, smart?: bool)"},"set":{"!doc":"<p>Sets the value of a style property</p>","!type":"fn(element: +Element, name: string, value: Object, smart?: bool)"},"setCss":{"!doc":"<p>Set the full <span class=\"caps\">CSS</span> content of the style attribute</p>","!type":"fn(element: +Element, value: string)"},"setStyles":{"!doc":"<p>Convenience method to modify a set of styles at once.</p>","!type":"fn(element: +Element, styles: +Map, smart?: bool)"}},"Transform":{"!doc":"<p>This class is responsible for applying CSS3 transforms to plain <span class=\"caps\">DOM</span> elements.\nThe implementation is mostly a cross browser wrapper for applying the\ntransforms.\nThe <span class=\"caps\">API</span> is keep to the spec as close as possible.</p>\n\n<p><a href=\"http://www.w3.org/TR/css3-3d-transforms/\">http://www.w3.org/TR/css3-3d-transforms/</a></p>","__mapToCss":{"!doc":"<p>Internal helper which converts the given transforms map to a valid <span class=\"caps\">CSS</span>\nstring.</p>","!type":"fn(transforms: +Map) -> string"},"getBackfaceVisibility":{"!doc":"<p>Returns the backface-visibility property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>","!type":"fn(el: +Element) -> bool"},"getCss":{"!doc":"<p>Converts the given map to a string which could be added to a css\nstylesheet.</p>","!type":"fn(transforms: +Map) -> string"},"getOrigin":{"!doc":"<p>Returns the transform-origin property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</a></p>","!type":"fn(el: +Element) -> string"},"getPerspective":{"!doc":"<p>Returns the perspective property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-property</a></p>","!type":"fn(el: +Element) -> string"},"getPerspectiveOrigin":{"!doc":"<p>Returns the perspective-origin property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</a></p>","!type":"fn(el: +Element) -> string"},"getStyle":{"!doc":"<p>Returns the transform-style property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</a></p>","!type":"fn(el: +Element) -> string"},"rotate":{"!doc":"<p>Rotates the given element by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(el: +Element, value: string)"},"scale":{"!doc":"<p>Scales the given element by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(el: +Element, value: number)"},"setBackfaceVisibility":{"!doc":"<p>Sets the backface-visibility property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>","!type":"fn(el: +Element, value: bool)"},"setOrigin":{"!doc":"<p>Sets the transform-origin property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</a></p>","!type":"fn(el: +Element, value: string)"},"setPerspective":{"!doc":"<p>Sets the perspective property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-property</a></p>","!type":"fn(el: +Element, value: number)"},"setPerspectiveOrigin":{"!doc":"<p>Sets the perspective-origin property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</a></p>","!type":"fn(el: +Element, value: string)"},"setStyle":{"!doc":"<p>Sets the transform-style property of the given element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</a></p>","!type":"fn(el: +Element, value: string)"},"skew":{"!doc":"<p>Skews the given element by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(el: +Element, value: string)"},"transform":{"!doc":"<p>Method to apply multiple transforms at once to the given element. It\ntakes a map containing the transforms you want to apply plus the values\ne.g.<code>{scale: 2, rotate: &#8220;5deg&#8221;}</code>.\nThe values can be either singular, which means a single value will\nbe added to the <span class=\"caps\">CSS</span>. If you give an array, the values will be split up\nand each array entry will be used for the X, Y or Z dimension in that\norder e.g. <code>{scale: [2, 0.5]}</code> will result in a element\ndouble the size in X direction and half the size in Y direction.\nMake sure your browser supports all transformations you apply.</p>","!type":"fn(el: +Element, transforms: +Map)"},"translate":{"!doc":"<p>Translates the given element by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(el: +Element, value: string)"}}},"Element":{"!doc":"<p>This class is mainly a convenience wrapper for <span class=\"caps\">DOM</span> elements to\nqooxdoo&#8217;s event system.</p>","activate":{"!doc":"<p>Activates the given element. The active element receives all key board events.</p>","!type":"fn(element: +Element)"},"addListener":{"!doc":"<p>Add an event listener to a <span class=\"caps\">DOM</span> element. The event listener is passed an\ninstance of {@link Event} containing all relevant information\nabout the event as parameter.</p>","!type":"fn(element: +Element, type: string, listener: fn(), self?: Object, capture: bool) -> string"},"blur":{"!doc":"<p>Blurs the given element</p>","!type":"fn(element: +Element)"},"capture":{"!doc":"<p>Captures the given element</p>","!type":"fn(element: +Element, containerCapture?: bool)"},"clone":{"!doc":"<p>Clone given <span class=\"caps\">DOM</span> element. May optionally clone all attached\nevents (recursively) as well.</p>","!type":"fn(element: +Element, events?: bool) -> +Element"},"deactivate":{"!doc":"<p>Deactivates the given element. The active element receives all key board events.</p>","!type":"fn(element: +Element)"},"focus":{"!doc":"<p>Focuses the given element. The element needs to have a positive <code>tabIndex</code> value.</p>","!type":"fn(element: +Element)"},"hasListener":{"!doc":"<p>Check whether there are one or more listeners for an event type\nregistered at the element.</p>","!type":"fn(element: +Element, type: string, capture?: bool) -> bool"},"releaseCapture":{"!doc":"<p>Releases the given element (from a previous {@link #capture} call)</p>","!type":"fn(element: +Element)"},"removeListener":{"!doc":"<p>Remove an event listener from a from <span class=\"caps\">DOM</span> node.</p>\n\n<p>Note: All registered event listeners will automatically be removed from\n  the <span class=\"caps\">DOM</span> at page unload so it is not necessary to detach events yourself.</p>","!type":"fn(element: +Element, type: string, listener: fn(), self?: Object, capture: bool) -> bool"},"removeListenerById":{"!doc":"<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>","!type":"fn(target: Object, id: string) -> bool"}},"Event":{"!doc":"<p>Wrapper around native event management capabilities of the browser.\nThis class should not be used directly normally. It&#8217;s better\nto use {@link qx.event.Registration} instead.</p>","addNativeListener":{"!doc":"<p>Use the low level browser functionality to attach event listeners\nto <span class=\"caps\">DOM</span> nodes.</p>\n\n<p>Use this with caution. This is only thought for event handlers and\nqualified developers. These are not mem-leak protected!</p>","!type":"fn(target: Object, type: string, listener: fn(), useCapture?: bool)"},"fire":{"!doc":"<p>Fires a synthetic native event on the given element.</p>","!type":"fn(target: +Element, type: string) -> bool"},"getEventName":{"!doc":"<p>Returns the (possibly vendor-prefixed) name of the given event type.\n<strong><span class=\"caps\">NOTE</span>:</strong> Incorrect capitalization of type names will <strong>not</strong> be corrected. See\n{@link #supportsEvent} for details.</p>","!type":"fn(target: Object, type: string) -> string"},"getRelatedTarget":{"!doc":"<p>Computes the related target from the native <span class=\"caps\">DOM</span> event</p>","!type":"fn(e: +Event) -> +Element"},"getTarget":{"!doc":"<p>Returns the target of the event.</p>","!type":"fn(e: +Event) -> Object"},"preventDefault":{"!doc":"<p>Prevent the native default of the event to be processed.</p>\n\n<p>This is useful to stop native keybindings, native selection\nand other native functionality behind events.</p>","!type":"fn(e: +Event)"},"removeNativeListener":{"!doc":"<p>Use the low level browser functionality to remove event listeners\nfrom <span class=\"caps\">DOM</span> nodes.</p>","!type":"fn(target: Object, type: string, listener: fn(), useCapture?: bool)"},"stopPropagation":{"!doc":"<p>Stops the propagation of the given event to the parent element.</p>\n\n<p>Only useful for events which bubble e.g. mousedown.</p>","!type":"fn(e: +Event)"},"supportsEvent":{"!doc":"<p>Whether the given target supports the given event type.</p>\n\n<p>Useful for testing for support of new features like\ntouch events, gesture events, orientation change, on/offline, etc.</p>\n\n<p><strong><span class=\"caps\">NOTE</span>:</strong> This check is <strong>case-insensitive</strong>.\n<code>supportsEvent(window, &#8220;cLicK&#8221;)</code> will return <code>true</code>\nbut <code>window.addEventListener(&#8220;cLicK&#8221;, callback)</code> will fail\nsilently!</p>","!type":"fn(target: Object, type: string) -> bool"}},"FileReader":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>FileReaders allow retrieving the data from a local file, after the file\nname was selected by an &lt;input type=&#8220;file&#8221;&gt; element.</p>\n\n<p>For more information see:\n<a href=\"http://www.w3.org/TR/FileAPI/\">http://www.w3.org/TR/FileAPI/</a></p>","!type":"fn()","getFile":{"!doc":"<p>Return the native File object selected from an &lt;input type=&#8220;file&#8221;&gt;\nelement.</p>","!type":"fn(inputElement: +Element, index: +Integer) -> +File"},"getNumFiles":{"!doc":"<p>Return the number of files selected by the user, from an &lt;input\ntype=&#8220;file&#8221;&gt; element.</p>","!type":"fn(inputElement: +Element) -> +Integer"},"prototype":{"_handleAbort":{"!doc":"<p>&#8220;abort&#8221; handler</p>","!type":"fn(e: Object)"},"_handleError":{"!doc":"<p>&#8220;error&#8221; handler</p>","!type":"fn(e: Object)"},"_handleLoad":{"!doc":"<p>&#8220;load&#8221; handler</p>","!type":"fn(e: Object)"},"_handleLoadEnd":{"!doc":"<p>&#8220;loadend&#8221; handler</p>","!type":"fn(e: Object)"},"_handleLoadStart":{"!doc":"<p>&#8220;loadstart&#8221; handler</p>","!type":"fn(e: Object)"},"_handleProgress":{"!doc":"<p>&#8220;progress&#8221; handler</p>","!type":"fn(e: Object)"},"readAsBinaryString":{"!doc":"<p>Begin reading from the file referenced by the specified file\nobject. This is an asynchronous request. When the file is fully loaded,\nthe &#8220;load&#8221; event will be fired.</p>\n\n<p>The data will be provided in a binary format where each byte is in the\nrange [0,255].</p>\n\n<p><span class=\"caps\">NOTE</span>: On FireFox, this method works if the page was loaded via the\nfile:// protocol. In Chrome, it does not.</p>","!type":"fn(fileObj: +File)"},"readAsDataURL":{"!doc":"<p>Begin reading from the file referenced by the specified file\nobject. This is an asynchronous request. When the file is fully loaded,\nthe &#8220;load&#8221; event will be fired.</p>\n\n<p>The data is returned in DataURL format.</p>\n\n<p><span class=\"caps\">NOTE</span>: On FireFox, this method works if the page was loaded via the\nfile:// protocol. In Chrome, it does not.</p>","!type":"fn(fileObj: +File)"},"readAsText":{"!doc":"<p>Begin reading from the file referenced by the specified file\nobject. This is an asynchronous request. When the file is fully loaded,\nthe &#8220;load&#8221; event will be fired.</p>\n\n<p>The data will be provided as text, in the specified encoding.</p>\n\n<p><span class=\"caps\">NOTE</span>: On FireFox, this method works if the page was loaded via the\nfile:// protocol. In Chrome, it does not.</p>","!type":"fn(fileObj: +File, encoding?: string)"}}},"Flash":{"!doc":"<p>Flash&#8482; embed via script</p>\n\n<p>Include:</p>\n\n<ul>\n<li>Simple movie embedding (returning a cross-browser working <span class=\"caps\">DOM</span> node)</li>\n<li>Support for custom parameters and attributes</li>\n<li>Support for Flash&#8482; variables</li>\n</ul>\n\n<p>Does not include the following features from SWFFix:</p>\n\n<ul>\n<li>Active content workarounds for already inserted movies (via markup)</li>\n<li>Express install support</li>\n<li>Transformation of standard conformance markup to cross browser support</li>\n<li>Support for alternative content (alt text)</li>\n</ul>","__createSwf":{"!doc":"<p>Creates a <span class=\"caps\">DOM</span> element with a flash movie.</p>","!type":"fn(element: +Element, attributes: +Map, params: +Map, win: +Window)"},"__destroyObjectInIE":{"!doc":"<p>Destroy the flash object and remove from <span class=\"caps\">DOM</span>, to fix memory leaks.</p>","!type":"fn(element: +Element)"},"__fixOutOfMemoryError":{"!doc":"<p>Internal helper to prevent leaks in IE</p>","!type":"fn()"},"__getFlashObject":{"!doc":"<p>Return the flash object element from <span class=\"caps\">DOM</span> node.</p>","!type":"fn(element: +Element) -> +Element"},"create":{"!doc":"<p>Creates an <span class=\"caps\">DOM</span> element</p>\n\n<p>The dimension of the movie should define through <span class=\"caps\">CSS</span> styles {@link qx.bom.element.Style}</p>\n\n<p>It is possible to add these parameters as supported by Flash movies:\n<a href=\"http://helpx.adobe.com/flash/kb/flash-object-embed-tag-attributes.html\">http://helpx.adobe.com/flash/kb/flash-object-embed-tag-attributes.html</a></p>","!type":"fn(element: +Element, attributes: +Map, variables?: +Map, params?: +Map, win?: +Window) -> +Element"},"destroy":{"!doc":"<p>Destroys the flash object from <span class=\"caps\">DOM</span>, but not the parent <span class=\"caps\">DOM</span> element.</p>\n\n<p>Note: Removing the flash object like this:</p>\n\n<pre>\n var div = qx.dom.Element.create(\"div\");\n document.body.appendChild(div);\n\n var flashObject = qx.bom.Flash.create(div, { movie : \"Flash.swf\", id : \"id\" });\n div.removeChild(div.firstChild);\n</pre>\n\n<p>involve memory leaks in Internet Explorer.</p>","!type":"fn(element: +Element, win?: +Window)"}},"Font":{"!proto":"qx.core.Object","!doc":"<p>A wrapper for <span class=\"caps\">CSS</span> font styles. Fond objects can be applied to instances\nof {@link qx.html.Element}.</p>","!type":"fn()","fromConfig":{"!doc":"<p>Converts a map property definition into a font object.</p>","!type":"fn(config: +Map) -> +qx.bom.Font"},"fromString":{"!doc":"<p>Converts a typical <span class=\"caps\">CSS</span> font definition string to an font object</p>\n\n<p>Example string: <code>bold italic 20px Arial</code></p>","!type":"fn(str: string) -> +qx.bom.Font"},"getDefaultStyles":{"!doc":"<p>Returns a map of all properties in empty state.</p>\n\n<p>This is useful for resetting previously configured\nfont styles.</p>","!type":"fn() -> +Map"},"prototype":{"_applyBold":{"!doc":"<p>Applies changes of the property value of the property <code>bold</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn(value: bool, old: bool)"},"_applyColor":{"!doc":"<p>Applies changes of the property value of the property <code>color</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyDecoration":{"!doc":"<p>Applies changes of the property value of the property <code>decoration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decoration}.</p>","!type":"fn(value: Object, old: Object)"},"_applyFamily":{"!doc":"<p>Applies changes of the property value of the property <code>family</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #family}.</p>","!type":"fn(value: +Array, old: +Array)"},"_applyItalic":{"!doc":"<p>Applies changes of the property value of the property <code>italic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn(value: bool, old: bool)"},"_applyLineHeight":{"!doc":"<p>Applies changes of the property value of the property <code>lineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #lineHeight}.</p>","!type":"fn(value: number, old: number)"},"_applySize":{"!doc":"<p>Applies changes of the property value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyTextShadow":{"!doc":"<p>Applies changes of the property value of the property <code>textShadow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textShadow}.</p>","!type":"fn(value: string, old: string)"},"getBold":{"!doc":"<p>Returns the (computed) value of the property <code>bold</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn() -> Object"},"getColor":{"!doc":"<p>Returns the (computed) value of the property <code>color</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn() -> Object"},"getDecoration":{"!doc":"<p>Returns the (computed) value of the property <code>decoration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decoration}.</p>","!type":"fn() -> Object"},"getFamily":{"!doc":"<p>Returns the (computed) value of the property <code>family</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #family}.</p>","!type":"fn() -> Object"},"getItalic":{"!doc":"<p>Returns the (computed) value of the property <code>italic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn() -> Object"},"getLineHeight":{"!doc":"<p>Returns the (computed) value of the property <code>lineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #lineHeight}.</p>","!type":"fn() -> Object"},"getSize":{"!doc":"<p>Returns the (computed) value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn() -> Object"},"getStyles":{"!doc":"<p>Get a map of all <span class=\"caps\">CSS</span> styles, which will be applied to the widget. Only\nthe styles which are set are returned.</p>","!type":"fn() -> +Map"},"getTextShadow":{"!doc":"<p>Returns the (computed) value of the property <code>textShadow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textShadow}.</p>","!type":"fn() -> Object"},"initBold":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>bold</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn(value: Object) -> Object"},"initColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>color</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(value: Object) -> Object"},"initDecoration":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>decoration</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #decoration}.</p>","!type":"fn(value: Object) -> Object"},"initFamily":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>family</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #family}.</p>","!type":"fn(value: Object) -> Object"},"initItalic":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>italic</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn(value: Object) -> Object"},"initLineHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>lineHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #lineHeight}.</p>","!type":"fn(value: Object) -> Object"},"initSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>size</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: Object) -> Object"},"initTextShadow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>textShadow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #textShadow}.</p>","!type":"fn(value: Object) -> Object"},"isBold":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>bold</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn() -> bool"},"isItalic":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>italic</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn() -> bool"},"resetBold":{"!doc":"<p>Resets the user value of the property <code>bold</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn()"},"resetColor":{"!doc":"<p>Resets the user value of the property <code>color</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn()"},"resetDecoration":{"!doc":"<p>Resets the user value of the property <code>decoration</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #decoration}.</p>","!type":"fn()"},"resetFamily":{"!doc":"<p>Resets the user value of the property <code>family</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #family}.</p>","!type":"fn()"},"resetItalic":{"!doc":"<p>Resets the user value of the property <code>italic</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn()"},"resetLineHeight":{"!doc":"<p>Resets the user value of the property <code>lineHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #lineHeight}.</p>","!type":"fn()"},"resetSize":{"!doc":"<p>Resets the user value of the property <code>size</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn()"},"resetTextShadow":{"!doc":"<p>Resets the user value of the property <code>textShadow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #textShadow}.</p>","!type":"fn()"},"setBold":{"!doc":"<p>Sets the user value of the property <code>bold</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn(value: Object) -> Object"},"setColor":{"!doc":"<p>Sets the user value of the property <code>color</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(value: Object) -> Object"},"setDecoration":{"!doc":"<p>Sets the user value of the property <code>decoration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decoration}.</p>","!type":"fn(value: Object) -> Object"},"setFamily":{"!doc":"<p>Sets the user value of the property <code>family</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #family}.</p>","!type":"fn(value: Object) -> Object"},"setItalic":{"!doc":"<p>Sets the user value of the property <code>italic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn(value: Object) -> Object"},"setLineHeight":{"!doc":"<p>Sets the user value of the property <code>lineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #lineHeight}.</p>","!type":"fn(value: Object) -> Object"},"setSize":{"!doc":"<p>Sets the user value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: Object) -> Object"},"setTextShadow":{"!doc":"<p>Sets the user value of the property <code>textShadow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textShadow}.</p>","!type":"fn(value: Object) -> Object"},"toggleBold":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>bold</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #bold}.</p>","!type":"fn() -> bool"},"toggleItalic":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>italic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #italic}.</p>","!type":"fn() -> bool"}}},"GeoLocation":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>GeoLocation provides access to geographical location information\nassociated with the hosting device.</p>\n\n<p>For more information see:\n<a href=\"http://www.w3.org/TR/geolocation-API/\">http://www.w3.org/TR/geolocation-API/</a></p>","!type":"fn()","prototype":{"_errorHandler":{"!doc":"<p>The Error handler.</p>","!type":"fn(error: fn())"},"_successHandler":{"!doc":"<p>Success handler.</p>","!type":"fn(position: fn())"},"getCurrentPosition":{"!doc":"<p>Retrieves the current position and calls the &#8220;position&#8221; event.</p>","!type":"fn(enableHighAccuracy: fn(), timeout: fn(), maximumAge: fn())"},"startWatchPosition":{"!doc":"<p>Starts to watch the position. Calls the &#8220;position&#8221; event, when the position changed.</p>","!type":"fn(enableHighAccuracy: fn(), timeout: fn(), maximumAge: fn())"},"stopWatchPosition":{"!doc":"<p>Stops watching the position.</p>","!type":"fn()"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.bom.GeoLocation"}},"HashHistory":{"!proto":"qx.bom.History","!doc":"<p>History manager implementation for IE greater 7. IE reloads iframe\ncontent on history actions even just hash value changed. This\nimplementation forwards history states (hashes) to a helper iframe.</p>","!type":"fn()","prototype":{"__attachListeners":{"!doc":"<p>Attach hash change listeners</p>","!type":"fn()"},"__createIframe":{"!doc":"<p><span class=\"caps\">IMPORTANT</span> <span class=\"caps\">NOTE</span> <span class=\"caps\">FOR</span> IE:\nSetting the source before adding the iframe to the document.\nOtherwise IE will bring up a &#8220;Unsecure items&#8230;&#8221; warning in <span class=\"caps\">SSL</span> mode</p>","!type":"fn() -> +Element"},"__detatchListeners":{"!doc":"<p>Remove hash change listeners</p>","!type":"fn()"},"__initIframe":{"!doc":"<p>Initializes the iframe</p>","!type":"fn()"},"__onHashChange":{"!doc":"<p>hash change event handler</p>","!type":"fn()"},"__waitForIFrame":{"!doc":"<p>Waits for the IFrame being loaded. Once the IFrame is loaded\nthe callback is called with the provided context.</p>","!type":"fn(callback: fn(), context?: Object, retry: +Integer)"},"_getHash":{"!doc":"<p>Returns the fragment identifier of the top window <span class=\"caps\">URL</span>. For gecko browsers we\nhave to use a regular expression to avoid encoding problems.</p>","!type":"fn() -> string"},"_readState":{"!doc":"<p>Browser dependent function to read the current state of the history</p>","!type":"fn() -> string"},"_setHash":{"!doc":"<p>Sets the fragment identifier of the window <span class=\"caps\">URL</span></p>","!type":"fn(value: string)"},"_writeState":{"!doc":"<p>Save a state into the browser history.</p>","!type":"fn(state: string)"},"addToHistory":{"!type":"fn(state: +undefined, newTitle: +undefined)"}}},"History":{"!proto":"qx.core.Object","!doc":"<p>A helper for using the browser history in JavaScript Applications without\nreloading the main page.</p>\n\n<p>Adds entries to the browser history and fires a &#8220;request&#8221; event when one of\nthe entries was requested by the user (e.g. by clicking on the back button).</p>\n\n<p>This class is an abstract template class. Concrete implementations have to\nprovide implementations for the {@link #_readState} and {@link #_writeState}\nmethods.</p>\n\n<p>Browser history support is currently available for Internet Explorer 6/7,\nFirefox, Opera 9 and WebKit. Safari 2 and older are not yet supported.</p>\n\n<p>This module is based on the ideas behind the <span class=\"caps\">YUI</span> Browser History Manager\nby Julien Lecomte (Yahoo), which is described at\n<a href=\"http://yuiblog.com/blog/2007/02/21/browser-history-manager/\">http://yuiblog.com/blog/2007/02/21/browser-history-manager/</a>. The Yahoo\nimplementation can be found at <a href=\"http://developer.yahoo.com/yui/history/\">http://developer.yahoo.com/yui/history/</a>.\nThe original code is licensed under a <span class=\"caps\">BSD</span> license\n(<a href=\"http://developer.yahoo.com/yui/license.txt\">http://developer.yahoo.com/yui/license.txt</a>).</p>","!type":"fn()","getInstance":{"!doc":"<p>Get the singleton instance of the history manager.</p>","!type":"fn() -> +History"},"prototype":{"_applyState":{"!doc":"<p>Applies changes of the property value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: string, old: string)"},"_applyTitle":{"!doc":"<p>Applies changes of the property value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(title: string, old: string)"},"_decode":{"!doc":"<p>Decodes a fragment identifier into a string</p>","!type":"fn(value: string) -> string"},"_encode":{"!doc":"<p>Encodes the state value into a format suitable as fragment identifier.</p>","!type":"fn(value: string) -> string"},"_getHash":{"!doc":"<p>Returns the fragment identifier of the top window <span class=\"caps\">URL</span>. For gecko browsers we\nhave to use a regular expression to avoid encoding problems.</p>","!type":"fn() -> string"},"_onHistoryLoad":{"!doc":"<p>Called on changes to the history using the browser buttons.</p>","!type":"fn(state: string)"},"_readState":{"!doc":"<p>Browser dependent function to read the current state of the history</p>","!type":"fn() -> string"},"_setHash":{"!doc":"<p>Sets the fragment identifier of the window <span class=\"caps\">URL</span></p>","!type":"fn(value: string)"},"_setInitialState":{"!doc":"<p>Populates the &#8216;state&#8217; property with the initial state value</p>","!type":"fn()"},"_writeState":{"!doc":"<p>Save a state into the browser history.</p>","!type":"fn()"},"addToHistory":{"!doc":"<p>Adds an entry to the browser history.</p>","!type":"fn(state: string, newTitle?: string)"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"getTitle":{"!doc":"<p>Returns the (computed) value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn() -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"initTitle":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>title</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: Object) -> Object"},"navigateBack":{"!doc":"<p>Navigates back in the browser history.\nSimulates a back button click.</p>","!type":"fn()"},"navigateForward":{"!doc":"<p>Navigates forward in the browser history.\nSimulates a forward button click.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"resetTitle":{"!doc":"<p>Resets the user value of the property <code>title</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn()"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"setTitle":{"!doc":"<p>Sets the user value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: Object) -> Object"}}},"Html":{"!doc":"<p>This class is mainly a convenience wrapper for <span class=\"caps\">DOM</span> elements to\nqooxdoo&#8217;s event system.</p>","__convertHtmlString":{"!doc":"<p>Translates a <span class=\"caps\">HTML</span> string into an array of elements.</p>","!type":"fn(html: string, context: +Document) -> +Array"},"__fixNonDirectlyClosableHelper":{"!doc":"<p>Helper method for <span class=\"caps\">XHTML</span> replacement.</p>","!type":"fn(all: string, front: string, tag: string) -> string"},"clean":{"!doc":"<p>Cleans-up the given <span class=\"caps\">HTML</span> and append it to a fragment</p>\n\n<p>When no <code>context</code> is given the global document is used to\ncreate new <span class=\"caps\">DOM</span> elements.</p>\n\n<p>When a <code>fragment</code> is given the nodes are appended to this\nfragment except the script tags. These are returned in a separate Array.</p>\n\n<p>Please note: <span class=\"caps\">HTML</span> coming from user input must be validated prior\nto passing it to this method. <span class=\"caps\">HTML</span> is temporarily inserted to the <span class=\"caps\">DOM</span>\nusing <code>innerHTML</code>. As a consequence, scripts included in\nattribute event handlers may be executed.</p>","!type":"fn(objs: +Element, context?: +Document, fragment?: +Element) -> +Element"},"extractScripts":{"!doc":"<p>Extracts script elements from an element list. Optionally\nattaches them to a given document fragment</p>","!type":"fn(elements: +Element, fragment?: +Document) -> +Element"},"fixEmptyTags":{"!doc":"<p>Fixes &#8220;XHTML&#8221;-style tags in all browsers.\nReplaces tags which are not allowed to be closed directly such as\n<code>div</code> or <code>p</code>. They are patched to use opening and\nclosing tags instead, e.g. <code>&lt;p&gt;</code> => <code>&lt;p&gt;&lt;/p&gt;</code></p>","!type":"fn(html: string) -> string"}},"Iframe":{"!doc":"<p>Cross browser abstractions to work with iframes.</p>","__rememberUrl":{"!doc":"<p>Remember actual <span class=\"caps\">URL</span> of iframe.</p>","!type":"fn(iframe: +Element)"},"create":{"!doc":"<p>Creates an <span class=\"caps\">DOM</span> element.</p>\n\n<p>Attributes may be given directly with this call. This is critical\nfor some attributes e.g. name, type, ... in many clients.</p>","!type":"fn(attributes?: +Map, win?: +Window) -> +Element"},"getBody":{"!doc":"<p>Get the <span class=\"caps\">HTML</span> body element of the iframe.</p>","!type":"fn(iframe: +Element) -> +Element"},"getDocument":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> document object of an iframe.</p>","!type":"fn(iframe: +Element) -> +Document"},"getWindow":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> window object of an iframe.</p>","!type":"fn(iframe: +Element) -> +Window"},"queryCurrentUrl":{"!doc":"<p>Returns the current (served) <span class=\"caps\">URL</span> inside the iframe</p>","!type":"fn(iframe: +Element) -> string"},"setSource":{"!doc":"<p>Sets iframe&#8217;s source attribute to given value</p>","!type":"fn(iframe: +Element, source: string)"}},"IframeHistory":{"!proto":"qx.bom.History","!doc":"<p>Implements an iFrame based history manager for IE 6/7/8.</p>\n\n<p>Creates a hidden iFrame and uses document.write to store entries in the\nhistory browser&#8217;s stack.</p>","!type":"fn()","prototype":{"__clearWriteSateTimer":{"!doc":"<p>Helper function to clear the write state timer.</p>","!type":"fn()"},"__createIframe":{"!doc":"<p><span class=\"caps\">IMPORTANT</span> <span class=\"caps\">NOTE</span> <span class=\"caps\">FOR</span> IE:\nSetting the source before adding the iframe to the document.\nOtherwise IE will bring up a &#8220;Unsecure items&#8230;&#8221; warning in <span class=\"caps\">SSL</span> mode</p>","!type":"fn() -> +Iframe"},"__initIframe":{"!doc":"<p>Initializes the iframe</p>","!type":"fn(handler?: fn())"},"__initTimer":{"!doc":"<p>Initialize the polling timer</p>","!type":"fn()"},"__isCurrentLocationState":{"!doc":"<p>Checks whether the given location state is the current one.</p>","!type":"fn(locationState: string) -> bool"},"__onHashChange":{"!doc":"<p>Hash change listener.</p>","!type":"fn(e: +qx.event.type.Event)"},"__storeLocationState":{"!doc":"<p>Stores the given location state.</p>","!type":"fn(locationState: string) -> string"},"__waitForIFrame":{"!doc":"<p>Waits for the IFrame being loaded. Once the IFrame is loaded\nthe callback is called with the provided context.</p>","!type":"fn(callback: fn(), context?: Object, retry: +Integer)"},"_applyState":{"!doc":"<p>Applies changes of the property value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: string, old: string)"},"_onHistoryLoad":{"!type":"fn(state: +undefined)"},"_readState":{"!doc":"<p>Get state from the iframe</p>","!type":"fn() -> string"},"_setHash":{"!type":"fn(value: +undefined)"},"_setInitialState":{"!type":"fn()"},"_setState":{"!doc":"<p>Helper function to set state property. This will only be called\nby _onHistoryLoad. It determines, that no apply of state will be called.</p>","!type":"fn(state: string)"},"_writeState":{"!doc":"<p>Store state to the iframe</p>","!type":"fn(state: string)"},"addToHistory":{"!type":"fn(state: +undefined, newTitle: +undefined)"}}},"Input":{"!doc":"<p>Cross browser abstractions to work with input elements.</p>","create":{"!doc":"<p>Creates an <span class=\"caps\">DOM</span> input/textarea/select element.</p>\n\n<p>Attributes may be given directly with this call. This is critical\nfor some attributes e.g. name, type, ... in many clients.</p>\n\n<p>Note: <code>select</code> and <code>textarea</code> elements are created\nusing the identically named <code>type</code>.</p>","!type":"fn(type: string, attributes: +Map, win: +Window) -> +Element"},"getValue":{"!doc":"<p>Returns the currently configured value.</p>\n\n<p>Works with simple input fields as well as with\nselect boxes or option elements.</p>\n\n<p>Returns an array in cases of multi-selection in\nselect boxes but in all other cases a string.</p>","!type":"fn(element: +Element) -> string"},"setValue":{"!doc":"<p>Applies the given value to the element.</p>\n\n<p>Normally the value is given as a string/number value and applied\nto the field content (textfield, textarea) or used to\ndetect whether the field is checked (checkbox, radiobutton).</p>\n\n<p>Supports array values for selectboxes (multiple-selection)\nand checkboxes or radiobuttons (for convenience).</p>\n\n<p>Please note: To modify the value attribute of a checkbox or\nradiobutton use {@link qx.bom.element.Attribute#set} instead.</p>","!type":"fn(element: +Element, value: string)"},"setWrap":{"!doc":"<p>Sets the text wrap behaviour of a text area element.\nThis property uses the attribute &#8220;wrap&#8221; respectively\nthe style property &#8220;whiteSpace&#8221;</p>","!type":"fn(element: +Element, wrap: bool)"}},"Label":{"!doc":"<p>Cross browser abstractions to work with labels.</p>","__createMeasureElement":{"!doc":"<p>Creates the measure element</p>","!type":"fn(html?: bool) -> +Element"},"__getStyles":{"!doc":"<p>Returns a map of all styles which should be applied as\na basic set.</p>","!type":"fn(html?: bool) -> +Map"},"__measureSize":{"!doc":"<p>Measure the size of the given element</p>","!type":"fn(element: +Element, styles?: +Map) -> +Map"},"__prepareHtml":{"!doc":"<p>Generates the helper <span class=\"caps\">DOM</span> element for <span class=\"caps\">HTML</span> measuring</p>","!type":"fn() -> +Element"},"__prepareText":{"!doc":"<p>Generates the helper <span class=\"caps\">DOM</span> element for text measuring</p>","!type":"fn() -> +Element"},"create":{"!doc":"<p>Creates a label.</p>\n\n<p>The default mode is &#8216;text&#8217; which means that the overlapping text is cut off\nusing ellipsis automatically. Text wrapping is disabled in this mode\nas well. Spaces are normalized. Umlauts and other special symbols are only\nallowed in unicode mode as normal characters.</p>\n\n<p>In the <span class=\"caps\">HTML</span> mode you can insert any <span class=\"caps\">HTML</span>, but loose the capability to cut\nof overlapping text. Automatic text wrapping is enabled by default.</p>\n\n<p>It is not possible to modify the mode afterwards.</p>","!type":"fn(content: string, html?: bool, win?: +Window) -> +Element"},"getHtmlSize":{"!doc":"<p>Returns the preferred dimensions of the given <span class=\"caps\">HTML</span> content.</p>","!type":"fn(content: string, styles?: +Map, width: +Integer) -> +Map"},"getTextSize":{"!doc":"<p>Returns the preferred dimensions of the given text.</p>","!type":"fn(text: string, styles: +Map) -> +Map"},"getValue":{"!doc":"<p>Returns the content of the element.</p>","!type":"fn(element: +Element) -> string"},"setValue":{"!doc":"<p>Sets the content of the element.</p>\n\n<p>The possibilities of the value depends on the mode\ndefined using {@link #create}.</p>","!type":"fn(element: +Element, value: string)"}},"Lifecycle":{"!doc":"<p>Low-level application life-cycle management.</p>\n\n<p>One can use the static methods {@link #onReady} and {@link #onShutdown} to\nadd callback functions, in order to get informed about the ready state or\nthe shutdown of the low-level application, respectively.</p>","onReady":{"!doc":"<p>Register a callback function, which is called in the optionally provided\ncontext, when the application is ready.</p>","!type":"fn(callback: fn(), context?: Object)"},"onShutdown":{"!doc":"<p>Register a callback function, which is called in the optionally provided\ncontext, when the application is shutdown.\n<b><span class=\"caps\">IMPORTANT</span> <span class=\"caps\">NOTE</span></b>: Since it is <i>not</i> guaranteed that a\n<code>shutdown</code> event is fired, you <i>cannot</i> fully rely on\ngetting informed.</p>","!type":"fn(callback: fn(), context?: Object)"}},"media":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Media element. Other media types can derive from this class.</p>","!type":"fn()","prototype":{"_handleEndedEvent":{"!doc":"<p>Ended event handler.</p>","!type":"fn()"},"_handleLoadedDataEvent":{"!doc":"<p>Loaded Data event handler.</p>","!type":"fn()"},"_handleLoadedMetaDataEvent":{"!doc":"<p>Loaded Metadata event handler.</p>","!type":"fn()"},"_handlePauseEvent":{"!doc":"<p>Pause event handler.</p>","!type":"fn()"},"_handlePlayEvent":{"!doc":"<p>Play event handler.</p>","!type":"fn()"},"_handleTimeUpdateEvent":{"!doc":"<p>Time Update event handler.</p>","!type":"fn()"},"_handleVolumeChangeEvent":{"!doc":"<p>Volume Change event handler.</p>","!type":"fn()"},"canPlayType":{"!doc":"<p>Whether the browser can play the file format.</p>","!type":"fn(type: string) -> bool"},"getAutoplay":{"!doc":"<p>Whether the media is played directly when it is loaded / the page is loaded.</p>","!type":"fn() -> bool"},"getCurrentTime":{"!doc":"<p>Gets current time of the playback.</p>","!type":"fn() -> number"},"getDuration":{"!doc":"<p>Gets the duration of the loaded media file.</p>","!type":"fn() -> number"},"getId":{"!doc":"<p>Gets the id of the media.</p>","!type":"fn() -> string"},"getMediaObject":{"!doc":"<p>Returns the media object, so that you can add it to the <span class=\"caps\">DOM</span>.</p>","!type":"fn() -> Object"},"getPreload":{"!doc":"<p>Returns how much buffering the media resource will likely need.</p>","!type":"fn() -> string"},"getSource":{"!doc":"<p>Gets the source url of the media file.</p>","!type":"fn() -> string"},"getVolume":{"!doc":"<p>Gets the current playback volume, as a number in the range 0.0 to 1.0,\nwhere 0.0 is the quietest and 1.0 the loudest.</p>","!type":"fn() -> number"},"hasControls":{"!doc":"<p>Checks if the media element shows its controls.</p>","!type":"fn() -> bool"},"hideControls":{"!doc":"<p>Hides the controls of the media element.</p>","!type":"fn()"},"isEnded":{"!doc":"<p>Checks if the media is ended or not.</p>","!type":"fn() -> bool"},"isLoop":{"!doc":"<p>Whether the media element is to seek back to the start of the media resource upon reaching the end.</p>","!type":"fn() -> bool"},"isMuted":{"!doc":"<p>Checks if the media element is muted or not</p>","!type":"fn() -> bool"},"isPaused":{"!doc":"<p>Checks if the media is paused or not.</p>","!type":"fn() -> bool"},"pause":{"!doc":"<p>Pauses playback of the media.</p>","!type":"fn()"},"play":{"!doc":"<p>Starts playback of the media.</p>","!type":"fn()"},"setAutoplay":{"!doc":"<p>Plays the media directly when it is loaded / the page is loaded.</p>","!type":"fn(autoplay: bool)"},"setCurrentTime":{"!doc":"<p>Sets the value of current time.</p>","!type":"fn(value: number)"},"setId":{"!doc":"<p>Sets the id of the media.</p>","!type":"fn(id: string)"},"setLoop":{"!doc":"<p>Indicates that the media element is to seek back to the start of the media resource upon reaching the end.</p>","!type":"fn(value: bool)"},"setMuted":{"!doc":"<p>Sets the media element to mute.</p>","!type":"fn(muted: bool)"},"setPreload":{"!doc":"<p>Hints how much buffering the media resource will likely need.</p>","!type":"fn(preload: string)"},"setSource":{"!doc":"<p>Sets the source url of the media file.</p>","!type":"fn(source: string)"},"setVolume":{"!doc":"<p>Sets the current playback volume, as a number in the range 0.0 to 1.0,\nwhere 0.0 is the quietest and 1.0 the loudest.</p>","!type":"fn(volume: number)"},"showControls":{"!doc":"<p>Shows the controls of the media element.</p>","!type":"fn()"}}},"Audio":{"!proto":"qx.bom.media.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Media object for playing sounds.</p>","!type":"fn()"},"Video":{"!proto":"qx.bom.media.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Media object for playing videos.</p>","!type":"fn()","prototype":{"getHeight":{"!doc":"<p>Gets the height of the video element.</p>","!type":"fn() -> number"},"getPoster":{"!doc":"<p>Gets the poster of the video.</p>","!type":"fn() -> string"},"getVideoHeight":{"!doc":"<p>Gets the height of the video.</p>","!type":"fn() -> number"},"getVideoWidth":{"!doc":"<p>Gets the width of the video.</p>","!type":"fn() -> number"},"getWidth":{"!doc":"<p>Gets the width of the video element.</p>","!type":"fn() -> number"},"setHeight":{"!doc":"<p>Sets the height of the video element.</p>","!type":"fn(value: number)"},"setPoster":{"!doc":"<p>Sets the poster of the video.</p>","!type":"fn(value: string)"},"setWidth":{"!doc":"<p>Sets the width of the video element.</p>","!type":"fn(value: number)"}}}},"MediaQuery":{"!proto":"qx.event.Emitter","!doc":"<p>This class is to test css media queries. It implements a polyfill for\nwindow.matchMedia if not supported natively.</p>","!type":"fn()","prototype":{"__changed":{"!doc":"<p>Callback for mediaqueries changes</p>","!type":"fn()"},"__init":{"!doc":"<p>Initialize the mediaquery listener</p>","!type":"fn()"},"__initMatchMedia":{"!doc":"<p>Initialize matchMedia polyfill</p>","!type":"fn(window: +Window)"},"getQuery":{"!doc":"<p>Returns the query string used to initialize the listener.</p>","!type":"fn() -> string"},"isMatching":{"!doc":"<p>Access the matching state of the media query.</p>","!type":"fn() -> bool"}}},"MediaQueryListener":{"!proto":"qx.bom.MediaQuery","!doc":"<p>This class is to test css media queries. It implements a polyfill for\nwindow.matchMedia if not supported natively.</p>","!type":"fn()"},"NativeHistory":{"!proto":"qx.bom.History","!doc":"<p>Default history manager implementation. Either polls for <span class=\"caps\">URL</span> fragment\nidentifier (hash) changes or uses the native &#8220;hashchange&#8221; event.</p>","!type":"fn()","prototype":{"__attachListeners":{"!doc":"<p>Attach hash change listeners</p>","!type":"fn()"},"__detatchListeners":{"!doc":"<p>Remove hash change listeners</p>","!type":"fn()"},"__onHashChange":{"!doc":"<p>hash change event handler</p>","!type":"fn()"},"_readState":{"!doc":"<p>Browser dependent function to read the current state of the history</p>","!type":"fn() -> string"}}},"PageVisibility":{"!proto":"qx.event.Emitter","!doc":"<p>This class offers a constant <span class=\"caps\">API</span> over the Page Visibility Spec:\n<a href=\"http://www.w3.org/TR/page-visibility/\">http://www.w3.org/TR/page-visibility/</a></p>\n\n<p>It forwards all the browsers support and provides always a fallback which is\nof course visible all the time.</p>","getInstance":{"!doc":"<p>Get an instance of the PageVisibility object using the default document.</p>","!type":"fn() -> +qx.bom.PageVisibility"},"!type":"fn()","prototype":{"__checkAttributeNames":{"!doc":"<p>Internal helper to feature check the attribute names and the event name.\nAs the event can not be detected using the on attribute, we need\nto guess the event name by checking for the hidden attribute.</p>","!type":"fn()"},"getVisibilityState":{"!doc":"<p>Returns the visibility state of the page. If we can not detect it,\n<code>&#8220;visible&#8221;</code> will always be returned.</p>","!type":"fn() -> string"},"isHidden":{"!doc":"<p>Returns weather the page is hidden or not. If we can not detect it,\n<code>false</code> will always be returned.</p>","!type":"fn() -> bool"}}},"Range":{"!doc":"<p>Low-level Range <span class=\"caps\">API</span> which is used together with the low-level Selection <span class=\"caps\">API</span>.\nThis is especially useful whenever a developer want to work on text level,\ne.g. for an editor.</p>","get":{"!doc":"<p>Returns the range object of the given node.</p>","!type":"fn(node: +Node) -> +Range"}},"request":{"IRequest":{"!doc":"<p>Interface of a low-level transport compatible with\n{@link qx.io.request.AbstractRequest}.</p>\n\n<p>Based on interface specified in\n<a href=\"http://www.w3.org/TR/XMLHttpRequest/\">XmlHttpRequest</a>. Also\nborrows some methods as described in\n<a href=\"http://www.w3.org/TR/XMLHttpRequest2/\">XmlHttpRequest2</a>.</p>","prototype":{"abort":{"!doc":"<p>Abort request</p>","!type":"fn()"},"getAllResponseHeaders":{"!doc":"<p>Get all response headers from response.</p>","!type":"fn() -> string"},"getResponseHeader":{"!doc":"<p>Get a single response header from response.</p>","!type":"fn(header: string) -> string"},"onabort":{"!doc":"<p>Event handler for event fired when request is aborted.</p>","!type":"fn()"},"onerror":{"!doc":"<p>Event handler for event fired on a network error.</p>","!type":"fn()"},"onload":{"!doc":"<p>Event handler for event fired on successful retrieval.</p>","!type":"fn()"},"onloadend":{"!doc":"<p>Event handler for event fired on retrieval.</p>","!type":"fn()"},"onreadystatechange":{"!doc":"<p>Event handler for event fired at every state change.</p>","!type":"fn()"},"ontimeout":{"!doc":"<p>Event handler for event fired when timeout interval has passed.</p>","!type":"fn()"},"open":{"!doc":"<p>Initializes (prepares) request.</p>","!type":"fn(method: string, url: string, async?: bool)"},"send":{"!doc":"<p>Sends request.</p>","!type":"fn(data?: string)"},"setRequestHeader":{"!doc":"<p>Sets a request header to be used by the request.</p>","!type":"fn(key: string, value: string)"}}},"Jsonp":{"!proto":"qx.bom.request.Script","!doc":"<p>A special script loader handling <span class=\"caps\">JSONP</span> responses. Automatically\nprovides callbacks and populates responseJson property.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n var req = new qx.bom.request.Jsonp();\n\n // Some services have a fixed callback name\n // req.setCallbackName(\"callback\");\n\n req.onload = function() {\n   // Handle data received\n   req.responseJson;\n }\n\n req.open(\"GET\", url);\n req.send();\n</pre>","!type":"fn()","prototype":{"__callBase":{"!doc":"<p>Call overriden method.</p>","!type":"fn(method: string, args: +Array)"},"__deleteCustomCallback":{"!doc":"<p>Delete custom callback if dynamically created before.</p>","!type":"fn()"},"__generateId":{"!doc":"<p>Generate ID.</p>","!type":"fn()"},"_onNativeLoad":{"!doc":"<p>Handle native load.</p>","!type":"fn()"},"callback":{"!doc":"<p>Callback provided for <span class=\"caps\">JSONP</span> response to pass data.</p>\n\n<p>Called internally to populate responseJson property\nand indicate successful status.</p>\n\n<p>Note: If you write a custom callback you&#8217;ll need to call\nthis method in order to notify the request about the data\nloaded. Writing a custom callback should not be necessary\nin most cases.</p>","!type":"fn(data: Object)"},"dispose":{"!type":"fn()"},"getGeneratedUrl":{"!doc":"<p>Returns the generated <span class=\"caps\">URL</span> for the current / last request</p>","!type":"fn() -> string"},"open":{"!doc":"<p>Initializes (prepares) request.</p>","!type":"fn(method: string, url: string)"},"setCallbackName":{"!doc":"<p>Set callback name.</p>\n\n<p>Must be set to the name of the callback function that is called by the\nscript returned from the <span class=\"caps\">JSONP</span> service. By default, the callback name\nreferences this instance&#8217;s {@link #callback} method, allowing to connect\nmultiple <span class=\"caps\">JSONP</span> responses to different requests.</p>\n\n<p>If the <span class=\"caps\">JSONP</span> service allows to set custom callback names, it should not\nbe necessary to change the default. However, some services use a fixed\ncallback name. This is when setting the callbackName is useful. A\nfunction is created and made available globally under the given name.\nThe function receives the <span class=\"caps\">JSON</span> data and dispatches it to this instance&#8217;s\n{@link #callback} method. Please note that this function is only created\nif it does not exist before.</p>","!type":"fn(name: string) -> +qx.bom.request.Jsonp"},"setCallbackParam":{"!doc":"<p>Set callback parameter.</p>\n\n<p>Some <span class=\"caps\">JSONP</span> services expect the callback name to be passed labeled with a\nspecial <span class=\"caps\">URL</span> parameter key, e.g. &#8220;jsonp&#8221; in &#8221;?jsonp=myCallback&#8221;. The\ndefault is &#8220;callback&#8221;.</p>","!type":"fn(param: string) -> +qx.bom.request.Jsonp"},"setPrefix":{"!doc":"<p>Set the prefix used in front of &#8216;qx.&#8217; in case &#8216;qx&#8217; is not available\n(for qx.Website e.g.)</p>","!type":"fn(prefix: string)"}}},"Script":{"!doc":"<p>Script loader with interface similar to\n<a href=\"http://www.w3.org/TR/XMLHttpRequest/\">XmlHttpRequest</a>.</p>\n\n<p>The script loader can be used to load scripts from arbitrary sources.\n<span class=\"desktop\">\nFor <span class=\"caps\">JSONP</span> requests, consider the {@link qx.bom.request.Jsonp} transport\nthat derives from the script loader.\n</span></p>\n\n<div class=\"desktop\">\nExample:\n\n<pre class=\"javascript\">\n var req = new qx.bom.request.Script();\n req.onload = function() {\n   // Script is loaded and parsed and\n   // globals set are available\n }\n\n req.open(\"GET\", url);\n req.send();\n</pre>\n\n</div>","!type":"fn()","prototype":{"__createScriptElement":{"!doc":"<p>Create and configure script element.</p>","!type":"fn() -> +Element"},"__disposeScriptElement":{"!doc":"<p>Remove script element from <span class=\"caps\">DOM</span>.</p>","!type":"fn()"},"__environmentGet":{"!doc":"<p>Proxy Environment.get to guard against env not being present yet.</p>","!type":"fn(key: string) -> Object"},"__failure":{"!doc":"<p>Handle failure.</p>","!type":"fn()"},"__initXhrProperties":{"!doc":"<p>Initialize properties.</p>","!type":"fn()"},"__supportsErrorHandler":{"!doc":"<p>Looks up whether browser supports error handler.</p>","!type":"fn() -> bool"},"_emit":{"!doc":"<p>Helper to emit events and call the callback methods.</p>","!type":"fn(event: string)"},"_getScriptElement":{"!doc":"<p>Get script element used for request.</p>","!type":"fn() -> +Element"},"_getUrl":{"!doc":"<p>Get <span class=\"caps\">URL</span> of request.</p>","!type":"fn() -> string"},"_onNativeError":{"!doc":"<p>Handle native error.</p>","!type":"fn()"},"_onNativeLoad":{"!doc":"<p>Handle native load.</p>","!type":"fn()"},"_onTimeout":{"!doc":"<p>Handle timeout.</p>","!type":"fn()"},"_readyStateChange":{"!doc":"<p>Change readyState.</p>","!type":"fn(readyState: number)"},"_success":{"!doc":"<p>Handle success.</p>","!type":"fn()"},"abort":{"!doc":"<p>Aborts request.</p>","!type":"fn() -> +qx.bom.request.Script"},"dispose":{"!doc":"<p>Dispose object.</p>","!type":"fn()"},"getAllResponseHeaders":{"!doc":"<p>Get all response headers from response.</p>\n\n<p>Note: This method exists for compatibility reasons. The script\ntransport does not receive response headers.</p>","!type":"fn() -> string"},"getResponseHeader":{"!doc":"<p>Get a single response header from response.</p>\n\n<p>Note: This method exists for compatibility reasons. The script\ntransport does not receive response headers.</p>","!type":"fn(key: string) -> string"},"isDisposed":{"!doc":"<p>Check if the request has already beed disposed.</p>","!type":"fn() -> bool"},"on":{"!doc":"<p>Add an event listener for the given event name.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +qx.bom.request.Script"},"onabort":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;abort&#8221; that is fired when request\nis aborted.</p>\n\n<p>Replace with custom method to listen to the &#8220;abort&#8221; event.</p>","!type":"fn()"},"onerror":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;error&#8221; that is fired on a network error.</p>\n\n<p>Note: Some browsers do not support the &#8220;error&#8221; event.</p>\n\n<p>Replace with custom method to listen to the &#8220;error&#8221; event.</p>","!type":"fn()"},"onload":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;load&#8221; that is fired on successful retrieval.</p>\n\n<p>Note: This handler is called even when an invalid script is returned.</p>\n\n<p>Warning: Internet Explorer < 9 receives a false &#8220;load&#8221; for invalid URLs.\nThis &#8220;load&#8221; is fired about 2 seconds after sending the request. To\ndistinguish from a real &#8220;load&#8221;, consider defining a custom check\nfunction using {@link #setDetermineSuccess} and query the status\nproperty. However, the script loaded needs to have a known impact on\nthe global namespace. If this does not work for you, you may be able\nto set a timeout lower than 2 seconds, depending on script size,\ncomplexity and execution time.</p>\n\n<p>Replace with custom method to listen to the &#8220;load&#8221; event.</p>","!type":"fn()"},"onloadend":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;loadend&#8221; that is fired on retrieval.</p>\n\n<p>Note: This handler is called even when a network error (or similar)\noccurred.</p>\n\n<p>Replace with custom method to listen to the &#8220;loadend&#8221; event.</p>","!type":"fn()"},"onreadystatechange":{"!doc":"<p>Event handler for an event that fires at every state change.</p>\n\n<p>Replace with custom method to get informed about the communication progress.</p>","!type":"fn()"},"ontimeout":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;timeout&#8221; that is fired when timeout\ninterval has passed.</p>\n\n<p>Replace with custom method to listen to the &#8220;timeout&#8221; event.</p>","!type":"fn()"},"open":{"!doc":"<p>Initializes (prepares) request.</p>","!type":"fn(method: string, url: string)"},"send":{"!doc":"<p>Sends request.</p>","!type":"fn() -> +qx.bom.request.Script"},"setDetermineSuccess":{"!doc":"<p>Determine if loaded script has expected impact on global namespace.</p>\n\n<p>The function is called once the script was loaded and must return a\nboolean indicating if the response is to be considered successful.</p>","!type":"fn(check: fn())"},"setRequestHeader":{"!doc":"<p>Appends a query parameter to <span class=\"caps\">URL</span>.</p>\n\n<p>This method exists for compatibility reasons. The script transport\ndoes not support request headers. However, many services parse query\nparameters like request headers.</p>\n\n<p>Note: The request must be initialized before using this method.</p>","!type":"fn(key: string, value: string) -> +qx.bom.request.Script"}}},"SimpleXhr":{"!proto":"Object","!doc":"<p>This class is internal because it&#8217;s tailored to {@link qx.io.rest.Resource}\nwhich needs more functionality than {@link qx.bom.request.Xhr} provides.\nThe usage of {@link qx.io.request.Xhr} isn&#8217;t possible either due to it&#8217;s qx.Class nature.</p>\n\n<p>For alternatives to this class have a look at:</p>\n\n<ul>\n<li>&#8220;qx.bom.request.Xhr&#8221; (low level, cross-browser <span class=\"caps\">XHR</span> abstraction compatible with spec)</li>\n<li>&#8220;qx.io.request.Xhr&#8221; (high level <span class=\"caps\">XHR</span> abstraction)</li>\n</ul>\n\n<p>A wrapper of {@link qx.bom.request.Xhr} which offers:</p>\n\n<ul>\n<li>set/get <span class=\"caps\">HTTP</span> method, <span class=\"caps\">URL</span>, request data and headers</li>\n<li>retrieve the parsed response as object (content-type recognition)</li>\n<li>more fine-grained events such as success, fail, ...</li>\n<li>supports hash code for request identification</li>\n</ul>\n\n<p>It does <strong>not</strong> comply the interface defined by {@link qx.bom.request.IRequest}.</p>\n\n<div class=\"desktop\">\nExample:\n\n<pre class=\"javascript\">\n var req = new qx.bom.request.SimpleXhr(\"/some/path/file.json\");\n req.setRequestData({\"a\":\"b\"});\n req.once(\"success\", function successHandler() {\n   var response = req.getResponse();\n }, this);\n req.once(\"fail\", function successHandler() {\n   var response = req.getResponse();\n }, this);\n req.send();\n</pre>\n\n</div>","!type":"fn()","prototype":{"__onReadyStateDone":{"!doc":"<p>Called internally when readyState is <span class=\"caps\">DONE</span>.</p>","!type":"fn()"},"_createResponseParser":{"!doc":"<p>Creates response parser.</p>","!type":"fn() -> +qx.util.ResponseParser"},"_createTransport":{"!doc":"<p>Creates <span class=\"caps\">XHR</span> transport.</p>\n\n<p>May be overriden to change type of resource.</p>","!type":"fn() -> +qx.bom.request.IRequest"},"_onAbort":{"!doc":"<p>Handles &#8220;abort&#8221; event.</p>","!type":"fn()"},"_onError":{"!doc":"<p>Handles &#8220;error&#8221; event.</p>","!type":"fn()"},"_onLoadEnd":{"!doc":"<p>Handles &#8220;loadEnd&#8221; event.</p>","!type":"fn()"},"_onReadyStateChange":{"!doc":"<p>Handles &#8220;readyStateChange&#8221; event.</p>","!type":"fn()"},"_onTimeout":{"!doc":"<p>Handles &#8220;timeout&#8221; event.</p>","!type":"fn()"},"_registerTransportListener":{"!doc":"<p>Registers common listeners on given transport.</p>","!type":"fn(transport: +qx.bom.request.IRequest) -> +qx.bom.request.IRequest"},"_serializeData":{"!doc":"<p>Serializes data.</p>","!type":"fn(data: string, contentType?: string) -> string"},"_setResponse":{"!doc":"<p>Sets the response.</p>","!type":"fn(response: string)"},"abort":{"!doc":"<p>Aborts request.</p>\n\n<p>Cancels any network activity.</p>","!type":"fn() -> +qx.bom.request.SimpleXhr"},"addListenerOnce":{"!doc":"<p>Adds an event listener for the given event name which is executed only once.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +qx.bom.request.Xhr"},"dispose":{"!doc":"<p>Disposes object and wrapped transport.</p>","!type":"fn() -> bool"},"getMethod":{"!doc":"<p>Gets the <span class=\"caps\">HTTP</span>-Method.</p>","!type":"fn() -> string"},"getRequestData":{"!doc":"<p>Gets the request data.</p>","!type":"fn() -> string"},"getRequestHeader":{"!doc":"<p>Gets a request header.</p>","!type":"fn(key: string) -> string"},"getResponse":{"!doc":"<p>Gets parsed response.</p>\n\n<p>If problems occured an empty string (&#8221;&#8221;) is more likely to be returned (instead of null).</p>","!type":"fn() -> string"},"getTimeout":{"!doc":"<p>The current timeout in milliseconds.</p>","!type":"fn() -> number"},"getTransport":{"!doc":"<p>Gets low-level transport.</p>\n\n<p>Note: To be used with caution!</p>\n\n<p>This method can be used to query the transport directly,\nbut should be used with caution. Especially, it\nis not advisable to call any destructive methods\nsuch as <code>open</code> or <code>send</code>.</p>","!type":"fn() -> Object"},"getUrl":{"!doc":"<p>Gets the <span class=\"caps\">URL</span>.</p>","!type":"fn() -> string"},"isCaching":{"!doc":"<p>Whether requests are cached.</p>","!type":"fn() -> bool"},"isDisposed":{"!doc":"<p>Returns true if the object is disposed.</p>","!type":"fn() -> bool"},"isDone":{"!doc":"<p>Whether request completed (is done).</p>","!type":"fn() -> bool"},"send":{"!doc":"<p>Sends request.</p>\n\n<p>Relies on set before:\n* a <span class=\"caps\">HTTP</span> method\n* an <span class=\"caps\">URL</span>\n* optional request headers\n* optional request data</p>","!type":"fn()"},"setMethod":{"!doc":"<p>Sets the <span class=\"caps\">HTTP</span>-Method.</p>","!type":"fn(method: string) -> +qx.bom.request.SimpleXhr"},"setParser":{"!doc":"<p>Sets (i.e. override) the parser for the response parsing.</p>","!type":"fn(parser: string) -> fn()"},"setRequestData":{"!doc":"<p>Sets the request data to be send as part of the request.</p>\n\n<p>The request data is transparently included as <span class=\"caps\">URL</span> query parameters or embedded in the\nrequest body as form data.</p>","!type":"fn(data: string) -> +qx.bom.request.SimpleXhr"},"setRequestHeader":{"!doc":"<p>Sets a request header.</p>","!type":"fn(key: string, value: string) -> +qx.bom.request.SimpleXhr"},"setTimeout":{"!doc":"<p>Sets the timout limit in milliseconds.</p>","!type":"fn(millis: number) -> +qx.bom.request.SimpleXhr"},"setUrl":{"!doc":"<p>Sets the <span class=\"caps\">URL</span>.</p>","!type":"fn(url: string) -> +qx.bom.request.SimpleXhr"},"toHashCode":{"!doc":"<p>Returns unique hash code of object.</p>","!type":"fn() -> +Integer"},"useCaching":{"!doc":"<p>Whether to allow request to be answered from cache.</p>\n\n<p>Allowed values:</p>\n\n<ul>\n<li><code>true</code>: Allow caching (Default)</li>\n<li><code>false</code>: Prohibit caching. Appends &#8216;nocache&#8217; parameter to <span class=\"caps\">URL</span>.</li>\n</ul>\n\n<p>Consider setting a Cache-Control header instead. A request&#8217;s Cache-Control\nheader may contain a number of directives controlling the behavior of\nany caches in between client and origin server and allows therefore a more\nfine grained control over caching. If such a header is provided, the setting\nof setCache() will be ignored.</p>\n\n<ul>\n<li><code>&#8220;no-cache&#8221;</code>: Force caches to submit request in order to<br />\nvalidate the freshness of the representation. Note that the requested<br />\nresource may still be served from cache if the representation is<br />\nconsidered fresh. Use this directive to ensure freshness but save<br />\nbandwidth when possible.</li>\n<li><code>&#8220;no-store&#8221;</code>: Do not keep a copy of the representation under<br />\nany conditions.</li>\n</ul>\n\n<p>See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\nCaching tutorial</a> for an excellent introduction to Caching in general.\nRefer to the corresponding section in the\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\n<span class=\"caps\">HTTP</span> 1.1 specification</a> for more details and advanced directives.</p>\n\n<p>It is recommended to choose an appropriate Cache-Control directive rather\nthan prohibit caching using the nocache parameter.</p>","!type":"fn(value: bool) -> +qx.bom.request.SimpleXhr"}}},"Xhr":{"!proto":"Object","!doc":"<p>A wrapper of the XMLHttpRequest host object (or equivalent). The interface is\nsimilar to <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">XmlHttpRequest</a>.</p>\n\n<p>Hides browser inconsistencies and works around bugs found in popular\nimplementations.</p>\n\n<div class=\"desktop\">\nExample:\n\n<pre class=\"javascript\">\n var req = new qx.bom.request.Xhr();\n req.onload = function() {\n   // Handle data received\n   req.responseText;\n }\n\n req.open(\"GET\", url);\n req.send();\n</pre>\n\n</div>","!type":"fn()","prototype":{"__checkDisposed":{"!doc":"<p>Throw when already disposed.</p>","!type":"fn()"},"__initNativeXhr":{"!doc":"<p>Init native <span class=\"caps\">XHR</span>.</p>","!type":"fn()"},"__isNetworkError":{"!doc":"<p>Check for network error.</p>","!type":"fn() -> bool"},"__normalizeResponseXML":{"!doc":"<p>Normalize responseXML property across browsers.</p>","!type":"fn()"},"__normalizeStatus":{"!doc":"<p>Normalize status property across browsers.</p>","!type":"fn()"},"__onNativeAbort":{"!doc":"<p>Track native abort.</p>\n\n<p>In case the end user cancels the request by other\nmeans than calling abort().</p>","!type":"fn()"},"__onNativeReadyStateChange":{"!doc":"<p>Handle native onreadystatechange.</p>\n\n<p>Calls user-defined function onreadystatechange on each\nstate change and syncs the <span class=\"caps\">XHR</span> status properties.</p>","!type":"fn()"},"__onTimeout":{"!doc":"<p>Handle faked timeout.</p>","!type":"fn()"},"__onUnload":{"!doc":"<p>Handler for native unload event.</p>","!type":"fn()"},"__readyStateChange":{"!doc":"<p>Handle readystatechange. Called internally when readyState is changed.</p>","!type":"fn()"},"__readyStateChangeDone":{"!doc":"<p>Handle readystatechange. Called internally by\n{@link #__readyStateChange} when readyState is <span class=\"caps\">DONE</span>.</p>","!type":"fn()"},"__supportsManyRequests":{"!doc":"<p>Helper method to determine whether browser supports reusing the\nsame native <span class=\"caps\">XHR</span> to send more requests.</p>","!type":"fn() -> bool"},"_createNativeXhr":{"!doc":"<p>Create XMLHttpRequest (or equivalent).</p>","!type":"fn() -> Object"},"_emit":{"!doc":"<p>Helper to emit events and call the callback methods.</p>","!type":"fn(event: string)"},"_getProtocol":{"!doc":"<p>Get protocol of requested <span class=\"caps\">URL</span>.</p>","!type":"fn() -> string"},"abort":{"!doc":"<p>Abort request &#8211; i.e. cancels any network activity.</p>\n\n<p>Note:\n On Windows 7 every browser strangely skips the loading phase\n when this method is called (because readyState never gets 3).</p>\n\n<p>So keep this in mind if you rely on the phases which are\n passed through. They will be &#8220;opened&#8221;, &#8220;sent&#8221;, &#8220;abort&#8221;\n instead of normally &#8220;opened&#8221;, &#8220;sent&#8221;, &#8220;loading&#8221;, &#8220;abort&#8221;.</p>","!type":"fn() -> +qx.bom.request.Xhr"},"dispose":{"!doc":"<p>Dispose object and wrapped native <span class=\"caps\">XHR</span>.</p>","!type":"fn() -> bool"},"getAllResponseHeaders":{"!doc":"<p>Get all response headers from response.</p>","!type":"fn() -> string"},"getRequest":{"!doc":"<p>Get wrapped native XMLHttpRequest (or equivalent).</p>\n\n<p>Can be XMLHttpRequest or ActiveX.</p>","!type":"fn() -> Object"},"getResponseHeader":{"!doc":"<p>Get a single response header from response.</p>","!type":"fn(header: string) -> string"},"isDisposed":{"!doc":"<p>Check if the request has already beed disposed.</p>","!type":"fn() -> bool"},"on":{"!doc":"<p>Add an event listener for the given event name.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +qx.bom.request.Xhr"},"onabort":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;abort&#8221; that is fired when request\nis aborted.</p>\n\n<p>Replace with custom method to listen to the &#8220;abort&#8221; event.</p>","!type":"fn()"},"onerror":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;error&#8221; that is fired on a network error.</p>\n\n<p>Replace with custom method to listen to the &#8220;error&#8221; event.</p>","!type":"fn()"},"onload":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;load&#8221; that is fired on successful retrieval.</p>\n\n<p>Note: This handler is called even when the <span class=\"caps\">HTTP</span> status indicates an error.</p>\n\n<p>Replace with custom method to listen to the &#8220;load&#8221; event.</p>","!type":"fn()"},"onloadend":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;loadend&#8221; that is fired on retrieval.</p>\n\n<p>Note: This handler is called even when a network error (or similar)\noccurred.</p>\n\n<p>Replace with custom method to listen to the &#8220;loadend&#8221; event.</p>","!type":"fn()"},"onreadystatechange":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event that fires at every state change.</p>\n\n<p>Replace with custom method to get informed about the communication progress.</p>","!type":"fn()"},"ontimeout":{"!doc":"<p>Event handler for <span class=\"caps\">XHR</span> event &#8220;timeout&#8221; that is fired when timeout\ninterval has passed.</p>\n\n<p>Replace with custom method to listen to the &#8220;timeout&#8221; event.</p>","!type":"fn()"},"open":{"!doc":"<p>Initializes (prepares) request.</p>","!type":"fn(method?: string, url: string, async?: bool, user?: string, password?: string)"},"overrideMimeType":{"!doc":"<p>Overrides the <span class=\"caps\">MIME</span> type returned by the server\nand must be called before <code>send()</code>.</p>\n\n<p>Note:</p>\n\n<ul>\n<li>IE doesn&#8217;t support this method so in this case an Error is thrown.</li>\n<li>after calling this method <code>getResponseHeader(&#8220;Content-Type&#8221;)</code><br />\n  may return the original (Firefox 23, IE 10, Safari 6) or<br />\n  the overriden content type (Chrome 28+, Opera 15+).</li>\n</ul>","!type":"fn(mimeType: string) -> +qx.bom.request.Xhr"},"send":{"!doc":"<p>Sends request.</p>","!type":"fn(data?: string) -> +qx.bom.request.Xhr"},"setRequestHeader":{"!doc":"<p>Sets an <span class=\"caps\">HTTP</span> request header to be used by the request.</p>\n\n<p>Note: The request must be initialized before using this method.</p>","!type":"fn(key: string, value: string) -> +qx.bom.request.Xhr"}}}},"rest":{"Resource":{"!proto":"qx.event.Emitter","!doc":"<p>Client-side wrapper of a <span class=\"caps\">REST</span> resource.</p>\n\n<p>Each instance represents a resource in terms of <span class=\"caps\">REST</span>. A number of actions\n(usually <span class=\"caps\">HTTP</span> methods) unique to the resource can be defined and invoked.\nA resource with its actions is configured declaratively by passing a resource\ndescription to the constructor, or programatically using {@link #map}.</p>\n\n<p>Each action is associated to a route. A route is a combination of method,\n<span class=\"caps\">URL</span> pattern and optional parameter constraints.</p>\n\n<p>An action is invoked by calling a method with the same name. When a <span class=\"caps\">URL</span>\npattern of a route contains positional parameters, those parameters must be\npassed when invoking the associated action. Also, constraints defined in the\nroute must be satisfied.</p>\n\n<p>When an action is invoked, a request is configured according to the associated\nroute, is passed the <span class=\"caps\">URL</span> parameters, request body data, and finally send.\nWhat kind of request is send can be configured by overwriting {@link #_getRequest}.</p>\n\n<p>No contraints on the action&#8217;s name or the scope of the URLs are imposed. However,\nif you want to follow RESTful design patterns it is recommended to name actions\nthe same as the <span class=\"caps\">HTTP</span> action.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n \"post\": { method: \"POST\", url: \"/photos/\"}\n};\nvar photo = new qx.bom.rest.Resource(description);\n// Can also be written: photo.invoke(\"get\", {id: 1});\nphoto.get({id: 1});\n\n// Additionally sets request data (provide it as string or set the content type)\n// In a RESTful environment this creates a new resource with the given 'id'\nphoto.configureRequest(function(req) {\n req.setRequestHeader(\"Content-Type\", \"application/json\");\n});\nphoto.put({id: 1}, {title: \"Monkey\"});\n\n// Additionally sets request data (provide it as string or set the content type)\n// In a RESTful environment this adds a new resource to the resource collection 'photos'\nphoto.configureRequest(function(req) {\n req.setRequestHeader(\"Content-Type\", \"application/json\");\n});\nphoto.post(null, {title: \"Monkey\"});\n</pre>\n\n<p>To check for existence of <span class=\"caps\">URL</span> parameters or constrain them to a certain format, you\ncan add a <code>check</code> property to the description. See {@link #map} for details.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n};\nvar photo = new qx.bom.rest.Resource(description);\n// photo.get({id: \"FAIL\"});\n// -- Error: \"Parameter 'id' is invalid\"\n</pre>\n\n<p>If your description happens to use the same action more than once, consider\ndefining another resource.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photos\"},\n};\n// Distinguish \"photo\" (singular) and \"photos\" (plural) resource\nvar photos = new qx.bom.rest.Resource(description);\nphotos.get();\n</pre>\n\n<p>Basically, all routes of a resource should point to the same <span class=\"caps\">URL</span> (resource in\nterms of <span class=\"caps\">HTTP</span>). One acceptable exception of this constraint are resources where\nrequired parameters are part of the <span class=\"caps\">URL</span> (<code>/photos/1/</code>) or filter\nresources. For instance:</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n};\nvar photos = new qx.bom.rest.Resource(description);\nphotos.get();\nphotos.get({tag: \"wildlife\"})\n</pre>\n\n<p>Strictly speaking, the <code>photos</code> instance represents two distinct resources\nand could therefore just as well mapped to two distinct resources (for instance,\nnamed photos and photosTagged). What style to choose depends on the kind of data\nreturned. For instance, it seems sensible to stick with one resource if the filter\nonly limits the result set (i.e. the invidual results have the same properties).</p>\n\n<p>In order to respond to successful (or erroneous) invocations of actions,\neither listen to the generic &#8220;success&#8221; or &#8220;error&#8221; event and get the action\nfrom the event data, or listen to action specific events defined at runtime.\nAction specific events follow the pattern &#8221;&lt;action&gt;Success&#8221; and\n&#8221;&lt;action&gt;Error&#8221;, e.g. &#8220;indexSuccess&#8221;.</p>","!type":"fn()","placeholdersFromUrl":{"!doc":"<p>Get placeholders from <span class=\"caps\">URL</span>.</p>","!type":"fn(url: string) -> +Array"},"prototype":{"__checkParameters":{"!doc":"<p>Check parameters.</p>","!type":"fn(params: +Map, check: +Map)"},"__configureJsonRequest":{"!doc":"<p>Serialize data to <span class=\"caps\">JSON</span> when content type indicates.</p>","!type":"fn(req: +qx.bom.request.SimpleXhr, config: +Map, data: +Map)"},"__configureRequest":{"!doc":"<p>Configure request.</p>","!type":"fn(req: +qx.bom.request.SimpleXhr, config: +Map, data: +Map)"},"__createRequest":{"!doc":"<p>Create request.</p>","!type":"fn(action: string) -> +qx.bom.request.SimpleXhr"},"__declareEvent":{"!doc":"<p>Declare event at runtime.</p>","!type":"fn(type: string)"},"__mapFromDescription":{"!doc":"<p>Map actions from description.</p>\n\n<p>Allows to decoratively define routes.</p>","!type":"fn(description: +Map)"},"_getRequest":{"!doc":"<p>Get request.</p>\n\n<p>May be overriden to change type of request.</p>","!type":"fn() -> +qx.bom.request.SimpleXhr"},"_getRequestConfig":{"!doc":"<p>Get request configuration for action and parameters.</p>\n\n<p>This is were placeholders are replaced with parameters.</p>","!type":"fn(action: string, params: +Map) -> +Map"},"_getRequestHandler":{"!doc":"<p>Provides the request callbacks for &#8216;onsuccess&#8217;, &#8216;onfail&#8217; and &#8216;onloadend&#8217;.</p>","!type":"fn() -> +Map"},"_getThrottleCount":{"!doc":"<p>Override to adjust the throttle count.</p>","!type":"fn() -> +Integer"},"_getThrottleLimit":{"!doc":"<p>Override to adjust the throttle limit.</p>","!type":"fn() -> +Integer"},"_startPoll":{"!doc":"<p>Start a poll process.</p>","!type":"fn(action: string, listener: fn(), interval: number)"},"abort":{"!doc":"<p>Abort action.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n  // Abort all invocations of action\n  res.get({id: 1});\n  res.get({id: 2});\n  res.abort(\"get\");\n\n  // Abort specific invocation of action (by id)\n  var actionId = res.get({id: 1});\n  res.abort(actionId);\n</pre>","!type":"fn(varargs: string)"},"configureRequest":{"!doc":"<p>Configure request.</p>","!type":"fn(callback: fn())"},"destruct":{"!doc":"<p>Desctructs the Resource.</p>\n\n<p>All created requests, routes and pollTimers will be disposed.</p>","!type":"fn()"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"},"getRequestsByAction":{"!doc":"<p>Retrieve the currently stored request objects for an action.</p>","!type":"fn(action: string) -> +Array"},"invoke":{"!doc":"<p>Invoke action with parameters.</p>\n\n<p>Internally called by actions dynamically created.</p>\n\n<p>May be overriden to customize action and parameter handling.</p>","!type":"fn(action: string, params: +Map, data: +Map) -> number"},"isDisposed":{"!doc":"<p>Returns true if the object is disposed.</p>","!type":"fn() -> bool"},"longPoll":{"!doc":"<p>Long-poll action.</p>\n\n<p>Use Ajax long-polling to continously fetch a resource as soon as the\nserver signals new data. The server determines when new data is available,\nwhile the client keeps open a request. Requires configuration on the\nserver side. Basically, the server must not close a connection until\nnew data is available. For a high level introduction to long-polling,\nrefer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\nAjax with long polling</a>.</p>\n\n<p>Uses {@link #refresh} internally. Make sure you understand the\nimplications of IE&#8217;s tendency to cache overly agressive.</p>\n\n<p>Note no interval is given on the client side.</p>","!type":"fn(action: string) -> string"},"map":{"!doc":"<p>Map action to combination of method and <span class=\"caps\">URL</span> pattern.</p>\n\n<pre class=\"javascript\">\n  res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n\n  // GET /photos/123\n  res.get({id: \"123\"});\n</pre>","!type":"fn(action: string, method: string, url: string, check?: +Map)"},"poll":{"!doc":"<p>Periodically invoke action.</p>\n\n<p>Replays parameters given when action was invoked originally. When the\naction was not yet invoked and requires parameters, parameters must be\ngiven.</p>\n\n<p>Please note that IE tends to cache overly agressive. One work-around is\nto disable caching on the client side by configuring the request with\n<code>setCache(false)</code>. If you control the server, a better\nwork-around is to include appropriate headers to explicitly control\ncaching. This way you still avoid requests that can be correctly answered\nfrom cache (e.g. when nothing has changed since the last poll). Please\nrefer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\nXMLHttpRequest Caching Test</a> for available options.</p>","!type":"fn(action: string, interval: number, params?: +Map, immediately?: bool)"},"refresh":{"!doc":"<p>Resend request associated to action.</p>\n\n<p>Replays parameters given when action was invoked originally.</p>","!type":"fn(action: string)"},"restartPollByAction":{"!doc":"<p>Restarts a poll process by the associated action.</p>","!type":"fn(action: string)"},"setBaseUrl":{"!doc":"<p>Set base <span class=\"caps\">URL</span>.</p>\n\n<p>The base <span class=\"caps\">URL</span> is prepended to the URLs given in the description.\nChanges affect all future invocations.</p>","!type":"fn(baseUrl: string)"},"setRequestFactory":{"!doc":"<p>Set a request factory function to switch the request implementation.\nThe created requests have to implement {@link qx.io.request.AbstractRequest}.</p>","!type":"fn(fn: fn())"},"setRequestHandler":{"!doc":"<p>Sets request callbacks for &#8216;onsuccess&#8217;, &#8216;onfail&#8217; and &#8216;onloadend&#8217;.</p>","!type":"fn(handler: +Map)"},"stopPollByAction":{"!doc":"<p>Stops a poll process by the associated action.</p>","!type":"fn(action: string)"}}}},"Selection":{"!doc":"<p>Low-level selection <span class=\"caps\">API</span> to select elements like input and textarea elements\nas well as text nodes or elements which their child nodes.</p>","__isInputOrTextarea":{"!doc":"<p>Utility method to check for an input or textarea element</p>","!type":"fn(node: +Node) -> bool"},"get":{"!doc":"<p>Returns the current selected text.</p>","!type":"fn(node: +Node) -> string"},"getEnd":{"!doc":"<p>Returns the end of the selection</p>","!type":"fn(node: +Node) -> +Integer"},"getLength":{"!doc":"<p>Returns the length of the selection</p>","!type":"fn(node: +Node) -> +Integer"},"getSelectionObject":{"!doc":"<p>Returns the native selection object.</p>","!type":"fn(documentNode: +document) -> +Selection"},"getStart":{"!doc":"<p>Returns the start of the selection</p>","!type":"fn(node: +Node) -> +Integer"},"set":{"!doc":"<p>Sets a selection at the given node with the given start and end.\nFor text nodes, input and textarea elements the start and end parameters\nset the boundaries at the text.\nFor element nodes the start and end parameters are used to select the\nchildNodes of the given element.</p>","!type":"fn(node: +Node, start: +Integer, end: +Integer) -> bool"},"setAll":{"!doc":"<p>Selects all content/childNodes of the given node</p>","!type":"fn(node: +Node) -> bool"}},"Selector":{"!doc":"<p>The selector engine supports virtually all <span class=\"caps\">CSS</span> 3 Selectors  &#8211; this even\nincludes some parts that are infrequently implemented such as escaped\nselectors (<code>.foo\\\\+bar</code>), Unicode selectors, and results returned\nin document order. There are a few notable exceptions to the <span class=\"caps\">CSS</span> 3 selector\nsupport:</p>\n\n<ul>\n<li><code>:root</code></li>\n<li><code>:target</code></li>\n<li><code>:nth-last-child</code></li>\n<li><code>:nth-of-type</code></li>\n<li><code>:nth-last-of-type</code></li>\n<li><code>:first-of-type</code></li>\n<li><code>:last-of-type</code></li>\n<li><code>:only-of-type</code></li>\n<li><code>:lang()</code></li>\n</ul>\n\n<p>In addition to the <span class=\"caps\">CSS</span> 3 Selectors the engine supports the following\nadditional selectors or conventions.</p>\n\n<p><strong>Changes</strong></p>\n\n<ul>\n<li><code>:not(a.b)</code>: Supports non-simple selectors in <code>:not()</code> (most browsers only support <code>:not(a)</code>, for example).</li>\n<li><code>:not(div > p)</code>: Supports full selectors in <code>:not()</code>.</li>\n<li><code>:not(div, p)</code>: Supports multiple selectors in <code>:not()</code>.</li>\n<li><code>[NAME=VALUE]</code>: Doesn&#8217;t require quotes around the specified value in an attribute selector.</li>\n</ul>\n\n<p><strong>Additions</strong></p>\n\n<ul>\n<li><code>[NAME!=VALUE]</code>: Finds all elements whose <code><span class=\"caps\">NAME</span></code> attribute doesn&#8217;t match the specified value. Is equivalent to doing <code>:not([NAME=VALUE])</code>.</li>\n<li><code>:contains(TEXT)</code>: Finds all elements whose textual context contains the word <code><span class=\"caps\">TEXT</span></code> (case sensitive).</li>\n<li><code>:header</code>: Finds all elements that are a header element (h1, h2, h3, h4, h5, h6).</li>\n<li><code>:parent</code>: Finds all elements that contains another element.</li>\n</ul>\n\n<p><strong>Positional Selector Additions</strong></p>\n\n<ul>\n<li><code>:first</code>/</code>:last</code>: Finds the first or last matching element on the page. (e.g. <code>div:first</code> would find the first div on the page, in document order)</li>\n<li><code>:even</code>/<code>:odd</code>: Finds every other element on the page (counting begins at 0, so <code>:even</code> would match the first element).</li>\n<li><code>:eq</code>/<code>:nth</code>: Finds the Nth element on the page (e.g. <code>:eq(5)</code> finds the 6th element on the page).</li>\n<li><code>:lt</code>/<code>:gt</code>: Finds all elements at positions less than or greater than the specified positions.</li>\n</ul>\n\n<p><strong>Form Selector Additions</strong></p>\n\n<ul>\n<li><code>:input</code>: Finds all input elements (includes textareas, selects, and buttons).</li>\n<li><code>:text</code>, <code>:checkbox</code>, <code>:file</code>, <code>:password</code>, <code>:submit</code>, <code>:image</code>, <code>:reset</code>, <code>:button</code>: Finds the input element with the specified input type (<code>:button</code> also finds button elements).</li>\n</ul>\n\n<p>Based on Sizzle by John Resig, see:</p>\n\n<ul>\n<li><a href=\"http://sizzlejs.com/\">http://sizzlejs.com/</a></li>\n</ul>\n\n<p>For further usage details also have a look at the wiki page at:</p>\n\n<ul>\n<li><a href=\"https://github.com/jquery/sizzle/wiki/Sizzle-Home\">https://github.com/jquery/sizzle/wiki/Sizzle-Home</a></li>\n</ul>","matches":{"!doc":"<p>Returns an reduced array which only contains the elements from the given\narray which matches the given selector</p>","!type":"fn(selector: string, set: +Array) -> +Array"},"query":{"!doc":"<p>Queries the document for the given selector. Supports all CSS3 selectors\nplus some extensions as mentioned in the class description.</p>","!type":"fn(selector: string, context: +Element) -> +Array"}},"Shortcut":{"!proto":"qx.core.Object","!doc":"<p>Shortcuts can be used to globally define keyboard shortcuts.</p>","!type":"fn()","prototype":{"__matchesKeyEvent":{"!doc":"<p>Checks whether the given key event matches the shortcut&#8217;s shortcut</p>","!type":"fn(e: +qx.event.type.KeySequence) -> bool"},"__normalizeKeyIdentifier":{"!doc":"<p>Checks and normalizes the key identifier.</p>","!type":"fn(keyName: string) -> string"},"__onKeyDown":{"!doc":"<p>Key down event handler.</p>","!type":"fn(event: +qx.event.type.KeySequence)"},"__onKeyPress":{"!doc":"<p>Key press event handler.</p>","!type":"fn(event: +qx.event.type.KeySequence)"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShortcut":{"!doc":"<p>Applies changes of the property value of the property <code>shortcut</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn(value: string, old: string)"},"execute":{"!doc":"<p>Fire the &#8220;execute&#8221; event on this shortcut.</p>","!type":"fn(target: Object)"},"getAutoRepeat":{"!doc":"<p>Returns the (computed) value of the property <code>autoRepeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoRepeat}.</p>","!type":"fn() -> Object"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getShortcut":{"!doc":"<p>Returns the (computed) value of the property <code>shortcut</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn() -> Object"},"initAutoRepeat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoRepeat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoRepeat}.</p>","!type":"fn(value: Object) -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initShortcut":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shortcut</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn(value: Object) -> Object"},"isAutoRepeat":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>autoRepeat</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoRepeat}.</p>","!type":"fn() -> bool"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"resetAutoRepeat":{"!doc":"<p>Resets the user value of the property <code>autoRepeat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoRepeat}.</p>","!type":"fn()"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetShortcut":{"!doc":"<p>Resets the user value of the property <code>shortcut</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn()"},"setAutoRepeat":{"!doc":"<p>Sets the user value of the property <code>autoRepeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoRepeat}.</p>","!type":"fn(value: Object) -> Object"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setShortcut":{"!doc":"<p>Sets the user value of the property <code>shortcut</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn(value: Object) -> Object"},"toggleAutoRepeat":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>autoRepeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoRepeat}.</p>","!type":"fn() -> bool"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"toString":{"!doc":"<p>Returns the shortcut as string using the currently selected locale.</p>","!type":"fn() -> string"}}},"Storage":{"!doc":"<p>This is a cross browser storage implementation. The <span class=\"caps\">API</span> is aligned with the\n<span class=\"caps\">API</span> of the <span class=\"caps\">HTML</span> web storage (<a href=\"http://www.w3.org/TR/webstorage/\">http://www.w3.org/TR/webstorage/</a>) which is also\nthe preferred implementation used. As fallback for IE < 8, we use user data.\nIf both techniques are unsupported, we supply a in memory storage, which is\nof course, not persistent.</p>","getLocal":{"!doc":"<p>Get an instance of a local storage.</p>","!type":"fn() -> +qx.bom.storage.Web"},"getSession":{"!doc":"<p>Get an instance of a session storage.</p>","!type":"fn() -> +qx.bom.storage.Web"}},"storage":{"Memory":{"!doc":"<p>Fallback storage implementation which offers the same <span class=\"caps\">API</span> as every other storage\nbut is not persistent. Basically, its just a storage <span class=\"caps\">API</span> on a JavaScript map.</p>","getLocal":{"!doc":"<p>Returns an instance of {@link qx.bom.storage.Memory} which is of course\nnot persisted on reload.</p>","!type":"fn() -> +qx.bom.storage.Memory"},"getSession":{"!doc":"<p>Returns an instance of {@link qx.bom.storage.Memory} which is of course\nnot persisted on reload.</p>","!type":"fn() -> +qx.bom.storage.Memory"},"!type":"fn()","prototype":{"clear":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"forEach":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"getItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"getKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: +Integer) -> string"},"getLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> +Integer"},"getStorage":{"!doc":"<p>Returns the internal used map.</p>","!type":"fn() -> +Map"},"removeItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"setItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"}}},"UserData":{"!doc":"<p>Fallback storage implementation usable in IE browsers. It is recommended to use\nthese implementation only in IE < 8 because IE >= 8 supports\n{@link qx.bom.storage.Web}.</p>","getLocal":{"!doc":"<p>Returns an instance of {@link qx.bom.storage.UserData} used to store\ndata persistent.</p>","!type":"fn() -> +qx.bom.storage.UserData"},"getSession":{"!doc":"<p>Returns an instance of {@link qx.bom.storage.UserData} used to store\ndata persistent.</p>","!type":"fn() -> +qx.bom.storage.UserData"},"!type":"fn()","prototype":{"clear":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"forEach":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"getItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"getKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: +Integer) -> string"},"getLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> +Integer"},"getStorage":{"!doc":"<p>Returns the map used to keep a in memory copy of the stored data.</p>","!type":"fn() -> +Map"},"removeItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"setItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"}}},"Web":{"!doc":"<p>Storage implementation using <span class=\"caps\">HTML</span> web storage:\n<a href=\"http://www.w3.org/TR/webstorage/\">http://www.w3.org/TR/webstorage/</a></p>","getLocal":{"!doc":"<p>Static accessor for the local storage.</p>","!type":"fn() -> +qx.bom.storage.Web"},"getSession":{"!doc":"<p>Static accessor for the session storage.</p>","!type":"fn() -> +qx.bom.storage.Web"},"!type":"fn()","prototype":{"clear":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"forEach":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"getItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"getKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: +Integer) -> string"},"getLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> +Integer"},"getStorage":{"!doc":"<p>Returns the internal used storage (the native object).</p>","!type":"fn() -> +Storage"},"removeItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"setItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"}}}},"String":{"!doc":"<p>A Collection of utility functions to escape and unescape strings.</p>","escape":{"!doc":"<p>Escapes the characters in a <code>String</code> using <span class=\"caps\">HTML</span> entities.</p>\n\n<p>For example: <tt>&#8220;bread&#8221; &amp; &#8220;butter&#8221;</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\nSupports all known <span class=\"caps\">HTML</span> 4.0 entities, including funky accents.</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/REC-html32#latin1\"><span class=\"caps\">HTML</span> 3.2 Character Entities for <span class=\"caps\">ISO</span> Latin-1</a></li>\n<li><a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\"><span class=\"caps\">HTML</span> 4.0 Character entity references</a></li>\n<li><a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\"><span class=\"caps\">HTML</span> 4.01 Character References</a></li>\n<li><a href=\"http://www.w3.org/TR/html401/charset.html#code-position\"><span class=\"caps\">HTML</span> 4.01 Code positions</a></li>\n</ul>","!type":"fn(str: string) -> string"},"fromText":{"!doc":"<p>Converts a plain text string into <span class=\"caps\">HTML</span>.\nThis is similar to {@link #escape} but converts new lines to\n<tt>&amp;lt:br&amp;gt:</tt> and preserves whitespaces.</p>","!type":"fn(str: string) -> string"},"toText":{"!doc":"<p>Converts <span class=\"caps\">HTML</span> to plain text.</p>\n\n<ul>\n<li>Strips all <span class=\"caps\">HTML</span> tags</li>\n<li>converts <tt>&amp;lt:br&amp;gt:</tt> to new line</li>\n<li>unescapes <span class=\"caps\">HTML</span> entities</li>\n</ul>","!type":"fn(str: string) -> string"},"unescape":{"!doc":"<p>Unescapes a string containing entity escapes to a string\ncontaining the actual Unicode characters corresponding to the\nescapes. Supports <span class=\"caps\">HTML</span> 4.0 entities.</p>\n\n<p>For example, the string &#8221;&amp;lt;Fran&amp;ccedil;ais&amp;gt;&#8221;\nwill become &#8221;&lt;Fran&ccedil;ais&gt;&#8221;</p>\n\n<p>If an entity is unrecognized, it is left alone, and inserted\nverbatim into the result string. e.g. &#8221;&amp;gt;&amp;zzzz;x&#8221; will\nbecome &#8221;&gt;&amp;zzzz;x&#8221;.</p>","!type":"fn(str: string) -> Object"}},"Style":{"!doc":"<p>Responsible class for everything concerning styles without the need of\nan element.</p>\n\n<p>If you want to query or modify styles of <span class=\"caps\">HTML</span> elements,\ntake a look at {@link qx.bom.element.Style}.</p>","getAppliedStyle":{"!doc":"<p>Detects <span class=\"caps\">CSS</span> support by using the native <span class=\"caps\">CSS</span>.supports function or by\napplying a style to a <span class=\"caps\">DOM</span> element of the given type and verifying\nthe result. Also checks for vendor-prefixed variants of the\nvalue, e.g. &#8220;linear-gradient&#8221; -> &#8221;-webkit-linear-gradient&#8221;. Returns the\n(possibly vendor-prefixed) value if successful or <code>null</code> if\nthe property and/or value are not supported.</p>","!type":"fn(element: +Element, propertyName: string, value: string, prefixed?: bool) -> string"},"getCssName":{"!doc":"<p>Takes the name of a JavaScript style property and returns the\ncorresponding <span class=\"caps\">CSS</span> name.</p>\n\n<p>The name of the style property is taken as is, i.e. it gets not\nextended by vendor prefixes. The conversion into the <span class=\"caps\">CSS</span> name is\ndone by string manipulation, not involving the <span class=\"caps\">DOM</span>.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.bom.Style.getCssName(\"MozTransform\"); //returns \"-moz-transform\"</pre>","!type":"fn(propertyName: string) -> string"},"getPropertyName":{"!doc":"<p>Takes the name of a style property and returns the name the browser uses\nfor its implementation, which might include a vendor prefix.</p>","!type":"fn(propertyName: string) -> string"}},"Stylesheet":{"!doc":"<p>Cross-browser wrapper to work with <span class=\"caps\">CSS</span> stylesheets.</p>","addImport":{"!doc":"<p>Add an import of an external <span class=\"caps\">CSS</span> file to a stylesheet</p>","!type":"fn(sheet: Object, url: string)"},"addRule":{"!doc":"<p>Insert a new <span class=\"caps\">CSS</span> rule into a given Stylesheet</p>","!type":"fn(sheet: Object, selector: string, entry: string)"},"createElement":{"!doc":"<p>Create a new Stylesheet node and append it to the document</p>","!type":"fn(text?: string) -> +Stylesheet"},"includeFile":{"!doc":"<p>Include a <span class=\"caps\">CSS</span> file</p>\n\n<em>Note:</em> Using a resource ID as the <code>href</code> parameter\nwill no longer be supported. Call\n<code>qx.util.ResourceManager.getInstance().toUri(href)</code> to get\nvalid URI to be used with this method.","!type":"fn(href: string, doc?: +Document)"},"removeAllImports":{"!doc":"<p>Remove all imports from a stylesheet</p>","!type":"fn(sheet: Object)"},"removeAllRules":{"!doc":"<p>Remove all <span class=\"caps\">CSS</span> rules from a stylesheet</p>","!type":"fn(sheet: Object)"},"removeImport":{"!doc":"<p>Removes an import from a stylesheet</p>","!type":"fn(sheet: Object, url: string)"},"removeRule":{"!doc":"<p>Remove a <span class=\"caps\">CSS</span> rule from a stylesheet</p>","!type":"fn(sheet: Object, selector: string)"},"removeSheet":{"!doc":"<p>Remove the given sheet from its owner.</p>","!type":"fn(sheet: Object)"}},"Template":{"!doc":"<p>The is a template class which can be used for <span class=\"caps\">HTML</span> templating. In fact,\nthis is a wrapper for mustache.js which is a &#8220;framework-agnostic way to\nrender logic-free views&#8221;.</p>\n\n<p>Here is a basic example how to use it:\nTemplate:</p>\n\n<pre class=\"javascript\">\nvar template = \"Hi, my name is {{name}}!\";\nvar view = {name: \"qooxdoo\"};\nqx.bom.Template.render(template, view);\n// return \"Hi, my name is qooxdoo!\"\n</pre>\n\n<p>For further details, please visit the mustache.js documentation here:\n  <a href=\"https://github.com/janl/mustache.js/blob/master/README.md\">https://github.com/janl/mustache.js/blob/master/README.md</a></p>","_createNodeFromTemplate":{"!doc":"<p>Accepts a parsed template and returns a (potentially nested) node.</p>","!type":"fn(template: string) -> +Element"},"get":{"!doc":"<p>Helper method which provides you with a direct access to templates\nstored as <span class=\"caps\">HTML</span> in the <span class=\"caps\">DOM</span>. The <span class=\"caps\">DOM</span> node with the given ID will be used\nas a template, parsed and a new <span class=\"caps\">DOM</span> node will be returned containing the\nparsed data. Keep in mind to have only one root <span class=\"caps\">DOM</span> element in the the\ntemplate.\nAdditionally, you should not put the template into a regular, hidden\n<span class=\"caps\">DOM</span> element because the template may not be valid <span class=\"caps\">HTML</span> due to the containing\nmustache tags. We suggest to put it into a script tag with the type\n<code>text/template</code>.</p>","!type":"fn(id: string, view: Object, partials: Object) -> +Element"},"render":{"!doc":"<p>Original and only template method of mustache.js. For further\ndocumentation, please visit <a href=\"https://github.com/janl/mustache.js\">https://github.com/janl/mustache.js</a></p>","!type":"fn(template: string, view: Object, partials: Object) -> string"},"renderToNode":{"!doc":"<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\nand output is equal to {@link #get}. The advantage over {@link #get}\nis that you don&#8217;t need a <span class=\"caps\">HTML</span> template but can use a template\nstring and still get a <span class=\"caps\">DOM</span> element. Keep in mind that templates\ncan only have one root element.</p>","!type":"fn(template: string, view: Object, partials: Object) -> +Element"}},"Viewport":{"!doc":"<p>Includes library functions to work with the client&#8217;s viewport (window).\nOrientation related functions are point to window.top as default.</p>","__getOrientationNormalizer":{"!doc":"<p>Returns an orientation normalizer value that should be added to device orientation\nto normalize behaviour on different devices.</p>","!type":"fn(win: +Window) -> +Map"},"getHeight":{"!doc":"<p>Returns the current height of the viewport (excluding the horizontal scrollbar\nif present).</p>","!type":"fn(win?: +Window) -> +Integer"},"getOrientation":{"!doc":"<p>Returns the current orientation of the viewport in degree.</p>\n\n<p>All possible values and their meaning:</p>\n\n<ul>\n<li><code>-90</code>: &#8220;Landscape&#8221;</li>\n<li><code>0</code>: &#8220;Portrait&#8221;</li>\n<li><code>90</code>: &#8220;Landscape&#8221;</li>\n<li><code>180</code>: &#8220;Portrait&#8221;</li>\n</ul>","!type":"fn(win?: +Window) -> +Integer"},"getScrollLeft":{"!doc":"<p>Returns the scroll position of the viewport</p>\n\n<p>All clients except IE < 9 support the non-standard property <code>pageXOffset</code>.\nAs this is easier to evaluate we prefer this property over <code>scrollLeft</code>.\nSince the window could differ from the one the application is running in, we can&#8217;t\nuse a one-time environment check to decide which property to use.</p>","!type":"fn(win?: +Window) -> +Integer"},"getScrollTop":{"!doc":"<p>Returns the scroll position of the viewport</p>\n\n<p>All clients except <span class=\"caps\">MSHTML</span> support the non-standard property <code>pageYOffset</code>.\nAs this is easier to evaluate we prefer this property over <code>scrollTop</code>.\nSince the window could differ from the one the application is running in, we can&#8217;t\nuse a one-time environment check to decide which property to use.</p>","!type":"fn(win?: +Window) -> +Integer"},"getWidth":{"!doc":"<p>Returns the current width of the viewport (excluding the vertical scrollbar\nif present).</p>","!type":"fn(win?: +Window) -> +Integer"},"isLandscape":{"!doc":"<p>Whether the viewport orientation is currently in landscape mode.</p>","!type":"fn(win?: +Window) -> bool"},"isPortrait":{"!doc":"<p>Whether the viewport orientation is currently in portrait mode.</p>","!type":"fn(win?: +Window) -> bool"}},"Vml":{"!doc":"<p>Helper class to work with <span class=\"caps\">VML</span> . If this class is used, it initialized <span class=\"caps\">VML</span>\nsupport.</p>\n\n<em>Note: This class is only available in Internet Explorer!</em>","create":{"!doc":"<p>Create <span class=\"caps\">VML</span> element</p>","!type":"fn(type: string, attributes?: +Map, win?: Object) -> +Element"},"createImage":{"!doc":"<p>Creates an <span class=\"caps\">VML</span> image and configures it. The image is always tiled.</p>","!type":"fn(source?: string, width?: +Integer, height?: +Integer, xOffset?: +Integer, yOffset?: +Integer, imageWidth?: +Integer, imageHeight?: +Integer) -> +Element"},"updateImage":{"!doc":"<p>Sets the image source and configures the image. The image element size\nresized to the given size and the image is always tiled.</p>","!type":"fn(image: +Element, source: string, width: +Integer, height: +Integer, xOffset?: +Integer, yOffset?: +Integer, imageWidth?: +Integer, imageHeight?: +Integer)"}},"webfonts":{"Manager":{"!proto":"qx.core.Object","!doc":"<p>Manages font-face definitions, making sure that each rule is only applied\nonce.</p>","!type":"fn()","prototype":{"__addRule":{"!doc":"<p>Adds a font-face rule to the document</p>","!type":"fn(rule: string)"},"__fixCssText":{"!doc":"<p>IE 6 and 7 omit the trailing quote after the format name when\nquerying cssText. This needs to be fixed before cssText is replaced\nor all rules will be invalid and no web fonts will work any more.</p>","!type":"fn(cssText: string) -> string"},"__flushQueue":{"!doc":"<p>Processes the next item in the queue</p>","!type":"fn()"},"__getRule":{"!doc":"<p>Assembles the body of a font-face rule for a single webFont.</p>","!type":"fn(familyName: string, sourcesMap: +Map) -> string"},"__getSourceForFormat":{"!doc":"<p>Returns the full src value for a given font <span class=\"caps\">URL</span> depending on the type</p>","!type":"fn(format: string, url: string) -> string"},"__getSourcesMap":{"!doc":"<p>Uses a naive regExp match to determine the format of each defined source\nfile for a webFont. Returns a map with the format names as keys and the\ncorresponding source URLs as values.</p>","!type":"fn(sources: string) -> +Map"},"__onFontChangeStatus":{"!doc":"<p>Removes the font-face declaration if a font could not be validated</p>","!type":"fn(ev: +qx.event.type.Data)"},"__removeRule":{"!doc":"<p>Removes the font-face declaration for the given font-family from the\nstylesheet</p>","!type":"fn(familyName: string)"},"__require":{"!doc":"<p>Does the actual work of adding stylesheet rules and triggering font\nvalidation</p>","!type":"fn(familyName: string, sources: string, callback?: fn(), context?: Object)"},"getPreferredFormats":{"!doc":"<p>Returns the preferred font format(s) for the currently used browser. Some\nbrowsers support multiple formats, e.g. <span class=\"caps\">WOFF</span> and <span class=\"caps\">TTF</span> or <span class=\"caps\">WOFF</span> and <span class=\"caps\">EOT</span>. In\nthose cases, <span class=\"caps\">WOFF</span> is considered the preferred format.</p>","!type":"fn() -> string"},"remove":{"!doc":"<p>Removes a font&#8217;s font-face definition from the style sheet. This means\nthe font will no longer be available and any elements using it will\nfall back to the their regular font-families.</p>","!type":"fn(familyName: string)"},"removeStyleSheet":{"!doc":"<p>Removes the styleSheet element used for all web font definitions from the\ndocument. This means all web fonts declared by the manager will no longer\nbe available and elements using them will fall back to their regular\nfont-families</p>","!type":"fn()"},"require":{"!doc":"<p>Adds the necessary font-face rule for a web font to the document. Also\ncreates a web font Validator ({@link qx.bom.webfonts.Validator}) that\nchecks if the webFont was applied correctly.</p>","!type":"fn(familyName: string, sourcesList: string, callback?: fn(), context?: Object)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.bom.webfonts.Manager"}},"Validator":{"!proto":"qx.core.Object","!doc":"<p>Checks whether a given font is available on the document and fires events\naccordingly.</p>","!type":"fn()","removeDefaultHelperElements":{"!doc":"<p>Removes the two common helper elements used for all size comparisons from\nthe <span class=\"caps\">DOM</span></p>","!type":"fn()"},"prototype":{"__init":{"!doc":"<p>Creates the default helper elements and gets their widths</p>","!type":"fn()"},"__onTimerInterval":{"!doc":"<p>Triggers helper element size comparison and fires a ({@link #changeStatus})\nevent with the result.</p>","!type":"fn()"},"_applyFontFamily":{"!doc":"<p>Applies changes of the property value of the property <code>fontFamily</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fontFamily}.</p>","!type":"fn(value: Object, old: Object)"},"_getHelperElement":{"!doc":"<p>Creates a span element with the comparison text ({@link #COMPARISON_STRING})\nand styled with the default <span class=\"caps\">CSS</span> ({@link #HELPER_CSS}) plus the given\nfont-family value and appends it to the <span class=\"caps\">DOM</span></p>","!type":"fn(fontFamily: string) -> +Element"},"_getRequestedHelpers":{"!doc":"<p>Creates the two helper elements styled with the font to be checked</p>","!type":"fn() -> +Map"},"_isFontValid":{"!doc":"<p>Checks if the font is available by comparing the widths of the elements\nusing the generic fonts to the widths of the elements using the font to\nbe validated</p>","!type":"fn() -> bool"},"_reset":{"!doc":"<p>Removes the helper elements from the <span class=\"caps\">DOM</span></p>","!type":"fn()"},"getFontFamily":{"!doc":"<p>Returns the (computed) value of the property <code>fontFamily</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fontFamily}.</p>","!type":"fn() -> Object"},"getTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn() -> Object"},"initFontFamily":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>fontFamily</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #fontFamily}.</p>","!type":"fn(value: Object) -> Object"},"initTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"resetFontFamily":{"!doc":"<p>Resets the user value of the property <code>fontFamily</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #fontFamily}.</p>","!type":"fn()"},"resetTimeout":{"!doc":"<p>Resets the user value of the property <code>timeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn()"},"setFontFamily":{"!doc":"<p>Sets the user value of the property <code>fontFamily</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fontFamily}.</p>","!type":"fn(value: Object) -> Object"},"setTimeout":{"!doc":"<p>Sets the user value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"validate":{"!doc":"<p>Validates the font</p>","!type":"fn()"}}},"WebFont":{"!proto":"qx.bom.Font","!doc":"<p>Requests web fonts from {@link qx.bom.webfonts.Manager} and fires events\nwhen their loading status is known.</p>","prototype":{"_applySources":{"!doc":"<p>Applies changes of the property value of the property <code>sources</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sources}.</p>","!type":"fn(value: Object, old: Object)"},"_onWebFontChangeStatus":{"!doc":"<p>Propagates web font status changes</p>","!type":"fn(ev: +qx.event.type.Data)"},"_quoteFontFamily":{"!doc":"<p>Makes sure font-family names containing spaces are properly quoted</p>","!type":"fn(familyName: string) -> string"},"getSources":{"!doc":"<p>Returns the (computed) value of the property <code>sources</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sources}.</p>","!type":"fn() -> Object"},"initSources":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sources</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sources}.</p>","!type":"fn(value: Object) -> Object"},"resetSources":{"!doc":"<p>Resets the user value of the property <code>sources</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sources}.</p>","!type":"fn()"},"setSources":{"!doc":"<p>Sets the user value of the property <code>sources</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sources}.</p>","!type":"fn(value: Object) -> Object"}}}},"WebWorker":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Web Workers allows us to run JavaScript in parallel on a web page,\nwithout blocking the user interface. A &#8216;worker&#8217; is just another script\nfile that will be loaded and executed in the background.</p>\n\n<p>For more information see:\n<a href=\"http://www.w3.org/TR/workers/\">http://www.w3.org/TR/workers/</a></p>","!type":"fn()","prototype":{"__initFake":{"!doc":"<p>Initialize the fake worker</p>","!type":"fn(src: string)"},"__initNative":{"!doc":"<p>Initialize the native worker</p>","!type":"fn(src: string)"},"_handleError":{"!doc":"<p>Error handler</p>","!type":"fn(e: +Event)"},"_handleMessage":{"!doc":"<p>Message handler</p>","!type":"fn(e: +Event)"},"postMessage":{"!doc":"<p>Send a message to the worker.</p>","!type":"fn(msg: string)"}}},"Window":{"!doc":"<p>Includes library functions to work with browser windows</p>","__checkForUnblocking":{"!doc":"<p>Interval method which checks if the native window was closed to also\nstop the associated timer.</p>","!type":"fn()"},"__generateConfigurationString":{"!doc":"<p>Returns the given config as string for direct use for the &#8220;window.open&#8221; method</p>","!type":"fn(options: +Array, modality: bool) -> string"},"__isCapableToOpenModalWindows":{"!doc":"<p>Whether the browser can open native modal window.</p>","!type":"fn() -> bool"},"close":{"!doc":"<p>Closes the given window</p>","!type":"fn(win: +Window) -> Object"},"getBlocker":{"!doc":"<p>If a modal window is opened with the option</p>\n\n<pre class=\"javascript\">\nuseNativeModalWindow = false;\n</pre>\n\n<p>an instance of <b>qx.bom.Blocker</b> is used to fake modality. This method\ncan be used to get a reference to the blocker to style it.</p>","!type":"fn() -> +qx.bom.Blocker"},"isClosed":{"!doc":"<p>Checks if the window is closed</p>","!type":"fn(win: +Window) -> bool"},"moveTo":{"!doc":"<p>Moving an opened window is not allowed in the most browsers anymore.</p>","!type":"fn(win: +Window, top: +Integer, left: +Integer)"},"open":{"!doc":"<p>Opens a native window with the given options.</p>\n\n<p>Modal windows can have the following options:</p>\n\n<ul>\n<li>top</li>\n</ul>\n\n<ul>\n<li>left</li>\n</ul>\n\n<ul>\n<li>width</li>\n</ul>\n\n<ul>\n<li>height</li>\n</ul>\n\n<ul>\n<li>scrollbars</li>\n</ul>\n\n<ul>\n<li>resizable</li>\n</ul>\n\n<p>Modeless windows have the following options:</p>\n\n<ul>\n<li>top</li>\n</ul>\n\n<ul>\n<li>left</li>\n</ul>\n\n<ul>\n<li>width</li>\n</ul>\n\n<ul>\n<li>height</li>\n</ul>\n\n<ul>\n<li>dependent</li>\n</ul>\n\n<ul>\n<li>resizable</li>\n</ul>\n\n<ul>\n<li>status</li>\n</ul>\n\n<ul>\n<li>location</li>\n</ul>\n\n<ul>\n<li>menubar</li>\n</ul>\n\n<ul>\n<li>scrollbars</li>\n</ul>\n\n<ul>\n<li>toolbar</li>\n</ul>\n\n<p>Except of dimension and location options all other options are boolean\nvalues.</p>\n\n<p><strong>Important infos for native modal windows</strong></p>\n\n<p>If you want to reference the opened window from within the native modal\nwindow you need to use</p>\n\n<pre class=\"javascript\">\nvar opener = window.dialogArguments[0];\n</pre>\n\n<p>since a reference to the opener is passed automatically to the modal window.</p>\n\n<p><strong>Passing window arguments</strong></p>\n\n<p>This is only working if the page of the modal window is from the same origin.\nThis is at least true for Firefox browsers.</p>","!type":"fn(url: string, name: string, options: +Map, modal: bool, useNativeModalDialog: bool, listener?: fn(), self?: Object) -> +Window"},"resizeTo":{"!doc":"<p>Resizing an opened window is not allowed in the most browsers anymore.</p>","!type":"fn(win: +Window, width: +Integer, height: +Integer)"}}},"Bootstrap":{"!doc":"<p>Internal class that is responsible for bootstrapping the qooxdoo\nframework at load time.</p>","base":{"!doc":"<p>Call the same method of the super class.</p>","!type":"fn(args: +arguments, varargs: Object) -> Object"},"bind":{"!doc":"<p>Returns a function whose &#8220;this&#8221; is altered.</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">qx.Bootstrap.bind(myFunction, [self, [varargs...]]);</pre>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nfunction myFunction()\n{\n  this.setStyle('color', 'red');\n  // note that 'this' here refers to myFunction, not an element\n  // we'll need to bind this function to the element we want to alter\n};\n\nvar myBoundFunction = qx.Bootstrap.bind(myFunction, myElement);\nmyBoundFunction(); // this will make the element myElement red.\n</pre>","!type":"fn(func: fn(), self?: Object, varargs?: +arguments) -> fn()"},"createNamespace":{"!doc":"<p>Creates a namespace and assigns the given object to it.</p>","!type":"fn(name: string, object: Object) -> string"},"debug":{"!doc":"<p>Sending a message at level &#8220;debug&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"},"define":{"!doc":"<p>Define a new class using the qooxdoo class system.\nLightweight version of {@link qx.Class#define} with less features.</p>","!type":"fn(name?: string, config?: +Map) -> +Class"},"error":{"!doc":"<p>Sending a message at level &#8220;error&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"},"extendClass":{"!doc":"<p>Inherit a clazz from a super class.</p>\n\n<p>This function differentiates between class and constructor because the\nconstructor written by the user might be wrapped and the <code>base</code>\nproperty has to be attached to the constructor, while the <code>superclass</code>\nproperty has to be attached to the wrapped constructor.</p>","!type":"fn(clazz: fn(), construct: fn(), superClass: fn(), name: fn(), basename: fn())"},"firstLow":{"!doc":"<p>Convert the first character of the string to lower case.</p>","!type":"fn(str: string) -> string"},"firstUp":{"!doc":"<p>Convert the first character of the string to upper case.</p>","!type":"fn(str: string) -> string"},"genericToString":{"!doc":"<p>This method will be attached to all classes to return\na nice identifier for them.</p>","!type":"fn() -> string"},"getByName":{"!doc":"<p>Find a class by its name</p>","!type":"fn(name: string) -> +Class"},"getClass":{"!doc":"<p>Get the internal class of the value. See\n<a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a>\nfor details.</p>","!type":"fn(value: Object) -> string"},"getEnvironmentSetting":{"!doc":"<p>Minimal accessor <span class=\"caps\">API</span> for the environment settings given from the\ngenerator.</p>\n\n<p><span class=\"caps\">WARNING</span>: This method only should be used if the\n{@link qx.core.Environment} class is not loaded!</p>","!type":"fn(key: string) -> Object"},"info":{"!doc":"<p>Sending a message at level &#8220;info&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"},"isArray":{"!doc":"<p>Whether the value is an array.</p>","!type":"fn(value: Object) -> bool"},"isFunction":{"!doc":"<p>Whether the value is a function.</p>","!type":"fn(value: Object) -> bool"},"isObject":{"!doc":"<p>Whether the value is an object. Note that built-in types like Window are\nnot reported to be objects.</p>","!type":"fn(value: Object) -> bool"},"isString":{"!doc":"<p>Whether the value is a string.</p>","!type":"fn(value: Object) -> bool"},"keys":{"!doc":"<p>Get the keys of a map as array as returned by a &#8220;for&#8230; in&#8221; statement.</p>","!type":"fn(map: Object) -> +Array"},"objectGetLength":{"!doc":"<p>Get the number of own properties in the object.</p>","!type":"fn(map: Object) -> +Integer"},"objectMergeWith":{"!doc":"<p>Inserts all keys of the source object into the\ntarget objects. Attention: The target map gets modified.</p>","!type":"fn(target: Object, source: Object, overwrite?: bool) -> Object"},"setDisplayName":{"!doc":"<p>Sets the display name of the given function</p>","!type":"fn(fcn: fn(), classname: string, name: string)"},"setDisplayNames":{"!doc":"<p>Set the names of all functions defined in the given map</p>","!type":"fn(functionMap: Object, classname: string)"},"setEnvironmentSetting":{"!doc":"<p>Minimal mutator for the environment settings given from the generator.\nIt checks for the existance of the environment settings and sets the\nkey if its not given from the generator. If a setting is available from\nthe generator, the setting will be ignored.</p>\n\n<p><span class=\"caps\">WARNING</span>: This method only should be used if the\n{@link qx.core.Environment} class is not loaded!</p>","!type":"fn(key: string, value: Object)"},"setRoot":{"!doc":"<p>Offers the ability to change the root for creating namespaces from window to\nwhatever object is given.</p>","!type":"fn(root: Object)"},"trace":{"!doc":"<p>Prints the current stack trace at level &#8220;info&#8221;</p>","!type":"fn(object: Object)"},"warn":{"!doc":"<p>Sending a message at level &#8220;warn&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"}},"Class":{"!doc":"<p>This class is one of the most important parts of qooxdoo&#8217;s\nobject-oriented features.</p>\n\n<p>Its {@link #define} method is used to create qooxdoo classes.</p>\n\n<p>Each instance of a class defined by {@link #define} has\nthe following keys attached to the constructor and the prototype:</p>\n\n<table>\n<tr><th><code>classname</code></th><td>The fully-qualified name of the class (e.g. <code>\"qx.ui.core.Widget\"</code>).</td></tr>\n<tr><th><code>basename</code></th><td>The namespace part of the class name (e.g. <code>\"qx.ui.core\"</code>).</td></tr>\n<tr><th><code>constructor</code></th><td>A reference to the constructor of the class.</td></tr>\n<tr><th><code>superclass</code></th><td>A reference to the constructor of the super class.</td></tr>\n</table>\n\n<p>Each method may access static members of the same class by using\n<code>this.self(arguments)</code> ({@link qx.core.Object#self}):</p>\n\n<pre class=\"javascript\">\nstatics : { FOO : \"bar\" },\nmembers: {\n  baz: function(x) {\n    this.self(arguments).FOO;\n    ...\n  }\n}\n</pre>\n\n<p>Each overriding method may call the overridden method by using\n<code>this.base(arguments [, ...])</code> ({@link qx.core.Object#base}). This is also true for calling\nthe constructor of the superclass.</p>\n\n<pre class=\"javascript\">\nmembers: {\n  foo: function(x) {\n    this.base(arguments, x);\n    ...\n  }\n}\n</pre>\n\n<p>By using <code>qx.Class</code> within an app, the native JS data types are\nconveniently polyfilled according to {@link qx.lang.normalize}.</p>","__addEvents":{"!doc":"<p>Attach events to the class</p>","!type":"fn(clazz: +Class, events: +Map, patch?: bool)"},"__addInterface":{"!doc":"<p>Add a single interface to a class</p>","!type":"fn(clazz: +Class, iface: +Interface)"},"__addMembers":{"!doc":"<p>Attach members to a class</p>","!type":"fn(clazz: +Class, members: +Map, patch?: bool, base?: bool, wrap?: bool)"},"__addMixin":{"!doc":"<p>Include all features of the mixin into the given class, recursively.</p>","!type":"fn(clazz: +Class, mixin: +Mixin, patch: bool)"},"__addProperties":{"!doc":"<p>Attach properties to classes</p>","!type":"fn(clazz: +Class, properties: +Map, patch?: bool)"},"__createClass":{"!doc":"<p>Creates a class by type. Supports modern inheritance etc.</p>","!type":"fn(name: string, type: string, extend: +Class, statics: +Map, construct: fn(), destruct: fn(), mixins: +Mixin) -> +Class"},"__createDefaultConstructor":{"!doc":"<p>Returns the default constructor.\nThis constructor just calls the constructor of the base class.</p>","!type":"fn() -> fn()"},"__createEmptyFunction":{"!doc":"<p>Returns an empty function. This is needed to get an empty function with an empty closure.</p>","!type":"fn() -> fn()"},"__mixinMemberWrapper":{"!doc":"<p>Wraps a member function of a mixin, which is included using &#8220;patch&#8221;. This\nallows &#8220;base&#8221; calls in the mixin member function.</p>","!type":"fn(member: fn(), base: fn()) -> fn()"},"__needsConstructorWrapper":{"!doc":"<p>Checks if the constructor needs to be wrapped.</p>","!type":"fn(base: +Class, mixins: +Mixin) -> bool"},"__retrospectWrapConstruct":{"!doc":"<p>Wrap the constructor of an already existing clazz. This function will\nreplace all references to the existing constructor with the new wrapped\nconstructor.</p>","!type":"fn(clazz: +Class) -> +Class"},"__validateAbstractInterfaces":{"!doc":"<p>Validates the interfaces required by abstract base classes</p>","!type":"fn(clazz: +Class)"},"__validateConfig":{"!doc":"<p>Validates an incoming configuration and checks for proper keys and values</p>","!type":"fn(name: string, config: +Map)"},"__validateProperty":{"!doc":"<p>Validates the given property</p>","!type":"fn(clazz: +Class, name: string, config: +Map, patch?: bool)"},"__wrapConstructor":{"!doc":"<p>Generate a wrapper of the original class constructor in order to enable\nsome of the advanced OO features (e.g. abstract class, singleton, mixins)</p>","!type":"fn(construct: fn(), name: string, type: string) -> fn()"},"define":{"!doc":"<p>Define a new class using the qooxdoo class system. This sets up the\nnamespace for the class and generates the class from the definition map.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.Class.define(\"name\",\n{\n  extend : Object, // superclass\n  implement : [Interfaces],\n  include : [Mixins],\n\n  statics:\n  {\n    CONSTANT : 3.141,\n\n    publicMethod: function() {},\n    _protectedMethod: function() {},\n    __privateMethod: function() {}\n  },\n\n  properties:\n  {\n    \"tabIndex\": { check: \"Number\", init : -1 }\n  },\n\n  members:\n  {\n    publicField: \"foo\",\n    publicMethod: function() {},\n\n    _protectedField: \"bar\",\n    _protectedMethod: function() {},\n\n    __privateField: \"baz\",\n    __privateMethod: function() {}\n  }\n});\n</pre>","!type":"fn(name?: string, config?: +Map) -> +Class"},"genericToString":{"!doc":"<p>This method will be attached to all classes to return\na nice identifier for them.</p>","!type":"fn() -> string"},"getByInterface":{"!doc":"<p>Returns the class or one of its super classes which contains the\ndeclaration of the given interface. Returns null if the interface is not\nspecified anywhere.</p>","!type":"fn(clazz: +Class, iface: +Interface) -> +Class"},"getByMixin":{"!doc":"<p>Returns the class or one of its superclasses which contains the\ndeclaration for the given mixin. Returns null if the mixin is not\nspecified anywhere.</p>","!type":"fn(clazz: +Class, mixin: +Mixin) -> +Class"},"getByName":{"!doc":"<p>Find a class by its name</p>","!type":"fn(name: string) -> +Class"},"getByProperty":{"!doc":"<p>Returns the class or one of its superclasses which contains the\ndeclaration for the given property in its class definition. Returns null\nif the property is not specified anywhere.</p>","!type":"fn(clazz: +Class, name: string) -> +Class"},"getEventType":{"!doc":"<p>Returns the event type of the given event. Returns null if\nthe event does not exist.</p>","!type":"fn(clazz: +Class, name: string) -> string"},"getInstance":{"!doc":"<p>Helper method to handle singletons</p>","!type":"fn() -> Object"},"getInterfaces":{"!doc":"<p>Returns a list of all interfaces a given class has to implement.</p>","!type":"fn(clazz: +Class) -> +Interface"},"getMixins":{"!doc":"<p>Returns a list of all mixins available in a given class.</p>","!type":"fn(clazz: +Class) -> +Mixin"},"getProperties":{"!doc":"<p>Returns a list of all properties supported by the given class</p>","!type":"fn(clazz: +Class) -> string"},"getPropertyDefinition":{"!doc":"<p>Returns the definition of the given property. Returns null\nif the property does not exist.</p>","!type":"fn(clazz: +Class, name: string) -> +Map"},"getTotalNumber":{"!doc":"<p>Determine the total number of classes</p>","!type":"fn() -> number"},"hasInterface":{"!doc":"<p>Whether a given class or any of its super classes includes a given interface.</p>\n\n<p>This function will return &#8220;true&#8221; if the interface was defined\nin the class declaration ({@link qx.Class#define}) of the class\nor any of its super classes using the &#8220;implement&#8221;\nkey.</p>","!type":"fn(clazz: +Class, iface: +Interface) -> bool"},"hasMixin":{"!doc":"<p>Whether a given class or any of its superclasses includes a given mixin.</p>","!type":"fn(clazz: +Class, mixin: +Mixin) -> bool"},"hasOwnInterface":{"!doc":"<p>Whether a given class directly includes an interface.</p>\n\n<p>This function will only return &#8220;true&#8221; if the interface was defined\nin the class declaration ({@link qx.Class#define}) using the &#8220;implement&#8221;\nkey.</p>","!type":"fn(clazz: +Class, iface: +Interface) -> bool"},"hasOwnMixin":{"!doc":"<p>Whether a class directly includes a mixin.</p>","!type":"fn(clazz: +Class, mixin: +Mixin) -> bool"},"hasProperty":{"!doc":"<p>Whether a class has the given property</p>","!type":"fn(clazz: +Class, name: string) -> bool"},"implementsInterface":{"!doc":"<p>Whether a given class complies to an interface.</p>\n\n<p>Checks whether all methods defined in the interface are\nimplemented. The class does not need to implement\nthe interface explicitly in the <code>extend</code> key.</p>","!type":"fn(obj: Object, iface: +Interface) -> bool"},"include":{"!doc":"<p>Include all features of the given mixin into the class. The mixin must\nnot include any methods or properties that are already available in the\nclass. This would only be possible using the {@link #patch} method.</p>","!type":"fn(clazz: +Class, mixin: +Mixin)"},"isDefined":{"!doc":"<p>Whether the given class exists</p>","!type":"fn(name: string) -> bool"},"isSubClassOf":{"!doc":"<p>Whether a class is a direct or indirect sub class of another class,\nor both classes coincide.</p>","!type":"fn(clazz: +Class, superClass: +Class) -> bool"},"patch":{"!doc":"<p>Include all features of the given mixin into the class. The mixin may\ninclude features, which are already defined in the target class. Existing\nfeatures of equal name will be overwritten.\nPlease keep in mind that this functionality is not intended for regular\nuse, but as a formalized way (and a last resort) in order to patch\nexisting classes.</p>\n\n<b>WARNING</b>: You may break working classes and features.","!type":"fn(clazz: +Class, mixin: +Mixin)"},"supportsEvent":{"!doc":"<p>Whether a class supports the given event type</p>","!type":"fn(clazz: +Class, name: string) -> bool"},"undefine":{"!doc":"<p>Removes a class from qooxdoo defined by {@link #define}</p>","!type":"fn(name: string)"}},"core":{"Aspect":{"!doc":"<p>Basis for Aspect Oriented features in qooxdoo.</p>\n\n<p>This class makes it possible to attach functions (aspects) before or\nafter each function call of any function defined in {@link qx.Class#define}.</p>\n\n<p>Classes, which define own aspects must add an explicit require to this class\nin the header comment using the following code:</p>\n\n<pre>\n&#35;require(qx.core.Aspect)\n&#35;ignore(auto-require)\n</pre>\n\n<p>One example for a qooxdoo aspect is profiling ({@link qx.dev.Profile}).</p>","addAdvice":{"!doc":"<p>Register a function to be called just before or after each time\none of the selected functions is called.</p>","!type":"fn(fcn: fn(), position?: string, type?: string, name?: string)"},"wrap":{"!doc":"<p>This function is used by {@link qx.Class#define} to wrap all statics, members and\nconstructors.</p>","!type":"fn(fullName: string, fcn: fn(), type: string) -> fn()"}},"Assert":{"!doc":"<p>A collection of assertions.</p>\n\n<p>These methods can be used to assert incoming parameters, return values, ...\nIf an assertion fails an {@link AssertionError} is thrown.</p>\n\n<p>Assertions are used in unit tests as well.</p>","__fail":{"!doc":"<p>Assert that the condition evaluates to <code>true</code>. An\n{@link AssertionError} is thrown if otherwise.</p>","!type":"fn(comment: string, msgvarargs: Object)"},"__isQxInstance":{"!doc":"<p>Internal helper for checking the instance of a qooxdoo object using the\nclassname.</p>","!type":"fn(object: Object, classname: string) -> bool"},"__toString":{"!doc":"<p>Convert an unknown value to a string to display in error messages</p>","!type":"fn(value: Object) -> string"},"assert":{"!doc":"<p>Assert that the condition evaluates to <code>true</code>.</p>","!type":"fn(condition: Object, msg: string)"},"assertArgumentsCount":{"!doc":"<p>Assert that the number of arguments is within the given range</p>","!type":"fn(args: +arguments, minCount: +Integer, maxCount: +Integer, msg: string)"},"assertArray":{"!doc":"<p>Assert that the value is an array.</p>","!type":"fn(value: Object, msg: string)"},"assertArrayEquals":{"!doc":"<p>Assert that both array have identical array items.</p>","!type":"fn(expected: +Array, found: +Array, msg: string)"},"assertBoolean":{"!doc":"<p>Assert that the value is a boolean.</p>","!type":"fn(value: Object, msg: string)"},"assertCssColor":{"!doc":"<p>Assert that the value represents the given <span class=\"caps\">CSS</span> color value. This method\nparses the color strings and compares the <span class=\"caps\">RGB</span> values. It is able to\nparse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>","!type":"fn(expected: string, value: string, msg: string)"},"assertElement":{"!doc":"<p>Assert that the value is a <span class=\"caps\">DOM</span> element.</p>","!type":"fn(value: Object, msg: string)"},"assertEquals":{"!doc":"<p>Assert that both values are equal. (Uses the equality operator\n<code>==</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertEventFired":{"!doc":"<p>Assert that an event is fired.</p>","!type":"fn(obj: Object, event: string, invokeFunc: fn(), listenerFunc?: fn(), msg?: string)"},"assertEventNotFired":{"!doc":"<p>Assert that an event is not fired.</p>","!type":"fn(obj: Object, event: string, invokeFunc: fn(), msg: string)"},"assertException":{"!doc":"<p>Asserts that the callback raises a matching exception.</p>","!type":"fn(callback: fn(), exception?: +Error, re: string, msg: string)"},"assertFalse":{"!doc":"<p>Assert that the value is <code>false</code> (Identity check).</p>","!type":"fn(value: bool, msg: string)"},"assertFunction":{"!doc":"<p>Assert that the value is a function.</p>","!type":"fn(value: Object, msg: string)"},"assertIdentical":{"!doc":"<p>Assert that both values are identical. (Uses the identity operator\n<code>===</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertInArray":{"!doc":"<p>Assert that the value is an item in the given array.</p>","!type":"fn(value: Object, array: +Array, msg: string)"},"assertInRange":{"!doc":"<p>Assert that the value is inside the given range.</p>","!type":"fn(value: Object, min: number, max: number, msg: string)"},"assertInstance":{"!doc":"<p>Assert that the value is an instance of the given class.</p>","!type":"fn(value: Object, clazz: +Class, msg: string)"},"assertInteger":{"!doc":"<p>Assert that the value is an integer.</p>","!type":"fn(value: Object, msg: string)"},"assertInterface":{"!doc":"<p>Assert that the value implements the given interface.</p>","!type":"fn(value: Object, iface: +Class, msg: string)"},"assertJsonEquals":{"!doc":"<p>Assert that the first two arguments are equal, when serialized into\n<span class=\"caps\">JSON</span>.</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertKeyInMap":{"!doc":"<p>Assert that the value is a key in the given map.</p>","!type":"fn(value: Object, map: +Map, msg: string)"},"assertMap":{"!doc":"<p>Assert that the value is a map either created using <code>new Object</code>\nor by using the object literal notation <code>{ ... }</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertMatch":{"!doc":"<p>Assert that the given string matches the regular expression</p>","!type":"fn(str: string, re: string, msg: string)"},"assertNotEquals":{"!doc":"<p>Assert that both values are not equal. (Uses the not equality operator\n<code>!=</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertNotIdentical":{"!doc":"<p>Assert that both values are not identical. (Uses the not identity operator\n<code>!==</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertNotNull":{"!doc":"<p>Assert that the value is not <code>null</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertNotUndefined":{"!doc":"<p>Assert that the value is not <code>undefined</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertNull":{"!doc":"<p>Assert that the value is <code>null</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertNumber":{"!doc":"<p>Assert that the value is a number.</p>","!type":"fn(value: Object, msg: string)"},"assertObject":{"!doc":"<p>Assert that the value is an object.</p>","!type":"fn(value: Object, msg: string)"},"assertPositiveInteger":{"!doc":"<p>Assert that the value is an integer >= 0.</p>","!type":"fn(value: Object, msg: string)"},"assertPositiveNumber":{"!doc":"<p>Assert that the value is a number >= 0.</p>","!type":"fn(value: Object, msg: string)"},"assertQxObject":{"!doc":"<p>Assert that the value is an instance of {@link qx.core.Object}.</p>","!type":"fn(value: Object, msg: string)"},"assertQxWidget":{"!doc":"<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>","!type":"fn(value: Object, msg: string)"},"assertRegExp":{"!doc":"<p>Assert that the value is a regular expression.</p>","!type":"fn(value: Object, msg: string)"},"assertString":{"!doc":"<p>Assert that the value is a string.</p>","!type":"fn(value: Object, msg: string)"},"assertTrue":{"!doc":"<p>Assert that the value is <code>true</code> (Identity check).</p>","!type":"fn(value: bool, msg: string)"},"assertType":{"!doc":"<p>Assert that the value has the given type using the <code>typeof</code>\noperator. Because the type is not always what it is supposed to be it is\nbetter to use more explicit checks like {@link #assertString} or\n{@link #assertArray}.</p>","!type":"fn(value: Object, type: string, msg: string)"},"assertUndefined":{"!doc":"<p>Assert that the value is <code>undefined</code>.</p>","!type":"fn(value: Object, msg: string)"},"fail":{"!doc":"<p>Raise an {@link AssertionError}.</p>","!type":"fn(msg: string, compact: bool)"}},"AssertionError":{"!proto":"qx.type.BaseError","!doc":"<p>Assertion errors are thrown if an assertion in {@link qx.core.Assert}\nfails.</p>","!type":"fn()","prototype":{"getStackTrace":{"!doc":"<p>Stack trace of the error</p>","!type":"fn() -> string"}}},"BaseInit":{"!doc":"<p>This is the base class for non-browser qooxdoo applications.</p>","__close":{"!doc":"<p>Runs before the document is unloaded. Calls the application&#8217;s close\nmethod to check if the unload process should be stopped.</p>","!type":"fn(e: +qx.event.type.Native)"},"__shutdown":{"!doc":"<p>Runs when the document is unloaded. Automatically terminates a previously\ncreated application instance.</p>","!type":"fn()"},"getApplication":{"!doc":"<p>Returns the instantiated qooxdoo application.</p>","!type":"fn() -> +qx.core.Object"},"ready":{"!doc":"<p>Runs when the application is loaded. Automatically creates an instance\nof the class defined by the setting <code>qx.application</code>.</p>","!type":"fn()"}},"Environment":{"!doc":"<p>This class is the single point to access all settings that may be different\nin different environments. This contains e.g. the browser name, engine\nversion but also qooxdoo or application specific settings.</p>\n\n<p>Its public <span class=\"caps\">API</span> can be found in its four main methods. One pair of methods\nis used to check the synchronous values of the environment. The other pair\nof methods is used for asynchronous checks.</p>\n\n<p>The most often used method should be {@link #get}, which returns the\ncurrent value for a given environment check.</p>\n\n<p>All qooxdoo settings can be changed via the generator&#8217;s config. See the manual\nfor more details about the environment key in the config. As you can see\nfrom the methods <span class=\"caps\">API</span>, there is no way to override an existing key. So if you\nneed to change a qooxdoo setting, you have to use the generator to do so.</p>\n\n<p>The generator is also responsible for requiring the necessary implementation\nclasses for each check. When using a check of a new category, make sure to\nrebuild you application and let the generator include the necessary files.</p>\n\n<p>The following table shows the available checks. If you are\ninterested in more details, check the reference to the implementation of\neach check. Please do not use those check implementations directly, as the\nEnvironment class comes with a smart caching feature.</p>\n\n<table border=\"0\" cellspacing=\"10\">\n  <tbody>\n    <tr>\n      <td colspan=\"4\"><h2>Synchronous checks</h2>\n      </td>\n    </tr>\n    <tr>\n      <th><h3>Key</h3></th>\n      <th><h3>Type</h3></th>\n      <th><h3>Example</h3></th>\n      <th><h3>Details</h3></th>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>browser</b></td>\n    </tr>\n    <tr>\n      <td>browser.documentmode</td><td><i>Integer</i></td><td><code>0</code></td>\n      <td>{@link qx.bom.client.Browser#getDocumentMode}</td>\n    </tr>\n    <tr>\n      <td>browser.name</td><td><i>String</i></td><td><code> chrome </code></td>\n      <td>{@link qx.bom.client.Browser#getName}</td>\n    </tr>\n    <tr>\n      <td>browser.quirksmode</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Browser#getQuirksMode}</td>\n    </tr>\n    <tr>\n      <td>browser.version</td><td><i>String</i></td><td><code>11.0</code></td>\n      <td>{@link qx.bom.client.Browser#getVersion}</td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>runtime</b></td>\n    </tr>\n    <tr>\n      <td>runtime.name</td><td><i> String </i></td><td><code> node.js </code></td>\n      <td>{@link qx.bom.client.Runtime#getName}</td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>css</b></td>\n    </tr>\n    <tr>\n      <td>css.borderradius</td><td><i>String</i> or <i>null</i></td><td><code>borderRadius</code></td>\n      <td>{@link qx.bom.client.Css#getBorderRadius}</td>\n    </tr>\n    <tr>\n      <td>css.borderimage</td><td><i>String</i> or <i>null</i></td><td><code>WebkitBorderImage</code></td>\n      <td>{@link qx.bom.client.Css#getBorderImage}</td>\n    </tr>\n    <tr>\n      <td>css.borderimage.standardsyntax</td><td><i>Boolean</i> or <i>null</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getBorderImageSyntax}</td>\n    </tr>\n    <tr>\n      <td>css.boxmodel</td><td><i>String</i></td><td><code>content</code></td>\n      <td>{@link qx.bom.client.Css#getBoxModel}</td>\n    </tr>\n    <tr>\n      <td>css.boxshadow</td><td><i>String</i> or <i>null</i></td><td><code>boxShadow</code></td>\n      <td>{@link qx.bom.client.Css#getBoxShadow}</td>\n    </tr>\n    <tr>\n      <td>css.gradient.linear</td><td><i>String</i> or <i>null</i></td><td><code>-moz-linear-gradient</code></td>\n      <td>{@link qx.bom.client.Css#getLinearGradient}</td>\n    </tr>\n    <tr>\n      <td>css.gradient.filter</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getFilterGradient}</td>\n    </tr>\n    <tr>\n      <td>css.gradient.radial</td><td><i>String</i> or <i>null</i></td><td><code>-moz-radial-gradient</code></td>\n      <td>{@link qx.bom.client.Css#getRadialGradient}</td>\n    </tr>\n    <tr>\n      <td>css.gradient.legacywebkit</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Css#getLegacyWebkitGradient}</td>\n    </tr>\n    <tr>\n      <td>css.placeholder</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getPlaceholder}</td>\n    </tr>\n    <tr>\n      <td>css.textoverflow</td><td><i>String</i> or <i>null</i></td><td><code>textOverflow</code></td>\n      <td>{@link qx.bom.client.Css#getTextOverflow}</td>\n    </tr>\n    <tr>\n      <td>css.rgba</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getRgba}</td>\n    </tr>\n    <tr>\n      <td>css.usermodify</td><td><i>String</i> or <i>null</i></td><td><code>WebkitUserModify</code></td>\n      <td>{@link qx.bom.client.Css#getUserModify}</td>\n    </tr>\n    <tr>\n      <td>css.appearance</td><td><i>String</i> or <i>null</i></td><td><code>WebkitAppearance</code></td>\n      <td>{@link qx.bom.client.Css#getAppearance}</td>\n    </tr>\n    <tr>\n      <td>css.float</td><td><i>String</i> or <i>null</i></td><td><code>cssFloat</code></td>\n      <td>{@link qx.bom.client.Css#getFloat}</td>\n    </tr>\n    <tr>\n      <td>css.userselect</td><td><i>String</i> or <i>null</i></td><td><code>WebkitUserSelect</code></td>\n      <td>{@link qx.bom.client.Css#getUserSelect}</td>\n    </tr>\n    <tr>\n      <td>css.userselect.none</td><td><i>String</i> or <i>null</i></td><td><code>-moz-none</code></td>\n      <td>{@link qx.bom.client.Css#getUserSelectNone}</td>\n    </tr>\n    <tr>\n      <td>css.boxsizing</td><td><i>String</i> or <i>null</i></td><td><code>boxSizing</code></td>\n      <td>{@link qx.bom.client.Css#getBoxSizing}</td>\n    </tr>\n    <tr>\n      <td>css.animation</td><td><i>Object</i> or <i>null</i></td><td><code>{end-event: \"webkitAnimationEnd\", keyframes: \"@-webkit-keyframes\", play-state: null, name: \"WebkitAnimation\"}</code></td>\n      <td>{@link qx.bom.client.CssAnimation#getSupport}</td>\n    </tr>\n    <tr>\n      <td>css.animation.requestframe</td><td><i>String</i> or <i>null</i></td><td><code>mozRequestAnimationFrame</code></td>\n      <td>{@link qx.bom.client.CssAnimation#getRequestAnimationFrame}</td>\n    </tr>\n    <tr>\n      <td>css.transform</td><td><i>Object</i> or <i>null</i></td><td><code>{3d: true, origin: \"WebkitTransformOrigin\", name: \"WebkitTransform\", style: \"WebkitTransformStyle\", perspective: \"WebkitPerspective\", perspective-origin: \"WebkitPerspectiveOrigin\", backface-visibility: \"WebkitBackfaceVisibility\"}</code></td>\n      <td>{@link qx.bom.client.CssTransform#getSupport}</td>\n    </tr>\n    <tr>\n      <td>css.transform.3d</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.CssTransform#get3D}</td>\n    </tr>\n    <tr>\n      <td>css.transition</td><td><i>Object</i> or <i>null</i></td><td><code>{end-event: \"webkitTransitionEnd\", name: \"WebkitTransition\"}</code></td>\n      <td>{@link qx.bom.client.CssTransition#getSupport}</td>\n    </tr>\n    <tr>\n      <td>css.inlineblock</td><td><i>String</i> or <i>null</i></td><td><code>inline-block</code></td>\n      <td>{@link qx.bom.client.Css#getInlineBlock}</td>\n    </tr>\n    <tr>\n      <td>css.opacity</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getOpacity}</td>\n    </tr>\n    <tr>\n      <td>css.textShadow</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getTextShadow}</td>\n    </tr>\n    <tr>\n      <td>css.textShadow.filter</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getFilterTextShadow}</td>\n    </tr>\n    <tr>\n      <td>css.alphaimageloaderneeded</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Css#getAlphaImageLoaderNeeded}</td>\n    </tr>\n    <tr>\n      <td>css.pointerevents</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Css#getPointerEvents}</td>\n    </tr>\n    <tr>\n      <td>css.flexboxSyntax</td><td><i>String</i> or <i>null</i></td><td><code>\"flex\"</code></td>\n      <td>{@link qx.bom.client.Css#getFlexboxSyntax}</td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>device</b></td>\n    </tr>\n    <tr>\n      <td>device.name</td><td><i>String</i></td><td><code>pc</code></td>\n      <td>{@link qx.bom.client.Device#getName}</td>\n    </tr>\n    <tr>\n      <td>device.type</td><td><i>String</i></td><td><code>mobile</code></td>\n      <td>{@link qx.bom.client.Device#getType}</td>\n    </tr>\n    <tr>\n      <td>device.pixelRatio</td><td><i>Number</i></td><td><code>2</code></td>\n      <td>{@link qx.bom.client.Device#getDevicePixelRatio}</td>\n    </tr>\n    <tr>\n      <td>device.touch</td><td><i>String</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Device#getTouch}</td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>ecmascript</b></td>\n    </tr>\n    <tr>\n      <td>ecmascript.error.stacktrace</td><td><i>String</i> or <i>null</i></td><td><code>stack</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getStackTrace}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.indexof<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayIndexOf}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.lastindexof<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayLastIndexOf}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.foreach<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayForEach}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.filter<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayFilter}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.map<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayMap}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.some<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArraySome}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.every<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayEvery}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.reduce<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayReduce}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.array.reduceright<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getArrayReduceRight}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.function.bind<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getFunctionBind}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.object.keys<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getObjectKeys}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.date.now<td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getDateNow}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.error.toString</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getErrorToString}</td>\n    </tr>\n    <tr>\n      <td>ecmascript.string.trim</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.EcmaScript#getStringTrim}</td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>engine</b></td>\n    </tr>\n    <tr>\n      <td>engine.name</td><td><i>String</i></td><td><code>webkit</code></td>\n      <td>{@link qx.bom.client.Engine#getName}</td>\n    </tr>\n    <tr>\n      <td>engine.version</td><td><i>String</i></td><td><code>534.24</code></td>\n      <td>{@link qx.bom.client.Engine#getVersion}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>event</b></td>\n    </tr>\n     <tr>\n      <td>event.mspointer</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Event#getMsPointer}</td>\n    </tr>\n    <tr>\n      <td>event.touch</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Event#getTouch}</td>\n    </tr>\n    <tr>\n      <td>event.help</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Event#getHelp}</td>\n    </tr>\n    <tr>\n      <td>event.hashchange</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Event#getHashChange}</td>\n    </tr>\n    <tr>\n      <td>event.dispatchevent</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Event#getDispatchEvent}</td>\n    </tr>\n    <tr>\n      <td>event.customevent</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Event#getCustomEvent}</td>\n    </tr>\n    <tr>\n      <td>event.mouseevent</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Event#getMouseEvent}</td>\n    </tr>\n    <tr>\n      <td>event.mousewheel</td><td><i>Map</i></td><td><code>{type: \"wheel\", target: window}</code></td>\n      <td>{@link qx.bom.client.Event#getMouseWheel}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>html</b></td>\n    </tr>\n    <tr>\n      <td>html.audio</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getAudio}</td>\n    </tr>\n    <tr>\n      <td>html.audio.mp3</td><td><i>String</i></td><td><code>\"\"</code></td>\n      <td>{@link qx.bom.client.Html#getAudioMp3}</td>\n    </tr>\n    <tr>\n      <td>html.audio.ogg</td><td><i>String</i></td><td><code>\"maybe\"</code></td>\n      <td>{@link qx.bom.client.Html#getAudioOgg}</td>\n    </tr>\n    <tr>\n      <td>html.audio.wav</td><td><i>String</i></td><td><code>\"probably\"</code></td>\n      <td>{@link qx.bom.client.Html#getAudioWav}</td>\n    </tr>\n    <tr>\n      <td>html.audio.au</td><td><i>String</i></td><td><code>\"maybe\"</code></td>\n      <td>{@link qx.bom.client.Html#getAudioAu}</td>\n    </tr>\n    <tr>\n      <td>html.audio.aif</td><td><i>String</i></td><td><code>\"probably\"</code></td>\n      <td>{@link qx.bom.client.Html#getAudioAif}</td>\n    </tr>\n    <tr>\n      <td>html.canvas</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getCanvas}</td>\n    </tr>\n    <tr>\n      <td>html.classlist</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getClassList}</td>\n    </tr>\n    <tr>\n      <td>html.geolocation</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getGeoLocation}</td>\n    </tr>\n    <tr>\n      <td>html.storage.local</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getLocalStorage}</td>\n    </tr>\n    <tr>\n      <td>html.storage.session</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getSessionStorage}</td>\n    </tr>\n    <tr>\n      <td>html.storage.userdata</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getUserDataStorage}</td>\n    </tr>\n    <tr>\n      <td>html.svg</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getSvg}</td>\n    </tr>\n    <tr>\n      <td>html.video</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getVideo}</td>\n    </tr>\n    <tr>\n      <td>html.video.h264</td><td><i>String</i></td><td><code>\"probably\"</code></td>\n      <td>{@link qx.bom.client.Html#getVideoH264}</td>\n    </tr>\n    <tr>\n      <td>html.video.ogg</td><td><i>String</i></td><td><code>\"\"</code></td>\n      <td>{@link qx.bom.client.Html#getVideoOgg}</td>\n    </tr>\n    <tr>\n      <td>html.video.webm</td><td><i>String</i></td><td><code>\"maybe\"</code></td>\n      <td>{@link qx.bom.client.Html#getVideoWebm}</td>\n    </tr>\n    <tr>\n      <td>html.vml</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Html#getVml}</td>\n    </tr>\n    <tr>\n      <td>html.webworker</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getWebWorker}</td>\n    <tr>\n      <td>html.filereader</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getFileReader}</td>\n    </tr>\n    <tr>\n      <td>html.xpath</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getXPath}</td>\n    </tr>\n    <tr>\n      <td>html.xul</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getXul}</td>\n    </tr>\n    <tr>\n      <td>html.console</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getConsole}</td>\n    </tr>\n    <tr>\n      <td>html.element.contains</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getContains}</td>\n    </tr>\n    <tr>\n      <td>html.element.compareDocumentPosition</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getCompareDocumentPosition}</td>\n    </tr>\n    <tr>\n      <td>html.element.textContent</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getTextContent}</td>\n    </tr>\n    <tr>\n      <td>html.image.naturaldimensions</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getNaturalDimensions}</td>\n    </tr>\n    <tr>\n      <td>html.history.state</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getHistoryState}</td>\n    </tr>\n    <tr>\n      <td>html.selection</td><td><i>String</i></td><td><code>getSelection</code></td>\n      <td>{@link qx.bom.client.Html#getSelection}</td>\n    </tr>\n    <tr>\n      <td>html.node.isequalnode</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getIsEqualNode}</td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><b>XML</b></td>\n    </tr>\n    <tr>\n      <td>xml.implementation</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Xml#getImplementation}</td>\n    </tr>\n    <tr>\n      <td>xml.domparser</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Xml#getDomParser}</td>\n    </tr>\n    <tr>\n      <td>xml.selectsinglenode</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Xml#getSelectSingleNode}</td>\n    </tr>\n    <tr>\n      <td>xml.selectnodes</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Xml#getSelectNodes}</td>\n    </tr>\n    <tr>\n      <td>xml.getelementsbytagnamens</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Xml#getElementsByTagNameNS}</td>\n    </tr>\n    <tr>\n      <td>xml.domproperties</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Xml#getDomProperties}</td>\n    </tr>\n    <tr>\n      <td>xml.attributens</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Xml#getAttributeNS}</td>\n    </tr>\n    <tr>\n      <td>xml.createelementns</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Xml#getCreateElementNS}</td>\n    </tr>\n    <tr>\n      <td>xml.createnode</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Xml#getCreateNode}</td>\n    </tr>\n    <tr>\n      <td>xml.getqualifieditem</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Xml#getQualifiedItem}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>Stylesheets</b></td>\n    </tr>\n    <tr>\n      <td>html.stylesheet.createstylesheet</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Stylesheet#getCreateStyleSheet}</td>\n    </tr>\n    <tr>\n      <td>html.stylesheet.insertrule</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Stylesheet#getInsertRule}</td>\n    </tr>\n    <tr>\n      <td>html.stylesheet.deleterule</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Stylesheet#getDeleteRule}</td>\n    </tr>\n    <tr>\n      <td>html.stylesheet.addimport</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Stylesheet#getAddImport}</td>\n    </tr>\n    <tr>\n      <td>html.stylesheet.removeimport</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Stylesheet#getRemoveImport}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>io</b></td>\n    </tr>\n    <tr>\n      <td>io.maxrequests</td><td><i>Integer</i></td><td><code>4</code></td>\n      <td>{@link qx.bom.client.Transport#getMaxConcurrentRequestCount}</td>\n    </tr>\n    <tr>\n      <td>io.ssl</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Transport#getSsl}</td>\n    </tr>\n    <tr>\n      <td>io.xhr</td><td><i>String</i></td><td><code>xhr</code></td>\n      <td>{@link qx.bom.client.Transport#getXmlHttpRequest}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>locale</b></td>\n    </tr>\n    <tr>\n      <td>locale</td><td><i>String</i></td><td><code>de</code></td>\n      <td>{@link qx.bom.client.Locale#getLocale}</td>\n    </tr>\n    <tr>\n      <td>locale.variant</td><td><i>String</i></td><td><code>de</code></td>\n      <td>{@link qx.bom.client.Locale#getVariant}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>os</b></td>\n    </tr>\n    <tr>\n      <td>os.name</td><td><i>String</i></td><td><code>osx</code></td>\n      <td>{@link qx.bom.client.OperatingSystem#getName}</td>\n    </tr>\n    <tr>\n      <td>os.version</td><td><i>String</i></td><td><code>10.6</code></td>\n      <td>{@link qx.bom.client.OperatingSystem#getVersion}</td>\n    </tr>\n    <tr>\n      <td>os.scrollBarOverlayed</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Scroll#scrollBarOverlayed}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>phonegap</b></td>\n    </tr>\n    <tr>\n      <td>phonegap</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.PhoneGap#getPhoneGap}</td>\n    </tr>\n    <tr>\n      <td>phonegap.notification</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.PhoneGap#getNotification}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>plugin</b></td>\n    </tr>\n    <tr>\n      <td>plugin.divx</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getDivX}</td>\n    </tr>\n    <tr>\n      <td>plugin.divx.version</td><td><i>String</i></td><td></td>\n      <td>{@link qx.bom.client.Plugin#getDivXVersion}</td>\n    </tr>\n    <tr>\n      <td>plugin.flash</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Flash#isAvailable}</td>\n    </tr>\n    <tr>\n      <td>plugin.flash.express</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Flash#getExpressInstall}</td>\n    </tr>\n    <tr>\n      <td>plugin.flash.strictsecurity</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Flash#getStrictSecurityModel}</td>\n    </tr>\n    <tr>\n      <td>plugin.flash.version</td><td><i>String</i></td><td><code>10.2.154</code></td>\n      <td>{@link qx.bom.client.Flash#getVersion}</td>\n    </tr>\n    <tr>\n      <td>plugin.gears</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getGears}</td>\n    </tr>\n    <tr>\n      <td>plugin.activex</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getActiveX}</td>\n    </tr>\n    <tr>\n      <td>plugin.skype</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getSkype}</td>\n    </tr>\n    <tr>\n      <td>plugin.pdf</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getPdf}</td>\n    </tr>\n    <tr>\n      <td>plugin.pdf.version</td><td><i>String</i></td><td></td>\n      <td>{@link qx.bom.client.Plugin#getPdfVersion}</td>\n    </tr>\n    <tr>\n      <td>plugin.quicktime</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Plugin#getQuicktime}</td>\n    </tr>\n    <tr>\n      <td>plugin.quicktime.version</td><td><i>String</i></td><td><code>7.6</code></td>\n      <td>{@link qx.bom.client.Plugin#getQuicktimeVersion}</td>\n    </tr>\n    <tr>\n      <td>plugin.silverlight</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getSilverlight}</td>\n    </tr>\n    <tr>\n      <td>plugin.silverlight.version</td><td><i>String</i></td><td></td>\n      <td>{@link qx.bom.client.Plugin#getSilverlightVersion}</td>\n    </tr>\n    <tr>\n      <td>plugin.windowsmedia</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Plugin#getWindowsMedia}</td>\n    </tr>\n    <tr>\n      <td>plugin.windowsmedia.version</td><td><i>String</i></td><td></td>\n      <td>{@link qx.bom.client.Plugin#getWindowsMediaVersion}</td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>qx</b></td>\n    </tr>\n    <tr>\n      <td>qx.allowUrlSettings</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n      <td>qx.allowUrlVariants</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n      <td>qx.application</td><td><i>String</i></td><td><code>name.space</code></td>\n      <td><i>default:</i> <code>&lt;&lt;application name&gt;&gt;</code></td>\n    </tr>\n    <tr>\n      <td>qx.aspects</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug.databinding</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug.dispose</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug.dispose.level</td><td><i>Integer</i></td><td><code>0</code></td>\n      <td><i>default:</i> <code>0</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug.io</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n    <tr>\n      <td>qx.debug.io.remote</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n    <tr>\n      <td>qx.debug.io.remote.data</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>false</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug.property.level</td><td><i>Integer</i></td><td><code>0</code></td>\n      <td><i>default:</i> <code>0</code></td>\n    </tr>\n    <tr>\n      <td>qx.debug.ui.queue</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>qx.dynlocale</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>qx.dyntheme</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>qx.globalErrorHandling</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>qx.mobile.nativescroll</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Scroll#getNativeScroll}</td>\n    </tr>\n    <tr>\n      <td>qx.optimization.basecalls</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>true if the corresp. <i>optimize</i> key is set in the config</td>\n    </tr>\n    <tr>\n      <td>qx.optimization.comments</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>true if the corresp. <i>optimize</i> key is set in the config</td>\n    </tr>\n    <tr>\n      <td>qx.optimization.privates</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>true if the corresp. <i>optimize</i> key is set in the config</td>\n    </tr>\n    <tr>\n      <td>qx.optimization.strings</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>true if the corresp. <i>optimize</i> key is set in the config</td>\n    </tr>\n    <tr>\n      <td>qx.optimization.variables</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>true if the corresp. <i>optimize</i> key is set in the config</td>\n    </tr>\n    <tr>\n      <td>qx.optimization.variants</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>true if the corresp. <i>optimize</i> key is set in the config</td>\n    </tr>\n    <tr>\n      <td>qx.revision</td><td><i>String</i></td><td><code>27348</code></td>\n    </tr>\n    <tr>\n      <td>qx.theme</td><td><i>String</i></td><td><code>qx.theme.Modern</code></td>\n      <td><i>default:</i> <code>&lt;&lt;initial theme name&gt;&gt;</code></td>\n    </tr>\n    <tr>\n      <td>qx.version</td><td><i>String</i></td><td><code>4.1</code></td>\n    </tr>\n    <tr>\n      <td>qx.blankpage</td><td><i>String</i></td><td><code>URI to blank.html page</code></td>\n    </tr>\n\n<tr>\n      <td colspan=\"4\"><b>module</b></td>\n    </tr>\n    <tr>\n      <td>module.databinding</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>module.logger</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>module.property</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td>module.events</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td><i>default:</i> <code>true</code></td>\n    </tr>\n    <tr>\n      <td colspan=\"4\"><h3>Asynchronous checks</h3>\n      </td>\n    </tr>\n    <tr>\n      <td>html.dataurl</td><td><i>Boolean</i></td><td><code>true</code></td>\n      <td>{@link qx.bom.client.Html#getDataUrl}</td>\n    </tr>\n    <tr>\n      <td>plugin.pdfjs</td><td><i>Boolean</i></td><td><code>false</code></td>\n      <td>{@link qx.bom.client.Pdfjs#getPdfjs}</td>\n    </tr>\n  </tbody>\n</table>","__createCheck":{"!doc":"<p>Internal helper which creates a function returning the given value.</p>","!type":"fn(value: Object) -> fn()"},"__importFromGenerator":{"!doc":"<p>Import checks from global qx.$environment into the Environment class.</p>","!type":"fn()"},"__importFromUrl":{"!doc":"<p>Checks the <span class=\"caps\">URL</span> for environment settings and imports these into the\nEnvironment class.</p>","!type":"fn()"},"__pickFromValues":{"!doc":"<p>Internal helper which tries to pick the given key from the given values\nmap. If that key is not found, it tries to use a key named &#8220;default&#8221;.\nIf there is also no default key, it prints out a warning and returns\nundefined.</p>","!type":"fn(key: string, values: +Map) -> Object"},"_getClassNameFromEnvKey":{"!doc":"<p>Maps an environment key to a check class and method name.</p>","!type":"fn(key: string) -> +Array"},"_initDefaultQxValues":{"!doc":"<p>Initializer for the default values of the framework settings.</p>","!type":"fn()"},"add":{"!doc":"<p>Add a check to the environment class. If there is already a check\nadded for the given key, the add will be ignored.</p>","!type":"fn(key: string, check: Object)"},"addAsync":{"!doc":"<p>Adds an asynchronous check to the environment. If there is already a check\nadded for the given key, the add will be ignored.</p>","!type":"fn(key: string, check: fn())"},"filter":{"!doc":"<p>Takes a given map containing the check names as keys and converts\nthe map to an array only containing the values for check evaluating\nto <code>true</code>. This is especially handy for conditional\nincludes of mixins.</p>","!type":"fn(map: +Map) -> +Array"},"get":{"!doc":"<p>The default accessor for the checks. It returns the value the current\nenvironment has for the given key. The key could be something like\n&#8220;qx.debug&#8221;, &#8220;css.textoverflow&#8221; or &#8220;io.ssl&#8221;. A complete list of\nchecks can be found in the class comment of this class.</p>\n\n<p>Please keep in mind that the result is cached. If you want to run the\ncheck function again in case something could have been changed, take a\nlook at the {@link #invalidateCacheKey} function.</p>","!type":"fn(key: string) -> Object"},"getAsync":{"!doc":"<p>Invokes the callback as soon as the check has been done. If no check\ncould be found, a warning will be printed.</p>","!type":"fn(key: string, callback: fn(), self: Object)"},"getAsyncChecks":{"!doc":"<p>Returns all currently defined asynchronous checks.</p>","!type":"fn() -> +Map"},"getChecks":{"!doc":"<p>Returns all currently defined synchronous checks.</p>","!type":"fn() -> +Map"},"invalidateCacheKey":{"!doc":"<p>Invalidates the cache for the given key.</p>","!type":"fn(key: string)"},"select":{"!doc":"<p>Returns the proper value dependent on the check for the given key.</p>","!type":"fn(key: string, values: +Map) -> Object"},"selectAsync":{"!doc":"<p>Selects the proper function dependent on the asynchronous check.</p>","!type":"fn(key: string, values: +Map, self: Object)"}},"GlobalError":{"!proto":"Error","!doc":"<p>This exception is thrown by the {@link qx.event.GlobalError} handler if a\nobserved method throws an exception.</p>","!type":"fn()","prototype":{"getArguments":{"!doc":"<p>Returns the arguments which are</p>","!type":"fn() -> Object"},"getSourceException":{"!doc":"<p>Get the source exception</p>","!type":"fn() -> +Error"},"toString":{"!doc":"<p>Returns the error message.</p>","!type":"fn() -> string"}}},"Init":{"!doc":"<p>This is the base class for all qooxdoo applications.</p>","__close":{"!doc":"<p>Runs before the document is unloaded. Calls the application&#8217;s close\nmethod to check if the unload process should be stopped.</p>","!type":"fn(e: +qx.event.type.Native)"},"__shutdown":{"!doc":"<p>Runs when the document is unloaded. Automatically terminates a previously\ncreated application instance.</p>","!type":"fn()"}},"MAssert":{"!doc":"<p>This mixin includes all assertions from {@link qx.core.Assert} to conveniently\ncall assertions. It is included into {@link qx.core.Object} if debugging code\nis enabled. It is further included into all unit tests\n{@link qx.dev.unit.TestCase}.</p>","prototype":{"assert":{"!doc":"<p>Assert that the condition evaluates to <code>true</code>.</p>","!type":"fn(condition: Object, msg: string)"},"assertArgumentsCount":{"!doc":"<p>Assert that the number of arguments is within the given range</p>","!type":"fn(args: +arguments, minCount: +Integer, maxCount: +Integer, msg: string)"},"assertArray":{"!doc":"<p>Assert that the value is an array.</p>","!type":"fn(value: Object, msg: string)"},"assertArrayEquals":{"!doc":"<p>Assert that both array have identical array items.</p>","!type":"fn(expected: +Array, found: +Array, msg: string)"},"assertBoolean":{"!doc":"<p>Assert that the value is a boolean.</p>","!type":"fn(value: Object, msg: string)"},"assertCssColor":{"!doc":"<p>Assert that the value represents the given <span class=\"caps\">CSS</span> color value. This method\nparses the color strings and compares the <span class=\"caps\">RGB</span> values. It is able to\nparse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>","!type":"fn(expected: string, value: string, msg: string)"},"assertElement":{"!doc":"<p>Assert that the value is a <span class=\"caps\">DOM</span> element.</p>","!type":"fn(value: Object, msg: string)"},"assertEquals":{"!doc":"<p>Assert that both values are equal. (Uses the equality operator\n<code>==</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertEventFired":{"!doc":"<p>Assert that an event is fired.</p>","!type":"fn(obj: Object, event: string, invokeFunc: fn(), listener?: fn(), msg?: string)"},"assertEventNotFired":{"!doc":"<p>Assert that an event is not fired.</p>","!type":"fn(obj: Object, event: string, invokeFunc: fn(), msg: string)"},"assertException":{"!doc":"<p>Asserts that the callback raises a matching exception.</p>","!type":"fn(callback: fn(), exception?: +Error, re: string, msg: string)"},"assertFalse":{"!doc":"<p>Assert that the value is <code>false</code> (Identity check).</p>","!type":"fn(value: bool, msg: string)"},"assertFunction":{"!doc":"<p>Assert that the value is a function.</p>","!type":"fn(value: Object, msg: string)"},"assertIdentical":{"!doc":"<p>Assert that both values are identical. (Uses the identity operator\n<code>===</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertInArray":{"!doc":"<p>Assert that the value is an item in the given array.</p>","!type":"fn(value: Object, array: +Array, msg: string)"},"assertInRange":{"!doc":"<p>Assert that the value is inside the given range.</p>","!type":"fn(value: Object, min: number, max: number, msg: string)"},"assertInstance":{"!doc":"<p>Assert that the value is an instance of the given class.</p>","!type":"fn(value: Object, clazz: +Class, msg: string)"},"assertInteger":{"!doc":"<p>Assert that the value is an integer.</p>","!type":"fn(value: Object, msg: string)"},"assertInterface":{"!doc":"<p>Assert that the value implements the given interface.</p>","!type":"fn(value: Object, iface: +Class, msg: string)"},"assertJsonEquals":{"!doc":"<p>Assert that the first two arguments are equal, when serialized into\n<span class=\"caps\">JSON</span>.</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertKeyInMap":{"!doc":"<p>Assert that the value is a key in the given map.</p>","!type":"fn(value: Object, map: +Map, msg: string)"},"assertMap":{"!doc":"<p>Assert that the value is a map either created using <code>new Object</code>\nor by using the object literal notation <code>{ ... }</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertMatch":{"!doc":"<p>Assert that the given string matches the regular expression</p>","!type":"fn(str: string, re: +RegExp, msg: string)"},"assertNotEquals":{"!doc":"<p>Assert that both values are not equal. (Uses the not equality operator\n<code>!=</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertNotIdentical":{"!doc":"<p>Assert that both values are not identical. (Uses the not identity operator\n<code>!==</code>.)</p>","!type":"fn(expected: Object, found: Object, msg: string)"},"assertNotNull":{"!doc":"<p>Assert that the value is not <code>null</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertNotUndefined":{"!doc":"<p>Assert that the value is not <code>undefined</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertNull":{"!doc":"<p>Assert that the value is <code>null</code>.</p>","!type":"fn(value: Object, msg: string)"},"assertNumber":{"!doc":"<p>Assert that the value is a number.</p>","!type":"fn(value: Object, msg: string)"},"assertObject":{"!doc":"<p>Assert that the value is an object.</p>","!type":"fn(value: Object, msg: string)"},"assertPositiveInteger":{"!doc":"<p>Assert that the value is an integer >= 0.</p>","!type":"fn(value: Object, msg: string)"},"assertPositiveNumber":{"!doc":"<p>Assert that the value is a number >= 0.</p>","!type":"fn(value: Object, msg: string)"},"assertQxObject":{"!doc":"<p>Assert that the value is an instance of {@link qx.core.Object}.</p>","!type":"fn(value: Object, msg: string)"},"assertQxWidget":{"!doc":"<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>","!type":"fn(value: Object, msg: string)"},"assertRegExp":{"!doc":"<p>Assert that the value is a regular expression.</p>","!type":"fn(value: Object, msg: string)"},"assertString":{"!doc":"<p>Assert that the value is a string.</p>","!type":"fn(value: Object, msg: string)"},"assertTrue":{"!doc":"<p>Assert that the value is <code>true</code> (Identity check).</p>","!type":"fn(value: bool, msg: string)"},"assertType":{"!doc":"<p>Assert that the value has the given type using the <code>typeof</code>\noperator. Because the type is not always what it is supposed to be it is\nbetter to use more explicit checks like {@link #assertString} or\n{@link #assertArray}.</p>","!type":"fn(value: Object, type: string, msg: string)"},"assertUndefined":{"!doc":"<p>Assert that the value is <code>undefined</code>.</p>","!type":"fn(value: Object, msg: string)"},"fail":{"!doc":"<p>Raise an {@link AssertionError}</p>","!type":"fn(msg: string, compact: bool)"}}},"MBindTo":{"!doc":"<p>Mixin to add a bindTo method to a class, making it easy to bind a function\nto an object instance for use in lieu of calls to static method\nqx.lang.Function.bind().</p>\n\n<p>The easiest (but not necessarily most efficient) way to use this mixin is\nto include it in qx.core.Object by adding this line some place in the\napplication code (typically in main()):</p>\n\n<pre>\n  qx.Class.include(qx.core.Object, qx.core.MBindTo);\n</pre>\n\n<p>If object footprint (memory use) is of significant concern, that may be a\nbit excessive since every object which is a descendent of qx.core.Object\nwill have the methods defined in the mixin. Instead, if a certain class\nwill have many functions bound to it (of particular use for callback\nfunctions), qx.Class.include() could be used to include this mixin in that\nclass instead of in qx.core.Object.</p>\n\n<p>Alternatively, that class may be subclassed, and the &#8216;include&#8217; key of the\nclass configuration could be used to always include this mixin in the\nsubclass. e.g.</p>\n\n<pre>\n  qx.Class.define(\"custom.Table\",\n  {\n    extend  : qx.ui.table.Table,\n    include : [ qx.core.MBindTo ]\n  });\n</pre>","prototype":{"bindTo":{"!doc":"<p>Bind a function to this object</p>","!type":"fn(func: fn(), varargs?: Object) -> fn()"}}},"MEvent":{"!doc":"<p>This mixin offers basic event handling capabilities. It includes the\ncommonly known methods for managing event listeners and firing events.</p>","prototype":{"addListener":{"!doc":"<p>Add event listener to this object.</p>","!type":"fn(type: string, listener: fn(), self?: Object, capture?: bool) -> string"},"addListenerOnce":{"!doc":"<p>Add event listener to this object, which is only called once. After the\nlistener is called the event listener gets removed.</p>","!type":"fn(type: string, listener: fn(), self?: Object, capture?: bool) -> string"},"dispatchEvent":{"!doc":"<p>Dispatch an event on this object</p>","!type":"fn(evt: +qx.event.type.Event) -> bool"},"fireDataEvent":{"!doc":"<p>Creates and dispatches an non-bubbling data event on this object.</p>","!type":"fn(type: string, data: Object, oldData?: Object, cancelable?: bool) -> bool"},"fireEvent":{"!doc":"<p>Creates and dispatches an event on this object.</p>","!type":"fn(type: string, clazz?: +Class, args?: +Array) -> bool"},"fireNonBubblingEvent":{"!doc":"<p>Create an event object and dispatch it on this object.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required.</p>","!type":"fn(type: string, clazz?: +Class, args?: +Array) -> bool"},"hasListener":{"!doc":"<p>Check if there are one or more listeners for an event type.</p>","!type":"fn(type: string, capture?: bool) -> bool"},"removeListener":{"!doc":"<p>Remove event listener from this object</p>","!type":"fn(type: string, listener: fn(), self?: Object, capture: bool) -> bool"},"removeListenerById":{"!doc":"<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>","!type":"fn(id: string) -> bool"}}},"MLogging":{"!doc":"<p>This mixin offers the basic logging features offered by {@link qx.log.Logger}.</p>","prototype":{"__logMessage":{"!doc":"<p>Helper that calls the appropriate logger function with the current object\nand any number of items.</p>","!type":"fn(level: string, varargs: +arguments)"},"debug":{"!doc":"<p>Logs a debug message.</p>","!type":"fn(varargs: Object)"},"error":{"!doc":"<p>Logs an error message.</p>","!type":"fn(varargs: Object)"},"info":{"!doc":"<p>Logs an info message.</p>","!type":"fn(varargs: Object)"},"trace":{"!doc":"<p>Prints the current stack trace</p>","!type":"fn()"},"warn":{"!doc":"<p>Logs a warning message.</p>","!type":"fn(varargs: Object)"}}},"MProperty":{"!doc":"<p>This mixin offers the bacis property features which include generic\nsetter, getter and resetter.</p>","prototype":{"get":{"!doc":"<p>Returns the value of the given property. If no generated getter could be\nfound, a fallback tries to access a handwritten getter.</p>","!type":"fn(prop: string) -> Object"},"reset":{"!doc":"<p>Resets the value of the given property. If no generated resetter could be\nfound, a handwritten resetter will be invoked, if available.</p>","!type":"fn(prop: string)"},"set":{"!doc":"<p>Sets multiple properties at once by using a property list or\nsets one property and its value by the first and second argument.\nAs a fallback, if no generated property setter could be found, a\nhandwritten setter will be searched and invoked if available.</p>","!type":"fn(data: +Map, value?: Object) -> Object"}}},"Object":{"!proto":"Object","!doc":"<p>The qooxdoo root class. All other classes are direct or indirect subclasses of this one.</p>\n\n<p>This class contains methods for:</p>\n\n<ul>\n<li>object management (creation and destruction)</li>\n<li>interfaces for event system</li>\n<li>generic setter/getter support</li>\n<li>interfaces for logging console</li>\n<li>user friendly OO interfaces like {@link #self} or {@link #base}</li>\n</ul>","!type":"fn()","prototype":{"_disposeArray":{"!doc":"<p>Disposes all members of the given array and deletes\nthe field which refers to the array afterwards.</p>","!type":"fn(field: string)"},"_disposeMap":{"!doc":"<p>Disposes all members of the given map and deletes\nthe field which refers to the map afterwards.</p>","!type":"fn(field: string)"},"_disposeObjects":{"!doc":"<p>Disconnects and disposes given objects from instance.\nOnly works with qx.core.Object based objects e.g. Widgets.</p>","!type":"fn(varargs: +arguments)"},"_disposeSingletonObjects":{"!doc":"<p>Disconnects and disposes given singleton objects from instance.\nOnly works with qx.core.Object based objects e.g. Widgets.</p>","!type":"fn(varargs: +arguments)"},"base":{"!doc":"<p>Call the same method of the super class.</p>","!type":"fn(args: +arguments, varargs: Object) -> Object"},"clone":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Returns a clone of this object. Copies over all user configured\nproperty values. Do not configure a parent nor apply the appearance\nstyles directly.</p>","!type":"fn() -> +qx.core.Object"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"},"getUserData":{"!doc":"<p>Load user defined data from the object</p>","!type":"fn(key: string) -> Object"},"isDisposed":{"!doc":"<p>Returns true if the object is disposed.</p>","!type":"fn() -> bool"},"self":{"!doc":"<p>Returns the static class (to access static members of this class)</p>","!type":"fn(args: +arguments) -> Object"},"setUserData":{"!doc":"<p>Store user defined data inside the object.</p>","!type":"fn(key: string, value: Object)"},"toHashCode":{"!doc":"<p>Return unique hash code of object</p>","!type":"fn() -> +Integer"},"toString":{"!doc":"<p>Returns a string representation of the qooxdoo object.</p>","!type":"fn() -> string"}}},"ObjectRegistry":{"!doc":"<p>Registration for all instances of qooxdoo classes. Mainly\nused to manage them for the final shutdown sequence and to\nuse weak references when connecting widgets to <span class=\"caps\">DOM</span> nodes etc.</p>","clearHashCode":{"!doc":"<p>Clears the unique identifier on the given object.</p>","!type":"fn(obj: Object)"},"fromHashCode":{"!doc":"<p>Get an object instance by its hash code as returned by {@link #toHashCode}.\nIf the object is already disposed or the hashCode is invalid,\n<code>null</code> is returned.</p>","!type":"fn(hash: string) -> +qx.core.Object"},"getNextHash":{"!doc":"<p>Returns the next hash code that will be used</p>","!type":"fn() -> +Integer"},"getPostId":{"!doc":"<p>Returns the postfix that identifies the current iframe</p>","!type":"fn() -> +Integer"},"getRegistry":{"!doc":"<p>Returns the object registry.</p>","!type":"fn() -> Object"},"getStackTraces":{"!doc":"<p>Returns the map of stack traces recorded when objects are registered\n(for dispose profiling)</p>","!type":"fn() -> +Map"},"register":{"!doc":"<p>Registers an object into the database. This adds a hashcode\nto the object (if not already done before) and stores it under\nthis hashcode. You can access this object later using the hashcode\nby calling {@link #fromHashCode}.</p>\n\n<p>All registered objects are automatically disposed on application\nshutdown. Each registered object must at least have a method\ncalled <code>dispose</code>.</p>","!type":"fn(obj: Object)"},"shutdown":{"!doc":"<p>Disposing all registered object and cleaning up registry. This is\nautomatically executed at application shutdown.</p>","!type":"fn()"},"toHashCode":{"!doc":"<p>Returns an unique identifier for the given object. If such an identifier\ndoes not yet exist, create it.</p>","!type":"fn(obj: Object) -> string"},"unregister":{"!doc":"<p>Removes the given object from the database.</p>","!type":"fn(obj: Object)"}},"Property":{"!doc":"<p>Internal class for handling of dynamic properties. Should only be used\nthrough the methods provided by {@link qx.Class}.</p>\n\n<p>For a complete documentation of properties take a look at\n<a href=\"http://manual.qooxdoo.org/4.1/pages/core.html#properties\">http://manual.qooxdoo.org/4.1/pages/core.html#properties</a>.</p>\n\n<p><strong>Normal properties</strong></p>\n\n<p>The <code>properties</code> key in the class definition map of {@link qx.Class#define}\nis used to generate the properties.</p>\n\n<p>Valid keys of a property definition are:</p>\n\n<table>\n  <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n  <tr><th>check</th><td>Array, String, Function</td><td>\n    The check is used to check the type the incoming value of a property. This will only\n    be executed in the source version. The build version will not contain the checks.\n    The check can be:\n    <ul>\n      <li>a custom check function. The function takes the incoming value as a parameter and must\n          return a boolean value to indicate whether the values is valid.\n      </li>\n      <li>inline check code as a string e.g. <code>\"value &gt; 0 &amp;&amp; value &lt; 100\"</code></li>\n      <li>a class name e.g. <code>qx.ui.form.Button</code></li>\n      <li>a name of an interface the value must implement</li>\n      <li>an array of all valid values</li>\n      <li>one of the predefined checks: Boolean, String, Number, Integer, Float, Double,\n          Object, Array, Map, Class, Mixin, Interface, Theme, Error, RegExp, Function,\n          Date, Node, Element, Document, Window, Event\n      </li>\n    <ul>\n  </td></tr>\n  <tr><th>init</th><td>var</td><td>\n    Sets the default/initial value of the property. If no property value is set or the property\n    gets reset, the getter will return the <code>init</code> value.\n  </td></tr>\n  <tr><th>apply</th><td>String</td><td>\n    On change of the property value the method of the specified name will be called. The signature of\n    the method is <code>function(newValue, oldValue, propertyName)</code>. It is conventional to name\n    the callback <code>_apply</code> + <i>PropertyName</i>, with the property name camel-cased (e.g.\n    \"<i>_applyFooBar</i>\" for a property <i>fooBar</i>).\n  </td></tr>\n  <tr><th>event</th><td>String</td><td>\n    On change of the property value an event with the given name will be dispatched. The event type is\n    {@link qx.event.type.Data}.\n  </td></tr>\n  <tr><th>themeable</th><td>Boolean</td><td>\n    Whether this property can be set using themes.\n  </td></tr>\n  <tr><th>inheritable</th><td>Boolean</td><td>\n    Whether the property value should be inheritable. If the property does not have an user defined or an\n    init value, the property will try to get the value from the parent of the current object.\n  </td></tr>\n  <tr><th>nullable</th><td>Boolean</td><td>\n    Whether <code>null</code> is an allowed value of the property. This is complementary to the check\n    defined using the <code>check</code> key.\n  </td></tr>\n  <tr><th>refine</th><td>Boolean</td><td>\n    Whether the property definition is a refinement of a property in one of the super classes of the class.\n    Only the <code>init</code> value can be changed using refine.\n  </td></tr>\n  <tr><th>transform</th><td>String</td><td>\n    On setting of the property value the method of the specified name will\n    be called. The signature of the method is <code>function(value)</code>.\n    The parameter <code>value</code> is the value passed to the setter.\n    The function must return the modified or unmodified value.\n    Transformation occurs before the check function, so both may be\n    specified if desired.  Alternatively, the transform function may throw\n    an error if the value passed to it is invalid.\n  </td></tr>\n  <tr><th>validate</th><td>Function, String</td><td>\n    On setting of the property value the method of the specified name will\n    be called. The signature of the method is <code>function(value)</code>.\n    The parameter <code>value</code> is the value passed to the setter.\n    If the validation fails, an <code>qx.core.ValidationError</code> should\n    be thrown by the validation function. Otherwise, just do nothing in the\n    function.\n\n<p>If a string is given, the string should hold a reference to a member\n    method.</p>\n\n<code>\"<i>methodname</i>\"</code> for example\n    <code>\"__validateProperty\"</code>\n\n<p>There are some default validators in the {@link qx.util.Validate} class.\n    See this documentation for usage examples.\n  </td></tr>\n  <tr><th>dereference</th><td>Boolean</td><td>\n    By default, the references to the values (current, init, ...) of the\n    property will be stored as references on the object. When disposing\n    this object, the references will not be deleted. Setting the\n    dereference key to true tells the property system to delete all\n    connections made by this property on dispose. This can be necessary for\n    disconnecting <span class=\"caps\">DOM</span> objects to allow the garbage collector to work\n    properly.\n  </td></tr>\n  <tr><th>deferredInit</th><td>Boolean</td><td>\n    Allow for a deferred initialization for reference types. Defaults to false.\n  </td></tr>\n</table></p>\n\n<p><strong>Property groups</strong></p>\n\n<p>Property groups are defined in a similar way but support a different set of keys:</p>\n\n<table>\n  <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n  <tr><th>group</th><td>String[]</td><td>\n    A list of property names which should be set using the property group.\n  </td></tr>\n  <tr><th>mode</th><td>String</td><td>\n    If mode is set to <code>\"shorthand\"</code>, the properties can be set using a CSS like shorthand mode.\n  </td></tr>\n  <tr><th>themeable</th><td>Boolean</td><td>\n    Whether this property can be set using themes.\n  </td></tr>\n</table>","__attachGroupMethods":{"!doc":"<p>Attach group methods</p>","!type":"fn(clazz: +Class, config: +Map, name: string)"},"__attachPropertyMethods":{"!doc":"<p>Attach property methods</p>","!type":"fn(clazz: +Class, config: +Map, name: string)"},"__createRefresher":{"!doc":"<p>Assemble the refresher code and return the generated function</p>","!type":"fn(inheritables: string) -> fn()"},"__emitCallCallback":{"!doc":"<p>Emit code to call the apply method and fire the change event</p>","!type":"fn(code: string, config: Object, name: string, variant: string)"},"__emitIncomingValueTransformation":{"!doc":"<p>Emit code to apply the &#8220;validate&#8221; and &#8220;transform&#8221; config keys.</p>","!type":"fn(code: string, clazz: +Class, config: Object, name: string)"},"__emitIncomingValueValidation":{"!doc":"<p>Emit code, which performs validation of the incoming value according to\nthe &#8220;nullable&#8221;, &#8220;check&#8221; and &#8220;inheritable&#8221; config keys.</p>","!type":"fn(code: string, config: Object, clazz: +Class, name: string, variant: string)"},"__emitNormalizeUndefinedValues":{"!doc":"<p>Emit code to normalize the old and incoming values from undefined to\n<code>null</code>.</p>","!type":"fn(code: string, config: Object, name: string, variant: string)"},"__emitOldNewComparison":{"!doc":"<p>Emit code, which returns if the incoming value equals the current value.</p>","!type":"fn(code: string, incomingValue: bool, store: Object, variant: string)"},"__emitRefreshChildrenValue":{"!doc":"<p>Emit code to update the inherited values of child objects</p>","!type":"fn(code: string, name: string)"},"__emitSetterPreConditions":{"!doc":"<p>Emit code to check the arguments pre-conditions</p>","!type":"fn(code: string, config: Object, name: string, variant: string, incomingValue: bool)"},"__emitStoreComputedAndOldValue":{"!doc":"<p>Emit code to store the incoming value and compute the &#8220;old&#8221; and &#8220;computed&#8221;\nvalues.</p>","!type":"fn(code: string, config: Object, name: string, variant: string, incomingValue: bool)"},"__emitStoreInheritedPropertyValue":{"!doc":"<p>Emit code to store the value of an inheritable property</p>","!type":"fn(code: string, config: Object, name: string, variant: string)"},"__emitStoreValue":{"!doc":"<p>Emit code to store the incoming value</p>","!type":"fn(code: string, name: string, variant: string, incomingValue: bool)"},"__executeOptimizedRefresh":{"!doc":"<p>Generate optimized refresh method and  attach it to the class&#8217; prototype</p>","!type":"fn(clazz: +Class)"},"__gatherDependency":{"!doc":"<p>This is a method which does nothing than gethering dependencies for the\nmodule system. Calling this method is useless because it does nothing.</p>","!type":"fn()"},"__getInheritablesOfClass":{"!doc":"<p>Get the names of all inheritable properties of the given class</p>","!type":"fn(clazz: +Class) -> string"},"__getStore":{"!doc":"<p>Get the object to store the value for the given variant</p>","!type":"fn(variant: string, name: string) -> Object"},"__shouldBeDereferenced":{"!doc":"<p>Returns if the reference for the given property check should be removed\non dispose.</p>","!type":"fn(check: Object) -> bool"},"__unwrapFunctionFromCode":{"!doc":"<p>Compiles a string builder object to a function, executes the function and\nreturns the return value.</p>","!type":"fn(instance: Object, members: Object, name: string, variant: string, code: +Array, args: +arguments) -> Object"},"attachMethods":{"!doc":"<p>Attach one property to class</p>","!type":"fn(clazz: +Class, name: string, config: +Map)"},"attachRefreshInheritables":{"!doc":"<p>Attach $refreshInheritables method stub to the given class</p>","!type":"fn(clazz: +Class)"},"error":{"!doc":"<p>Error method used by the property system to report errors.</p>","!type":"fn(obj: +qx.core.Object, id: +Integer, property: string, variant: string, value: Object)"},"executeOptimizedGetter":{"!doc":"<p>Generates the optimized getter\nSupported variants: get</p>","!type":"fn(instance: Object, clazz: +Class, name: string, variant: string) -> Object"},"executeOptimizedSetter":{"!doc":"<p>Generates the optimized setter\nSupported variants: set, reset, init, refresh, style, unstyle</p>","!type":"fn(instance: Object, clazz: +Class, name: string, variant: string, args: +arguments) -> Object"}},"ValidationError":{"!proto":"qx.type.BaseError","!doc":"<p>A validation Error which should be thrown if a validation fails.</p>"},"WindowError":{"!proto":"Error","!doc":"<p>This exception is thrown by the {@link qx.event.GlobalError} handler if a\n<code>window.onerror</code> event occurs in the browser.</p>","!type":"fn()","prototype":{"getLineNumber":{"!doc":"<p>Get the line number where the error was raised</p>","!type":"fn() -> +Integer"},"getUri":{"!doc":"<p>Get the <span class=\"caps\">URI</span> where error was raised</p>","!type":"fn() -> string"},"toString":{"!doc":"<p>Returns the error message.</p>","!type":"fn() -> string"}}}},"data":{"Array":{"!proto":"qx.core.Object","!doc":"<p>The data array is a special array used in the data binding context of\nqooxdoo. It does not extend the native array of JavaScript but its a wrapper\nfor it. All the native methods are included in the implementation and it\nalso fires events if the content or the length of the array changes in\nany way. Also the <code>.length</code> property is available on the array.</p>","!type":"fn()","prototype":{"__updateEventPropagation":{"!doc":"<p>Helper to update the event propagation for a range of items.</p>","!type":"fn(from: number, to: number)"},"__updateLength":{"!doc":"<p>Internal function which updates the length property of the array.\nEvery time the length will be updated, a {@link #changeLength} data\nevent will be fired.</p>","!type":"fn()"},"append":{"!doc":"<p>Append the items of the given array.</p>","!type":"fn(array: +Array)"},"concat":{"!doc":"<p>Concatenates the current and the given array into a new one.</p>","!type":"fn(array: +Array) -> +qx.data.Array"},"contains":{"!doc":"<p>Check if the given item is in the current array.</p>","!type":"fn(item: Object) -> bool"},"copy":{"!doc":"<p>Return a copy of the given arr</p>","!type":"fn() -> +qx.data.Array"},"equals":{"!doc":"<p>Check whether the given array has the same content as this.\nChecks only the equality of the arrays&#8217; content.</p>","!type":"fn(array: +qx.data.Array) -> bool"},"every":{"!doc":"<p>Tests whether every element in the array passes the test implemented by the\nprovided function.</p>","!type":"fn(callback: fn(), self?: Object) -> bool"},"filter":{"!doc":"<p>Creates a new array with all elements that pass the test implemented by\nthe provided function. It returns a new data array instance so make sure\nto think about disposing it.</p>","!type":"fn(callback: fn(), self?: Object) -> +qx.data.Array"},"forEach":{"!doc":"<p>Invokes the given function for every item in the array.</p>","!type":"fn(callback: fn(), context: Object)"},"getAutoDisposeItems":{"!doc":"<p>Returns the (computed) value of the property <code>autoDisposeItems</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoDisposeItems}.</p>","!type":"fn() -> Object"},"getItem":{"!doc":"<p>Replacement function for the getting of the array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> should be array.getItem(0).</p>","!type":"fn(index: number) -> Object"},"getLength":{"!doc":"<p>This method returns the current length stored under .length on each\narray.</p>","!type":"fn() -> number"},"indexOf":{"!doc":"<p>Returns the index of the item in the array. If the item is not in the\narray, -1 will be returned.</p>","!type":"fn(item: Object) -> number"},"initAutoDisposeItems":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoDisposeItems</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoDisposeItems}.</p>","!type":"fn(value: Object) -> Object"},"insertAfter":{"!doc":"<p>Insert an element into the array after a given item.</p>","!type":"fn(after: Object, item: Object)"},"insertAt":{"!doc":"<p>Insert an element at a given position.</p>","!type":"fn(index: +Integer, item: Object)"},"insertBefore":{"!doc":"<p>Insert an item into the array before a given item.</p>","!type":"fn(before: Object, item: Object)"},"isAutoDisposeItems":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>autoDisposeItems</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoDisposeItems}.</p>","!type":"fn() -> bool"},"join":{"!doc":"<p>Returns the array as a string using the given connector string to\nconnect the values.</p>","!type":"fn(connector: string) -> string"},"lastIndexOf":{"!doc":"<p>Returns the last index of the item in the array. If the item is not in the\narray, -1 will be returned.</p>","!type":"fn(item: Object) -> number"},"map":{"!doc":"<p>Creates a new array with the results of calling a provided function on every\nelement in this array. It returns a new data array instance so make sure\nto think about disposing it.</p>","!type":"fn(callback: fn(), self?: Object) -> +qx.data.Array"},"max":{"!doc":"<p>Returns the highest value in the given array.\nSupports numeric values only.</p>","!type":"fn() -> number"},"min":{"!doc":"<p>Returns the lowest value in the array. Supports\nnumeric values only.</p>","!type":"fn() -> number"},"pop":{"!doc":"<p>Removes and returns the last element of the array.\nAn change event will be fired.</p>","!type":"fn() -> Object"},"push":{"!doc":"<p>Adds an element at the end of the array.</p>","!type":"fn(varargs: Object) -> number"},"reduce":{"!doc":"<p>Apply a function against an accumulator and each value of the array\n(from left-to-right) as to reduce it to a single value.</p>","!type":"fn(callback: fn(), initValue?: Object) -> Object"},"reduceRight":{"!doc":"<p>Apply a function against an accumulator and each value of the array\n(from right-to-left) as to reduce it to a single value.</p>","!type":"fn(callback: fn(), initValue?: Object) -> Object"},"remove":{"!doc":"<p>Remove the given item.</p>","!type":"fn(item: Object) -> Object"},"removeAll":{"!doc":"<p>Remove all elements from the array.</p>","!type":"fn() -> +Array"},"removeAt":{"!doc":"<p>Remove an element from the array at the given index.</p>","!type":"fn(index: +Integer) -> Object"},"resetAutoDisposeItems":{"!doc":"<p>Resets the user value of the property <code>autoDisposeItems</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoDisposeItems}.</p>","!type":"fn()"},"reverse":{"!doc":"<p>Reverses the order of the array. An change event will be fired.</p>","!type":"fn()"},"setAutoDisposeItems":{"!doc":"<p>Sets the user value of the property <code>autoDisposeItems</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoDisposeItems}.</p>","!type":"fn(value: Object) -> Object"},"setItem":{"!doc":"<p>Replacement function for the setting of an array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> = &#8220;a&#8221; should be array.setItem(0, &#8220;a&#8221;).\nA change event will be fired if the value changes. Setting the same\nvalue again will not lead to a change event.</p>","!type":"fn(index: number, item: Object)"},"shift":{"!doc":"<p>Removes the first element of the array and returns it. An change event\nwill be fired.</p>","!type":"fn() -> Object"},"slice":{"!doc":"<p>Returns a new array based on the range specified by the parameters.</p>","!type":"fn(from: number, to?: number) -> +qx.data.Array"},"some":{"!doc":"<p>Tests whether any element in the array passes the test implemented by the\nprovided function.</p>","!type":"fn(callback: fn(), self?: Object) -> bool"},"sort":{"!doc":"<p>Sorts the array. If a function is given, this will be used to\ncompare the items. <code>changeBubble</code> event will only be fired,\nif sorting result differs from original array.</p>","!type":"fn(func: fn())"},"splice":{"!doc":"<p>Method to remove and add new elements to the array. A change event\nwill be fired for every removal or addition unless the array is\nidentical before and after splicing.</p>","!type":"fn(startIndex: +Integer, amount: +Integer, varargs: Object) -> +qx.data.Array"},"sum":{"!doc":"<p>Returns the sum of all values in the array. Supports\nnumeric values only.</p>","!type":"fn() -> number"},"toArray":{"!doc":"<p>Returns the list data as native array. Beware of the fact that the\ninternal representation will be returnd and any manipulation of that\ncan cause a misbehavior of the array. This method should only be used for\ndebugging purposes.</p>","!type":"fn() -> +Array"},"toggleAutoDisposeItems":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>autoDisposeItems</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoDisposeItems}.</p>","!type":"fn() -> bool"},"toString":{"!doc":"<p>Returns the toString of the original Array</p>","!type":"fn() -> string"},"unshift":{"!doc":"<p>Adds the given items to the beginning of the array. For every element,\na change event will be fired.</p>","!type":"fn(varargs: Object) -> +Integer"}}},"controller":{"Form":{"!proto":"qx.core.Object","!doc":"<h2>Form Controller</h2>\n\n<p><strong>General idea</strong></p>\n\n<p>The form controller is responsible for connecting a form with a model. If no\nmodel is given, a model can be created. This created model will fit exactly\nto the given form and can be used for serialization. All the connections\nbetween the form items and the model are handled by an internal\n{@link qx.data.controller.Object}.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Connect a form to a model (bidirectional)</li>\n<li>Create a model for a given form</li>\n</ul>\n\n<p><strong>Usage</strong></p>\n\n<p>The controller only works if both a controller and a model are set.\nCreating a model will automatically set the created model.</p>\n\n<p><strong>Cross reference</strong></p>\n\n<ul>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n</ul>","!type":"fn()","prototype":{"__isModelSelectable":{"!doc":"<p>Returns whether the given item implements\n{@link qx.ui.core.ISingleSelection} and\n{@link qx.ui.form.IModelSelection}.</p>","!type":"fn(item: +qx.ui.form.IForm) -> bool"},"__setUpBinding":{"!doc":"<p>Internal helper for setting up the bindings using\n{@link qx.data.controller.Object#addTarget}. All bindings are set\nup bidirectional.</p>","!type":"fn()"},"__tearDownBinding":{"!doc":"<p>Internal helper for removing all set up bindings using\n{@link qx.data.controller.Object#removeTarget}.</p>","!type":"fn(oldTarget: +qx.ui.form.Form)"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: +qx.core.Object, old: +qx.core.Object)"},"_applyTarget":{"!doc":"<p>Applies changes of the property value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: +qx.ui.form.Form, old: +qx.ui.form.Form)"},"addBindingOptions":{"!doc":"<p>The form controller uses for setting up the bindings the fundamental\nbinding layer, the {@link qx.data.SingleValueBinding}. To achieve a\nbinding in both directions, two bindings are neede. With this method,\nyou have the opportunity to set the options used for the bindings.</p>","!type":"fn(name: string, model2target: +Map, target2model: +Map)"},"createModel":{"!doc":"<p>Creates and sets a model using the {@link qx.data.marshal.Json} object.\nRemember that this method can only work if the form is set. The created\nmodel will fit exactly that form. Changing the form or adding an item to\nthe form will need a new model creation.</p>","!type":"fn(includeBubbleEvents: bool) -> +qx.core.Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getTarget":{"!doc":"<p>Returns the (computed) value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn() -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initTarget":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>target</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetTarget":{"!doc":"<p>Resets the user value of the property <code>target</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn()"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setTarget":{"!doc":"<p>Sets the user value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"updateModel":{"!doc":"<p>Responsible for synching the data from entered in the form to the model.\nPlease keep in mind that this method only works if you create the form\nwith <code>selfUpdate</code> set to true. Otherwise, this method will\ndo nothing because updates will be synched automatically on every\nchange.</p>","!type":"fn()"}}},"IControllerDelegate":{"!doc":"<p>Objects, which are used as delegates for a data binding controller may\nimplement any of the methods described in this interface. The delegate does\nnot need implement all of the methods of this interface. If a method is not\nimplemented the controller provides a default implementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nreally implemented.</p>","prototype":{"bindItem":{"!doc":"<p>Sets up the binding for the given item and index.</p>\n\n<p>For every property you want to bind, use\n{@link qx.data.controller.List#bindProperty} like this:\n<code>\ncontroller.bindProperty(&#8220;path.in.the.model&#8221;, &#8220;label&#8221;, options, item, id);\n</code></p>","!type":"fn(controller: Object, item: +qx.ui.core.Widget, id: Object)"},"configureItem":{"!doc":"<p>Gives the user the opportunity to set individual styles and properties\non the by the controller created widgets.</p>","!type":"fn(item: Object)"},"createItem":{"!doc":"<p>Creates an item which will be added to the target as child. Be sure to\nimplement the {@link #bindItem} function as well to get the needed\nproperties bound.</p>","!type":"fn() -> +qx.ui.core.Widget"},"filter":{"!doc":"<p>Filter checks the current data and returns a boolean if the data should\nappear in the filtered data set or not.</p>\n\n<p>The filter currently works only with the {@link qx.data.controller.List}\ncontroller!</p>","!type":"fn(data: Object) -> bool"}}},"ISelection":{"!doc":"<p>Interface for data binding classes offering a selection.</p>","prototype":{"getSelection":{"!doc":"<p>Getter for the selection list.</p>","!type":"fn() -> +qx.data.IListData"},"resetSelection":{"!doc":"<p>Resets the selection to its default value.</p>","!type":"fn()"},"setSelection":{"!doc":"<p>Setter for the selection.</p>","!type":"fn(value: +qx.data.IListData)"}}},"List":{"!proto":"qx.core.Object","!doc":"<h2>List Controller</h2>\n\n<p><strong>General idea</strong>\nThe list controller is responsible for synchronizing every list like widget\nwith a data array. It does not matter if the array contains atomic values\nlike strings of complete objects where one property holds the value for\nthe label and another property holds the icon url. You can even use converters\nthat make the label show a text corresponding to the icon, by binding both\nlabel and icon to the same model property and converting one of them.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Synchronize the model and the target</li>\n<li>Label and icon are bindable</li>\n<li>Takes care of the selection</li>\n<li>Passes on the options used by {@link qx.data.SingleValueBinding#bind}</li>\n</ul>\n\n<p><strong>Usage</strong></p>\n\n<p>As model, only {@link qx.data.Array}s do work. The currently supported\ntargets are</p>\n\n<ul>\n<li>{@link qx.ui.form.SelectBox}</li>\n<li>{@link qx.ui.form.List}</li>\n<li>{@link qx.ui.form.ComboBox}</li>\n</ul>\n\n<p>All the properties like model, target or any property path is bindable.\nEspecially the model is nice to bind to another selection for example.\nThe controller itself can only work if it has a model and a target set. The\nrest of the properties may be empty.</p>\n\n<p><strong>Cross reference</strong></p>\n\n<ul>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n<li>If you want to bind a form widget, use {@link qx.data.controller.Form}</li>\n</ul>","!type":"fn()","prototype":{"__addItem":{"!doc":"<p>Internal helper to add ListItems to the target including the creation\nof the binding.</p>","!type":"fn(index: number)"},"__buildUpLookupTable":{"!doc":"<p>Helper-Method which builds up the index lookup for the filter feature.\nIf no filter is set, the lookup table will be a 1:1 mapping.</p>","!type":"fn()"},"__changeModel":{"!doc":"<p>Event handler for the change event of the model. If the model changes,\nOnly the selection needs to be changed. The change of the data will\nbe done by the binding.</p>","!type":"fn()"},"__changeModelLength":{"!doc":"<p>Event handler for the changeLength of the model. If the length changes\nof the model, either ListItems need to be removed or added to the target.</p>","!type":"fn()"},"__lookup":{"!doc":"<p>Function for accessing the lookup table.</p>","!type":"fn(index: +Integer) -> number"},"__moveChangeListenerAtTheEnd":{"!doc":"<p>Helper method which removes and adds the change listener of the\ncontroller to the model. This is sometimes necessary to ensure that the\nlistener of the controller is executed as the last listener of the chain.</p>","!type":"fn()"},"__removeFilter":{"!doc":"<p>This helper is responsible for removing the filter and setting the\ncontroller to a valid state without a filtering.</p>","!type":"fn()"},"__removeItem":{"!doc":"<p>Internal helper to remove ListItems from the target. Also the binding\nwill be removed properly.</p>","!type":"fn()"},"__renewBindings":{"!doc":"<p>Internal helper method to renew all set bindings.</p>","!type":"fn()"},"_applyDelegate":{"!doc":"<p>If a new delegate is set, it applies the stored configuration for the\nlist items to the already created list items once.</p>","!type":"fn(value: +qx.core.Object, old: +qx.core.Object)"},"_applyIconOptions":{"!doc":"<p>Apply-method which will be called if the icon options has been changed.\nIt invokes a renewing of all set bindings.</p>","!type":"fn(value: +Map, old: +Map)"},"_applyIconPath":{"!doc":"<p>Apply-method which will be called if the icon path has been changed.\nIt invokes a renewing of all set bindings.</p>","!type":"fn(value: string, old: string)"},"_applyLabelOptions":{"!doc":"<p>Apply-method which will be called if the label options has been changed.\nIt invokes a renewing of all set bindings.</p>","!type":"fn(value: +Map, old: +Map)"},"_applyLabelPath":{"!doc":"<p>Apply-method which will be called if the label path has been changed.\nIt invokes a renewing of all set bindings.</p>","!type":"fn(value: string, old: string)"},"_applyModel":{"!doc":"<p>Apply-method which will be called if the model has been changed. It\nremoves all the listeners from the old model and adds the needed\nlisteners to the new model. It also invokes the initial filling of the\ntarget widgets if there is a target set.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_applyTarget":{"!doc":"<p>Apply-method which will be called if the target has been changed.\nWhen the target changes, every binding needs to be reset and the old\ntarget needs to be cleaned up. If there is a model, the target will be\nfilled with the data of the model.</p>","!type":"fn(value: +qx.ui.core.Widget, old: +qx.ui.core.Widget)"},"_bindListItem":{"!doc":"<p>Sets up the binding for the given ListItem and index.</p>","!type":"fn(item: +qx.ui.form.ListItem, index: number)"},"_createItem":{"!doc":"<p>Creates a ListItem and delegates the configure method if a delegate is\nset and the needed function (configureItem) is available.</p>","!type":"fn() -> +qx.ui.form.ListItem"},"_onBindingSet":{"!doc":"<p>Method which will be called on the invoke of every binding. It takes\ncare of the selection on the change of the binding.</p>","!type":"fn(index: number, sourceObject: +qx.core.Object, targetObject: +qx.core.Object)"},"_removeBindingsFrom":{"!doc":"<p>Internal helper method to remove the binding of the given item.</p>","!type":"fn(item: number)"},"_setBindItem":{"!doc":"<p>Helper method for applying the delegate It checks if a bindItem\nis set end invokes the initial process to apply the given function.</p>","!type":"fn(value: Object, old: Object)"},"_setConfigureItem":{"!doc":"<p>Helper method for applying the delegate It checks if a configureItem\nis set end invokes the initial process to apply the given function.</p>","!type":"fn(value: Object, old: Object)"},"_setCreateItem":{"!doc":"<p>Helper method for applying the delegate It checks if a createItem\nis set end invokes the initial process to apply the given function.</p>","!type":"fn(value: Object, old: Object)"},"_setFilter":{"!doc":"<p>Apply-Method for setting the filter. It removes all bindings,\ncheck if the length has changed and adds or removes the items in the\ntarget. After that, the bindings will be set up again and the selection\nwill be updated.</p>","!type":"fn(value: fn(), old: fn())"},"bindDefaultProperties":{"!doc":"<p>Helper-Method for binding the default properties (label, icon and model)\nfrom the model to the target widget.</p>\n\n<p>This method should only be called in the\n{@link qx.data.controller.IControllerDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(item: +qx.ui.form.ListItem, index: number)"},"bindProperty":{"!doc":"<p>Helper-Method for binding a given property from the model to the target\nwidget.\nThis method should only be called in the\n{@link qx.data.controller.IControllerDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(sourcePath: string, targetProperty: string, options: +Map, targetWidget: +qx.ui.core.Widget, index: number)"},"bindPropertyReverse":{"!doc":"<p>Helper-Method for binding a given property from the target widget to\nthe model.\nThis method should only be called in the\n{@link qx.data.controller.IControllerDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(targetPath: string, sourcePath: string, options: +Map, sourceWidget: +qx.ui.core.Widget, index: number)"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getTarget":{"!doc":"<p>Returns the (computed) value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn() -> Object"},"getVisibleModels":{"!doc":"<p>Returns all models currently visible by the list. This method is only\nuseful if you use the filter via the {@link #delegate}.</p>","!type":"fn() -> +qx.data.Array"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initTarget":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>target</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetTarget":{"!doc":"<p>Resets the user value of the property <code>target</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setTarget":{"!doc":"<p>Sets the user value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"syncWidget":{"!doc":"<p>Internal method used to sync the selection. The controller uses the\nwidget queue to schedule the selection update. An asynchronous handling of\nthe selection is needed because the bindings (event listeners for the\nbinding) need to be executed before the selection is updated.</p>","!type":"fn()"},"update":{"!doc":"<p>Updates the filter and the target. This could be used if the filter\nuses an additional parameter which changes the filter result.</p>","!type":"fn()"}}},"MSelection":{"!doc":"<p>Mixin for the selection in the data binding controller.\nIt contains an selection property which can be manipulated.\nRemember to call the method {@link #_addChangeTargetListener} on every\nchange of the target.\nIt is also important that the elements stored in the target e.g. ListItems\ndo have the corresponding model stored as user data under the &#8220;model&#8221; key.</p>","!type":"fn()","prototype":{"__changeSelectionArray":{"!doc":"<p>Event handler for the change of the data array holding the selection.\nIf a change is in the selection array, the selection update will be\ninvoked.</p>","!type":"fn()"},"__getSelectableForModel":{"!doc":"<p>Returns the list item storing the given model in its model property.</p>","!type":"fn(model: Object) -> Object"},"__selectItem":{"!doc":"<p>Internal helper for selecting an item in the target. The item to select\nis defined by a given model item.</p>","!type":"fn(item: +qx.core.Object)"},"__targetSupportsMultiSelection":{"!doc":"<p>Helper-method returning true, if the target supports multi selection.</p>","!type":"fn() -> bool"},"__targetSupportsSingleSelection":{"!doc":"<p>Helper-method returning true, if the target supports single selection.</p>","!type":"fn() -> bool"},"_addChangeTargetListener":{"!doc":"<p>Helper method which should be called by the classes including this\nMixin when the target changes.</p>","!type":"fn(value: +qx.ui.core.Widget, old: +qx.ui.core.Widget)"},"_applySelection":{"!doc":"<p>Apply-method for setting a new selection array. Only the change listener\nwill be removed from the old array and added to the new.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_changeTargetSelection":{"!doc":"<p>Event handler for a change in the target selection.\nIf the selection in the target has changed, the selected model objects\nwill be found and added to the selection array.</p>","!type":"fn()"},"_endSelectionModification":{"!doc":"<p>Helper-Method signaling that the internal changing of the targets\nselection is over.\n{@link #_startSelectionModification}</p>","!type":"fn()"},"_inSelectionModification":{"!doc":"<p>Helper-Method for checking the state of the selection modification.\n{@link #_startSelectionModification}\n{@link #_endSelectionModification}</p>","!type":"fn() -> bool"},"_startSelectionModification":{"!doc":"<p>Helper-Method signaling that currently the selection of the target is\nin change. That will block the change of the internal selection.\n{@link #_endSelectionModification}</p>","!type":"fn()"},"_updateSelection":{"!doc":"<p>Method for updating the selection. It checks for the case of single or\nmulti selection and after that checks if the selection in the selection\narray is the same as in the target widget.</p>","!type":"fn()"},"getSelection":{"!doc":"<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn() -> Object"},"initSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"resetSelection":{"!doc":"<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn()"},"setSelection":{"!doc":"<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"}}},"Object":{"!proto":"qx.core.Object","!doc":"<h2>Object Controller</h2>\n\n<p><strong>General idea</strong></p>\n\n<p>The idea of the object controller is to make the binding of one model object\ncontaining one or more properties as easy as possible. Therefore the\ncontroller can take a model as property. Every property in that model can be\nbound to one or more target properties. The binding will be for\natomic types only like Numbers, Strings, ...</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Manages the bindings between the model properties and the different targets</li>\n<li>No need for the user to take care of the binding ids</li>\n<li>Can create an bidirectional binding (read- / write-binding)</li>\n<li>Handles the change of the model which means adding the old targets</li>\n</ul>\n\n<p><strong>Usage</strong></p>\n\n<p>The controller only can work if a model is set. If the model property is\nnull, the controller is not working. But it can be null on any time.</p>\n\n<p><strong>Cross reference</strong></p>\n\n<ul>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n<li>If you want to bind a form widget, use {@link qx.data.controller.Form}</li>\n</ul>","!type":"fn()","prototype":{"__addTarget":{"!doc":"<p>Does the work for {@link #addTarget} but without saving the target\nto the internal target registry.</p>","!type":"fn(targetObject: +qx.core.Object, targetProperty: string, sourceProperty: string, bidirectional?: bool, options?: +Map, reverseOptions?: +Map)"},"__removeTargetFrom":{"!doc":"<p>Does the work for {@link #removeTarget} but without removing the target\nfrom the internal registry.</p>","!type":"fn(targetObject: +qx.core.Object, targetProperty: string, sourceProperty: string, sourceObject: string)"},"_applyModel":{"!doc":"<p>Apply-method which will be called if a new model has been set.\nAll bindings will be moved to the new model.</p>","!type":"fn(value: +qx.core.Object, old: +qx.core.Object)"},"addTarget":{"!doc":"<p>Adds a new target to the controller. After adding the target, the given\nproperty of the model will be bound to the targets property.</p>","!type":"fn(targetObject: +qx.core.Object, targetProperty: string, sourceProperty: string, bidirectional?: bool, options?: +Map, reverseOptions?: +Map)"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"removeTarget":{"!doc":"<p>Removes the target identified by the three properties.</p>","!type":"fn(targetObject: +qx.core.Object, targetProperty: string, sourceProperty: string)"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"}}},"Tree":{"!proto":"qx.core.Object","!doc":"<h2>Tree Controller</h2>\n\n<p><strong>General idea</strong></p>\n\n<p>The tree controller is the controller made for the {@link qx.ui.tree.Tree}\nwidget in qooxdoo. Therefore, it is responsible for creating and adding the\ntree folders to the tree given as target.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Synchronize the model and the target</li>\n<li>Label and icon are bindable</li>\n<li>Takes care of the selection</li>\n<li>Passes on the options used by {@link qx.data.SingleValueBinding#bind}</li>\n</ul>\n\n<p><strong>Usage</strong></p>\n\n<p>As model, you can use every qooxdoo widget structure having one property,\nwhich is a data array holding the children of the current node. There can\nbe as many additional as you like.\nYou need to specify a model, a target, a child path and a label path to\nmake the controller work.</p>\n\n<p><strong>Cross reference</strong></p>\n\n<ul>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bin a form widget, use {@link qx.data.controller.Form}</li>\n</ul>","!type":"fn()","prototype":{"__addBinding":{"!doc":"<p>Internal helper method adding the right bindings from the given\nmodelNode to the given treeNode.</p>","!type":"fn(modelNode: +qx.core.Object, treeNode: +qx.ui.tree.TreeFolder)"},"__buildTree":{"!doc":"<p>Internal helper function to build up the tree corresponding to the data\nstored in the model. This function creates the root node and hands the\nrecursive creation of all subtrees to the {#__updateTreeChildren}\nfunction.</p>","!type":"fn()"},"__changeChildrenArray":{"!doc":"<p>Handler function taking care of the changes of the children array itself.</p>","!type":"fn(e: +qx.event.type.Data)"},"__changeModelChildren":{"!doc":"<p>Handler function handling the change of a length of a children array.\nThis method invokes a rebuild of the corresponding subtree.</p>","!type":"fn(ev: +qx.event.type.Event)"},"__emptyTarget":{"!doc":"<p>Removes all folders and bindings for the current set target.</p>","!type":"fn(tree: +qx.ui.tree.Tree)"},"__removeAllFolders":{"!doc":"<p>Removes all child folders of the given tree node. Also removes all\nbindings for the removed folders.</p>","!type":"fn(node: +qx.ui.tree.core.AbstractTreeItem)"},"__removeBinding":{"!doc":"<p>Internal helper method for removing bindings for a given model node.</p>","!type":"fn(modelNode: +qx.core.Object)"},"__removeFolder":{"!doc":"<p>Internal helper method removing the given folder form the given root\nnode. All set bindings will be removed and the old tree folder will be\ndestroyed.</p>","!type":"fn(treeFolder: +qx.ui.tree.core.AbstractTreeItem, rootNode: +qx.ui.tree.core.AbstractTreeItem)"},"__renewBindings":{"!doc":"<p>Helper method renewing all bindings with the currently saved options and\npaths.</p>","!type":"fn()"},"__updateTreeChildren":{"!doc":"<p>Main method building up the tree folders corresponding to the given\nmodel node. The new created subtree will be added to the given tree node.</p>","!type":"fn(rootNode: +qx.ui.tree.TreeFolder, modelNode: +qx.core.Object)"},"_applyChildPath":{"!doc":"<p>Apply-method which will be called after the child path had been\nchanged. This method invoke a new building of the tree.</p>","!type":"fn(value: string, old: string)"},"_applyDelegate":{"!doc":"<p>If a new delegate is set, it applies the stored configuration for the\ntree folder to the already created folders once.</p>","!type":"fn(value: +qx.core.Object, old: +qx.core.Object)"},"_applyIconOptions":{"!doc":"<p>Apply-method which will be called after the icon options had been\nchanged. This method will invoke a renewing of all bindings.</p>","!type":"fn(value: +Map, old: +Map)"},"_applyIconPath":{"!doc":"<p>Apply-method which will be called after the icon path had been\nchanged. This method invoke a new building of the tree.</p>","!type":"fn(value: string, old: string)"},"_applyLabelOptions":{"!doc":"<p>Apply-method which will be called after the label options had been\nchanged. This method will invoke a renewing of all bindings.</p>","!type":"fn(value: +Map, old: +Map)"},"_applyLabelPath":{"!doc":"<p>Apply-method which will be called after the label path had been\nchanged. This method invoke a new building of the tree.</p>","!type":"fn(value: string, old: string)"},"_applyModel":{"!doc":"<p>Apply-method which will be called after the model had been\nchanged. This method invoke a new building of the tree.</p>","!type":"fn(value: +qx.core.Object, old: +qx.core.Object)"},"_applyTarget":{"!doc":"<p>Apply-method which will be called after the target had been\nchanged. This method will clean up the old tree and will initially\nbuild up the new tree containing the data from the model.</p>","!type":"fn(value: +qx.ui.tree.Tree, old: +qx.ui.tree.Tree)"},"_createItem":{"!doc":"<p>Creates a TreeFolder and delegates the configure method if a delegate is\nset and the needed function (configureItem) is available.</p>","!type":"fn() -> +qx.ui.tree.core.AbstractTreeItem"},"_setBindItem":{"!doc":"<p>Helper method for applying the delegate It checks if a bindItem\nis set end invokes the initial process to apply the given function.</p>","!type":"fn(value: Object, old: Object)"},"_setConfigureItem":{"!doc":"<p>Helper method for applying the delegate It checks if a configureItem\nis set end invokes the initial process to apply the given function.</p>","!type":"fn(value: Object, old: Object)"},"_setCreateItem":{"!doc":"<p>Helper method for applying the delegate. It checks if a createItem\nis set and invokes the initial process to apply the given function.</p>","!type":"fn(value: Object, old: Object)"},"bindDefaultProperties":{"!doc":"<p>Helper method for binding the default properties (label and icon) from\nthe model to the target widget.</p>\n\n<p>This method should only be called in the\n{@link qx.data.controller.IControllerDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(treeNode: +qx.ui.tree.core.AbstractTreeItem, modelNode: +qx.core.Object)"},"bindProperty":{"!doc":"<p>Helper method for binding a given property from the model to the target\nwidget.\nThis method should only be called in the\n{@link qx.data.controller.IControllerDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(sourcePath: string, targetPath: string, options: +Map, targetWidget: +qx.ui.tree.core.AbstractTreeItem, modelNode: Object)"},"bindPropertyReverse":{"!doc":"<p>Helper method for binding a given property from the target widget to\nthe model.\nThis method should only be called in the\n{@link qx.data.controller.IControllerDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(targetPath: string, sourcePath: string, options: +Map, sourceWidget: +qx.ui.tree.core.AbstractTreeItem, modelNode: Object)"},"getChildPath":{"!doc":"<p>Returns the (computed) value of the property <code>childPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childPath}.</p>","!type":"fn() -> Object"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getTarget":{"!doc":"<p>Returns the (computed) value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn() -> Object"},"initChildPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>childPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #childPath}.</p>","!type":"fn(value: Object) -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initTarget":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>target</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"resetChildPath":{"!doc":"<p>Resets the user value of the property <code>childPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #childPath}.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetTarget":{"!doc":"<p>Resets the user value of the property <code>target</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn()"},"setChildPath":{"!doc":"<p>Sets the user value of the property <code>childPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childPath}.</p>","!type":"fn(value: Object) -> Object"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setTarget":{"!doc":"<p>Sets the user value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"}}},"website":{"List":{"!proto":"qx.core.Object","!doc":"<h2>website List Controller</h2>\n\n<p><strong>General idea</strong>\nThe list controller is responsible for synchronizing data given as model\nto a <span class=\"caps\">DOM</span> element. As definition for a single item, tempaltes are used. More\ndetails on tempaltes can be found in {@link qx.bom.Template}.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Synchronize the model and the target</li>\n<li>Filtering</li>\n</ul>\n\n<p><strong>Usage</strong></p>\n\n<p>As model, {@link qx.data.Array}s and plain JavaScript Arrays work. As a\nTarget, you have to use a <span class=\"caps\">DOM</span> element e.g. a plain <span class=\"caps\">DIV</span> element. Make sure\nyou have the template you are referencing in the <span class=\"caps\">DOM</span>.</p>","!type":"fn()","prototype":{"__emptyTarget":{"!doc":"<p>Responsible for removing all items from the targe element.</p>","!type":"fn()"},"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: +Array, old: +Array)"},"_applyTarget":{"!doc":"<p>Applies changes of the property value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: +Element, old: +Element)"},"_applyTemplateId":{"!doc":"<p>Applies changes of the property value of the property <code>templateId</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #templateId}.</p>","!type":"fn(value: Object, old: Object)"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getTarget":{"!doc":"<p>Returns the (computed) value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn() -> Object"},"getTemplateId":{"!doc":"<p>Returns the (computed) value of the property <code>templateId</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #templateId}.</p>","!type":"fn() -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initTarget":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>target</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"initTemplateId":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>templateId</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #templateId}.</p>","!type":"fn(value: Object) -> Object"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetTarget":{"!doc":"<p>Resets the user value of the property <code>target</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn()"},"resetTemplateId":{"!doc":"<p>Resets the user value of the property <code>templateId</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #templateId}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setTarget":{"!doc":"<p>Sets the user value of the property <code>target</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #target}.</p>","!type":"fn(value: Object) -> Object"},"setTemplateId":{"!doc":"<p>Sets the user value of the property <code>templateId</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #templateId}.</p>","!type":"fn(value: Object) -> Object"},"update":{"!doc":"<p>This is the main method which will take the data from the model and\npush it to the target view. If you are using a plain Array as model,\nyou need to call that method every time you want to see the changed model\nin the view while using {@link qx.data.Array}s will do that\nautomatically for you.\nThis method also attaches to every created <span class=\"caps\">DOM</span> element the model object\nwhich was used to create it at <code>.$model</code>.</p>","!type":"fn()"}}}}},"Conversion":{"!doc":"<p>This class offers a set of default conversion methods and whole options\npacks for {@link qx.data.SingleValueBinding}. The binding offers a conversion\nitself if it can determinate which types should be used. In all other cases,\nyou can you this methods / options for the default conversion.</p>","toBoolean":{"!doc":"<p>Converts the given value to a boolean via <code>!!value</code>.</p>","!type":"fn(value: Object) -> bool"},"toNumber":{"!doc":"<p>Converts the given value to a number via <code>parseFloat</code>.</p>","!type":"fn(value: Object) -> number"},"toString":{"!doc":"<p>Converts the given value to a string via <code> + &#8221;&#8221;</code>.</p>","!type":"fn(value: Object) -> string"}},"IListData":{"!doc":"<p>This interface defines a data structure compatible with the data binding\ncontrollers.\nIt defines a minimum of functionality which the controller need to work.</p>","prototype":{"contains":{"!doc":"<p>Check if the given item is in the current data structure.</p>","!type":"fn(item: Object) -> bool"},"getItem":{"!doc":"<p>Returns the item at the given index</p>","!type":"fn(index: number) -> Object"},"getLength":{"!doc":"<p>Returns the current length of the data structure.</p>","!type":"fn() -> number"},"setItem":{"!doc":"<p>Sets the given item at the given position in the data structure. A\nchange event has to be fired.</p>","!type":"fn(index: number, item: Object)"},"splice":{"!doc":"<p>Method to remove and add new element to the data. For every remove or\nadd a change event should be fired.</p>","!type":"fn(startIndex: +Integer, amount: +Integer, varargs: Object) -> +qx.data.Array"},"toArray":{"!doc":"<p>Returns the list data as native array.</p>","!type":"fn() -> +Array"}}},"marshal":{"IMarshaler":{"!doc":"<p>Defines the methods needed by every marshaler which should work with the\nqooxdoo data stores.</p>","prototype":{"toClass":{"!doc":"<p>Creates for the given data the needed classes. The classes contain for\nevery key in the data a property. The classname is always the prefix\n<code>qx.data.model</code>. Two objects containing the same keys will not\ncreate two different classes.</p>","!type":"fn(data: Object, includeBubbleEvents: bool)"},"toModel":{"!doc":"<p>Creates for the given data the needed models. Be sure to have the classes\ncreated with {@link #toClass} before calling this method.</p>","!type":"fn(data: Object) -> +qx.core.Object"}}},"IMarshalerDelegate":{"!doc":"<p>Objects, which are used as delegates for a data binding marshaler may\nimplement any of the methods described in this interface. The delegate does\nnot need implement all of the methods of this interface. If a method is not\nimplemented the marshaler provides a default implementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nreally implemented.</p>","prototype":{"getArrayClass":{"!doc":"<p>Returns the array class which should be used by the marshaler. The passed\nparameters can be used to determine the array class. The return array class\nmust implement the {@link qx.data.IListData} interface.</p>","!type":"fn(parentProperty: string, depth: number) -> +Class"},"getModelClass":{"!doc":"<p>Determines the user defined class for the given properties string.\nThis class could contain additional methods but needs to have the\nproperties with the given names. Also every property needs to have a\nchange event.</p>\n\n<p>If this method is implemented, you have to add the superclass and mixins\nyourself to the returned class. This means that the methods\n{@link #getModelSuperClass} and {@link #getModelMixins} will not be\ncalled for the corresponding class.</p>","!type":"fn(properties: string, object: +Map, parentProperty: string, depth: number) -> +Class"},"getModelMixins":{"!doc":"<p>Returns the mixins which should be included to the class, created by the\nmarshaler and identified by the given properties string.</p>","!type":"fn(properties: string, parentProperty: string, depth: number) -> +Array"},"getModelSuperClass":{"!doc":"<p>Returns the class which the created model class uses as superclass.</p>","!type":"fn(properties: string, parentProperty: string, depth: number) -> +Class"},"getPropertyMapping":{"!doc":"<p>Gives the possibility to change the names given in the data to convert\nto something different.</p>","!type":"fn(property: string, properties: string) -> string"},"getValidationRule":{"!doc":"<p>Returns the validation rules which should be added to the created class\nfor the given property. This method will be called for every property.</p>","!type":"fn(properties: string, propertyName: string) -> fn()"},"ignore":{"!doc":"<p>Gives the possibility to ignore parts of the marshaled data and store the\noriginal data.</p>","!type":"fn(properties: string, parentProperty: string, depth: number) -> bool"}}},"Json":{"!proto":"qx.core.Object","!doc":"<p>This class is responsible for converting json data to class instances\nincluding the creation of the classes.</p>","!type":"fn()","createModel":{"!doc":"<p>Creates a qooxdoo object based on the given json data. This function\nis just a static wrapper. If you want to configure the creation\nprocess of the class, use {@link qx.data.marshal.Json} directly.</p>","!type":"fn(data: Object, includeBubbleEvents: bool) -> +qx.core.Object"},"prototype":{"__createInstance":{"!doc":"<p>Creates an instance for the given data hash.</p>","!type":"fn(hash: string, data: +Map, parentProperty: string, depth: number) -> +qx.core.Object"},"__disposeItem":{"!doc":"<p>Helper for disposing items of the created class.</p>","!type":"fn(item: Object)"},"__disposeProperties":{"!doc":"<p>Destructor for all created classes which disposes all stuff stored in\nthe properties.</p>","!type":"fn()"},"__ignore":{"!doc":"<p>Helper to decide if the delegate decides to ignore a data set.</p>","!type":"fn(hash: string, parentProperty: string, depth: number) -> bool"},"__jsonToHash":{"!doc":"<p>Converts a given object into a hash which will be used to identify the\nclasses under the namespace <code>qx.data.model</code>.</p>","!type":"fn(data: Object) -> string"},"__toClass":{"!doc":"<p>Implementation of {@link #toClass} used for recursion.</p>","!type":"fn(data: Object, includeBubbleEvents: bool, parentProperty: string, depth: number)"},"__toModel":{"!doc":"<p>Implementation of {@link #toModel} used for recursion.</p>","!type":"fn(data: Object, parentProperty: string, depth: number) -> +qx.core.Object"},"toClass":{"!doc":"<p>Creates for the given data the needed classes. The classes contain for\nevery key in the data a property. The classname is always the prefix\n<code>qx.data.model</code> and the hash of the data created by\n{@link #__jsonToHash}. Two objects containing the same keys will not\ncreate two different classes. The class creation process also supports\nthe functions provided by its delegate.</p>\n\n<p>Important, please keep in mind that only valid JavaScript identifiers\ncan be used as keys in the data map. For convenience &#8217;-&#8217; in keys will\nbe removed (a-b will be ab in the end).</p>","!type":"fn(data: Object, includeBubbleEvents: bool)"},"toModel":{"!doc":"<p>Creates for the given data the needed models. Be sure to have the classes\ncreated with {@link #toClass} before calling this method. The creation\nof the class itself is delegated to the {@link #__createInstance} method,\nwhich could use the {@link qx.data.store.IStoreDelegate} methods, if\ngiven.</p>","!type":"fn(data: Object) -> +qx.core.Object"}}},"MEventBubbling":{"!doc":"<p>Mixin used for the bubbling events. If you want to use this in your own model\nclasses, be sure that every property will call the\n{@link #_applyEventPropagation} function on every change.</p>","prototype":{"__changePropertyListener":{"!doc":"<p>Listener responsible for formating the name and firing the change event\nfor the changed property.</p>","!type":"fn(name: string, e: +qx.event.type.Data)"},"_applyEventPropagation":{"!doc":"<p>Apply function for every property created with the\n{@link qx.data.marshal.Json} marshaler. It fires and\n{@link #changeBubble} event on every change. It also adds the chaining\nlistener if possible which is necessary for the bubbling of the events.</p>","!type":"fn(value: Object, old: Object, name: string)"},"_registerEventChaining":{"!doc":"<p>Registers for the given parameters the changeBubble listener, if\npossible. It also removes the old listener, if an old item with\na changeBubble event is given.</p>","!type":"fn(value: Object, old: Object, name: string)"}}}},"MBinding":{"!doc":"<p>This mixin is forwarding the static methods of\n{@link qx.data.SingleValueBinding} to the instance including the mixin.\nThe source object will be <code>this</code>.</p>","prototype":{"bind":{"!doc":"<p>The bind method delegates the call to the\n{@link qx.data.SingleValueBinding#bind} function. As source, the current\nobject (this) will be used.</p>","!type":"fn(sourcePropertyChain: string, targetObject: +qx.core.Object, targetProperty: string, options: +Map) -> Object"},"getBindings":{"!doc":"<p>Returns an array which lists all bindings for the object.</p>","!type":"fn() -> +Array"},"removeAllBindings":{"!doc":"<p>Removes all bindings from the object.</p>","!type":"fn()"},"removeBinding":{"!doc":"<p>Removes the binding with the given id from the current object. The\nid hast to be the id returned by any of the bind functions.</p>","!type":"fn(id: Object)"}}},"SingleValueBinding":{"!doc":"<p>The data binding package is still under development so there will be changes\nto the <span class=\"caps\">API</span>. This Features is for testing purpose only.</p>","__bindEventToProperty":{"!doc":"<p>Internal helper method which is actually doing all bindings. That means\nthat an event listener will be added to the source object which listens\nto the given event and invokes an set on the target property on the\ntargetObject.\nThis method does not store the binding in the internal reference store\nso it should <span class=\"caps\">NOT</span> be used from outside this class. For an outside usage,\nuse {@link #bind}.</p>","!type":"fn(sourceObject: +qx.core.Object, sourceEvent: string, targetObject: +qx.core.Object, targetProperty: string, options: +Map, arrayIndex: string) -> Object"},"__chainListener":{"!doc":"<p>Event listener for the chaining of the properties.</p>","!type":"fn(context: +Map)"},"__checkForArrayInPropertyChain":{"!doc":"<p>Checks for an array element in the given property names and adapts the\narrays to fit the algorithm.</p>","!type":"fn(propertyNames: +Array) -> +Array"},"__convertValue":{"!doc":"<p>This method takes the given value, checks if the user has given a\nconverter and converts the value to its target type. If no converter is\ngiven by the user, the {@link #__defaultConversion} will try to convert\nthe value.</p>","!type":"fn(value: Object, targetObject: +qx.core.Object, targetPropertyChain: string, options: +Map, sourceObject: +qx.core.Object) -> Object"},"__defaultConversion":{"!doc":"<p>Tries to convert the data to the type given in the targetCheck argument.</p>","!type":"fn(data: Object, targetCheck: string) -> +Integer"},"__getEventForProperty":{"!doc":"<p>Helper method which tries to figure out if the given property on the\ngiven object does have a change event and if returns the name of it.</p>","!type":"fn(sourceObject: +qx.core.Object, sourceProperty: string) -> string"},"__getEventNameForProperty":{"!doc":"<p>Tries to return a fitting event name to the given source object and\nproperty name. First, it assumes that the propertyname is a real property\nand therefore it checks the property definition for the event. The second\npossibility is to check if there is an event with the given name. The\nthird and last possibility checked is if there is an event which is named\nchange + propertyname. If this three possibilities fail, an error will be\nthrown.</p>","!type":"fn(source: +qx.core.Object, propertyname: string) -> string"},"__getTargetFromChain":{"!doc":"<p>Helper-Function resolving the object on which the last property of the\nchain should be set.</p>","!type":"fn(targetObject: +qx.core.Object, targetPropertyChain: string) -> +qx.core.Object"},"__resetTargetValue":{"!doc":"<p>Resets the value of the given target after resolving the target property\nchain.</p>","!type":"fn(targetObject: +qx.core.Object, targetPropertyChain: string)"},"__setInitialValue":{"!doc":"<p>Set the given value to the target property. This method is used for\ninitially set the value.</p>","!type":"fn(value: Object, targetObject: +qx.core.Object, targetPropertyChain: string, options: +Map, sourceObject: +qx.core.Object)"},"__setTargetValue":{"!doc":"<p>Sets the given value to the given target after resolving the\ntarget property chain.</p>","!type":"fn(targetObject: +qx.core.Object, targetPropertyChain: string, value: Object)"},"__setUpTargetBinding":{"!doc":"<p>Internal helper for setting up the listening to the changes on the\ntarget side of the binding. Only works if the target property is a\nproperty chain</p>","!type":"fn(sourceObject: +qx.core.Object, sourcePropertyChain: string, targetObject: +qx.core.Object, targetPropertyChain: string, options: +Map) -> Object"},"__storeBinding":{"!doc":"<p>This method stores the given value as a binding in the internal structure\nof all bindings.</p>","!type":"fn(id: Object, sourceObject: +qx.core.Object, sourceEvent: string, targetObject: +qx.core.Object, targetProperty: string)"},"bind":{"!doc":"<p>The function is responsible for binding a source objects property to\na target objects property. Both properties have to have the usual qooxdoo\ngetter and setter. The source property also needs to fire change-events\non every change of its value.\nPlease keep in mind, that this binding is unidirectional. If you need\na binding in both directions, you have to use two of this bindings.</p>\n\n<p>It&#8217;s also possible to bind some kind of a hierarchy as a source. This\nmeans that you can separate the source properties with a dot and bind\nby that the object referenced to this property chain.\nExample with an object &#8216;a&#8217; which has object &#8216;b&#8217; stored in its &#8216;child&#8217;\nproperty. Object b has a string property named abc:</p>\n\n<pre>\nqx.data.SingleValueBinding.bind(a, \"child.abc\", textfield, \"value\");\n</pre>\n\n<p>In that case, if the property abc of b changes, the textfield will\nautomatically contain the new value. Also if the child of a changes, the\nnew value (abc of the new child) will be in the textfield.</p>\n\n<p>There is also a possibility of binding an array. Therefor the array\n{@link qx.data.IListData} is needed because this array has change events\nwhich the native does not. Imagine a qooxdoo object a which has a\nchildren property containing an array holding more of its own kind.\nEvery object has a name property as a string.</p>\n\n<pre>\nvar svb = qx.data.SingleValueBinding;\n// bind the first childs name of 'a' to a textfield\nsvb.bind(a, \"children[0].name\", textfield, \"value\");\n// bind the last childs name of 'a' to a textfield\nsvb.bind(a, \"children[last].name\", textfield2, \"value\");\n// also deeper bindinds are possible\nsvb.bind(a, \"children[0].children[0].name\", textfield3, \"value\");\n</pre>\n\n<p>As you can see in this example, the abc property of a&#8217;s b will be bound\nto the textfield. If now the value of b changed or even the a will get a\nnew b, the binding still shows the right value.</p>","!type":"fn(sourceObject: +qx.core.Object, sourcePropertyChain: string, targetObject: +qx.core.Object, targetPropertyChain: string, options?: +Map) -> Object"},"getAllBindings":{"!doc":"<p>Returns a map containing for every bound object an array of data binding\ninformation. The key of the map is the hashcode of the bound objects.\nEvery binding is represented by an array containing id, sourceObject,\nsourceEvent, targetObject and targetProperty.</p>","!type":"fn() -> +Map"},"getAllBindingsForObject":{"!doc":"<p>Returns an array which lists all bindings.</p>","!type":"fn(object: +qx.core.Object) -> +Array"},"removeAllBindings":{"!doc":"<p>Removes all binding in the whole application. After that not a single\nbinding is left.</p>","!type":"fn()"},"removeAllBindingsForObject":{"!doc":"<p>Removes all bindings for the given object.</p>","!type":"fn(object: +qx.core.Object)"},"removeBindingFromObject":{"!doc":"<p>Removes the binding with the given id from the given sourceObject. The\nid hast to be the id returned by any of the bind functions.</p>","!type":"fn(sourceObject: +qx.core.Object, id: Object)"},"resolvePropertyChain":{"!doc":"<p>Internal helper for getting the current set value at the property chain.</p>","!type":"fn(o: +qx.core.Object, propertyChain: string) -> Object"},"showAllBindingsInLog":{"!doc":"<p>Debug function which shows all bindings in the log console. To get only\none binding in the console use {@link #showBindingInLog}</p>","!type":"fn()"},"showBindingInLog":{"!doc":"<p>Debug function which shows some valuable information about the given\nbinding in console. For that it uses {@link qx.log.Logger}.</p>","!type":"fn(object: +qx.core.Object, id: Object)"},"updateTarget":{"!doc":"<p>Helper for updating the target. Gets the current set data from the source\nand set that on the target.</p>","!type":"fn(sourceObject: +qx.core.Object, sourcePropertyChain: string, targetObject: +qx.core.Object, targetPropertyChain: string, options: +Map)"}},"store":{"IStoreDelegate":{"!doc":"<p>Objects, which are used as delegates for a data binding store may\nimplement any of the methods described in this interface. The delegate does\nnot need implement all of the methods of this interface. If a method is not\nimplemented the store provides a default implementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nreally implemented.</p>","prototype":{"configureRequest":{"!doc":"<p>This method can change the settings on the used request by the store.</p>","!type":"fn(request: Object)"},"manipulateData":{"!doc":"<p>This method manipulates the data from the request and returns the\nmanipulated data.</p>","!type":"fn(data: Object) -> Object"}}},"Json":{"!proto":"qx.core.Object","!doc":"<p>The <span class=\"caps\">JSON</span> data store is responsible for fetching data from an url. The type\nof the data has to be json.</p>\n\n<p>The loaded data will be parsed and saved in qooxdoo objects. Every value\nof the loaded data will be stored in a qooxdoo property. The model classes\nfor the data will be created automatically.</p>\n\n<p>For the fetching itself it uses the {@link qx.io.request.Xhr} class and\nfor parsing the loaded javascript objects into qooxdoo objects, the\n{@link qx.data.marshal.Json} class will be used.</p>\n\n<p>Please note that if you</p>\n\n<ul>\n<li>upgrade from qooxdoo 1.4 or lower</li>\n<li>choose not to force the old transport</li>\n<li>use a delegate with qx.data.store.IStoreDelegate#configureRequest</li>\n</ul>\n\n<p>you probably need to change the implementation of your delegate to configure\nthe {@link qx.io.request.Xhr} request.</p>","!type":"fn()","prototype":{"_applyUrl":{"!doc":"<p>Applies changes of the property value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: string, old: string)"},"_createRequest":{"!doc":"<p>Creates and sends a <span class=\"caps\">GET</span> request with the given url.</p>\n\n<p>Listeners will be added to respond to the request&#8217;s &#8220;success&#8221;,\n&#8220;changePhase&#8221; and &#8220;fail&#8221; event.</p>","!type":"fn(url: string)"},"_getRequest":{"!doc":"<p>Get request</p>","!type":"fn() -> Object"},"_onChangePhase":{"!doc":"<p>Handler called when request phase changes.</p>\n\n<p>Sets the store&#8217;s state.</p>","!type":"fn(ev: +qx.event.type.Data)"},"_onFail":{"!doc":"<p>Handler called when not completing the request successfully.</p>","!type":"fn(ev: +qx.event.type.Event)"},"_onSuccess":{"!doc":"<p>Handler for the completion of the requests. It invokes the creation of\nthe needed classes and instances for the fetched data using\n{@link qx.data.marshal.Json}.</p>","!type":"fn(ev: +qx.event.type.Event)"},"_setRequest":{"!doc":"<p>Set request.</p>","!type":"fn(request: Object)"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"getUrl":{"!doc":"<p>Returns the (computed) value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn() -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"initUrl":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>url</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"reload":{"!doc":"<p>Reloads the data with the url set in the {@link #url} property.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"resetUrl":{"!doc":"<p>Resets the user value of the property <code>url</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn()"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"setUrl":{"!doc":"<p>Sets the user value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"}}},"Jsonp":{"!proto":"qx.data.store.Json","!doc":"<p>The <span class=\"caps\">JSONP</span> data store is a specialization of {@link qx.data.store.Json}. It\ndiffers in the type of transport used ({@link qx.io.request.Jsonp}). In\norder to fullfill requirements of the <span class=\"caps\">JSONP</span> service, the method\n{@link #setCallbackParam} can be used.</p>\n\n<p>Please note that the upgrade notices described in {@link qx.data.store.Json}\nalso apply to this class.</p>","!type":"fn()","prototype":{"_createRequest":{"!type":"fn(url: +undefined)"},"getCallbackName":{"!doc":"<p>Returns the (computed) value of the property <code>callbackName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackName}.</p>","!type":"fn() -> Object"},"getCallbackParam":{"!doc":"<p>Returns the (computed) value of the property <code>callbackParam</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackParam}.</p>","!type":"fn() -> Object"},"initCallbackName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>callbackName</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackName}.</p>","!type":"fn(value: Object) -> Object"},"initCallbackParam":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>callbackParam</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackParam}.</p>","!type":"fn(value: Object) -> Object"},"resetCallbackName":{"!doc":"<p>Resets the user value of the property <code>callbackName</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackName}.</p>","!type":"fn()"},"resetCallbackParam":{"!doc":"<p>Resets the user value of the property <code>callbackParam</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackParam}.</p>","!type":"fn()"},"setCallbackName":{"!doc":"<p>Sets the user value of the property <code>callbackName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackName}.</p>","!type":"fn(value: Object) -> Object"},"setCallbackParam":{"!doc":"<p>Sets the user value of the property <code>callbackParam</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #callbackParam}.</p>","!type":"fn(value: Object) -> Object"}}},"Offline":{"!proto":"qx.core.Object","!doc":"<p>This store is a read / write store for local or session storage.\nIt can be used like any other store by setting and manipulating the model\nproperty or the model itself. Please keep in mind that if you want to have\nthe update functionality, you have to use a model which supports the\n{@link qx.data.marshal.MEventBubbling#changeBubble} event.</p>","!type":"fn()","prototype":{"__storeModel":{"!doc":"<p>Internal helper for writing the set model to the browser storage.</p>","!type":"fn()"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object, old: Object)"},"_initializeModel":{"!doc":"<p>Helper for reading the model from the browser storage.</p>","!type":"fn()"},"_setModel":{"!doc":"<p>Responsible for creating the model read from the brwoser storage.</p>","!type":"fn(data: Object)"},"getKey":{"!doc":"<p>Accessor for the unique key used to store the data.</p>","!type":"fn() -> string"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"}}},"Rest":{"!proto":"qx.core.Object","!doc":"<p>Handles response associated to a resource&#8217;s action. The model property is\npopulated with the marshaled response. Note the action is invoked on the\nresource, not the store.</p>","!type":"fn()","prototype":{"__addListeners":{"!doc":"<p>Listen to events fired by the resource.</p>","!type":"fn()"},"__configureRequest":{"!doc":"<p>Configure the resource&#8217;s request by processing the delegate.</p>","!type":"fn()"},"__onActionSuccess":{"!doc":"<p>Handle actionSuccess event.</p>\n\n<p>Updates model with marshaled response.</p>","!type":"fn(e: +qx.event.type.Rest)"},"getActionName":{"!doc":"<p>Returns the (computed) value of the property <code>actionName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #actionName}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getResource":{"!doc":"<p>Returns the (computed) value of the property <code>resource</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resource}.</p>","!type":"fn() -> Object"},"initActionName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>actionName</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #actionName}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initResource":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resource</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resource}.</p>","!type":"fn(value: Object) -> Object"},"resetActionName":{"!doc":"<p>Resets the user value of the property <code>actionName</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #actionName}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetResource":{"!doc":"<p>Resets the user value of the property <code>resource</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resource}.</p>","!type":"fn()"},"setActionName":{"!doc":"<p>Sets the user value of the property <code>actionName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #actionName}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setResource":{"!doc":"<p>Sets the user value of the property <code>resource</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resource}.</p>","!type":"fn(value: Object) -> Object"}}},"Yql":{"!proto":"qx.data.store.Jsonp","!doc":"<p>This store uses the {@link qx.data.store.Jsonp} store to query Yahoo&#8217;s\n<span class=\"caps\">YQL</span> service. (<a href=\"http://developer.yahoo.com/yql/\">http://developer.yahoo.com/yql/</a>)</p>\n\n<p>If you want to test your queries, take a look at the <span class=\"caps\">YQL</span> console:\n<a href=\"http://developer.yahoo.com/yql/console/\">http://developer.yahoo.com/yql/console/</a></p>","!type":"fn()"}}},"dev":{"Debug":{"!doc":"<p>Useful debug capabilities</p>","debugObject":{"!doc":"<p>Recursively display an object (as a debug message)</p>","!type":"fn(obj: Object, initialMessage: string, maxLevel?: +Integer)"},"debugObjectToString":{"!doc":"<p>Recursively display an object (into a string)</p>","!type":"fn(obj: Object, initialMessage: string, maxLevel?: +Integer, bHtml?: bool) -> string"},"debugProperties":{"!doc":"<p>Returns a string representing the given model. The string will include\nall model objects to a given recursive depth.</p>","!type":"fn(model: +qx.core.Object, maxLevel?: number, html?: bool, indent?: number) -> string"},"getFunctionName":{"!doc":"<p>Get the name of a member/static function or constructor defined using the new style class definition.\nIf the function could not be found <code>null</code> is returned.</p>\n\n<p>This function uses a linear search, so don&#8217;t use it in performance critical\ncode.</p>","!type":"fn(func: fn(), functionType?: string) -> string"},"startDisposeProfiling":{"!doc":"<p>Starts a dispose profiling session. Use {@link #stopDisposeProfiling} to\nget the results</p>","!type":"fn()"},"stopDisposeProfiling":{"!doc":"<p>Returns a list of any (qx) objects that were created but not disposed since\n{@link #startDisposeProfiling} was called. Also returns a stack trace\nrecorded at the time the object was created.</p>","!type":"fn(checkFunction: fn()) -> +Map"}},"FakeServer":{"!proto":"Object","!doc":"<p>A wrapper around Sinon.JS&#8217;s FakeXMLHttpRequest and FakeServer features that\nallows quick and simple configuration of mock <span class=\"caps\">HTTP</span> backends for testing and\ndevelopment.\nAutomatically creates <span class=\"caps\">URL</span> filtering rules to ensure that only configured\nrequests are faked while others will be processed normally by the browser&#8217;s\n<span class=\"caps\">XHR</span> implementation.</p>\n\n<p>The following example shows how to configure mock responses for two different\nrequests:</p>\n\n<pre class=\"javascript\">\n  var responseData = [\n    {\n      method: \"GET\",\n      url: /\\/api\\/resource\\/\\d+/,\n      response : function(request) {\n        var status = 200;\n        var headers = { \"Content-Type\": \"application/json\" };\n        var responseData = {\n          description: \"Mock REST response for resource \" + request.url\n        };\n        var body = qx.lang.Json.stringify(responseData);\n        request.respond(status, headers, body);\n      }\n    },\n    {\n      method: \"GET\",\n      url: \"/users/{userId}\",\n      response: [\n        200,\n        { \"Content-Type\": \"application/json\" },\n        qx.lang.Json.stringify({userId: 'someUser'})\n      ]\n    }\n  ];\n\n  qx.dev.FakeServer.getInstance().configure(responseData);\n</pre>","!type":"fn()","getInstance":{"!doc":"<p>Helper method to handle singletons</p>","!type":"fn() -> Object"},"prototype":{"__getCombinedFilter":{"!doc":"<p>Returns a filter function that ensures only requests matching configured\nfake responses will be intercepted.</p>","!type":"fn() -> fn()"},"_getRegExp":{"!doc":"<p>Returns a RegExp using the given pattern. Curly brackets and anything\nbetween are replaced with wildcards (.*?)</p>","!type":"fn(pattern: string) -> +RegExp"},"addFilter":{"!doc":"<p>Adds a <span class=\"caps\">URL</span> filtering function to decide whether a request should be handled\nby the FakeServer or passed to the regular XMLHttp implementation.\nSee <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\nfor details.</p>","!type":"fn(filter: fn())"},"configure":{"!doc":"<p>Configures a set of fake <span class=\"caps\">HTTP</span> responses. Each response is defined as a map\nthat must provide the following keys:\n<ul>\n  <li><code>method</code> <span class=\"caps\">HTTP</span> method to respond to, e.g. <code><span class=\"caps\">PUT</span></code></li>\n  <li><code>url</code> <span class=\"caps\">URL</span> used to match requests to fake responses. Can be\n  a RegExp or a String. <span class=\"caps\">REST</span>-style parameter placeholders in curly braces\n  will be replaced with wildcards, e.g. the string &#8221;/resource/{resourceId}&#8221;\n  is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n  <li><code>response</code> This can be either:\n    <ul>\n      <li>a string: This will be the response body, status code will be 200</li>\n      <li>an array containing the status code, a map of response headers and\n        the response text, e.g. <code>[200, { &#8220;Content-Type&#8221;: &#8220;text/html&#8221; }, &#8220;OK&#8221;]</code>\n      </li>\n      <li>a function: This will be called with a FakeXMLHttpRequest object as\n      the only argument. Its <code>respond</code> method must be called to send a response.\n      See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n      </li>\n    </ul>\n  </li>\n</ul></p>","!type":"fn(responseData: +Map)"},"getFakeServer":{"!doc":"<p>Creates and configures a FakeServer if necessary and returns it.</p>","!type":"fn() -> Object"},"removeFilter":{"!doc":"<p>Remove a filter that was added with {@link #addFilter}</p>","!type":"fn(filter: fn())"},"removeResponse":{"!doc":"<p>Removes a response that was configured with {@link #configure}</p>","!type":"fn(method: string, url: string)"},"respondWith":{"!doc":"<p>Defines a fake <span class=\"caps\">XHR</span> response to a matching request.</p>","!type":"fn(method: string, urlRegExp: +RegExp, response: fn())"},"restore":{"!doc":"<p>Stops the FakeServer and removes all configured responses and/or filters.</p>","!type":"fn()"}}},"ObjectSummary":{"!doc":"<p>Statics around created qooxdoo instances.</p>","getInfo":{"!doc":"<p>Summary of allocated objects</p>","!type":"fn() -> string"},"getNewObjects":{"!doc":"<p>Allocated objects and lists all objects, which have been newly created\nsince the last call of this function.</p>","!type":"fn() -> string"}},"Profile":{"!doc":"<p>qooxdoo profiler.</p>\n\n<p>All functions of qooxdoo classes (constructors, members, statics) can be profiled\nusing this class.</p>\n\n<p>To enable profiling this class must be loaded <b>before</b> <code>qx.Class</code> is\nloaded. This can be achieved by making <code>qx.core.Aspect</code> and\n<code>qx.dev.Profile</code> a load time dependency of <code>qx.Class</code>.\nFurther more the variant <code>qx.aspects</code> must be set to <code>on</code>.</p>","__calibrate":{"!doc":"<p>Measure the overhead of calling a wrapped function vs. calling an\nunwrapped function.</p>","!type":"fn(count: +Integer) -> number"},"__calibrateHelper":{"!doc":"<p>Helper to measure overhead.</p>","!type":"fn()"},"getProfileData":{"!doc":"<p>Return the profiling data as <span class=\"caps\">JSON</span> data structure.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n{\n  \"qx.core.ObjectRegistry.toHashCode (static)\":{\n    *     \"totalTime\":3,\n    \"ownTime\":3,\n    \"callCount\":218,\n    \"subRoutineCalls\":0,\n    \"name\":\"qx.core.ObjectRegistry.toHashCode\",\n    \"type\":\"static\"\n  },\n  \"qx.core.Object.addListener (member)\":{\n    \"totalTime\":19,\n    \"ownTime\":12,\n    \"callCount\":59,\n    \"subRoutineCalls\":251,\n    \"name\":\"qx.core.Object.addListener\",\n    \"type\":\"member\"\n  },\n  \"qx.ui.table.cellrenderer.Default (constructor)\":{\n    \"totalTime\":2,\n    \"ownTime\":1,\n    \"callCount\":1,\n    \"subRoutineCalls\":4,\n    \"name\":\"qx.ui.table.cellrenderer.Default\",\n    \"type\":\"constructor\"\n  }\n}\n</pre>","!type":"fn() -> +Map"},"normalizeProfileData":{"!doc":"<p>Normalize profiling data by subtracting the overhead of wrapping from the\nfunction&#8217;s own time.</p>","!type":"fn()"},"profileAfter":{"!doc":"<p>This function will be called after each function call. (Stop timing)</p>","!type":"fn(fullName: string, fcn: fn(), type: string, args: +arguments, returnValue: Object)"},"profileBefore":{"!doc":"<p>This function will be called before each function call. (Start timing)</p>","!type":"fn(fullName: string, fcn: fn(), type: string, args: +arguments)"},"showResults":{"!doc":"<p>Show profiling results in a popup window. The results are sorted by the\nfunction&#8217;s own time.</p>","!type":"fn(maxLength?: +Integer)"},"start":{"!doc":"<p>Clear profiling data and start profiling.</p>","!type":"fn()"},"stop":{"!doc":"<p>Stop profiling.</p>","!type":"fn()"}},"StackTrace":{"!doc":"<p>Methods to get information about the JavaScript call stack.</p>","__fileNameToClassName":{"!doc":"<p>Converts the <span class=\"caps\">URL</span> of a JavaScript file to a class name using either a\nuser-defined ({@link #FILENAME_TO_CLASSNAME}) or default\n({@link #__fileNameToClassNameDefault}) converter</p>","!type":"fn(fileName: string) -> string"},"__fileNameToClassNameDefault":{"!doc":"<p>Converts the <span class=\"caps\">URL</span> of a JavaScript file to a class name if the file is\nnamed using the qooxdoo naming conventions.</p>","!type":"fn(fileName: string) -> string"},"__formatStackTrace":{"!doc":"<p>Runs the given stack trace array through the formatter function\n({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the\noriginal array is returned</p>","!type":"fn(trace: string) -> string"},"getStackTrace":{"!doc":"<p>Get a stack trace of the current position in the code.</p>\n\n<p>Browser compatibility:\n<ul>\n  <li>In new versions of Gecko, WebKit and Opera, the output of\n  {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is\n  combined to generate the richest trace, including line numbers.</li>\n  <li>For Internet Explorer (and other engines that do not provide stack\n   traces), {@link #getStackTraceFromCaller} is used</li>\n</ul></p>","!type":"fn() -> string"},"getStackTraceFromCaller":{"!doc":"<p>Get a stack trace from the arguments special variable using the\n<code>caller</code> property.</p>\n\n<p>This methods returns class/mixin and function names of each step\nin the call stack.</p>\n\n<p>Recursion is not supported.</p>","!type":"fn(args: +arguments) -> string"},"getStackTraceFromError":{"!doc":"<p>Try to get a stack trace from an Error object. Mozilla sets the field\n<code>stack</code> for Error objects thrown using <code>throw new Error()</code>.\nFrom this field it is possible to get a stack trace from the position\nthe exception was thrown at.</p>\n\n<p>This will get the JavaScript file names and the line numbers of each call.\nThe file names are converted into qooxdoo class names if possible (customizable\nvia {@link #FILENAME_TO_CLASSNAME}).</p>\n\n<p>The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.</p>\n\n<p>This works reliably in Gecko-based browsers. Later Opera versions and\nChrome also provide a useful stack trace. For Safari, only the class or\nfile name and line number where the error occurred are returned.\nIE 6/7/8/9 does not attach any stack information to error objects so an\nempty array is returned.</p>","!type":"fn(error: +Error) -> string"}},"Tokenizer":{"!proto":"qx.core.Object","!doc":"<p>Simple JavaScript tokenizer used to print syntax highlighted\nJavaScript code.</p>\n\n<p>Based on Public Domain code by Christopher Diggins\n<a href=\"http://www.cdiggins.com/tokenizer.html\">http://www.cdiggins.com/tokenizer.html</a></p>","javaScriptToHtml":{"!doc":"<p>Create a colored <span class=\"caps\">HTML</span> string for a string of JavaScript code.\nThe colored elements are placed in <code>span</code> elements\nwith class names corresponding to the token types. The returned code\nshould be placed into <code>pre</code> tags to preserve the\nindentation.</p>","!type":"fn(javaScriptText: string, forPreTag?: bool) -> string"},"tokenizeJavaScript":{"!doc":"<p>Tokenizes a string of JavaScript code.</p>","!type":"fn(javaScriptText: string) -> +Map"}},"unit":{"AbstractTestSuite":{"!proto":"qx.core.Object","!doc":"<p>A TestSuite is a collection of test functions, classes and other test suites,\nwhich should be run together.</p>","!type":"fn()","prototype":{"addFail":{"!doc":"<p>Add a test function to the suite, which fails.</p>","!type":"fn(functionName: string, message: string)"},"addTestFunction":{"!doc":"<p>Add a single function to test</p>","!type":"fn(name: string, fcn: fn())"},"addTestMethod":{"!doc":"<p>Add a method from a class as test to the suite</p>","!type":"fn(testCase: +qx.dev.unit.TestCase, functionName: string)"},"getTestMethods":{"!doc":"<p>Get a list of all test methods in the suite</p>","!type":"fn() -> fn()"},"run":{"!doc":"<p>Run all tests using the given test result</p>","!type":"fn(testResult: +TestResult)"}}},"AsyncWrapper":{"!proto":"qx.core.Object","!doc":"<p>This class stores the information needed to instruct a running test to wait.\n It is thrown as an exception to be caught by the method executing the test.</p>","!type":"fn()","prototype":{"getContext":{"!doc":"<p>Returns the (computed) value of the property <code>context</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn() -> Object"},"getDeferredFunction":{"!doc":"<p>Returns the (computed) value of the property <code>deferredFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #deferredFunction}.</p>","!type":"fn() -> Object"},"getDelay":{"!doc":"<p>Returns the (computed) value of the property <code>delay</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delay}.</p>","!type":"fn() -> Object"},"initContext":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>context</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn(value: Object) -> Object"},"initDeferredFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>deferredFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #deferredFunction}.</p>","!type":"fn(value: Object) -> Object"},"initDelay":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delay</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delay}.</p>","!type":"fn(value: Object) -> Object"},"resetContext":{"!doc":"<p>Resets the user value of the property <code>context</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn()"},"resetDeferredFunction":{"!doc":"<p>Resets the user value of the property <code>deferredFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #deferredFunction}.</p>","!type":"fn()"},"resetDelay":{"!doc":"<p>Resets the user value of the property <code>delay</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delay}.</p>","!type":"fn()"},"setContext":{"!doc":"<p>Sets the user value of the property <code>context</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn(value: Object) -> Object"},"setDeferredFunction":{"!doc":"<p>Sets the user value of the property <code>deferredFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #deferredFunction}.</p>","!type":"fn(value: Object) -> Object"},"setDelay":{"!doc":"<p>Sets the user value of the property <code>delay</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delay}.</p>","!type":"fn(value: Object) -> Object"}}},"JsUnitTestResult":{"!proto":"qx.dev.unit.TestResult","!doc":"<p>Test result class, which can export the results to JSUnit</p>","!type":"fn()","prototype":{"exportToJsUnit":{"!doc":"<p>Export the test functions to JSUnit</p>","!type":"fn()"},"run":{"!doc":"<p>Run the test</p>","!type":"fn(test: +TestFunction, testFunction: fn())"}}},"MeasurementResult":{"!proto":"Object","!doc":"<p>Performance test result object. Used to communicate measurements to the unit\ntesting framework.</p>","!type":"fn()","prototype":{"getData":{"!doc":"<p>Returns the stored data as a map.</p>","!type":"fn() -> +Map"},"toString":{"!doc":"<p>Returns a readable summary of this result</p>","!type":"fn() -> string"}}},"MMeasure":{"!doc":"<p>Measures JavaScript execution and rendering time for singular or repeated\noperations.</p>","prototype":{"log":{"!doc":"<p>Logs a single measurement result</p>","!type":"fn(msg: string, iterations: number, ownTime: number, renderTime: number)"},"measure":{"!doc":"<p>Executes a given callback function once and measures JavaScript execution\nand rendering time</p>","!type":"fn(msg: string, callback: fn(), finalize: fn(), displayIterations?: number, maxTime?: number)"},"measureIterations":{"!doc":"<p>Repeatedly runs code for a given amount of time and measures completed\niterations</p>","!type":"fn(msg: string, prepare: fn(), callback: fn(), finalize: fn(), time: number)"},"measureRepeated":{"!doc":"<p>Repeatedly runs code and measures execution and rendering times</p>","!type":"fn(msg: string, callback: fn(), finalize: fn(), iterations: number, displayIterations?: number)"}}},"MMock":{"!doc":"<p>Provides test spies, stubs and mocks as well as custom assertions.</p>\n\n<p>Here is a simple example:</p>\n\n<pre class=\"javascript\">\n\n// Test\nqx&#046;Class.define(\"qx.test.Klass\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  include : qx.dev.unit.MMock,\n\n  members :\n  {\n    \"test: doSpecial on condition xyz\": function() {\n      // Set-Up\n      var obj = new qx.Klass();\n\n      // Wraps obj.doSpecial in a spy function and\n      // replaces the original method with this spy.\n      this.spy(obj, \"doSpecial\");\n\n      // Run code that is expected to fulfill condition\n      obj.onCondition(\"xyz\");\n\n      // Assert that spy was called\n      this.assertCalled(obj.doSpecial);\n    },\n\n    tearDown: function() {\n      // Restore all stubs, spies and overridden host objects.\n      //\n      // It is a good idea to always run this in the <code>tearDown()</code>\n      // method, especially when overwriting global or host objects.\n      this.getSandbox().restore();\n    }\n  }\n});\n\n// Implementation\nqx&#046;Class.define(\"qx.Klass\",\n{\n  extend : qx.core.Object,\n\n  members :\n  {\n    onCondition: function(condition) {\n\n      // Complex code determining mustDoSpecial\n      // by examining condition passed\n\n      if (mustDoSpecial) {\n        this.doSpecial();\n      }\n    },\n\n    doSpecial: function() {\n\n    }\n  }\n});\n\n</pre>\n\n<p>This mixin provides assertions such as assertCalled() that work\nwith spies and stubs. Besides offering a compact way to express expectations,\nthose assertions have the advantage that meaningful error messages can be\ngenerated.</p>\n\n<p>For full list of assertions see <a href=\"http://sinonjs.org/docs/#assertions\">http://sinonjs.org/docs/#assertions</a>.\nNote that sinon.assert.xyz() translates as assertXyz().</p>","!type":"fn()","prototype":{"__deepClone":{"!doc":"<p>Deep clone object by copying properties from prototype.</p>","!type":"fn(obj: Object) -> Object"},"__exposeAssertions":{"!doc":"<p>Expose Sinon.JS assertions. Provides methods such\nas assertCalled(), assertCalledWith().\n(<a href=\"http://sinonjs.org/docs/#assert-expose\">http://sinonjs.org/docs/#assert-expose</a>)\nDoes not override existing assertion methods.</p>","!type":"fn()"},"__getOwnProperties":{"!doc":"<p>Get the object&#8217;s own properties.</p>","!type":"fn(object: Object, targetClazz: Object) -> +Array"},"__getSinon":{"!doc":"<p>Get the Sinon.JS object.</p>","!type":"fn() -> Object"},"__stubProperty":{"!doc":"<p>Safely stub property.</p>","!type":"fn(object: Object, prop: string)"},"deepStub":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Returns a deep copied, <span class=\"caps\">API</span>-identical stubbed out clone of the given\nobject.</p>\n\n<p>In contrast to the shallow {@link #stub}, also stubs out properties that\nbelong to the prototype chain.</p>","!type":"fn(object: Object) -> Object"},"getRequests":{"!doc":"<p>Get requests made with faked <span class=\"caps\">XHR</span> or server.</p>\n\n<p>Each request can be queried for url, method, requestHeaders,\nstatus and more.</p>\n\n<p>See <a href=\"http://sinonjs.org/docs/#FakeXMLHttpRequest\">http://sinonjs.org/docs/#FakeXMLHttpRequest</a>.</p>","!type":"fn() -> +Array"},"getSandbox":{"!doc":"<p>Get sandbox.</p>\n\n<p>The sandbox holds all stubs and mocks. Run <code>this.getSandbox().restore()</code>\nto restore all mock objects.</p>","!type":"fn() -> Object"},"getServer":{"!doc":"<p>Get fake server created by {@link #useFakeServer}.</p>","!type":"fn() -> Object"},"injectStub":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Changes the given factory (e.g. a constructor) to return a stub. The\nmethod itself returns this stub.</p>\n\n<p>By default, the stub returned by the changed factory is the object built\nby the original factory, but deeply stubbed (see {@link #deepStub}).\nAlternatively, a custom stub may be given explicitly that is used instead.</p>","!type":"fn(object: Object, property: string, customStub?: Object) -> Object"},"mock":{"!doc":"<p>Mocks are slightly different from spies and stubs in that you mock an\nobject, and then set an expectation on one or more of its objects.</p>\n\n<ul>\n<li>var mock = mock(obj)<br />\n  Creates a mock for the provided object. Does not change the object, but<br />\n  returns a mock object to set expectations on the object&#8217;s methods.</li>\n</ul>\n\n<ul>\n<li>var expectation = mock.expects(&#8220;method&#8221;)<br />\n  Overrides obj.method with a mock function and returns an expectation<br />\n  object. Expectations implement both the spy and stub interface plus<br />\n  the methods described below.</li>\n</ul>\n\n<p>Set expectations with following methods. All methods return the expectation\nitself, meaning expectations can be chained.</p>\n\n<ul>\n<li>expectation.atLeast(number);</li>\n<li>expectation.atMost(number);</li>\n<li>expectation.never();</li>\n<li>expectation.once();</li>\n<li>expectation.twice();</li>\n<li>expectation.thrice();</li>\n<li>expectation.exactly(number);</li>\n<li>expectation.withArgs(arg1, arg2, ...);</li>\n<li>expectation.withExactArgs(arg1, arg2, ...);</li>\n<li>expectation.on(obj);</li>\n<li>expecation.verify();</li>\n</ul>\n\n<p>See <a href=\"http://sinonjs.org/docs/#mocks\">http://sinonjs.org/docs/#mocks</a>.</p>","!type":"fn(object: Object) -> fn()"},"revealMock":{"!doc":"<p>Changes the given factory (e.g. a constructor) to make a mock of the\nobject returned. The method itself returns this mock.</p>\n\n<p>By default, the object returned by the changed factory (that a mock is\nmade of) is a deep copied, <span class=\"caps\">API</span>-identical clone of the object built by the\noriginal factory. Alternatively, the object returned can be given\nexplicitly.</p>","!type":"fn(object: Object, property: string, customObject?: Object) -> Object"},"shallowStub":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Shallowly stub all methods (except excluded) that belong to classes found in inheritance\nchain up to (but including) the given class.</p>","!type":"fn(object: Object, targetClazz: Object, propsToExclude: +Array) -> Object"},"spy":{"!doc":"<p>Test spies allow introspection on how a function is used\nthroughout the system under test.</p>\n\n<ul>\n<li>spy()<br />\n  Creates an anonymous function that records arguments,<br />\n  this value, exceptions and return values for all calls.</li>\n</ul>\n\n<ul>\n<li>spy(func)<br />\n  Spies on the provided function</li>\n</ul>\n\n<ul>\n<li>spy(object, &#8220;method&#8221;)<br />\n  Creates a spy for object.method and replaces the original method<br />\n  with the spy. The spy acts exactly like the original method in all cases.<br />\n  The original method can be restored by calling object.method.restore().<br />\n  The returned spy is the function object which replaced the original method.<br />\n  spy === object.method.</li>\n</ul>\n\n<ul>\n<li>spy.withArgs(arg1[, arg2, ...])<br />\n  Creates a spy that only records calls when the received arguments matches those<br />\n  passed to <code>withArgs</code>.</li>\n</ul>\n\n<p>A spy has a rich interface to introspect how the wrapped function was used:</p>\n\n<ul>\n<li>spy.withArgs(arg1[, arg2, ...]);</li>\n<li>spy.callCount</li>\n<li>spy.called</li>\n<li>spy.calledOnce</li>\n<li>spy.calledTwice</li>\n<li>spy.calledThrice</li>\n<li>spy.firstCall</li>\n<li>spy.secondCall</li>\n<li>spy.thirdCall</li>\n<li>spy.lastCall</li>\n<li>spy.calledBefore(anotherSpy)</li>\n<li>spy.calledAfter(anotherSpy)</li>\n<li>spy.calledOn(obj)</li>\n<li>spy.alwaysCalledOn(obj)</li>\n<li>spy.calledWith(arg1, arg2, ...)</li>\n<li>spy.alwaysCalledWith(arg1, arg2, ...)</li>\n<li>spy.calledWithExactly(arg1, arg2, ...)</li>\n<li>spy.alwaysCalledWithExactly(arg1, arg2, ...)</li>\n<li>spy.calledWithMatch(arg1, arg2, ...);</li>\n<li>spy.alwaysCalledWithMatch(arg1, arg2, ...);</li>\n<li>spy.calledWithNew();</li>\n<li>spy.neverCalledWith(arg1, arg2, ...);</li>\n<li>spy.neverCalledWithMatch(arg1, arg2, ...);</li>\n<li>spy.threw()</li>\n<li>spy.threw(&#8220;TypeError&#8221;)</li>\n<li>spy.threw(obj)</li>\n<li>spy.alwaysThrew()</li>\n<li>spy.alwaysThrew(&#8220;TypeError&#8221;)</li>\n<li>spy.alwaysThrew(obj)</li>\n<li>spy.returned(obj)</li>\n<li>spy.alwaysReturned(obj)</li>\n<li>spy.getCall(n)</li>\n<li>spy.thisValues</li>\n<li>spy.args</li>\n<li>spy.exceptions</li>\n<li>spy.returnValues</li>\n<li>spy.reset()</li>\n<li>spy.printf(&#8220;format string&#8221;, [arg1, arg2, ...])</li>\n</ul>\n\n<p>See <a href=\"http://sinonjs.org/docs/#spies\">http://sinonjs.org/docs/#spies</a>.</p>\n\n<p>Note: Spies are transparently added to a sandbox. To restore\nthe original function for all spies run <code>this.getSandbox().restore()</code>\nin your <code>tearDown()</code> method.</p>","!type":"fn(function_or_object: fn(), method?: string) -> fn()"},"stub":{"!doc":"<p>Test stubs are functions (spies) with pre-programmed behavior.</p>\n\n<ul>\n<li>stub()<br />\n  Creates an anonymous stub function</li>\n</ul>\n\n<ul>\n<li>stub(object, &#8220;method&#8221;)<br />\n  Replaces object.method with a stub function. The original function<br />\n  can be restored by calling object.method.restore() (or stub.restore()).<br />\n  An exception is thrown if the property is not already a function,<br />\n  to help avoid typos when stubbing methods.</li>\n</ul>\n\n<ul>\n<li>stub(obj)<br />\n  Stubs all the object&#8217;s methods.</li>\n</ul>\n\n<ul>\n<li>stub.withArgs(arg1[, arg2, ...])<br />\n  Stubs the method only for the provided arguments. Can be used to create<br />\n  a stub that acts differently in response to different arguments.</li>\n</ul>\n\n<p>A stub has the interface of a spy in addition to methods that allow to define behaviour:</p>\n\n<ul>\n<li>stub.returns(obj)</li>\n<li>stub.throws()</li>\n<li>stub.throws(&#8220;TypeError&#8221;)</li>\n<li>stub.throws(obj)</li>\n<li>stub.callsArg(index)</li>\n<li>stub.callsArg(0)</li>\n<li>stub.callsArgWith(index, arg1, arg2, ...)</li>\n</ul>\n\n<p>See <a href=\"http://sinonjs.org/docs/#stubs\">http://sinonjs.org/docs/#stubs</a>.</p>\n\n<p>Note: Stubs are transparently added to a sandbox. To restore\nthe original function for all stubs run <code>this.getSandbox().restore()</code>\nin your <code>tearDown()</code> method.</p>","!type":"fn(object?: Object, method?: string) -> fn()"},"useFakeServer":{"!doc":"<p>As {@link #useFakeXMLHttpRequest}, but additionally provides a high-level\n<span class=\"caps\">API</span> to setup server responses. To setup responses, use the server\nreturned by {@link #getServer}.</p>\n\n<p>See <a href=\"http://sinonjs.org/docs/#server\">http://sinonjs.org/docs/#server</a>.</p>\n\n<p>Note: The fake server is transparently added to a sandbox. To restore\nthe original host method run <code>this.getSandbox().restore()</code>\nin your <code>tearDown()</code> method.</p>","!type":"fn() -> Object"},"useFakeXMLHttpRequest":{"!doc":"<p>Replace the native XMLHttpRequest object in browsers that support it with\na custom implementation which does not send actual requests.</p>\n\n<p>Note: The fake <span class=\"caps\">XHR</span> is transparently added to a sandbox. To restore\nthe original host method run <code>this.getSandbox().restore()</code>\nin your <code>tearDown()</code> method.</p>\n\n<p>See <a href=\"http://sinonjs.org/docs/#useFakeXMLHttpRequest\">http://sinonjs.org/docs/#useFakeXMLHttpRequest</a>.</p>","!type":"fn() -> Object"}}},"MRequirements":{"!doc":"<p>Common requirement checks for unit tests. Example:</p>\n\n<pre class=\"javascript\">\ntestBackend : function()\n{\n  this.require([\"http\", \"php\"]); // test will be skipped unless all conditions are met\n  // test code goes here\n}\n</pre>","prototype":{"hasChrome":{"!doc":"<p>Checks if the application is running in Google Chrome</p>","!type":"fn() -> bool"},"hasFirefox":{"!doc":"<p>Checks if the application is running in Firefox</p>","!type":"fn() -> bool"},"hasGecko":{"!doc":"<p>Checks if the application is running in a browser using the Gecko engine</p>","!type":"fn() -> bool"},"hasGuiApp":{"!doc":"<p>Checks if the application extends qx.application.Standalone</p>","!type":"fn() -> bool"},"hasHttp":{"!doc":"<p>Checks if the application has been loaded over <span class=\"caps\">HTTP</span>.</p>","!type":"fn() -> bool"},"hasIe":{"!doc":"<p>Checks if the application is running in Internet Explorer</p>","!type":"fn() -> bool"},"hasInlineApp":{"!doc":"<p>Checks if the application extends qx.application.Inline</p>","!type":"fn() -> bool"},"hasMshtml":{"!doc":"<p>Checks if the application is running in a browser using the <span class=\"caps\">MSHTML</span> engine</p>","!type":"fn() -> bool"},"hasNativeApp":{"!doc":"<p>Checks if the application extends qx.application.Native</p>","!type":"fn() -> bool"},"hasNoSelenium":{"!doc":"<p>Checks if the application is controlled by Selenium</p>","!type":"fn() -> bool"},"hasNoWin7":{"!doc":"<p>Checks if the application is running on Windows 7</p>","!type":"fn() -> bool"},"hasOpera":{"!doc":"<p>Checks if the application is running in a browser using the Opera engine</p>","!type":"fn() -> bool"},"hasPhp":{"!doc":"<p>Checks if the server supports <span class=\"caps\">PHP</span>.</p>","!type":"fn() -> bool"},"hasWebkit":{"!doc":"<p>Checks if the application is running in a browser using the Webkit engine</p>","!type":"fn() -> bool"}}},"MRequirementsBasic":{"!doc":"<p>Adds support for verification of infrastructure requirements to unit test\nclasses.</p>","prototype":{"require":{"!doc":"<p>Verifies a list of infrastructure requirements by checking for\ncorresponding &#8220;has&#8221; methods. If no such method was found,\n{@link qx.core.Environment} will be checked for a key matching the given\nfeature name. Note that asynchronous environment checks are not supported!</p>\n\n<p>See the manual for further details:\n<a href=\"http://manual.qooxdoo.org/current/pages/development/frame_apps_testrunner.html#defining-test-requirements\">Defining Test Requirements</a></p>","!type":"fn(featureList: string)"}}},"MTestLoader":{"!doc":"<p>This mixin contains the methods needed to implement a loader that will\ncreate a suite of unit tests from a given namespace and run it directly or\nprovide the necessary information to a more advanced runner application</p>","prototype":{"_getClassNameFromUrl":{"!doc":"<p>Parses the url parameters and tries to find the classes to test.\nThe pattern is like <code>index.html?testclass=qx.test</code></p>","!type":"fn() -> string"},"getSuite":{"!doc":"<p>Returns the (computed) value of the property <code>suite</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #suite}.</p>","!type":"fn() -> Object"},"getTestDescriptions":{"!doc":"<p>Get a list of test descriptions</p>","!type":"fn() -> string"},"initSuite":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>suite</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #suite}.</p>","!type":"fn(value: Object) -> Object"},"resetSuite":{"!doc":"<p>Resets the user value of the property <code>suite</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #suite}.</p>","!type":"fn()"},"runJsUnit":{"!doc":"<p>Run all tests and export the results to JSUnit</p>","!type":"fn()"},"runStandAlone":{"!doc":"<p>Run tests as standalone application</p>","!type":"fn()"},"runTests":{"!doc":"<p>Runs exactly one test from the test suite</p>","!type":"fn(testResult: +TestResult, className: string, methodName: string)"},"runTestsFromNamespace":{"!doc":"<p>Runs all tests inside of the given namespace</p>","!type":"fn(testResult: +TestResult, namespaceName: string)"},"setSuite":{"!doc":"<p>Sets the user value of the property <code>suite</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #suite}.</p>","!type":"fn(value: Object) -> Object"},"setTestNamespace":{"!doc":"<p>Sets the top level namespace of the test cases to test. All classes\nbelow this namespace extending {@link TestCase} will be tested.</p>","!type":"fn(namespace: Object)"}}},"RequirementError":{"!proto":"Error","!doc":"<p>This error is thrown by the unit test class if an infrastructure requirement\nis not met. The unit testing framework should skip the test and visually mark\nthe test as not having been executed.</p>","!type":"fn()","prototype":{"getRequirement":{"!doc":"<p>Returns the ID of the requirement that was not satisfied.</p>","!type":"fn() -> string"},"toString":{"!doc":"<p>Returns a string representation of the error.</p>","!type":"fn() -> string"}}},"Sinon":{"!doc":"<p>Exposes Sinon.JS to qooxdoo.</p>\n\n<p>This class exposes Sinon.JS (<a href=\"http://sinonjs.org/\">http://sinonjs.org/</a>) and is not to be used\ndirectly. Instead, you should include qx.dev.unit.MMock in your TestCase\nand use the wrappers provided.</p>","getSinon":{"!doc":"<p>Get the Sinon.JS object.</p>","!type":"fn() -> Object"}},"TestCase":{"!proto":"qx.core.Object","!doc":"<p>Base class for all unit tests.</p>","prototype":{"getTestFunc":{"!doc":"<p>Returns the (computed) value of the property <code>testFunc</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>","!type":"fn() -> Object"},"getTestResult":{"!doc":"<p>Returns the (computed) value of the property <code>testResult</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>","!type":"fn() -> Object"},"initTestFunc":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>testFunc</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>","!type":"fn(value: Object) -> Object"},"initTestResult":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>testResult</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>","!type":"fn(value: Object) -> Object"},"isDebugOn":{"!doc":"<p>Whether If debugging code is enabled. (i.e. the setting\n<code>qx.debug</code> has the value <code>on</code>.)</p>","!type":"fn() -> bool"},"resetTestFunc":{"!doc":"<p>Resets the user value of the property <code>testFunc</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>","!type":"fn()"},"resetTestResult":{"!doc":"<p>Resets the user value of the property <code>testResult</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>","!type":"fn()"},"resume":{"!doc":"<p>Cancel a timeout started with <code>wait()</code> and run the given\nfunction. Used for asynchronous tests, e.g. in a listener&#8217;s callback\nfunction.</p>\n\n<p><strong>Important</strong></p>\n\n<p>The used <strong>deferredFunction</strong> is the last function which is executed before\nthe whole test case is disposed. But you are able to use a new\n<code>wait()</code> / <code>resume()</code> pair in the call sequence of the deferred function.</p>","!type":"fn(deferredFunction?: fn(), self?: Object)"},"resumeHandler":{"!doc":"<p>Cancel a timeout started with <code>wait()</code> and return a function,\nwhich calls {@link #resume}. This function is useful\nto wrap an event handler or callback function within the resume call sequence.\nIt provides the deferred function with all parameters from original caller.</p>\n\n<pre>\n obj.addListener(\"appear\", this.resumeHandler(function(e){\n   // do some nice\n }));\n\n this.wait();\n</pre>","!type":"fn(deferredFunction: fn(), self?: Object) -> fn()"},"setTestFunc":{"!doc":"<p>Sets the user value of the property <code>testFunc</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>","!type":"fn(value: Object) -> Object"},"setTestResult":{"!doc":"<p>Sets the user value of the property <code>testResult</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>","!type":"fn(value: Object) -> Object"},"skip":{"!doc":"<p>Skip this test. Any code after a call to this method will not be executed.</p>","!type":"fn(message: string)"},"wait":{"!doc":"<p>Instruct the test to wait. Used for asynchronous tests.</p>","!type":"fn(delay?: +Integer, deferredFunction?: fn(), context?: Object)"}}},"TestClass":{"!proto":"qx.dev.unit.AbstractTestSuite","!doc":"<p>This class represents a test suite for an unit test class.</p>\n\n<p>To create your own unit tests, create a class that derives from this one, and\nadd member methods that start with &#8220;test*&#8221;. You can use assertion methods\ninherited from <strong>TestClass</strong> to ease the implementation process.</p>\n\n<p>A simple example:</p>\n\n<pre class=\"javascript\">\nqx. Class.define(\"myapp.test.MyUnitTest\"),\n{\n  extend  : qx.dev.unit.TestCase,\n\n  members :\n  {\n    testMe : function ()\n    {\n      // 'assertEquals' is from the parent\n      this.assertEquals(4, 3+1, \"failure message\");\n    }\n  }\n}\n</pre>","!type":"fn()","prototype":{"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"}}},"TestFunction":{"!proto":"qx.core.Object","!doc":"<p>Wrapper object for a method containing unit test code.</p>","!type":"fn()","prototype":{"getClassName":{"!doc":"<p>Returns the (computed) value of the property <code>className</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #className}.</p>","!type":"fn() -> Object"},"getFullName":{"!doc":"<p>Get the full name of the test.</p>","!type":"fn() -> string"},"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"getTestClass":{"!doc":"<p>Returns the (computed) value of the property <code>testClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testClass}.</p>","!type":"fn() -> Object"},"getTestFunction":{"!doc":"<p>Returns the (computed) value of the property <code>testFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunction}.</p>","!type":"fn() -> Object"},"initClassName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>className</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #className}.</p>","!type":"fn(value: Object) -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"initTestClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>testClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #testClass}.</p>","!type":"fn(value: Object) -> Object"},"initTestFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>testFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunction}.</p>","!type":"fn(value: Object) -> Object"},"resetClassName":{"!doc":"<p>Resets the user value of the property <code>className</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #className}.</p>","!type":"fn()"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"resetTestClass":{"!doc":"<p>Resets the user value of the property <code>testClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #testClass}.</p>","!type":"fn()"},"resetTestFunction":{"!doc":"<p>Resets the user value of the property <code>testFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunction}.</p>","!type":"fn()"},"run":{"!doc":"<p>Runs the test and logs the test result to a {@link TestResult} instance,</p>","!type":"fn(testResult: +TestResult)"},"setClassName":{"!doc":"<p>Sets the user value of the property <code>className</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #className}.</p>","!type":"fn(value: Object) -> Object"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"setTestClass":{"!doc":"<p>Sets the user value of the property <code>testClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testClass}.</p>","!type":"fn(value: Object) -> Object"},"setTestFunction":{"!doc":"<p>Sets the user value of the property <code>testFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunction}.</p>","!type":"fn(value: Object) -> Object"},"setUp":{"!doc":"<p>Call the test class&#8217; <code>setUp</code> method.</p>","!type":"fn()"},"tearDown":{"!doc":"<p>Call the test class&#8217; <code>tearDown</code> method.</p>","!type":"fn()"}}},"TestLoader":{"!proto":"qx.application.Standalone","!doc":"<p>The test loader is the base class of a native application, which can be used\nto run tests from a non-GUI application or from within JSUnit.</p>","prototype":{"main":{"!type":"fn()"}}},"TestLoaderBasic":{"!proto":"qx.core.Object","!doc":"<p>Test loader for server-side/&#8220;headless&#8221; environments</p>","!type":"fn()"},"TestLoaderInline":{"!proto":"qx.application.Inline","!doc":"<p>The test loader is the base class of a native application, which can be used\nto run tests from a non-GUI application or from within JSUnit.</p>","prototype":{"main":{"!type":"fn()"}}},"TestLoaderMobile":{"!proto":"qx.application.Mobile","!doc":"<p>The test loader is the base class of a native application, which can be used\nto run tests from a non-GUI application or from within JSUnit.</p>","prototype":{"main":{"!type":"fn()"}}},"TestLoaderNative":{"!proto":"qx.application.Native","!doc":"<p>The test loader is the base class of a native application, which can be used\nto run tests from a non-GUI application or from within JSUnit.</p>","prototype":{"main":{"!type":"fn()"}}},"TestResult":{"!proto":"qx.core.Object","!doc":"<p>The test result class runs the test functions and fires events depending on\nthe result of the test run.</p>","run":{"!doc":"<p>Run a test function using a given test result</p>","!type":"fn(testResult: +TestResult, test: +TestSuite, testFunction: Object)"},"prototype":{"__removeListeners":{"!doc":"<p>Removes any listeners left over after a test&#8217;s run.</p>","!type":"fn(testFunction: +qx.dev.unit.TestFunction)"},"__wrapAddListener":{"!doc":"<p>Wraps the <span class=\"caps\">AUT</span>&#8216;s qx.event.Registration.addListener function so that it\nstores references to all added listeners in an array attached to the\ncurrent test function. This is done so that any listeners left over after\ntest execution can be removed to make sure they don&#8217;t influence other\ntests.</p>","!type":"fn(testFunction: +qx.dev.unit.TestFunction)"},"_createError":{"!doc":"<p>Fire an error event</p>","!type":"fn(eventName: string, exceptions: +Error, test: +TestSuite)"},"run":{"!doc":"<p>Run the test</p>","!type":"fn(test: +TestSuite, testFunction: fn(), self?: Object, resume?: bool)"},"tearDown":{"!doc":"<p>Calls the generic tearDown method on the test class, then the specific\ntearDown for the test, if one is defined.</p>","!type":"fn(test: Object)"}}},"TestSuite":{"!proto":"qx.dev.unit.AbstractTestSuite","!doc":"<p>A TestSuite is a collection of test functions, classes and other test suites,\nwhich should be run together.</p>","!type":"fn()","prototype":{"add":{"!doc":"<p>Add a test class or namespace to the suite</p>","!type":"fn(testClassOrNamespace: Object)"},"addTestClass":{"!doc":"<p>Add a test class to the suite</p>","!type":"fn(clazz: +Class)"},"addTestNamespace":{"!doc":"<p>Add all tests from the given namespace to the suite</p>","!type":"fn(namespace: Object)"},"getTestClasses":{"!doc":"<p>Get a list of all test classes in the suite</p>","!type":"fn() -> +Class"}}}}},"dom":{"Element":{"!doc":"<p>Manages children structures of an element. Easy and convenient APIs\nto insert, remove and replace children.</p>","create":{"!doc":"<p>Creates a <span class=\"caps\">DOM</span> element.</p>","!type":"fn(name: string, attributes?: +Map, win?: +Window) -> +Element"},"empty":{"!doc":"<p>Removes all content from the given element</p>","!type":"fn(element: +Element) -> string"},"getHelperElement":{"!doc":"<p>Creates and returns a <span class=\"caps\">DOM</span> helper element.</p>","!type":"fn(win?: +Window) -> +Element"},"getParentElement":{"!doc":"<p>Returns the parent element of the given element.</p>","!type":"fn(element: +Element) -> +Element"},"hasChild":{"!doc":"<p>Whether the given <code>child</code> is a child of <code>parent</code></p>","!type":"fn(parent: +Element, child: +Node) -> bool"},"hasChildElements":{"!doc":"<p>Whether the given <code>element</code> has any child elements.</p>","!type":"fn(element: +Element) -> bool"},"hasChildren":{"!doc":"<p>Whether the given <code>element</code> has children.</p>","!type":"fn(element: +Element) -> bool"},"insertAfter":{"!doc":"<p>Inserts <code>node</code> after <code>ref</code> in the same parent.</p>","!type":"fn(node: +Node, ref: +Node) -> bool"},"insertAt":{"!doc":"<p>Inserts <code>node</code> at the given <code>index</code>\ninside <code>parent</code>.</p>","!type":"fn(node: +Node, parent: +Element, index: +Integer) -> bool"},"insertBefore":{"!doc":"<p>Inserts <code>node</code> before <code>ref</code> in the same parent.</p>","!type":"fn(node: +Node, ref: +Node) -> bool"},"insertBegin":{"!doc":"<p>Insert <code>node</code> into <code>parent</code> as first child.\nIndexes of other children will be incremented by one.</p>","!type":"fn(node: +Node, parent: +Element) -> bool"},"insertEnd":{"!doc":"<p>Insert <code>node</code> into <code>parent</code> as last child.</p>","!type":"fn(node: +Node, parent: +Element) -> bool"},"isInDom":{"!doc":"<p>Checks if the <code>element</code> is in the <span class=\"caps\">DOM</span>, but note that\nthe method is very expensive!</p>","!type":"fn(element: +Element, win: +Window) -> bool"},"remove":{"!doc":"<p>Removes the given <code>node</code> from its parent element.</p>","!type":"fn(node: +Node) -> bool"},"removeChild":{"!doc":"<p>Removes the given <code>node</code> from the <code>parent</code>.</p>","!type":"fn(node: +Node, parent: +Element) -> bool"},"removeChildAt":{"!doc":"<p>Removes the node at the given <code>index</code>\nfrom the <code>parent</code>.</p>","!type":"fn(index: +Integer, parent: +Element) -> bool"},"replaceAt":{"!doc":"<p>Replaces the node at <code>index</code> with <code>newNode</code> in\nthe given parent.</p>","!type":"fn(newNode: +Node, index: +Integer, parent: +Element) -> bool"},"replaceChild":{"!doc":"<p>Replaces <code>oldNode</code> with <code>newNode</code> in the current\nparent of <code>oldNode</code>.</p>","!type":"fn(newNode: +Node, oldNode: +Node) -> bool"}},"Hierarchy":{"!doc":"<p>Methods to operate on nodes and elements on a <span class=\"caps\">DOM</span> tree. This contains\nspecial getters to query for child nodes, siblings, etc. This class also\nsupports to operate on one element and reorganize the content with\nthe insertion of new <span class=\"caps\">HTML</span> or nodes.</p>","_recursivelyCollect":{"!doc":"<p>Recursively collects elements whose relationship is specified by\nproperty.  <code>property</code> has to be a property (a method won&#8217;t\ndo!) of element that points to a single <span class=\"caps\">DOM</span> node. Returns an array of\nelements.</p>","!type":"fn(element: +Element, property: string) -> +Array"},"cleanWhitespace":{"!doc":"<p>Removes all of element&#8217;s text nodes which contain only whitespace</p>","!type":"fn(element: +Element)"},"contains":{"!doc":"<p>Whether the first element contains the second one</p>\n\n<p>Uses native non-standard contains() in Internet Explorer,\nOpera and Webkit (supported since Safari 3.0 beta)</p>","!type":"fn(element: +Element, target: +Node) -> bool"},"getAncestors":{"!doc":"<p>Collects all of element&#8217;s ancestors and returns them as an array of\nelements.</p>","!type":"fn(element: +Element) -> +Array"},"getChildElements":{"!doc":"<p>Returns element&#8217;s children.</p>","!type":"fn(element: +Element) -> +Array"},"getCommonParent":{"!doc":"<p>Get the common parent element of two given elements. Returns\n<code>null</code> when no common element has been found.</p>\n\n<p>Uses native non-standard contains() in Opera and Internet Explorer</p>","!type":"fn(element1: +Element, element2: +Element) -> +Element"},"getDescendants":{"!doc":"<p>Collects all of element&#8217;s descendants (deep) and returns them as an array\nof elements.</p>","!type":"fn(element: +Element) -> +Array"},"getElementIndex":{"!doc":"<p>Returns the <span class=\"caps\">DOM</span> index of the given element (ignoring non-elements)</p>","!type":"fn(element: +Element) -> +Integer"},"getFirstDescendant":{"!doc":"<p>Returns the first child that is an element. This is opposed to firstChild <span class=\"caps\">DOM</span>\nproperty which will return any node (whitespace in most usual cases).</p>","!type":"fn(element: +Element) -> +Element"},"getLastDescendant":{"!doc":"<p>Returns the last child that is an element. This is opposed to lastChild <span class=\"caps\">DOM</span>\nproperty which will return any node (whitespace in most usual cases).</p>","!type":"fn(element: +Element) -> +Element"},"getNextElementSibling":{"!doc":"<p>Return the next element to the supplied element</p>\n\n<p>&#8220;nextSibling&#8221; is not good enough as it might return a text or comment element</p>","!type":"fn(element: +Element) -> +Element"},"getNextSiblings":{"!doc":"<p>Collects all of element&#8217;s next siblings and returns them as an array of\nelements.</p>","!type":"fn(element: +Element) -> +Array"},"getNodeIndex":{"!doc":"<p>Returns the <span class=\"caps\">DOM</span> index of the given node</p>","!type":"fn(node: +Node) -> +Integer"},"getPreviousElementSibling":{"!doc":"<p>Return the previous element to the supplied element</p>\n\n<p>&#8220;previousSibling&#8221; is not good enough as it might return a text or comment element</p>","!type":"fn(element: +Element) -> +Element"},"getPreviousSiblings":{"!doc":"<p>Collects all of element&#8217;s previous siblings and returns them as an array of elements.</p>","!type":"fn(element: +Element) -> +Array"},"getSiblings":{"!doc":"<p>Collects all of element&#8217;s siblings and returns them as an array of elements.</p>","!type":"fn(element: Object) -> +Array"},"isDescendantOf":{"!doc":"<p>Checks if <code>element</code> is a descendant of <code>ancestor</code>.</p>","!type":"fn(element: +Element, ancestor: +Element) -> bool"},"isEmpty":{"!doc":"<p>Whether the given element is empty.\nInspired by Base2 (Dean Edwards)</p>","!type":"fn(element: +Element) -> bool"},"isRendered":{"!doc":"<p>Whether the element is inserted into the document\nfor which it was created.</p>","!type":"fn(element: +Element) -> bool"}},"Node":{"!doc":"<p>Basic node creation and type detection</p>","getBodyElement":{"!doc":"<p>Returns the body element. (Visual root node)</p>\n\n<p>This normally only makes sense for <span class=\"caps\">HTML</span> documents. It returns\nthe content area of the <span class=\"caps\">HTML</span> document.</p>","!type":"fn(node: +Node) -> +Element"},"getDocument":{"!doc":"<p>Returns the owner document of the given node</p>","!type":"fn(node: +Node) -> +Document"},"getDocumentElement":{"!doc":"<p>Returns the document element. (Logical root node)</p>\n\n<p>This is a convenience attribute that allows direct access to the child\nnode that is the root element of the document. For <span class=\"caps\">HTML</span> documents,\nthis is the element with the tagName &#8220;HTML&#8221;.</p>","!type":"fn(node: +Node) -> +Element"},"getName":{"!doc":"<p>Get the node name as lower case string</p>","!type":"fn(node: +Node) -> string"},"getText":{"!doc":"<p>Returns the text content of an node where the node may be of node type\nNODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT or NODE_CDATA</p>","!type":"fn(node: +Node) -> string"},"getWindow":{"!doc":"<p>Returns the DOM2 <code>defaultView</code> (window).</p>","!type":"fn(node: +Node) -> +Window"},"isBlockNode":{"!doc":"<p>Checks if the given node is a block node</p>","!type":"fn(node: +Node) -> bool"},"isDocument":{"!doc":"<p>Whether the given object is a <span class=\"caps\">DOM</span> document node</p>","!type":"fn(node: +Node) -> bool"},"isDocumentFragment":{"!doc":"<p>Whether the given object is a <span class=\"caps\">DOM</span> document fragment node</p>","!type":"fn(node: +Node) -> bool"},"isElement":{"!doc":"<p>Whether the given object is a <span class=\"caps\">DOM</span> element node</p>","!type":"fn(node: +Node) -> bool"},"isNode":{"!doc":"<p>Whether the given object is a <span class=\"caps\">DOM</span> node</p>","!type":"fn(node: +Node) -> bool"},"isNodeName":{"!doc":"<p>Whether the node has the given node name</p>","!type":"fn(node: +Node, nodeName: string) -> bool"},"isText":{"!doc":"<p>Whether the given object is a <span class=\"caps\">DOM</span> text node</p>","!type":"fn(node: +Node) -> bool"},"isWindow":{"!doc":"<p>Check whether the given object is a browser window object.</p>","!type":"fn(obj: Object) -> bool"}}},"event":{"AcceleratingTimer":{"!proto":"qx.core.Object","!doc":"<p>Timer, which accelerates after each interval. The initial delay and the\ninterval time can be set using the properties {@link #firstInterval}\nand {@link #interval}. The {@link #interval} events will be fired with\ndecreasing interval times while the timer is running, until the {@link #minimum}\nis reached. The {@link #decrease} property sets the amount of milliseconds\nwhich will decreased after every firing.</p>\n\n<p>This class is e.g. used in the {@link qx.ui.form.RepeatButton} and\n{@link qx.ui.form.HoverButton} widgets.</p>","!type":"fn()","prototype":{"_onInterval":{"!doc":"<p>Interval event handler</p>","!type":"fn()"},"getDecrease":{"!doc":"<p>Returns the (computed) value of the property <code>decrease</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decrease}.</p>","!type":"fn() -> Object"},"getFirstInterval":{"!doc":"<p>Returns the (computed) value of the property <code>firstInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn() -> Object"},"getInterval":{"!doc":"<p>Returns the (computed) value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn() -> Object"},"getMinimum":{"!doc":"<p>Returns the (computed) value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn() -> Object"},"initDecrease":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>decrease</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #decrease}.</p>","!type":"fn(value: Object) -> Object"},"initFirstInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>firstInterval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn(value: Object) -> Object"},"initInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>interval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"initMinimum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"resetDecrease":{"!doc":"<p>Resets the user value of the property <code>decrease</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #decrease}.</p>","!type":"fn()"},"resetFirstInterval":{"!doc":"<p>Resets the user value of the property <code>firstInterval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn()"},"resetInterval":{"!doc":"<p>Resets the user value of the property <code>interval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn()"},"resetMinimum":{"!doc":"<p>Resets the user value of the property <code>minimum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn()"},"setDecrease":{"!doc":"<p>Sets the user value of the property <code>decrease</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decrease}.</p>","!type":"fn(value: Object) -> Object"},"setFirstInterval":{"!doc":"<p>Sets the user value of the property <code>firstInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn(value: Object) -> Object"},"setInterval":{"!doc":"<p>Sets the user value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"setMinimum":{"!doc":"<p>Sets the user value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"start":{"!doc":"<p>Reset and start the timer.</p>","!type":"fn()"},"stop":{"!doc":"<p>Stop the timer</p>","!type":"fn()"}}},"dispatch":{"AbstractBubbling":{"!proto":"qx.core.Object","!doc":"<p>Event dispatcher for all bubbling events.</p>","!type":"fn()","prototype":{"_getParent":{"!doc":"<p>Returns the parent of the given target</p>","!type":"fn(target: Object) -> Object"},"canDispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"},"dispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"}}},"Direct":{"!proto":"qx.core.Object","!doc":"<p>Dispatches events directly on the event target (no bubbling nor capturing).</p>","!type":"fn()","prototype":{"canDispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"},"dispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"}}},"DomBubbling":{"!proto":"qx.event.dispatch.AbstractBubbling","!doc":"<p>Event dispatcher for all bubbling events on <span class=\"caps\">DOM</span> elements.</p>","prototype":{"_getParent":{"!type":"fn(target: +undefined)"},"canDispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"}}},"MouseCapture":{"!proto":"qx.event.dispatch.AbstractBubbling","!doc":"<p>Implementation of the Internet Explorer specific event capturing mode for\nmouse events <a href=\"http://msdn2.microsoft.com/en-us/library/ms536742.aspx\">http://msdn2.microsoft.com/en-us/library/ms536742.aspx</a>.</p>\n\n<p>This class is used internally by {@link qx.event.Manager} to do mouse event\ncapturing.</p>","!type":"fn()","prototype":{"_getParent":{"!type":"fn(target: +undefined)"},"activateCapture":{"!doc":"<p>Set the given element as target for event</p>","!type":"fn(element: +Element, containerCapture?: bool)"},"canDispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"},"dispatchEvent":{"!type":"fn(target: +undefined, event: +undefined, type: +undefined)"},"getCaptureElement":{"!doc":"<p>Get the element currently capturing events.</p>","!type":"fn() -> +Element"},"nativeReleaseCapture":{"!doc":"<p>If the browser supports native mouse capturing, removes mouse capture\nfrom the object in the current document.</p>","!type":"fn(element: +Element)"},"nativeSetCapture":{"!doc":"<p>If the browser supports native mouse capturing, sets the mouse capture to\nthe object that belongs to the current document.</p>","!type":"fn(element: +Element, containerCapture?: bool)"},"releaseCapture":{"!doc":"<p>Stop capturing of mouse events.</p>","!type":"fn()"}}}},"Emitter":{"!proto":"Object","!doc":"<p>Basic implementation for an event emitter. This supplies a basic and\nminimalistic event mechanism.</p>","prototype":{"__getStorage":{"!doc":"<p>Internal helper which will return the storage for the given name.</p>","!type":"fn(name: string) -> +Array"},"addListener":{"!doc":"<p>Alternative for {@link #on}.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +Integer"},"addListenerOnce":{"!doc":"<p>Alternative for {@link #once}.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +Integer"},"emit":{"!doc":"<p>Emits an event with the given name. The data will be passed\nto the listener.</p>","!type":"fn(name: string, data?: Object)"},"getListeners":{"!doc":"<p>Returns the internal attached listener.</p>","!type":"fn() -> +Map"},"off":{"!doc":"<p>Remove a listener from the event emitter. The given <code>name</code>\nwill define the type of event.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +Integer"},"offById":{"!doc":"<p>Removes the listener identified by the given <code>id</code>. The id\nwill be return on attaching the listener and can be stored for removing.</p>","!type":"fn(id: +Integer) -> +Integer"},"on":{"!doc":"<p>Attach a listener to the event emitter. The given <code>name</code>\nwill define the type of event. Handing in a <code>&#8217;*&#8217;</code> will\nlisten to all events emitted by the event emitter.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +Integer"},"once":{"!doc":"<p>Attach a listener to the event emitter which will be executed only once.\nThe given <code>name</code> will define the type of event. Handing in a\n<code>&#8217;*&#8217;</code> will listen to all events emitted by the event emitter.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object) -> +Integer"},"removeListener":{"!doc":"<p>Alternative for {@link #off}.</p>","!type":"fn(name: string, listener: fn(), ctx?: Object)"},"removeListenerById":{"!doc":"<p>Alternative for {@link #offById}.</p>","!type":"fn(id: +Integer)"}}},"GlobalError":{"!doc":"<p>The GlobalError class stores a reference to a global error handler function.</p>\n\n<p>This function is called for each uncatched JavaScript exception. To enable\n global error handling the setting <code>qx.globalErrorHandling</code> must\n be enabled and an error handler must be registered.\n Further each JavaScript &#8220;entry point&#8221; must be wrapped with a call to\n {@link qx.event.GlobalError#observeMethod}.</p>","__isGlobaErrorHandlingEnabled":{"!doc":"<p>Little helper to check if the global error handling is enabled.</p>","!type":"fn() -> bool"},"__onErrorWindow":{"!doc":"<p>Catches all errors of the <code>window.onerror</code> handler\nand passes an {@link qx.core.WindowError} object to the error\nhandling.</p>","!type":"fn(msg: string, uri: string, lineNumber: +Integer)"},"handleError":{"!doc":"<p>Delegates every given exception to the registered error handler</p>","!type":"fn(ex: +qx.core.WindowError)"},"observeMethod":{"!doc":"<p>Wraps a method with error handling code. Only methods, which are called\ndirectly by the browser (e.g. event handler) should be wrapped.</p>","!type":"fn(method: fn()) -> fn()"},"setErrorHandler":{"!doc":"<p>Set the global fallback error handler</p>","!type":"fn(callback: fn(), context: Object)"}},"handler":{"Appear":{"!proto":"qx.core.Object","!doc":"<p>This class supports <code>appear</code> and <code>disappear</code> events\non <span class=\"caps\">DOM</span> level.</p>","!type":"fn()","refresh":{"!doc":"<p>Refreshes all appear handlers. Useful after massive <span class=\"caps\">DOM</span> manipulations e.g.\nthrough qx.html.Element.</p>","!type":"fn()"},"prototype":{"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"refresh":{"!doc":"<p>This method should be called by all <span class=\"caps\">DOM</span> tree modifying routines\nto check the registered nodes for changes.</p>","!type":"fn()"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Application":{"!proto":"qx.core.Object","!doc":"<p>This handler provides events for qooxdoo application startup/shutdown logic.</p>","!type":"fn()","onScriptLoaded":{"!doc":"<p>Sends the currently running application the ready signal. Used\nexclusively by package loader system.</p>","!type":"fn()"},"prototype":{"__fireReady":{"!doc":"<p>Fires a global ready event.</p>","!type":"fn()"},"_initObserver":{"!doc":"<p>Initializes the native application event listeners.</p>","!type":"fn()"},"_onNativeLoad":{"!doc":"<p>Event listener for native load event</p>","!type":"fn()"},"_onNativeUnload":{"!doc":"<p>Event listener for native unload event</p>","!type":"fn()"},"_stopObserver":{"!doc":"<p>Disconnect the native application event listeners.</p>","!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"isApplicationReady":{"!doc":"<p>Whether the application is ready.</p>","!type":"fn() -> bool"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Capture":{"!proto":"qx.core.Object","!doc":"<p>This class provides capture event support at <span class=\"caps\">DOM</span> level.</p>","prototype":{"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"DragDrop":{"!proto":"qx.core.Object","!doc":"<p>Event handler, which supports drag events on <span class=\"caps\">DOM</span> elements.</p>","!type":"fn()","prototype":{"__detectAction":{"!doc":"<p>Detects the current action and stores it under the private\nfield <code>__currentAction</code>. Also fires the event\n<code>dragchange</code> on every modification.</p>","!type":"fn()"},"__findDraggable":{"!doc":"<p>Finds next draggable parent of the given element. Maybe the element itself as well.</p>\n\n<p>Looks for the attribute <code>qxDraggable</code> with the value <code>on</code>.</p>","!type":"fn(elem: +Element) -> +Element"},"__findDroppable":{"!doc":"<p>Finds next droppable parent of the given element. Maybe the element itself as well.</p>\n\n<p>Looks for the attribute <code>qxDroppable</code> with the value <code>on</code>.</p>","!type":"fn(elem: +Element) -> +Element"},"__fireEvent":{"!doc":"<p>Wrapper for {@link qx.event.Registration#fireEvent} for drag&amp;drop events\nneeded in this class.</p>","!type":"fn(type: string, target: Object, relatedTarget: Object, cancelable: bool, original: +qx.event.type.Pointer) -> bool"},"__rebuildStructures":{"!doc":"<p>Rebuilds the internal data storage used during a drag&amp;drop session</p>","!type":"fn()"},"_onKeyDown":{"!doc":"<p>Event listener for root&#8217;s <code>keydown</code> event</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onKeyPress":{"!doc":"<p>Event listener for root&#8217;s <code>keypress</code> event</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onKeyUp":{"!doc":"<p>Event listener for root&#8217;s <code>keyup</code> event</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onLongtap":{"!doc":"<p>Handler for long tap which takes care of starting the drag &amp; drop session for\ntouch interactions.</p>","!type":"fn(e: +qx.event.type.Tap)"},"_onRoll":{"!doc":"<p>Roll listener to stop scrolling on touch devices.</p>","!type":"fn(e: +qx.event.type.Roll)"},"_onTrack":{"!doc":"<p>Event handler for the track event which starts the session for mouse interactions and\nis responsible for firing the drag, dragover and dragleave event.</p>","!type":"fn(e: +qx.event.type.Track)"},"_onTrackEnd":{"!doc":"<p>Handler for the trackend event which is responsible fore firing the drop event.</p>","!type":"fn(e: +qx.event.type.Track)"},"_onTrackStart":{"!doc":"<p>Event handler for the trackstart event which stores the initial targets.</p>","!type":"fn(e: +qx.event.type.Track)"},"_onWindowBlur":{"!doc":"<p>Event listener for window&#8217;s <code>blur</code> event</p>","!type":"fn(e: +qx.event.type.Event)"},"_start":{"!doc":"<p>Helper to start the drag &amp; drop session. It is responsible for firing the\ndragstart event and attaching the key listener.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"addAction":{"!doc":"<p>Registers a supported action. One of <code>move</code>,\n<code>copy</code> or <code>alias</code>.</p>","!type":"fn(action: string)"},"addData":{"!doc":"<p>Adds data of the given type to the internal storage. The data\nis available until the <code>dragend</code> event is fired.</p>","!type":"fn(type: string, data: Object)"},"addType":{"!doc":"<p>Registers a supported type</p>","!type":"fn(type: string)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"clearSession":{"!doc":"<p>Cleans up a drag&amp;drop session when <code>dragstart</code> was fired before.</p>","!type":"fn()"},"getCurrentAction":{"!doc":"<p>Returns the currently selected action (by user keyboard modifiers)</p>","!type":"fn() -> string"},"getCurrentType":{"!doc":"<p>Returns the type which was requested last.</p>","!type":"fn() -> string"},"getCursor":{"!doc":"<p>Returns the (computed) value of the property <code>cursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn() -> Object"},"getData":{"!doc":"<p>Returns the data of the given type during the <code>drop</code> event\non the drop target. This method fires a <code>droprequest</code> at\nthe drag target which should be answered by calls to {@link #addData}.</p>","!type":"fn(type: string) -> Object"},"getDragTarget":{"!doc":"<p>Returns the widget which has been the target of the drag start.</p>","!type":"fn() -> +qx.ui.core.Widget"},"initCursor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cursor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn(value: Object) -> Object"},"isSessionActive":{"!doc":"<p>Returns if a drag session is currently active</p>","!type":"fn() -> bool"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"resetCursor":{"!doc":"<p>Resets the user value of the property <code>cursor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn()"},"setCursor":{"!doc":"<p>Sets the user value of the property <code>cursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn(value: Object) -> Object"},"supportsAction":{"!doc":"<p>Whether the current drag target supports the given action</p>","!type":"fn(type: string) -> bool"},"supportsType":{"!doc":"<p>Whether the current drag target supports the given type</p>","!type":"fn(type: string) -> bool"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Element":{"!proto":"qx.core.Object","!doc":"<p>This class supports typical <span class=\"caps\">DOM</span> element inline events like scroll,\nchange, select, ...</p>","!type":"fn()","prototype":{"_onNative":{"!doc":"<p>Default event handler.</p>","!type":"fn(nativeEvent: +Event, eventId: +Integer)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"ElementResize":{"!proto":"qx.core.Object","!doc":"<p>This handler fires a <code>resize</code> event if the size of a <span class=\"caps\">DOM</span> element\nchanges.</p>","!type":"fn()","prototype":{"_onInterval":{"!doc":"<p>Checks elements for width and height changes and fires resize event\nif needed.</p>","!type":"fn(e: +qx.event.type.Data)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Focus":{"!proto":"qx.core.Object","!doc":"<p>This handler is used to normalize all focus/activation requirements\nand normalize all cross browser quirks in this area.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Webkit and Opera (before 9.5) do not support tabIndex for all elements<br />\n(See also: <a href=\"https://bugs.webkit.org/show_bug.cgi?id=7138\">https://bugs.webkit.org/show_bug.cgi?id=7138</a>)</li>\n</ul>\n\n<ul>\n<li>TabIndex is normally 0, which means all naturally focusable elements are focusable.</li>\n<li>TabIndex > 0 means that the element is focusable and tabable</li>\n<li>TabIndex < 0 means that the element, even if naturally possible, is not focusable.</li>\n</ul>","!type":"fn()","prototype":{"__doWindowBlur":{"!doc":"<p>Helper for native event listeners to react on window blur</p>","!type":"fn()"},"__doWindowFocus":{"!doc":"<p>Helper for native event listeners to react on window focus</p>","!type":"fn()"},"__findActivatableElement":{"!doc":"<p>Returns the next activatable element. May be the element itself.\nWorks a bit different than the method {@link #__findFocusableElement}\nas it looks up for a parent which is has a keep focus flag. When\nthere is such a parent it returns null otherwise the original\nincoming element.</p>","!type":"fn(el: +Element) -> +Element"},"__findFocusableElement":{"!doc":"<p>Returns the next focusable parent element of an activated <span class=\"caps\">DOM</span> element.</p>","!type":"fn(el: +Element) -> +Element"},"__fireEvent":{"!doc":"<p>Shorthand to fire events from within this class.</p>","!type":"fn(target: +Element, related: +Element, type: string, bubbles: bool)"},"__fixFocus":{"!doc":"<p>Fix for bug #2602.</p>","!type":"fn(target: +Element) -> +Element"},"__isFocusable":{"!doc":"<p>Whether the given element is focusable. This is perfectly modeled to the\nbrowsers behavior and this way may differ in the various clients.</p>","!type":"fn(el: +Element) -> bool"},"__isSelectable":{"!doc":"<p>Whether the given el (or its content) should be selectable\nby the user.</p>","!type":"fn(node: +Element) -> bool"},"__onNativeBlur":{"!doc":"<p>Native event listener for <code>blur</code>.</p>","!type":"fn(domEvent: +Event)"},"__onNativeDragGesture":{"!doc":"<p>Native event listener for <code>draggesture</code> event\nsupported by gecko. Used to stop native drag and drop when\nselection is disabled.</p>","!type":"fn(domEvent: +Event)"},"__onNativeFocus":{"!doc":"<p>Native event listener for <code>focus</code>.</p>","!type":"fn(domEvent: +Event)"},"__onNativeFocusIn":{"!doc":"<p>Native event listener for <code>DOMFocusIn</code> or <code>focusin</code>\ndepending on the client&#8217;s engine.</p>","!type":"fn(domEvent: +Event)"},"__onNativeFocusOut":{"!doc":"<p>Native event listener for <code>DOMFocusOut</code> or <code>focusout</code>\ndepending on the client&#8217;s engine.</p>","!type":"fn(domEvent: +Event)"},"__onNativeMouseDown":{"!doc":"<p>Native event listener for <code>mousedown</code>.</p>","!type":"fn(domEvent: +Event)"},"__onNativeMouseUp":{"!doc":"<p>Native event listener for <code>mouseup</code>.</p>","!type":"fn(domEvent: +Event)"},"__onNativeSelectStart":{"!doc":"<p>Native event listener for <code>selectstart</code>.</p>","!type":"fn(domEvent: +Event)"},"_applyActive":{"!doc":"<p>Applies changes of the property value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn(value: Object, old: Object)"},"_applyFocus":{"!doc":"<p>Applies changes of the property value of the property <code>focus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>","!type":"fn(value: Object, old: Object)"},"_initObserver":{"!doc":"<p>Initializes event listeners.</p>","!type":"fn()"},"_stopObserver":{"!doc":"<p>Disconnects event listeners.</p>","!type":"fn()"},"activate":{"!doc":"<p>Activates the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element)"},"blur":{"!doc":"<p>Blurs the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"deactivate":{"!doc":"<p>Deactivates the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element)"},"focus":{"!doc":"<p>Focuses the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(element: +Element)"},"getActive":{"!doc":"<p>Returns the (computed) value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn() -> Object"},"getFocus":{"!doc":"<p>Returns the (computed) value of the property <code>focus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>","!type":"fn() -> Object"},"initActive":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>active</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn(value: Object) -> Object"},"initFocus":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>focus</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>","!type":"fn(value: Object) -> Object"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"resetActive":{"!doc":"<p>Resets the user value of the property <code>active</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn()"},"resetFocus":{"!doc":"<p>Resets the user value of the property <code>focus</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>","!type":"fn()"},"setActive":{"!doc":"<p>Sets the user value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn(value: Object) -> Object"},"setFocus":{"!doc":"<p>Sets the user value of the property <code>focus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>","!type":"fn(value: Object) -> Object"},"tryActivate":{"!doc":"<p>Tries to activate the given element. This checks whether\nthe activation is allowed first.</p>","!type":"fn(element: +Element)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Gesture":{"!proto":"qx.event.handler.GestureCore","!doc":"<p>Unified gesture event handler.</p>","!type":"fn()","prototype":{"__callBase":{"!doc":"<p>Call overriden method.</p>","!type":"fn(method: string, args: +Array)"},"_fireEvent":{"!doc":"<p>Fire a touch event with the given parameters</p>","!type":"fn(domEvent: +Event, type?: string, target?: +Element)"},"_hasIntermediaryHandler":{"!type":"fn(target: +undefined)"},"_initObserver":{"!type":"fn()"},"_stopObserver":{"!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"checkAndFireGesture":{"!doc":"<p>Checks if a gesture was made and fires the gesture event.</p>","!type":"fn(pointerEvent: +qx.event.type.Pointer, type?: string, target?: +Element)"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"GestureCore":{"!proto":"Object","!doc":"<p>Listens for (native or synthetic) pointer events and fires events\nfor gestures like &#8220;tap&#8221; or &#8220;swipe&#8221;</p>","!type":"fn()","prototype":{"__fireLongTap":{"!doc":"<p>Fires the long tap event.</p>","!type":"fn(domEvent: +Event, target: +Element)"},"__firePinch":{"!doc":"<p>Fires a pinch event.</p>","!type":"fn(domEvent: +Event, target: +Element)"},"__fireRotate":{"!doc":"<p>Fires a rotate event.</p>","!type":"fn(domEvent: +Event, target: +Element)"},"__fireTrack":{"!doc":"<p>Fires a track event.</p>","!type":"fn(type: string, domEvent: +Event, target: +Element)"},"__getSwipeGesture":{"!doc":"<p>Returns the swipe gesture when the user performed a swipe.</p>","!type":"fn(domEvent: +Event, target: +Element) -> +Map"},"__handleRollImpulse":{"!doc":"<p>Method which will be called recursively to provide a momentum scrolling.</p>","!type":"fn(deltaX: number, deltaY: number, domEvent: +Event, target: +Element, time?: number)"},"__isBelowDoubleTapDistance":{"!doc":"<p>Checks if the distance between the x1/y1 and x2/y2 is\nbelow the TAP_MAX_DISTANCE and returns the result.</p>","!type":"fn(x1: number, y1: number, x2: number, y2: number, type: string) -> bool"},"__stopLongTapTimer":{"!doc":"<p>Stops the time for the long tap event.</p>","!type":"fn(gesture: +Map)"},"_calcAngle":{"!doc":"<p>Calculates the angle of the primary and secondary pointer.</p>","!type":"fn() -> number"},"_calcDistance":{"!doc":"<p>Calculates the scaling distance between two pointers.</p>","!type":"fn() -> number"},"_fireEvent":{"!doc":"<p>Fire a gesture event with the given parameters</p>","!type":"fn(domEvent: +Event, type: string, target?: +Element)"},"_fireRoll":{"!doc":"<p>Fires a roll event.</p>","!type":"fn(domEvent: +Event, type: string, target: +Element)"},"_getDeltaCoordinates":{"!doc":"<p>Calculates the delta coordinates in relation to the position on <code>pointerstart</code> event.</p>","!type":"fn(domEvent: +Event) -> +Map"},"_hasIntermediaryHandler":{"!doc":"<p>Checks if a <span class=\"caps\">DOM</span> element located between the target of a gesture\nevent and the element this handler is attached to has a gesture\nhandler of its own.</p>","!type":"fn(target: +Element) -> bool"},"_initObserver":{"!doc":"<p>Register pointer event listeners</p>","!type":"fn()"},"_isBelowTapMaxDistance":{"!doc":"<p>Checks if the distance between the x/y coordinates of <span class=\"caps\">DOM</span> event\nexceeds TAP_MAX_DISTANCE and returns the result.</p>","!type":"fn(domEvent: +Event) -> bool"},"_onDblClick":{"!doc":"<p>Fire &#8220;tap&#8221; and &#8220;dbltap&#8221; events after a native &#8220;dblclick&#8221;\nevent to fix IE 8&#8217;s broken mouse event sequence.</p>","!type":"fn(domEvent: +Event)"},"_stopObserver":{"!doc":"<p>Remove native pointer event listeners.</p>","!type":"fn()"},"checkAndFireGesture":{"!doc":"<p>Checks if a gesture was made and fires the gesture event.</p>","!type":"fn(domEvent: +Event, type?: string, target?: +Element)"},"dispose":{"!doc":"<p>Dispose the current instance</p>","!type":"fn()"},"gestureBegin":{"!doc":"<p>Helper method for gesture start.</p>","!type":"fn(domEvent: +Event, target: +Element)"},"gestureCancel":{"!doc":"<p>Cancels the gesture if running.</p>","!type":"fn(id: number)"},"gestureFinish":{"!doc":"<p>Helper method for gesture end.</p>","!type":"fn(domEvent: +Event, target: +Element)"},"gestureMove":{"!doc":"<p>Helper method for gesture move.</p>","!type":"fn(domEvent: +Event, target: +Element)"},"isBelowTapMaxDistance":{"!doc":"<p>Checks if the distance between the x/y coordinates of touchstart/mousedown and touchmove/mousemove event\nexceeds TAP_MAX_DISTANCE and returns the result.</p>","!type":"fn(event: +Event) -> bool"},"stopMomentum":{"!doc":"<p>Stops the momentum scrolling currently running.</p>","!type":"fn(id: +Integer)"}}},"Iframe":{"!proto":"qx.core.Object","!doc":"<p>This handler provides a &#8220;load&#8221; event for iframes</p>","onevent":{"!doc":"<p>Internal function called by iframes created using {@link qx.bom.Iframe}.</p>","!type":"fn(target: +Element)"},"prototype":{"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Input":{"!proto":"qx.core.Object","!doc":"<p>This handler provides an &#8220;change&#8221; event for all form fields and an\n&#8220;input&#8221; event for form fields of type &#8220;text&#8221; and &#8220;textarea&#8221;.</p>\n\n<p>To let these events work it is needed to create the elements using\n{@link qx.bom.Input}</p>","!type":"fn()","prototype":{"_inputFix":{"!doc":"<p>Handler for fixing the different behavior when pressing the backspace or\ndelete key.</p>\n\n<p>The other browsers fire a &#8220;input&#8221; event if the user presses the backspace\nor delete key.\nIE fire the event only for other keys.</p>","!type":"fn(e: +Event, target: +Element)"},"_onChangeChecked":{"!doc":"<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>","!type":"fn(e: +Event)"},"_onChangeValue":{"!doc":"<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>","!type":"fn(e: +Event)"},"_onInput":{"!doc":"<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>","!type":"fn(e: +Event)"},"_onKeyDown":{"!doc":"<p>Key event listener for opera which recognizes if the enter key has been\npressed.</p>","!type":"fn(e: +Event)"},"_onKeyPress":{"!doc":"<p>Handler for fixing the different behavior when pressing the enter key.</p>\n\n<p>FF and Safari fire a &#8220;change&#8221; event if the user presses the enter key.\nIE and Opera fire the event only if the focus is changed.</p>","!type":"fn(e: +Event, target: +Element)"},"_onKeyUp":{"!doc":"<p>Key event listener for opera which recognizes if the enter key has been\npressed.</p>","!type":"fn(e: +Event)"},"_onProperty":{"!doc":"<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>","!type":"fn(e: +Event)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined)"}}},"Keyboard":{"!proto":"qx.core.Object","!doc":"<p>This class provides unified key event handler for Internet Explorer,\nFirefox, Opera and Safari.</p>","!type":"fn()","prototype":{"__firefoxInputFix":{"!doc":"<p>some keys like &#8220;up&#8221;, &#8220;down&#8221;, &#8220;pageup&#8221;, &#8220;pagedown&#8221; do not bubble a\n&#8220;keypress&#8221; event in Firefox. To work around this bug we attach keypress\nlisteners directly to the input events.</p>\n\n<p><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=467513\">https://bugzilla.mozilla.org/show_bug.cgi?id=467513</a></p>","!type":"fn(target: +Element, type: string, keyCode: +Integer)"},"__getEventTarget":{"!doc":"<p>Get the target element for key events</p>","!type":"fn() -> +Element"},"__onKeyPress":{"!doc":"<p>Low level key press handler</p>","!type":"fn(domEvent: +Event)"},"__onKeyUpDown":{"!doc":"<p>Low level handler for &#8220;keyup&#8221; and &#8220;keydown&#8221; events</p>","!type":"fn(domEvent: +Event)"},"_fireInputEvent":{"!doc":"<p>Fire a key input event with the given parameters</p>","!type":"fn(domEvent: +Event, charCode: +Integer)"},"_fireSequenceEvent":{"!doc":"<p>Fire a key up/down/press event with the given parameters</p>","!type":"fn(domEvent: +Event, type: string, keyIdentifier: string)"},"_idealKeyHandler":{"!doc":"<p>Key handler for an idealized browser.\nRuns after the browser specific key handlers have normalized the key events.</p>","!type":"fn(keyCode: string, charCode: string, eventType: string, domEvent: +Element)"},"_identifierToKeyCode":{"!doc":"<p>converts a key identifier back to a keycode</p>","!type":"fn(keyIdentifier: string) -> +Integer"},"_initKeyObserver":{"!doc":"<p>Initializes the native key event listeners.</p>","!type":"fn()"},"_stopKeyObserver":{"!doc":"<p>Stops the native key event listeners.</p>","!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Mouse":{"!proto":"qx.core.Object","!doc":"<p>This class provides an unified mouse event handler for Internet Explorer,\nFirefox, Opera and Safari</p>","!type":"fn()","prototype":{"__differentTargetClickFixPost":{"!doc":"<p>If the mouseup event happens on a different target than the corresponding\nmousedown event the internet explorer dispatches a click event on the\nfirst common ancestor of both targets. The presence of this click event\nis essential for the qooxdoo widget system. All other browsers don&#8217;t fire\nthe click event so it must be emulated.</p>","!type":"fn(domEvent: +Event, type: string, target: +Element)"},"__doubleClickFixPre":{"!doc":"<p>Normalizes the click sequence of double click event in the Internet\nExplorer. The normalized sequence is:</p>\n\n<p>1. mousedown\n 2. mouseup\n 3. click\n 4. mousedown  <- not fired by IE\n 5. mouseup\n 6. click  <- not fired by IE\n 7. dblclick</p>\n\n<p>Note: This fix is only applied, when the IE event model is used, otherwise\n the fix is ignored.</p>","!type":"fn(domEvent: +Event, type: string, target: +Element)"},"__fireEvent":{"!doc":"<p>Fire a mouse event with the given parameters</p>","!type":"fn(domEvent: +Event, type: string, target: +Element)"},"__rightClickFixPost":{"!doc":"<p>Normalizes the click sequence of right click events in Webkit and Opera.\nThe normalized sequence is:</p>\n\n<p>1. mousedown  <- not fired by Webkit\n 2. mouseup  <- not fired by Webkit\n 3. contextmenu <- not fired by Opera</p>","!type":"fn(domEvent: +Event, type: string, target: +Element)"},"_initButtonObserver":{"!doc":"<p>Initializes the native mouse button event listeners.</p>","!type":"fn()"},"_initMoveObserver":{"!doc":"<p>Initializes the native mouse move event listeners.</p>","!type":"fn()"},"_initWheelObserver":{"!doc":"<p>Initializes the native mouse wheel event listeners.</p>","!type":"fn()"},"_onButtonEvent":{"!doc":"<p>Global handler for all mouse button related events like &#8220;mouseup&#8221;,\n&#8220;mousedown&#8221;, &#8220;click&#8221;, &#8220;dblclick&#8221; and &#8220;contextmenu&#8221;.</p>","!type":"fn(domEvent: +Event)"},"_onMoveEvent":{"!doc":"<p>Global handler for all mouse move related events like &#8220;mousemove&#8221;,\n&#8220;mouseout&#8221; and &#8220;mouseover&#8221;.</p>","!type":"fn(domEvent: +Event)"},"_onWheelEvent":{"!doc":"<p>Global handler for the mouse wheel event.</p>","!type":"fn(domEvent: +Event)"},"_stopButtonObserver":{"!doc":"<p>Disconnects the native mouse button event listeners.</p>","!type":"fn()"},"_stopMoveObserver":{"!doc":"<p>Disconnects the native mouse move event listeners.</p>","!type":"fn()"},"_stopWheelObserver":{"!doc":"<p>Disconnects the native mouse wheel event listeners.</p>","!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"preventNextClick":{"!doc":"<p>Helper to prevent the next click.</p>","!type":"fn()"}}},"Object":{"!proto":"qx.core.Object","!doc":"<p>This class provides qooxdoo object event support.</p>","prototype":{"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Offline":{"!proto":"qx.core.Object","!doc":"<p>This class provides a handler for the online event.</p>","!type":"fn()","prototype":{"_initObserver":{"!doc":"<p>Connects the native online and offline event listeners.</p>","!type":"fn()"},"_onNative":{"!doc":"<p>Native handler function which fires a qooxdoo event.</p>","!type":"fn(domEvent: +Event)"},"_stopObserver":{"!doc":"<p>Disconnects the native online and offline event listeners.</p>","!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"isOnline":{"!doc":"<p>Returns whether the current window thinks its online or not.</p>","!type":"fn() -> bool"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Orientation":{"!proto":"qx.core.Object","!doc":"<p>This class provides a handler for the orientation event.</p>","!type":"fn()","prototype":{"_initObserver":{"!doc":"<p>Initializes the native orientation change event listeners.</p>","!type":"fn()"},"_onNative":{"!doc":"<p>Handler for the native orientation change event.</p>","!type":"fn(domEvent: +Event)"},"_onOrientationChange":{"!doc":"<p>Handler for the detection of an orientation change.</p>","!type":"fn(domEvent: +Event)"},"_stopObserver":{"!doc":"<p>Disconnects the native orientation change event listeners.</p>","!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"OrientationCore":{"!proto":"Object","!doc":"<p>Listens for native orientation change events</p>","!type":"fn()","prototype":{"_initObserver":{"!doc":"<p>Initializes the native orientation change event listeners.</p>","!type":"fn()"},"_onNative":{"!doc":"<p>Handler for the native orientation change event.</p>","!type":"fn(domEvent: +Event)"},"_stopObserver":{"!doc":"<p>Disconnects the native orientation change event listeners.</p>","!type":"fn()"}}},"Pointer":{"!proto":"qx.event.handler.PointerCore","!doc":"<p>Unified pointer event handler.</p>","!type":"fn()","prototype":{"__callBase":{"!doc":"<p>Call overriden method.</p>","!type":"fn(method: string, args: +Array)"},"_fireEvent":{"!doc":"<p>Fire a pointer event with the given parameters</p>","!type":"fn(domEvent: +Event, type?: string, target?: +Element)"},"_initPointerObserver":{"!type":"fn()"},"_onPointerEvent":{"!type":"fn(domEvent: +undefined)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"PointerCore":{"!proto":"Object","!doc":"<p>Low-level pointer event handler.</p>","!type":"fn()","prototype":{"_fireEvent":{"!doc":"<p>Fire a touch event with the given parameters</p>","!type":"fn(domEvent: +Event, type?: string, target?: +Element)"},"_initObserver":{"!doc":"<p>Register native event listeners</p>","!type":"fn(callback: fn(), useEmitter: bool)"},"_initPointerObserver":{"!doc":"<p>Adds listeners to native pointer events if supported</p>","!type":"fn()"},"_isSimulatedMouseEvent":{"!doc":"<p>Detects whether the given MouseEvent position is identical to the previously fired TouchEvent position.\nIf <code>true</code> the corresponding event can be identified as simulated.</p>","!type":"fn(x: +Integer, y: +Integer) -> bool"},"_onMouseEvent":{"!doc":"<p>Handler for touch events</p>","!type":"fn(domEvent: +Event)"},"_onPointerEvent":{"!doc":"<p>Handler for native pointer events</p>","!type":"fn(domEvent: +Event)"},"_onTouchEvent":{"!doc":"<p>Handler for touch events</p>","!type":"fn(domEvent: +Event)"},"_stopObserver":{"!doc":"<p>Removes native pointer event listeners.</p>","!type":"fn()"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"}}},"Touch":{"!proto":"qx.event.handler.TouchCore","!doc":"<p>This class provides a unified touch event handler.</p>","!type":"fn()","prototype":{"__callBase":{"!doc":"<p>Call overriden method.</p>","!type":"fn(method: string, args: +Array)"},"_fireEvent":{"!doc":"<p>Fire a touch event with the given parameters</p>","!type":"fn(domEvent: +Event, type?: string, target?: +Element, eventTypeClass?: +Class)"},"_onTouchEvent":{"!doc":"<p>Handler for the native touch events.</p>","!type":"fn(domEvent: +Event)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"TouchCore":{"!proto":"Object","!doc":"<p>Listens for native touch events and fires composite events like &#8220;tap&#8221; and\n&#8220;swipe&#8221;</p>","!type":"fn()","prototype":{"__evaluateTarget":{"!doc":"<p>This method fixes &#8220;pointer-events:none&#8221; for Internet Explorer 10.\nChecks which elements are placed to position x/y and traverses the array\ntill one element has no &#8220;pointer-events:none&#8221; inside its style attribute.</p>","!type":"fn(domEvent: +Event) -> +Element"},"_calcSingleTouchDelta":{"!doc":"<p>Calculates the delta of one single touch position relative to its position when <code>touchstart/code> event occured.</p>","!type":"fn(touch: +Event) -> +Map"},"_calcTouchesDelta":{"!doc":"<p>Calculates the delta of the touch position relative to its position when <code>touchstart/code> event occured.</p>","!type":"fn(touches: +Array) -> +Array"},"_commonTouchEventHandler":{"!doc":"<p>Called by an event handler.</p>","!type":"fn(domEvent: +Event, type?: string)"},"_detectTouchesByPointer":{"!doc":"<p>Creates an array with all current used touches out of multiple serial pointer events.\nNeeded because pointerEvents do not provide a touch list.</p>","!type":"fn(domEvent: +Event, type?: string) -> +Array"},"_fireEvent":{"!doc":"<p>Fire a touch event with the given parameters</p>","!type":"fn(domEvent: +Event, type?: string, target?: +Element)"},"_getRotationAngle":{"!doc":"<p>Calculates the rotation between two touches.</p>","!type":"fn(touch0: +Event, touch1: +Event) -> number"},"_getScalingDistance":{"!doc":"<p>Calculates the scaling distance between two touches.</p>","!type":"fn(touch0: +Event, touch1: +Event) -> number"},"_getTarget":{"!doc":"<p>Return the target of the event.</p>","!type":"fn(domEvent: +Event) -> +Element"},"_initTouchObserver":{"!doc":"<p>Initializes the native touch event listeners.</p>","!type":"fn()"},"_mapPointerEvent":{"!doc":"<p>Maps a pointer event type to the corresponding touch event type.</p>","!type":"fn(type: string) -> string"},"_onTouchEvent":{"!doc":"<p>Handler for native touch events.</p>","!type":"fn(domEvent: +Event)"},"_stopTouchObserver":{"!doc":"<p>Disconnects the native touch event listeners.</p>","!type":"fn()"},"dispose":{"!doc":"<p>Dispose this object</p>","!type":"fn()"}}},"Transition":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>This class provides support for HTML5 transition and animation events.\nCurrently only WebKit and Firefox are supported.</p>","!type":"fn()","prototype":{"_onNative":{"!doc":"<p>Global handler for the transition event.</p>","!type":"fn(domEvent: +Event)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!doc":"<p>This method is called each time an event listener, for one of the\nsupported events, is added using {@link qx.event.Manager#addListener}.</p>","!type":"fn(target: Object, type: string, capture: bool)"},"unregisterEvent":{"!doc":"<p>This method is called each time an event listener, for one of the\nsupported events, is removed by using {@link qx.event.Manager#removeListener}\nand no other event listener is listening on this type.</p>","!type":"fn(target: Object, type: string, capture: bool)"}}},"UserAction":{"!proto":"qx.core.Object","!doc":"<p>This handler accepts the useraction event fired by the keyboard, mouse and\npointer handlers after an user triggered action has occurred.</p>","!type":"fn()","prototype":{"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"Window":{"!proto":"qx.core.Object","!doc":"<p>This handler provides event for the window object.</p>","!type":"fn()","prototype":{"_initWindowObserver":{"!doc":"<p>Initializes the native window event listeners.</p>","!type":"fn()"},"_onNative":{"!doc":"<p>Native listener for all supported events.</p>","!type":"fn(e: +Event)"},"_stopWindowObserver":{"!doc":"<p>Disconnect the native window event listeners.</p>","!type":"fn()"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}}},"Idle":{"!proto":"qx.core.Object","!doc":"<p>A generic singleton that fires an &#8220;interval&#8221; event all 100 miliseconds. It\ncan be used whenever one needs to run code periodically. The main purpose of\nthis class is reduce the number of timers.</p>","!type":"fn()","prototype":{"_applyTimeoutInterval":{"!doc":"<p>Applies changes of the property value of the property <code>timeoutInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeoutInterval}.</p>","!type":"fn(value: number, old: number)"},"_onInterval":{"!doc":"<p>Fires an &#8220;interval&#8221; event</p>","!type":"fn()"},"getTimeoutInterval":{"!doc":"<p>Returns the (computed) value of the property <code>timeoutInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeoutInterval}.</p>","!type":"fn() -> Object"},"initTimeoutInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timeoutInterval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timeoutInterval}.</p>","!type":"fn(value: Object) -> Object"},"resetTimeoutInterval":{"!doc":"<p>Resets the user value of the property <code>timeoutInterval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timeoutInterval}.</p>","!type":"fn()"},"setTimeoutInterval":{"!doc":"<p>Sets the user value of the property <code>timeoutInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeoutInterval}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.event.Idle"}},"IEventDispatcher":{"!doc":"<p>All event dispatchers must implement this interface. Event dispatchers must\nregister themselves at the event Manager using\n{@link qx.event.Registration#addDispatcher}.</p>","prototype":{"canDispatchEvent":{"!doc":"<p>Whether the dispatcher is responsible for the this event.</p>","!type":"fn(target: +Element, event: +qx.event.type.Event, type: string) -> bool"},"dispatchEvent":{"!doc":"<p>This function dispatches the event to the event listeners.</p>","!type":"fn(target: +Element, event: +qx.event.type.Event, type: string)"}}},"IEventHandler":{"!doc":"<p>Event handler Interface.</p>\n\n<p>All custom event handler like mouse or keyboard event handler must implement\nthis interface.</p>","prototype":{"canHandleEvent":{"!doc":"<p>Whether the event handler can handle events of the given type. If the\nevent handler class has a static variable called <code>IGNORE_CAN_HANDLE</code>\nwith the value <code>true</code> this function is not called. Whether the\nhandler can handle the event is them only determined by the static variables\n<code>SUPPORTED_TYPES</code> and <code>TARGET_CHECK</code>.</p>","!type":"fn(target: Object, type: string) -> bool"},"registerEvent":{"!doc":"<p>This method is called each time an event listener, for one of the\nsupported events, is added using {@link qx.event.Manager#addListener}.</p>","!type":"fn(target: Object, type: string, capture: bool)"},"unregisterEvent":{"!doc":"<p>This method is called each time an event listener, for one of the\nsupported events, is removed by using {@link qx.event.Manager#removeListener}\nand no other event listener is listening on this type.</p>","!type":"fn(target: Object, type: string, capture: bool)"}}},"Manager":{"!proto":"Object","!doc":"<p>Wrapper for browser <span class=\"caps\">DOM</span> event handling for each browser window/frame.</p>","!type":"fn()","getNextUniqueId":{"!doc":"<p>Returns an unique ID which may be used in combination with a target and\na type to identify an event entry.</p>","!type":"fn() -> string"},"prototype":{"__registerAtHandler":{"!doc":"<p>This method is called each time an event listener for one of the\nsupported events is added using {qx.event.Manager#addListener}.</p>","!type":"fn(target: Object, type: string, capture: bool)"},"__unregisterAtHandler":{"!doc":"<p>This method is called each time the an event listener for one of the\nsupported events is removed by using {qx.event.Manager#removeListener}\nand no other event listener is listening on this type.</p>","!type":"fn(target: Object, type: string, capture: bool)"},"addListener":{"!doc":"<p>Add an event listener to any valid target. The event listener is passed an\ninstance of {@link qx.event.type.Event} containing all relevant information\nabout the event as parameter.</p>","!type":"fn(target: Object, type: string, listener: fn(), self?: Object, capture?: bool) -> string"},"deleteAllListeners":{"!doc":"<p>Internal helper for deleting the internal listener  data structure for\nthe given targetKey.</p>","!type":"fn(targetKey: string)"},"dispatchEvent":{"!doc":"<p>Dispatches an event object using the qooxdoo event handler system. The\nevent will only be visible in event listeners attached using\n{@link #addListener}. After dispatching the event object will be pooled\nfor later reuse or disposed.</p>","!type":"fn(target: Object, event: +qx.event.type.Event) -> bool"},"dispose":{"!doc":"<p>Dispose the event manager</p>","!type":"fn()"},"findHandler":{"!doc":"<p>Get the event handler class matching the given event target and type</p>","!type":"fn(target: Object, type: string) -> +qx.event.IEventHandler"},"getAllListeners":{"!doc":"<p>Returns all registered listeners.</p>","!type":"fn() -> +Map"},"getDispatcher":{"!doc":"<p>Returns an instance of the given dispatcher class for this manager(window).</p>","!type":"fn(clazz: +Class) -> Object"},"getHandler":{"!doc":"<p>Returns an instance of the given handler class for this manager(window).</p>","!type":"fn(clazz: +Class) -> Object"},"getListeners":{"!doc":"<p>Get a copy of all event listeners for the given combination\nof target, event type and phase.</p>\n\n<p>This method is especially useful and for event handlers to\nto query the listeners registered in the manager.</p>","!type":"fn(target: Object, type: string, capture?: bool) -> +Array"},"getWindow":{"!doc":"<p>Get the window instance the event manager is responsible for</p>","!type":"fn() -> +Window"},"getWindowId":{"!doc":"<p>Get the hashcode of the manager&#8217;s window</p>","!type":"fn() -> string"},"hasListener":{"!doc":"<p>Check whether there are one or more listeners for an event type\nregistered at the target.</p>","!type":"fn(target: Object, type: string, capture?: bool) -> bool"},"importListeners":{"!doc":"<p>Imports a list of event listeners at once. This only\nworks for newly created elements as it replaces\nall existing data structures.</p>\n\n<p>Works with a map of data. Each entry in this map should be a\nmap again with the keys <code>type</code>, <code>listener</code>,\n<code>self</code>, <code>capture</code> and an optional <code>unique</code>.</p>\n\n<p>The values are identical to the parameters of {@link #addListener}.\nFor details please have a look there.</p>","!type":"fn(target: Object, list: +Map)"},"removeAllListeners":{"!doc":"<p>Remove all event listeners, which are attached to the given event target.</p>","!type":"fn(target: Object) -> bool"},"removeListener":{"!doc":"<p>Remove an event listener from an event target.</p>","!type":"fn(target: Object, type: string, listener: fn(), self?: Object, capture?: bool) -> bool"},"removeListenerById":{"!doc":"<p>Removes an event listener from an event target by an ID returned by\n{@link #addListener}.</p>","!type":"fn(target: Object, id: string) -> bool"},"serializeListeners":{"!doc":"<p>Returns a serialized array of all events attached on the given target.</p>","!type":"fn(target: Object) -> +Map"},"toggleAttachedEvents":{"!doc":"<p>This method might be used to temporally remove all events\ndirectly attached to the given target. This do not work\nhave any effect on bubbling events normally.</p>\n\n<p>This is mainly thought for detaching events in IE, before\ncloning them. It also removes all leak scenarios\nwhen unloading a document and may be used here as well.</p>","!type":"fn(target: Object, enable: bool)"}}},"message":{"Bus":{"!proto":"qx.core.Object","!doc":"<p>A simple message bus singleton.\nThe message bus registers subscriptions and notifies subscribers when\na matching message is dispatched</p>","checkSubscription":{"!doc":"<p>checks if subscription is already present\nif you supply the callback function, match only the exact message monitor\notherwise match all monitors that have the given message</p>","!type":"fn(message: string, subscriber: fn(), context: Object) -> bool"},"dispatch":{"!doc":"<p>dispatch message and call subscribed functions</p>","!type":"fn(msg: +qx.event.message.Message) -> bool"},"dispatchByName":{"!doc":"<p>Dispatches a new message by supplying the name of the\nmessage and its data.</p>","!type":"fn(name: string, data: Object) -> bool"},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.event.message.Bus"},"getSubscriptions":{"!doc":"<p>gets the hash map of message subscriptions</p>","!type":"fn() -> +Map"},"subscribe":{"!doc":"<p>subscribes to a message</p>","!type":"fn(message: string, subscriber: fn(), context: Object) -> bool"},"unsubscribe":{"!doc":"<p>unsubscribe a listening method\nif you supply the callback function and execution context,\nremove only this exact subscription\notherwise remove all subscriptions</p>","!type":"fn(message: string, subscriber: fn(), context: Object) -> bool"},"!type":"fn()","prototype":{"__callSubscribers":{"!doc":"<p>Call subscribers with passed message.</p>","!type":"fn(subscribers: +Map, msg: +qx.event.message.Message)"},"checkSubscription":{"!doc":"<p>checks if subscription is already present\nif you supply the callback function, match only the exact message monitor\notherwise match all monitors that have the given message</p>","!type":"fn(message: string, subscriber: fn(), context: Object) -> bool"},"dispatch":{"!doc":"<p>dispatch message and call subscribed functions</p>","!type":"fn(msg: +qx.event.message.Message) -> bool"},"dispatchByName":{"!doc":"<p>Dispatches a new message by supplying the name of the\nmessage and its data.</p>","!type":"fn(name: string, data: Object) -> bool"},"getSubscriptions":{"!doc":"<p>gets the hash map of message subscriptions</p>","!type":"fn() -> +Map"},"subscribe":{"!doc":"<p>subscribes to a message</p>","!type":"fn(message: string, subscriber: fn(), context: Object) -> bool"},"unsubscribe":{"!doc":"<p>unsubscribe a listening method\nif you supply the callback function and execution context,\nremove only this exact subscription\notherwise remove all subscriptions</p>","!type":"fn(message: string, subscriber: fn(), context: Object) -> bool"}}},"Message":{"!proto":"qx.core.Object","!doc":"<p>A message to be dispatched on the message bus.</p>","!type":"fn()","prototype":{"getData":{"!doc":"<p>Returns the (computed) value of the property <code>data</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn() -> Object"},"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"getSender":{"!doc":"<p>Returns the (computed) value of the property <code>sender</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sender}.</p>","!type":"fn() -> Object"},"initData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>data</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn(value: Object) -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"initSender":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sender</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sender}.</p>","!type":"fn(value: Object) -> Object"},"resetData":{"!doc":"<p>Resets the user value of the property <code>data</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn()"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"resetSender":{"!doc":"<p>Resets the user value of the property <code>sender</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sender}.</p>","!type":"fn()"},"setData":{"!doc":"<p>Sets the user value of the property <code>data</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn(value: Object) -> Object"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"setSender":{"!doc":"<p>Sets the user value of the property <code>sender</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sender}.</p>","!type":"fn(value: Object) -> Object"}}}},"Messaging":{"!doc":"<p>Define messages to react on certain channels.</p>\n\n<p>The channel names will be used in the {@link #on} method to define handlers which will\nbe called on certain channels and routes. The {@link #emit} method can be used\nto execute a given route on a channel. {@link #onAny} defines a handler on any channel.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the messaging.</p>\n\n<pre class=\"javascript\">\n  var m = new qx.event.Messaging();\n\n  m.on(\"get\", \"/address/{id}\", function(data) {\n    var id = data.params.id; // 1234\n    // do something with the id...\n  },this);\n\n  m.emit(\"get\", \"/address/1234\");\n</pre>","!type":"fn()","prototype":{"_addListener":{"!doc":"<p>Adds a listener for a certain channel.</p>","!type":"fn(channel: string, type: string, handler: fn(), scope?: Object) -> string"},"_emit":{"!doc":"<p>Executes a certain channel with a given path. Informs all\nroute handlers that match with the path.</p>","!type":"fn(channel: string, path: string, params: +Map, customData: Object)"},"_emitListeners":{"!doc":"<p>Executes all given listener for a certain channel. Checks all listeners if they match\nwith the given path and executes the stored handler of the matching route.</p>","!type":"fn(channel: string, path: string, listeners: +Map, params: +Map, customData: Object) -> bool"},"_emitRoute":{"!doc":"<p>Executes a certain listener. Checks if the listener matches the given path and\nexecutes the stored handler of the route.</p>","!type":"fn(channel: string, path: string, listener: +Map, params: +Map, customData: Object) -> bool"},"emit":{"!doc":"<p>Sends a message on the given channel and informs all matching route handlers.</p>","!type":"fn(channel: string, path: string, params: +Map, customData: Object)"},"has":{"!doc":"<p>Checks if a listener is registered for the given path in the given channel.</p>","!type":"fn(channel: string, path: string) -> bool"},"on":{"!doc":"<p>Adds a route handler for the given channel. The route is called\nif the {@link #emit} method finds a match.</p>","!type":"fn(channel: string, type: string, handler: fn(), scope?: Object) -> string"},"onAny":{"!doc":"<p>Adds a handler for the &#8220;any&#8221; channel. The &#8220;any&#8221; channel is called\nbefore all other channels.</p>","!type":"fn(type: string, handler: fn(), scope?: Object) -> string"},"remove":{"!doc":"<p>Removes a registered listener by the given id.</p>","!type":"fn(id: string)"}}},"Pool":{"!proto":"qx.util.ObjectPool","!doc":"<p>Central instance pool for event objects. All event objects dispatched by the\nevent loader are pooled using this class.</p>","!type":"fn()","getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.event.Pool"}},"Registration":{"!doc":"<p>Wrapper for browser generic event handling.</p>\n\n<p>Supported events differ from target to target. Generally the handlers\nin {@link qx.event.handler} defines the available features.</p>","addDispatcher":{"!doc":"<p>Register an event dispatcher.</p>","!type":"fn(dispatcher: +qx.event.IEventDispatcher, priority: +Integer)"},"addHandler":{"!doc":"<p>Register an event handler.</p>","!type":"fn(handler: +qx.event.IEventHandler)"},"addListener":{"!doc":"<p>Add an event listener to a <span class=\"caps\">DOM</span> target. The event listener is passed an\ninstance of {@link qx.event.type.Event} containing all relevant information\nabout the event as parameter.</p>","!type":"fn(target: Object, type: string, listener: fn(), self?: Object, capture: bool) -> Object"},"createEvent":{"!doc":"<p>Get an event instance of the given class, which can be dispatched using\nan event manager. The created events must be initialized using\n{@link qx.event.type.Event#init}.</p>","!type":"fn(type: string, clazz?: Object, args?: +Array) -> +qx.event.type.Event"},"deleteAllListeners":{"!doc":"<p>Internal helper for deleting the listeners map used during shutdown.</p>","!type":"fn(target: Object)"},"dispatchEvent":{"!doc":"<p>Dispatch an event object on the given target.</p>\n\n<p>It is normally better to use {@link #fireEvent} because it uses\nthe event pooling and is quite handy otherwise as well. After dispatching\nthe event object will be pooled for later reuse or disposed.</p>","!type":"fn(target: Object, event: +qx.event.type.Event) -> bool"},"fireEvent":{"!doc":"<p>Create an event object and dispatch it on the given target.</p>","!type":"fn(target: Object, type: string, clazz?: +Class, args?: +Array) -> bool"},"fireNonBubblingEvent":{"!doc":"<p>Create an event object and dispatch it on the given target.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required.</p>","!type":"fn(target: Object, type: string, clazz?: +Class, args?: +Array) -> bool"},"getDispatchers":{"!doc":"<p>Get a list of registered event dispatchers.</p>","!type":"fn() -> +qx.event.IEventDispatcher"},"getHandlers":{"!doc":"<p>Get a list of registered event handlers.</p>","!type":"fn() -> +qx.event.IEventHandler"},"getManager":{"!doc":"<p>Get an instance of the event manager, which can handle events for the\ngiven target.</p>","!type":"fn(target: Object) -> +qx.event.Manager"},"hasListener":{"!doc":"<p>Check whether there are one or more listeners for an event type\nregistered at the target.</p>","!type":"fn(target: Object, type: string, capture?: bool) -> bool"},"removeAllListeners":{"!doc":"<p>Remove all event listeners, which are attached to the given event target.</p>","!type":"fn(target: Object) -> bool"},"removeListener":{"!doc":"<p>Remove an event listener from an event target.</p>\n\n<p>Note: All registered event listeners will automatically at page unload\n  so it is not necessary to detach events in the destructor.</p>","!type":"fn(target: Object, type: string, listener: fn(), self?: Object, capture: bool) -> bool"},"removeListenerById":{"!doc":"<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>","!type":"fn(target: Object, id: Object) -> bool"},"removeManager":{"!doc":"<p>Removes a manager for a specific window from the list.</p>\n\n<p>Normally only used when the manager gets disposed through\nan unload event of the attached window.</p>","!type":"fn(mgr: +qx.event.Manager)"},"serializeListeners":{"!doc":"<p>Returns a serialized array of all events attached on the given target.</p>","!type":"fn(target: Object) -> +Map"}},"Timer":{"!proto":"qx.core.Object","!doc":"<p>Global timer support.</p>\n\n<p>This class can be used to periodically fire an event. This event can be\nused to simulate e.g. a background task. The static method\n{@link #once} is a special case. It will call a function deferred after a\ngiven timeout.</p>","!type":"fn()","once":{"!doc":"<p>Start a function after a given timeout.</p>","!type":"fn(func: fn(), obj: Object, timeout: number) -> +qx.event.Timer"},"prototype":{"_applyEnabled":{"!doc":"<p>Apply the enabled state of the timer.</p>","!type":"fn(value: Object, old: Object)"},"_applyInterval":{"!doc":"<p>Apply the interval of the timer.</p>","!type":"fn(value: Object, old: Object)"},"_oninterval":{"!doc":"<p>timer callback</p>","!type":"fn()"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getInterval":{"!doc":"<p>Returns the (computed) value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn() -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>interval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetInterval":{"!doc":"<p>Resets the user value of the property <code>interval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn()"},"restart":{"!doc":"<p>Restart the timer.\nThis makes it possible to change the interval of a running timer.</p>","!type":"fn()"},"restartWith":{"!doc":"<p>Restart the timer. with a given interval.</p>","!type":"fn(interval: +Integer)"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setInterval":{"!doc":"<p>Sets the user value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"start":{"!doc":"<p>Start the timer</p>","!type":"fn()"},"startWith":{"!doc":"<p>Start the timer with a given interval</p>","!type":"fn(interval: +Integer)"},"stop":{"!doc":"<p>Stop the timer.</p>","!type":"fn()"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"}}},"type":{"Data":{"!proto":"qx.event.type.Event","!doc":"<p>Event object for data holding event or data changes.</p>","prototype":{"clone":{"!doc":"<p>Get a copy of this object</p>","!type":"fn(embryo?: +qx.event.type.Data) -> +qx.event.type.Data"},"getData":{"!doc":"<p>The new data of the event sending this data event.\nThe return data type is the same as the event data type.</p>","!type":"fn() -> Object"},"getOldData":{"!doc":"<p>The old data of the event sending this data event.\nThe return data type is the same as the event data type.</p>","!type":"fn() -> Object"},"init":{"!doc":"<p>Initializes an event object.</p>","!type":"fn(data: Object, old?: Object, cancelable?: bool) -> +qx.event.type.Data"}}},"dom":{"Custom":{"!proto":"Object","!doc":"<p>Cross-browser custom UI event</p>","!type":"fn()","prototype":{"_createEvent":{"!doc":"<p>Creates a custom event object</p>","!type":"fn() -> +Event"},"_initEvent":{"!doc":"<p>Initializes a custom event</p>","!type":"fn(domEvent: +Event, customProps: +Map)"}}},"Pointer":{"!proto":"qx.event.type.dom.Custom","!doc":"<p>Synthetic pointer event</p>","getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getPointerType":{"!doc":"<p>Returns the device type which the event triggered. This can be one\nof the following strings: <code>mouse</code>, <code>pen</code>\nor <code>touch</code>.</p>","!type":"fn() -> string"},"getScreenLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getScreenTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getViewportLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"getViewportTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"normalize":{"!doc":"<p>Manipulates the event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event)"},"!type":"fn()","prototype":{"_createEvent":{"!type":"fn()"},"_initEvent":{"!type":"fn(domEvent: +undefined, customProps: +undefined)"}}}},"Dom":{"!proto":"qx.event.type.Native","!doc":"<p>Common base class for all <span class=\"caps\">DOM</span> events.</p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getModifiers":{"!doc":"<p>Return in a bit map, which modifier keys are pressed. The constants\n{@link #SHIFT_MASK}, {@link #CTRL_MASK}, {@link #ALT_MASK} and\n{@link #META_MASK} define the bit positions of the corresponding keys.</p>","!type":"fn() -> +Integer"},"isAltPressed":{"!doc":"<p>Returns whether the alt key is pressed.</p>","!type":"fn() -> bool"},"isCtrlOrCommandPressed":{"!doc":"<p>Returns whether the ctrl key or (on the Mac) the command key is pressed.</p>","!type":"fn() -> bool"},"isCtrlPressed":{"!doc":"<p>Returns whether the ctrl key is pressed.</p>","!type":"fn() -> bool"},"isMetaPressed":{"!doc":"<p>Returns whether the meta key is pressed.</p>","!type":"fn() -> bool"},"isShiftPressed":{"!doc":"<p>Returns whether the shift key is pressed.</p>","!type":"fn() -> bool"}}},"Drag":{"!proto":"qx.event.type.Event","!doc":"<p>Event object class for drag events</p>","prototype":{"addAction":{"!doc":"<p>Used during <code>dragstart</code> listener to\ninform the manager about supported drop actions.</p>","!type":"fn(action: string)"},"addData":{"!doc":"<p>Adds data of the given type to the internal storage. The data\nis available until the <code>dragend</code> event is fired.</p>","!type":"fn(type: string, data: Object)"},"addType":{"!doc":"<p>Used during <code>dragstart</code> listener to\ninform the manager about supported data types.</p>","!type":"fn(type: string)"},"clone":{"!type":"fn(embryo: +undefined)"},"getCurrentAction":{"!doc":"<p>Returns the currently selected action. Depends on the\nsupported actions of the source target and the modification\nkeys pressed by the user.</p>\n\n<p>Used in the <code>droprequest</code> listener.</p>","!type":"fn() -> string"},"getCurrentType":{"!doc":"<p>Returns the type which was requested last, to be used\nin the <code>droprequest</code> listener.</p>","!type":"fn() -> string"},"getData":{"!doc":"<p>Returns the data of the given type. Used in the <code>drop</code> listener.</p>","!type":"fn(type: string) -> Object"},"getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> +Integer"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> +Integer"},"getDragTarget":{"!doc":"<p>Returns the target which has been initially tapped on.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getManager":{"!doc":"<p>Returns the drag&amp;drop event handler responsible for the target</p>","!type":"fn() -> +qx.event.handler.DragDrop"},"init":{"!doc":"<p>Initialize the fields of the event. The event must be initialized before\nit can be dispatched.</p>","!type":"fn(cancelable?: bool, originalEvent: +qx.event.type.Track) -> +qx.event.type.Event"},"stopSession":{"!doc":"<p>Stops the drag&amp;drop session and fires a <code>dragend</code> event.</p>","!type":"fn()"},"supportsAction":{"!doc":"<p>Whether the given action is supported by the drag\ntarget (source target).</p>\n\n<p>This is used in the event listeners for <code>dragover</code>\nor <code>dragdrop</code>.</p>","!type":"fn(action: string) -> bool"},"supportsType":{"!doc":"<p>Whether the given type is supported by the drag\ntarget (source target).</p>\n\n<p>This is used in the event listeners for <code>dragover</code>\nor <code>dragdrop</code>.</p>","!type":"fn(type: string) -> bool"}}},"Event":{"!proto":"qx.core.Object","!doc":"<p>Basic event object.</p>\n\n<p>Please note:\nEvent objects are only valid during the event dispatch. After the dispatch\nevent objects are pooled or disposed. If you want to safe a reference to an\nevent instance use the {@link #clone} method.</p>\n\n<p>The interface is modeled after the <span class=\"caps\">DOM</span> level 2 event interface:\n<a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface\">http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface</a></p>","prototype":{"clone":{"!doc":"<p>Create a clone of the event object, which is not automatically disposed\nor pooled after an event dispatch.</p>","!type":"fn(embryo?: +qx.event.type.Event) -> +qx.event.type.Event"},"getBubbles":{"!doc":"<p>Check whether or not the event is a bubbling event. If the event can\nbubble the value is true, else the value is false.</p>","!type":"fn() -> bool"},"getCurrentTarget":{"!doc":"<p>Get the event target node whose event listeners are currently being\nprocessed. This is particularly useful during event capturing and\nbubbling.</p>","!type":"fn() -> +Element"},"getDefaultPrevented":{"!doc":"<p>Get whether the default action has been prevented</p>","!type":"fn() -> bool"},"getEventPhase":{"!doc":"<p>Used to indicate which phase of event flow is currently being evaluated.</p>","!type":"fn() -> +Integer"},"getOriginalTarget":{"!doc":"<p>Get the original event target. This is only configured\nfor events which are fired by another event (often when\nthe target should be reconfigured for another view) e.g.\nlow-level <span class=\"caps\">DOM</span> event to widget event.</p>","!type":"fn() -> +Element"},"getPropagationStopped":{"!doc":"<p>Get whether further event propagation has been stopped.</p>","!type":"fn() -> bool"},"getRelatedTarget":{"!doc":"<p>Get the related event target. This is only configured for\nevents which also had an influences on another element e.g.\nmouseover/mouseout, focus/blur, ...</p>","!type":"fn() -> +Element"},"getTarget":{"!doc":"<p>Returns the event target to which the event was originally\ndispatched.</p>","!type":"fn() -> +Element"},"getTimeStamp":{"!doc":"<p>The time (in milliseconds relative to the epoch) at which the event was created.</p>","!type":"fn() -> +Integer"},"getType":{"!doc":"<p>The name of the event</p>","!type":"fn() -> string"},"init":{"!doc":"<p>Initialize the fields of the event. The event must be initialized before\nit can be dispatched.</p>","!type":"fn(canBubble?: bool, cancelable?: bool) -> +qx.event.type.Event"},"isCancelable":{"!doc":"<p>Get whether the event is cancelable</p>","!type":"fn() -> bool"},"preventDefault":{"!doc":"<p>Prevent the default action of cancelable events, e.g. opening the context\nmenu, ...</p>","!type":"fn()"},"setBubbles":{"!doc":"<p>Set whether the event bubbles.</p>","!type":"fn(bubbles: bool)"},"setCancelable":{"!doc":"<p>Set whether the event is cancelable</p>","!type":"fn(cancelable: bool)"},"setCurrentTarget":{"!doc":"<p>Override current target.</p>","!type":"fn(currentTarget: +Element)"},"setEventPhase":{"!doc":"<p>Override the event phase</p>","!type":"fn(eventPhase: +Integer)"},"setOriginalTarget":{"!doc":"<p>Override original target.</p>","!type":"fn(originalTarget: +Element)"},"setRelatedTarget":{"!doc":"<p>Override related target.</p>","!type":"fn(relatedTarget: +Element)"},"setTarget":{"!doc":"<p>Override event target.</p>","!type":"fn(target: +Element)"},"setType":{"!doc":"<p>Override the event type</p>","!type":"fn(type: string)"},"stop":{"!doc":"<p>Stops event from all further processing. Execute this when the\ncurrent handler should have &#8220;exclusive rights&#8221; to the event\nand no further reaction by anyone else should happen.</p>","!type":"fn()"},"stopPropagation":{"!doc":"<p>This method is used to prevent further propagation of an event during event\nflow. If this method is called by any event listener the event will cease\npropagating through the tree. The event will complete dispatch to all listeners\non the current event target before event flow stops.</p>","!type":"fn()"}}},"Focus":{"!proto":"qx.event.type.Event","!doc":"<p>Common base class for all focus events.</p>","prototype":{"init":{"!doc":"<p>Initialize the fields of the event. The event must be initialized before\nit can be dispatched.</p>","!type":"fn(target: Object, relatedTarget: Object, canBubble?: bool) -> +qx.event.type.Event"}}},"GeoPosition":{"!proto":"qx.event.type.Event","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>GeoPosition event used by GeoLocation class.</p>","!type":"fn()","prototype":{"getAccuracy":{"!doc":"<p>Returns the (computed) value of the property <code>accuracy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #accuracy}.</p>","!type":"fn() -> Object"},"getAltitude":{"!doc":"<p>Returns the (computed) value of the property <code>altitude</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #altitude}.</p>","!type":"fn() -> Object"},"getAltitudeAccuracy":{"!doc":"<p>Returns the (computed) value of the property <code>altitudeAccuracy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #altitudeAccuracy}.</p>","!type":"fn() -> Object"},"getHeading":{"!doc":"<p>Returns the (computed) value of the property <code>heading</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #heading}.</p>","!type":"fn() -> Object"},"getLatitude":{"!doc":"<p>Returns the (computed) value of the property <code>latitude</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #latitude}.</p>","!type":"fn() -> Object"},"getLongitude":{"!doc":"<p>Returns the (computed) value of the property <code>longitude</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #longitude}.</p>","!type":"fn() -> Object"},"getSpeed":{"!doc":"<p>Returns the (computed) value of the property <code>speed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #speed}.</p>","!type":"fn() -> Object"},"getTimestamp":{"!doc":"<p>Returns the (computed) value of the property <code>timestamp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timestamp}.</p>","!type":"fn() -> Object"},"init":{"!doc":"<p>Initialize the fields of the event.</p>","!type":"fn(position: +Map)"},"initAccuracy":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>accuracy</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #accuracy}.</p>","!type":"fn(value: Object) -> Object"},"initAltitude":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>altitude</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #altitude}.</p>","!type":"fn(value: Object) -> Object"},"initAltitudeAccuracy":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>altitudeAccuracy</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #altitudeAccuracy}.</p>","!type":"fn(value: Object) -> Object"},"initHeading":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>heading</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #heading}.</p>","!type":"fn(value: Object) -> Object"},"initLatitude":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>latitude</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #latitude}.</p>","!type":"fn(value: Object) -> Object"},"initLongitude":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>longitude</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #longitude}.</p>","!type":"fn(value: Object) -> Object"},"initSpeed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>speed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #speed}.</p>","!type":"fn(value: Object) -> Object"},"initTimestamp":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timestamp</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timestamp}.</p>","!type":"fn(value: Object) -> Object"},"resetAccuracy":{"!doc":"<p>Resets the user value of the property <code>accuracy</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #accuracy}.</p>","!type":"fn()"},"resetAltitude":{"!doc":"<p>Resets the user value of the property <code>altitude</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #altitude}.</p>","!type":"fn()"},"resetAltitudeAccuracy":{"!doc":"<p>Resets the user value of the property <code>altitudeAccuracy</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #altitudeAccuracy}.</p>","!type":"fn()"},"resetHeading":{"!doc":"<p>Resets the user value of the property <code>heading</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #heading}.</p>","!type":"fn()"},"resetLatitude":{"!doc":"<p>Resets the user value of the property <code>latitude</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #latitude}.</p>","!type":"fn()"},"resetLongitude":{"!doc":"<p>Resets the user value of the property <code>longitude</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #longitude}.</p>","!type":"fn()"},"resetSpeed":{"!doc":"<p>Resets the user value of the property <code>speed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #speed}.</p>","!type":"fn()"},"resetTimestamp":{"!doc":"<p>Resets the user value of the property <code>timestamp</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timestamp}.</p>","!type":"fn()"},"setAccuracy":{"!doc":"<p>Sets the user value of the property <code>accuracy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #accuracy}.</p>","!type":"fn(value: Object) -> Object"},"setAltitude":{"!doc":"<p>Sets the user value of the property <code>altitude</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #altitude}.</p>","!type":"fn(value: Object) -> Object"},"setAltitudeAccuracy":{"!doc":"<p>Sets the user value of the property <code>altitudeAccuracy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #altitudeAccuracy}.</p>","!type":"fn(value: Object) -> Object"},"setHeading":{"!doc":"<p>Sets the user value of the property <code>heading</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #heading}.</p>","!type":"fn(value: Object) -> Object"},"setLatitude":{"!doc":"<p>Sets the user value of the property <code>latitude</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #latitude}.</p>","!type":"fn(value: Object) -> Object"},"setLongitude":{"!doc":"<p>Sets the user value of the property <code>longitude</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #longitude}.</p>","!type":"fn(value: Object) -> Object"},"setSpeed":{"!doc":"<p>Sets the user value of the property <code>speed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #speed}.</p>","!type":"fn(value: Object) -> Object"},"setTimestamp":{"!doc":"<p>Sets the user value of the property <code>timestamp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timestamp}.</p>","!type":"fn(value: Object) -> Object"}}},"KeyInput":{"!proto":"qx.event.type.Dom","!doc":"<p>Keyboard input event object.</p>\n\n<p>the interface of this class is based on the <span class=\"caps\">DOM</span> Level 3 keyboard event\ninterface: <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\">http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents</a></p>","prototype":{"clone":{"!type":"fn(embryo: +undefined)"},"getChar":{"!doc":"<p>Returns the pressed character</p>","!type":"fn() -> string"},"getCharCode":{"!doc":"<p>Unicode number of the pressed character.</p>","!type":"fn() -> +Integer"},"init":{"!doc":"<p>Initialize the fields of the event.</p>","!type":"fn(domEvent: +Event, target: Object, charCode: +Integer) -> +qx.event.type.KeyInput"}}},"KeySequence":{"!proto":"qx.event.type.Dom","!doc":"<p>Keyboard event object.</p>\n\n<p>the interface of this class is based on the <span class=\"caps\">DOM</span> Level 3 keyboard event\ninterface: <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\">http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents</a></p>","prototype":{"clone":{"!type":"fn(embryo: +undefined)"},"getKeyCode":{"!doc":"<p>Returns the native keyCode and is best used on keydown/keyup events to\ncheck which physical key was pressed.\nDon&#8217;t use this on keypress events because it&#8217;s erroneous and\ninconsistent across browsers. But it can be used to detect which key is\nexactly pressed (e.g. for num pad keys).\nIn any regular case, you should use {@link #getKeyIdentifier} which\ntakes care of all cross browser stuff.</p>\n\n<p>The key codes are not character codes, they are just <span class=\"caps\">ASCII</span> codes to\nidentify the keyboard (or other input devices) keys.</p>","!type":"fn() -> number"},"getKeyIdentifier":{"!doc":"<p>Identifier of the pressed key. This property is modeled after the <em>KeyboardEvent.keyIdentifier</em> property\nof the W3C <span class=\"caps\">DOM</span> 3 event specification\n(<a href=\"http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier\">http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier</a>).</p>\n\n<p>Printable keys are represented by an unicode string, non-printable keys\nhave one of the following values:</p>\n\n<table>\n<tr><th>Backspace</th><td>The Backspace (Back) key.</td></tr>\n<tr><th>Tab</th><td>The Horizontal Tabulation (Tab) key.</td></tr>\n<tr><th>Space</th><td>The Space (Spacebar) key.</td></tr>\n<tr><th>Enter</th><td>The Enter key. Note: This key identifier is also used for the Return (Macintosh numpad) key.</td></tr>\n<tr><th>Shift</th><td>The Shift key.</td></tr>\n<tr><th>Control</th><td>The Control (Ctrl) key.</td></tr>\n<tr><th>Alt</th><td>The Alt (Menu) key.</td></tr>\n<tr><th>CapsLock</th><td>The CapsLock key</td></tr>\n<tr><th>Meta</th><td>The Meta key. (Apple Meta and Windows key)</td></tr>\n<tr><th>Escape</th><td>The Escape (Esc) key.</td></tr>\n<tr><th>Left</th><td>The Left Arrow key.</td></tr>\n<tr><th>Up</th><td>The Up Arrow key.</td></tr>\n<tr><th>Right</th><td>The Right Arrow key.</td></tr>\n<tr><th>Down</th><td>The Down Arrow key.</td></tr>\n<tr><th>PageUp</th><td>The Page Up key.</td></tr>\n<tr><th>PageDown</th><td>The Page Down (Next) key.</td></tr>\n<tr><th>End</th><td>The End key.</td></tr>\n<tr><th>Home</th><td>The Home key.</td></tr>\n<tr><th>Insert</th><td>The Insert (Ins) key. (Does not fire in Opera/Win)</td></tr>\n<tr><th>Delete</th><td>The Delete (Del) Key.</td></tr>\n<tr><th>F1</th><td>The F1 key.</td></tr>\n<tr><th>F2</th><td>The F2 key.</td></tr>\n<tr><th>F3</th><td>The F3 key.</td></tr>\n<tr><th>F4</th><td>The F4 key.</td></tr>\n<tr><th>F5</th><td>The F5 key.</td></tr>\n<tr><th>F6</th><td>The F6 key.</td></tr>\n<tr><th>F7</th><td>The F7 key.</td></tr>\n<tr><th>F8</th><td>The F8 key.</td></tr>\n<tr><th>F9</th><td>The F9 key.</td></tr>\n<tr><th>F10</th><td>The F10 key.</td></tr>\n<tr><th>F11</th><td>The F11 key.</td></tr>\n<tr><th>F12</th><td>The F12 key.</td></tr>\n<tr><th>NumLock</th><td>The Num Lock key.</td></tr>\n<tr><th>PrintScreen</th><td>The Print Screen (PrintScrn, SnapShot) key.</td></tr>\n<tr><th>Scroll</th><td>The scroll lock key</td></tr>\n<tr><th>Pause</th><td>The pause/break key</td></tr>\n<tr><th>Win</th><td>The Windows Logo key</td></tr>\n<tr><th>Apps</th><td>The Application key (Windows Context Menu)</td></tr>\n</table>","!type":"fn() -> string"},"init":{"!doc":"<p>Initialize the fields of the event.</p>","!type":"fn(domEvent: +Event, target: Object, identifier: string) -> +qx.event.type.KeySequence"},"isPrintable":{"!doc":"<p>Checks whether the pressed key is printable.</p>","!type":"fn() -> bool"}}},"Mouse":{"!proto":"qx.event.type.Dom","!doc":"<p>Mouse event object.</p>\n\n<p>the interface of this class is based on the <span class=\"caps\">DOM</span> Level 2 mouse event\ninterface: <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents\">http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents</a></p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getButton":{"!doc":"<p>During mouse events caused by the depression or release of a mouse button,\nthis method can be used to check which mouse button changed state.</p>\n\n<p>Only internet explorer can compute the button during mouse move events. For\nall other browsers the button only contains sensible data during\n&#8220;click&#8221; events like &#8220;click&#8221;, &#8220;dblclick&#8221;, &#8220;mousedown&#8221;, &#8220;mouseup&#8221; or &#8220;contextmenu&#8221;.</p>\n\n<p>But still, browsers act different on click:</p>\n\n<pre>\n<- = left mouse button\n-> = right mouse button\n^  = middle mouse button\n\nBrowser | click, dblclick | contextmenu\n---------------------------------------\nFirefox | <- ^ ->         | ->\nChrome  | <- ^            | ->\nSafari  | <- ^            | ->\nIE      | <- (^ is <-)    | ->\nOpera   | <-              | -> (twice)\n</pre>","!type":"fn() -> string"},"getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> +Integer"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> +Integer"},"getRelatedTarget":{"!doc":"<p>Get a secondary event target related to an UI event. This attribute is\nused with the mouseover event to indicate the event target which the\npointing device exited and with the mouseout event to indicate the\nevent target which the pointing device entered.</p>","!type":"fn() -> +Element"},"getScreenLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> +Integer"},"getScreenTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> +Integer"},"getViewportLeft":{"!doc":"<p>Get the he horizontal coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> +Integer"},"getViewportTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> +Integer"},"isLeftPressed":{"!doc":"<p>Whether the left button is pressed</p>","!type":"fn() -> bool"},"isMiddlePressed":{"!doc":"<p>Whether the middle button is pressed</p>","!type":"fn() -> bool"},"isRightPressed":{"!doc":"<p>Whether the right button is pressed</p>","!type":"fn() -> bool"},"stop":{"!type":"fn()"}}},"MouseWheel":{"!proto":"qx.event.type.Mouse","!doc":"<p>Mouse wheel event object.</p>","prototype":{"getWheelDelta":{"!doc":"<p>Get the amount the wheel has been scrolled</p>","!type":"fn(axis?: string) -> +Integer"},"stop":{"!type":"fn()"}}},"Native":{"!proto":"qx.event.type.Event","!doc":"<p>Common base class for all native events (DOM events, IO events, ...).</p>","prototype":{"_cloneNativeEvent":{"!doc":"<p>Clone the native browser event</p>","!type":"fn(nativeEvent: +Event, clone: Object) -> Object"},"clone":{"!type":"fn(embryo: +undefined)"},"getNativeEvent":{"!doc":"<p>Get the native browser event object of this event.</p>","!type":"fn() -> +Event"},"getReturnValue":{"!doc":"<p>Retrieves the event&#8217;s return value.</p>","!type":"fn() -> string"},"init":{"!doc":"<p>Initialize the fields of the event. The event must be initialized before\nit can be dispatched.</p>","!type":"fn(nativeEvent: +Event, target?: Object, relatedTarget?: Object, canBubble?: bool, cancelable?: bool) -> +qx.event.type.Event"},"preventDefault":{"!doc":"<p>Prevent browser default behavior, e.g. opening the context menu, ...</p>","!type":"fn()"},"setReturnValue":{"!doc":"<p>Sets the event&#8217;s return value. If the return value is set in a\nbeforeunload event, the user will be asked by the browser, whether\nhe really wants to leave the page. The return string will be displayed in\nthe message box.</p>","!type":"fn(returnValue?: string)"}}},"Orientation":{"!proto":"qx.event.type.Event","!doc":"<p>Orientation event object.</p>","prototype":{"clone":{"!doc":"<p>Get a copy of this object</p>","!type":"fn(embryo?: +qx.event.type.Orientation) -> +qx.event.type.Orientation"},"getOrientation":{"!doc":"<p>Returns the current orientation of the viewport in degree.</p>\n\n<p>All possible values and their meaning:</p>\n\n<ul>\n<li><code>0</code>: &#8220;Portrait&#8221;</li>\n<li><code>-90</code>: &#8220;Landscape (right, screen turned clockwise)&#8221;</li>\n<li><code>90</code>: &#8220;Landscape (left, screen turned counterclockwise)&#8221;</li>\n<li><code>180</code>: &#8220;Portrait (upside-down portrait)&#8221;</li>\n</ul>","!type":"fn() -> +Integer"},"init":{"!doc":"<p>Initialize the fields of the event. The event must be initialized before\nit can be dispatched.</p>","!type":"fn(orientation: string, mode: string) -> +qx.event.type.Orientation"},"isLandscape":{"!doc":"<p>Whether the viewport orientation is currently in landscape mode.</p>","!type":"fn() -> bool"},"isPortrait":{"!doc":"<p>Whether the viewport orientation is currently in portrait mode.</p>","!type":"fn() -> bool"}}},"Pinch":{"!proto":"qx.event.type.Pointer","!doc":"<p>Pinch is a multi pointer gesture fired when two finger moved towards\nor away from each other. It contains the scaling factor of the pinch.</p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getScale":{"!doc":"<p>Returns the calculated scale of this event.</p>","!type":"fn() -> +Float"}}},"Pointer":{"!proto":"qx.event.type.Mouse","!doc":"<p>Pointer event object.</p>\n\n<p>the interface of this class is based on the pointer event interface:\n<a href=\"http://www.w3.org/TR/pointerevents/\">http://www.w3.org/TR/pointerevents/</a></p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getDocumentLeft":{"!type":"fn()"},"getDocumentTop":{"!type":"fn()"},"getHeight":{"!doc":"<p>Returns the contact geometry in it&#8217;s height.</p>","!type":"fn() -> number"},"getOriginalTarget":{"!type":"fn()"},"getPointerId":{"!doc":"<p>Returns a unique identified for the pointer. This id is\nunique for all active pointers.</p>","!type":"fn() -> number"},"getPointerType":{"!doc":"<p>Returns the device type which the event triggered. This can be one\nof the following strings: <code>mouse</code>, <code>wheel</code>,\n<code>pen</code> or <code>touch</code>.</p>","!type":"fn() -> string"},"getPressure":{"!doc":"<p>Returns the pressure of the pointer in a rage from 0 to 1.</p>","!type":"fn() -> number"},"getTiltX":{"!doc":"<p>Returns the plane angle in degrees between the Y-Z plane and the\nplane containing e.g. the stylus and the Y axis.</p>","!type":"fn() -> number"},"getTiltY":{"!doc":"<p>Returns the plane angle in degrees between the X-Z plane and the\nplane containing e.g. the stylus and the X axis.</p>","!type":"fn() -> number"},"getWidth":{"!doc":"<p>Returns the contact geometry in it&#8217;s width.</p>","!type":"fn() -> number"},"isPrimary":{"!doc":"<p>Returns whether the pointer is the primary pointer.</p>","!type":"fn() -> bool"}}},"Rest":{"!proto":"qx.event.type.Data","!doc":"<p>Rest event object.</p>","prototype":{"clone":{"!doc":"<p>Get a copy of this object</p>","!type":"fn(embryo?: +qx.event.type.Data) -> +qx.event.type.Data"},"getAction":{"!doc":"<p>Returns the (computed) value of the property <code>action</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn() -> Object"},"getId":{"!doc":"<p>Returns the (computed) value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn() -> Object"},"getPhase":{"!doc":"<p>Returns the (computed) value of the property <code>phase</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #phase}.</p>","!type":"fn() -> Object"},"getRequest":{"!doc":"<p>Returns the (computed) value of the property <code>request</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn() -> Object"},"init":{"!doc":"<p>Initializes an event object.</p>","!type":"fn(data: Object, old?: Object, cancelable?: bool, request: +qx.io.request.AbstractRequest, action: string, phase: string) -> +qx.event.type.Data"},"initAction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>action</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn(value: Object) -> Object"},"initId":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>id</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: Object) -> Object"},"initPhase":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>phase</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #phase}.</p>","!type":"fn(value: Object) -> Object"},"initRequest":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>request</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn(value: Object) -> Object"},"resetAction":{"!doc":"<p>Resets the user value of the property <code>action</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn()"},"resetId":{"!doc":"<p>Resets the user value of the property <code>id</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn()"},"resetPhase":{"!doc":"<p>Resets the user value of the property <code>phase</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #phase}.</p>","!type":"fn()"},"resetRequest":{"!doc":"<p>Resets the user value of the property <code>request</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn()"},"setAction":{"!doc":"<p>Sets the user value of the property <code>action</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn(value: Object) -> Object"},"setId":{"!doc":"<p>Sets the user value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: Object) -> Object"},"setPhase":{"!doc":"<p>Sets the user value of the property <code>phase</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #phase}.</p>","!type":"fn(value: Object) -> Object"},"setRequest":{"!doc":"<p>Sets the user value of the property <code>request</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn(value: Object) -> Object"}}},"Roll":{"!proto":"qx.event.type.Pointer","!doc":"<p>Roll event object.</p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getDelta":{"!doc":"<p>Returns a map with the calculated delta coordinates and axis,\nrelative to the last <code>roll</code> event.</p>","!type":"fn() -> +Map"},"getMomentum":{"!doc":"<p>Boolean flag to indicate if this event was triggered by a momentum.</p>","!type":"fn() -> bool"},"stop":{"!type":"fn()"},"stopMomentum":{"!doc":"<p>Stops the momentum events.</p>","!type":"fn()"}}},"Rotate":{"!proto":"qx.event.type.Pointer","!doc":"<p>Rotate is a multi pointer gesture fired when two finger moved around\na single point. It contains the angle of the rotation.</p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getAngle":{"!doc":"<p>Returns a number with the current calculated angle between the primary and secondary active pointers.</p>","!type":"fn() -> number"}}},"Swipe":{"!proto":"qx.event.type.Pointer","!doc":"<p>Swipe is a single pointer gesture fired when a pointer is moved in one direction.\nIt contains some additional data like the primary axis, the velocity and the distance.</p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getAxis":{"!doc":"<p>Returns whether the performed swipe was on the x or y axis.</p>","!type":"fn() -> string"},"getDirection":{"!doc":"<p>Returns the direction of the performed swipe in reference to the axis.\ny = up / down\nx = left / right</p>","!type":"fn() -> string"},"getDistance":{"!doc":"<p>Returns the distance of the performed swipe.</p>","!type":"fn() -> +Integer"},"getDuration":{"!doc":"<p>Returns the duration the performed swipe took.</p>","!type":"fn() -> +Integer"},"getStartTime":{"!doc":"<p>Returns the start time of the performed swipe.</p>","!type":"fn() -> +Integer"},"getVelocity":{"!doc":"<p>Returns the velocity of the performed swipe.</p>","!type":"fn() -> number"}}},"Tap":{"!proto":"qx.event.type.Pointer","!doc":"<p>Tap is a single pointer gesture fired when one pointer goes down and up on\nthe same location.</p>"},"Touch":{"!proto":"qx.event.type.Dom","!doc":"<p>Touch event object.</p>\n\n<p>For more information see:\n    <a href=\"https://developer.apple.com/library/safari/#documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html\">https://developer.apple.com/library/safari/#documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html</a></p>","prototype":{"__getEventSpecificTouch":{"!doc":"<p>Returns an event specific touch on the target element. This function is\nused as the &#8220;touchend&#8221; event only offers Touch objects in the\nchangedTouches array.</p>","!type":"fn(touchIndex?: +Integer) -> Object"},"__getEventSpecificTouches":{"!doc":"<p>Returns the event specific touches on the target element. This function\nis used as the &#8220;touchend&#8221; event only offers Touch objects in the\nchangedTouches array.</p>","!type":"fn() -> Object"},"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"_isTouchEnd":{"!doc":"<p>Indicates if the event occurs during the &#8220;touchend&#8221; phase. Needed to\ndetermine the event specific touches. Override this method if you derive\nfrom this class and want to indicate that the specific event occurred\nduring the &#8220;touchend&#8221; phase.</p>","!type":"fn() -> bool"},"getAllTouches":{"!doc":"<p>Returns an array of native Touch objects representing all current\ntouches on the document.\nReturns an empty array for the &#8220;touchend&#8221; event.</p>","!type":"fn() -> Object"},"getChangedTargetTouches":{"!doc":"<p>Returns an array of native Touch objects representing all touches of\nthe target element that changed in this event.</p>\n\n<p>On the &#8220;touchstart&#8221; event the array contains all touches that were\nadded to the target element.\nOn the &#8220;touchmove&#8221; event the array contains all touches that were\nmoved on the target element.\nOn the &#8220;touchend&#8221; event the array contains all touches that used\nto be on the target element.</p>","!type":"fn() -> Object"},"getDelta":{"!doc":"<p>Returns an array with the calculated delta coordinates of all active touches,\nrelative to the position on <code>touchstart</code> event.</p>","!type":"fn() -> +Array"},"getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"getIdentifier":{"!doc":"<p>Returns the unique identifier for a certain touch object.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"getRotation":{"!doc":"<p>Returns the delta of the rotation since the start of the event, in degrees.\nInitial value is 0.0\nClockwise > 0\nCounter-clockwise < 0.</p>","!type":"fn() -> +Float"},"getScale":{"!doc":"<p>Returns the distance between two fingers since the start of the event.\nThe distance is a multiplier of the initial distance.\nInitial value: 1.0.\nGestures:\n< 1.0, pinch close / zoom out.\n> 1.0, pinch open / to zoom in.</p>","!type":"fn() -> +Float"},"getScreenLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"getScreenTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"getTargetTouches":{"!doc":"<p>Returns an array of native Touch objects representing all touches\nassociated with the event target element.\nReturns an empty array for the &#8220;touchend&#8221; event.</p>","!type":"fn() -> Object"},"getViewportLeft":{"!doc":"<p>Get the the horizontal coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"getViewportTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn(touchIndex?: +Integer) -> +Integer"},"isMultiTouch":{"!doc":"<p>Checks whether more than one touch is associated with the event target\nelement.</p>","!type":"fn() -> bool"},"stop":{"!type":"fn()"}}},"Track":{"!proto":"qx.event.type.Pointer","!doc":"<p>Track is a single pointer gesture and contains of a three vent types:\n<code>trackstart</code>, <code>track</code> and <code>trackend</code>. These\nevents will be fired when a pointer grabs an item and moves the pointer on it.</p>","prototype":{"_cloneNativeEvent":{"!type":"fn(nativeEvent: +undefined, clone: +undefined)"},"getDelta":{"!doc":"<p>Returns a map with the calculated delta coordinates and axis,\nrelative to the position on <code>trackstart</code> event.</p>","!type":"fn() -> +Map"}}}},"util":{"Keyboard":{"!doc":"<p>Utilities for working with character codes and key identifiers</p>","charCodeToIdentifier":{"!doc":"<p>converts a character code to the corresponding identifier</p>","!type":"fn(charCode: string) -> string"},"isIdentifiableKeyCode":{"!doc":"<p>Check whether the keycode can be reliably detected in keyup/keydown events</p>","!type":"fn(keyCode: string) -> bool"},"isNonPrintableKeyCode":{"!doc":"<p>Checks whether the keyCode represents a non printable key</p>","!type":"fn(keyCode: string) -> bool"},"isPrintableKeyIdentifier":{"!doc":"<p>Checks whether a given string is a printable keyIdentifier.</p>","!type":"fn(keyIdentifier: string) -> bool"},"isValidKeyIdentifier":{"!doc":"<p>Checks whether a given string is a valid keyIdentifier</p>","!type":"fn(keyIdentifier: string) -> bool"},"keyCodeToIdentifier":{"!doc":"<p>converts a keyboard code to the corresponding identifier</p>","!type":"fn(keyCode: +Integer) -> string"}}}},"html":{"Blocker":{"!proto":"qx.html.Element","!doc":"<p>The blocker element is used to block interaction with the application.</p>\n\n<p>It is usually transparent or semi-transparent and blocks all events from\nthe underlying elements.</p>","!type":"fn()","prototype":{"__refreshCursor":{"!doc":"<p>Refreshes the cursor by setting it to <code>null</code> and then to the\nold value.</p>","!type":"fn()"},"_stopPropagation":{"!doc":"<p>Stop the event propagation from the passed event.</p>","!type":"fn(e: +qx.event.type.Mouse)"}}},"Canvas":{"!proto":"qx.html.Element","!doc":"<p>Managed wrapper for the <span class=\"caps\">HTML</span> canvas tag.</p>","!type":"fn()","prototype":{"_createDomElement":{"!type":"fn()"},"getCanvas":{"!doc":"<p>Get the canvas element [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvas\">W3C-HMTL5</a>]</p>","!type":"fn() -> +Element"},"getContext2d":{"!doc":"<p>Get the canvas&#8217; 2D rendering context\n[<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].\nAll drawing operations are performed on this context.</p>","!type":"fn() -> +CanvasRenderingContext2D"},"getHeight":{"!doc":"<p>Get the height attribute of the canvas element</p>","!type":"fn() -> +Integer"},"getWidth":{"!doc":"<p>Get the width attribute of the canvas element</p>","!type":"fn() -> +Integer"},"setHeight":{"!doc":"<p>Set the height attribute of the canvas element. This property controls the\nsize of the canvas coordinate space.</p>","!type":"fn(height: +Integer)"},"setWidth":{"!doc":"<p>Set the width attribute of the canvas element. This property controls the\nsize of the canvas coordinate space.</p>","!type":"fn(width: +Integer)"}}},"Element":{"!proto":"qx.core.Object","!doc":"<p>High-performance, high-level <span class=\"caps\">DOM</span> element creation and management.</p>\n\n<p>Includes support for <span class=\"caps\">HTML</span> and style attributes. Elements also have\ngot a powerful children and visibility management.</p>\n\n<p>Processes <span class=\"caps\">DOM</span> insertion and modification with advanced logic\nto reduce the real transactions.</p>\n\n<p>From the view of the parent you can use the following children management\nmethods:\n{@link #getChildren}, {@link #indexOf}, {@link #hasChild}, {@link #add},\n{@link #addAt}, {@link #remove}, {@link #removeAt}, {@link #removeAll}</p>\n\n<p>Each child itself also has got some powerful methods to control its\nposition:\n{@link #getParent}, {@link #free},\n{@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n{@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},</p>","!type":"fn()","__getCaptureElement":{"!doc":"<p>Get the mouse capture element</p>","!type":"fn() -> +Element"},"__getFocusHandler":{"!doc":"<p>Get the focus handler</p>","!type":"fn() -> +qx.event.handler.Focus"},"__willBecomeInvisible":{"!doc":"<p>Whether the given <span class=\"caps\">DOM</span> element will become invisible after the flush</p>","!type":"fn(domElement: +Element) -> bool"},"_scheduleFlush":{"!doc":"<p>Schedule a deferred element queue flush. If the widget subsystem is used\nthis method gets overwritten by {@link qx.ui.core.queue.Manager}.</p>","!type":"fn(job: string)"},"flush":{"!doc":"<p>Flush the global modified list</p>","!type":"fn()"},"prototype":{"__addChildHelper":{"!doc":"<p>Internal helper for all children addition needs</p>","!type":"fn(child: Object)"},"__flush":{"!doc":"<p>Syncs data of an HtmlElement object to the <span class=\"caps\">DOM</span>.</p>","!type":"fn()"},"__moveChildHelper":{"!doc":"<p>Internal helper for all children move needs</p>","!type":"fn(child: +qx.html.Element)"},"__onScroll":{"!doc":"<p>Handler for the scroll-event</p>","!type":"fn(e: +qx.event.type.Native)"},"__performAction":{"!doc":"<p>Takes the action to process as argument and queues this action if the\nunderlying <span class=\"caps\">DOM</span> element is not yet created.</p>","!type":"fn(action: string, args: +Array)"},"__removeChildHelper":{"!doc":"<p>Internal helper for all children removal needs</p>","!type":"fn(child: +qx.html.Element)"},"__willBeSeeable":{"!doc":"<p>Walk up the internal children hierarchy and\nlook if one of the children is marked as root.</p>\n\n<p>This method is quite performance hungry as it\nreally walks up recursively.</p>","!type":"fn() -> bool"},"_applyProperty":{"!doc":"<p>Applies a special property with the given value.</p>\n\n<p>This property apply routine can be easily overwritten and\nextended by sub classes to add new low level features which\nare not easily possible using styles and attributes.</p>","!type":"fn(name: string, value: Object) -> +qx.html.Element"},"_copyData":{"!doc":"<p>Copies data between the internal representation and the <span class=\"caps\">DOM</span>. This\nsimply copies all the data and only works well directly after\nelement creation. After this the data must be synced using {@link #_syncData}</p>","!type":"fn(fromMarkup: bool)"},"_createDomElement":{"!doc":"<p>Internal helper to generate the <span class=\"caps\">DOM</span> element</p>","!type":"fn() -> +Element"},"_getProperty":{"!doc":"<p>Get the value of the given misc.</p>","!type":"fn(key: string) -> Object"},"_insertChildren":{"!doc":"<p>Append all child nodes to the <span class=\"caps\">DOM</span>\nelement. This function is used when the element is initially\ncreated. After this initial apply {@link #_syncChildren} is used\ninstead.</p>","!type":"fn()"},"_removeProperty":{"!doc":"<p>Removes the given misc</p>","!type":"fn(key: string, direct?: bool) -> +qx.html.Element"},"_scheduleChildrenUpdate":{"!doc":"<p>Add the element to the global modification list.</p>","!type":"fn()"},"_setProperty":{"!doc":"<p>Set up the given property.</p>","!type":"fn(key: string, value: Object, direct?: bool) -> +qx.html.Element"},"_syncChildren":{"!doc":"<p>Syncronize internal children hierarchy to the <span class=\"caps\">DOM</span>. This is used\nfor further runtime updates after the element has been created\ninitially.</p>","!type":"fn()"},"_syncData":{"!doc":"<p>Syncronizes data between the internal representation and the <span class=\"caps\">DOM</span>. This\nis the counterpart of {@link #_copyData} and is used for further updates\nafter the element has been created.</p>","!type":"fn()"},"activate":{"!doc":"<p>Mark this element to get activated on the next flush of the queue</p>","!type":"fn()"},"add":{"!doc":"<p>Append all given children at the end of this element.</p>","!type":"fn(varargs: +qx.html.Element) -> +qx.html.Element"},"addAt":{"!doc":"<p>Inserts a new element into this element at the given position.</p>","!type":"fn(child: +qx.html.Element, index: +Integer) -> +qx.html.Element"},"addClass":{"!doc":"<p>Adds a css class to the element.</p>","!type":"fn(name: string)"},"addListener":{"!doc":"<p>Adds an event listener to the element.</p>","!type":"fn(type: string, listener: fn(), self?: Object, capture?: bool) -> Object"},"blur":{"!doc":"<p>Mark this element to get blurred on the next flush of the queue</p>","!type":"fn()"},"capture":{"!doc":"<p>Captures all mouse events to this element</p>","!type":"fn(containerCapture?: bool)"},"clearTextSelection":{"!doc":"<p>Clears the selection of the element.</p>\n\n<p>This method only works if the underlying <span class=\"caps\">DOM</span> element is already created.</p>","!type":"fn()"},"deactivate":{"!doc":"<p>Mark this element to get deactivated on the next flush of the queue</p>","!type":"fn()"},"disableScrolling":{"!doc":"<p>Disables browser-native scrolling</p>","!type":"fn()"},"enableScrolling":{"!doc":"<p>Re-enables browser-native scrolling</p>","!type":"fn()"},"exclude":{"!doc":"<p>Marks the element as excluded which means it will be removed\nfrom the <span class=\"caps\">DOM</span> and ignored for updates until it gets included again.</p>","!type":"fn() -> +qx.html.Element"},"fadeIn":{"!doc":"<p>Fades in the element.</p>","!type":"fn(duration: number) -> +qx.bom.element.AnimationHandle"},"fadeOut":{"!doc":"<p>Fades out the element.</p>","!type":"fn(duration: number) -> +qx.bom.element.AnimationHandle"},"focus":{"!doc":"<p>Focus this element.</p>\n\n<p>If the underlaying <span class=\"caps\">DOM</span> element is not yet created, the\nfocus is queued for processing after the element creation.</p>","!type":"fn()"},"free":{"!doc":"<p>Remove self from the current parent.</p>","!type":"fn() -> +qx.html.Element"},"getAllStyles":{"!doc":"<p>Returns a map of all styles. Do not modify the result map!</p>","!type":"fn() -> +Map"},"getAttribute":{"!doc":"<p>Get the value of the given attribute.</p>","!type":"fn(key: string) -> Object"},"getChild":{"!doc":"<p>Get a child element at the given index</p>","!type":"fn(index: +Integer) -> +qx.html.Element"},"getChildren":{"!doc":"<p>Returns a copy of the internal children structure.</p>\n\n<p>Please do not modify the array in place. If you need\nto work with the data in such a way make yourself\na copy of the data first.</p>","!type":"fn() -> +Array"},"getDomElement":{"!doc":"<p>Returns the <span class=\"caps\">DOM</span> element (if created). Please use this with caution.\nIt is better to make all changes to the object itself using the public\n<span class=\"caps\">API</span> rather than to the underlying <span class=\"caps\">DOM</span> element.</p>","!type":"fn() -> +Element"},"getListeners":{"!doc":"<p>Serializes and returns all event listeners attached to this element</p>","!type":"fn() -> +Map"},"getNodeName":{"!doc":"<p>Returns the nodeName of the <span class=\"caps\">DOM</span> element.</p>","!type":"fn() -> string"},"getParent":{"!doc":"<p>Returns the parent of this element.</p>","!type":"fn() -> +qx.html.Element"},"getScrollX":{"!doc":"<p>Get the horizontal scroll position.</p>","!type":"fn() -> +Integer"},"getScrollY":{"!doc":"<p>Get the vertical scroll position.</p>","!type":"fn() -> +Integer"},"getStyle":{"!doc":"<p>Get the value of the given style attribute.</p>","!type":"fn(key: string) -> Object"},"getTextSelection":{"!doc":"<p>Get the selection of the element.</p>\n\n<p>If the underlaying <span class=\"caps\">DOM</span> element is not yet created, this methods returns\na null value.</p>","!type":"fn() -> string"},"getTextSelectionEnd":{"!doc":"<p>Get the end of the selection of the element.</p>\n\n<p>If the underlaying <span class=\"caps\">DOM</span> element is not yet created, this methods returns\na null value.</p>","!type":"fn() -> +Integer"},"getTextSelectionLength":{"!doc":"<p>Get the length of selection of the element.</p>\n\n<p>If the underlaying <span class=\"caps\">DOM</span> element is not yet created, this methods returns\na null value.</p>","!type":"fn() -> +Integer"},"getTextSelectionStart":{"!doc":"<p>Get the start of the selection of the element.</p>\n\n<p>If the underlaying <span class=\"caps\">DOM</span> element is not yet created, this methods returns\na null value.</p>","!type":"fn() -> +Integer"},"hasChild":{"!doc":"<p>Whether the given element is a child of this element.</p>","!type":"fn(child: +qx.html.Element) -> bool"},"hasChildren":{"!doc":"<p>Returns whether the element has any child nodes</p>","!type":"fn() -> bool"},"hasListener":{"!doc":"<p>Check if there are one or more listeners for an event type.</p>","!type":"fn(type: string, capture?: bool) -> bool"},"hide":{"!doc":"<p>Marks the element as hidden which means it will kept in <span class=\"caps\">DOM</span> (if it\nis already there, but configured hidden using a <span class=\"caps\">CSS</span> style of display=none).</p>","!type":"fn() -> +qx.html.Element"},"include":{"!doc":"<p>Marks the element as included which means it will be moved into\nthe <span class=\"caps\">DOM</span> again and synced with the internal data representation.</p>","!type":"fn() -> +qx.html.Element"},"indexOf":{"!doc":"<p>Find the position of the given child</p>","!type":"fn(child: +qx.html.Element) -> +Integer"},"insertAfter":{"!doc":"<p>Insert self after the given (related) element</p>","!type":"fn(rel: +qx.html.Element) -> +qx.html.Element"},"insertBefore":{"!doc":"<p>Insert self before the given (related) element</p>","!type":"fn(rel: +qx.html.Element) -> +qx.html.Element"},"insertInto":{"!doc":"<p>Insert self into the given parent. Normally appends self to the end,\nbut optionally a position can be defined. With index <code>0</code> it\nwill be inserted at the begin.</p>","!type":"fn(parent: +qx.html.Element, index?: +Integer) -> +qx.html.Element"},"isFocusable":{"!doc":"<p>Whether the element is focusable (or will be when created)</p>","!type":"fn() -> bool"},"isIncluded":{"!doc":"<p>Whether the element is part of the <span class=\"caps\">DOM</span></p>","!type":"fn() -> bool"},"isNativelyFocusable":{"!doc":"<p>Whether the element is natively focusable (or will be when created)</p>\n\n<p>This ignores the configured tabIndex.</p>","!type":"fn() -> bool"},"isVisible":{"!doc":"<p>Whether the element is visible.</p>\n\n<p>Please note: This does not control the visibility or parent inclusion recursively.</p>","!type":"fn() -> bool"},"moveAfter":{"!doc":"<p>Move self after the given (related) child.</p>","!type":"fn(rel: +qx.html.Element) -> +qx.html.Element"},"moveBefore":{"!doc":"<p>Move self before the given (related) child.</p>","!type":"fn(rel: +qx.html.Element) -> +qx.html.Element"},"moveTo":{"!doc":"<p>Move self to the given index in the current parent.</p>","!type":"fn(index: +Integer) -> +qx.html.Element"},"releaseCapture":{"!doc":"<p>Releases this element from a previous {@link #capture} call</p>","!type":"fn()"},"remove":{"!doc":"<p>Removes all given children</p>","!type":"fn(childs: +qx.html.Element) -> +qx.html.Element"},"removeAll":{"!doc":"<p>Remove all children from this element.</p>","!type":"fn() -> +qx.html.Element"},"removeAt":{"!doc":"<p>Removes the child at the given index</p>","!type":"fn(index: +Integer) -> +qx.html.Element"},"removeAttribute":{"!doc":"<p>Removes the given attribute</p>","!type":"fn(key: string, direct?: bool) -> +qx.html.Element"},"removeClass":{"!doc":"<p>Removes a <span class=\"caps\">CSS</span> class from the current element.</p>","!type":"fn(name: string)"},"removeListener":{"!doc":"<p>Removes an event listener from the element.</p>","!type":"fn(type: string, listener: fn(), self: Object, capture?: bool) -> +qx.html.Element"},"removeListenerById":{"!doc":"<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>","!type":"fn(id: Object) -> +qx.html.Element"},"removeStyle":{"!doc":"<p>Removes the given style attribute</p>","!type":"fn(key: string, direct?: bool) -> +qx.html.Element"},"scrollChildIntoViewX":{"!doc":"<p>Scrolls the given child element into view. Only scrolls children.\nDo not influence elements on top of this element.</p>\n\n<p>If the element is currently invisible it gets scrolled automatically\nat the next time it is visible again (queued).</p>","!type":"fn(elem: +qx.html.Element, align?: string, direct?: bool)"},"scrollChildIntoViewY":{"!doc":"<p>Scrolls the given child element into view. Only scrolls children.\nDo not influence elements on top of this element.</p>\n\n<p>If the element is currently invisible it gets scrolled automatically\nat the next time it is visible again (queued).</p>","!type":"fn(elem: +qx.html.Element, align?: string, direct?: bool)"},"scrollToX":{"!doc":"<p>Scrolls the element to the given left position.</p>","!type":"fn(x: +Integer, lazy?: bool)"},"scrollToY":{"!doc":"<p>Scrolls the element to the given top position.</p>","!type":"fn(y: +Integer, lazy?: bool)"},"setAttribute":{"!doc":"<p>Set up the given attribute</p>","!type":"fn(key: string, value: Object, direct?: bool) -> +qx.html.Element"},"setAttributes":{"!doc":"<p>Convenience method to modify a set of attributes at once.</p>","!type":"fn(map: +Map, direct?: bool) -> +qx.html.Element"},"setNodeName":{"!doc":"<p>Sets the nodeName of the <span class=\"caps\">DOM</span> element.</p>","!type":"fn(name: string)"},"setRoot":{"!doc":"<p>Sets the element&#8217;s root flag, which indicates\nwhether the element should be a root element or not.</p>","!type":"fn(root: bool)"},"setSelectable":{"!doc":"<p>Set whether the element is selectable. It uses the qooxdoo attribute\nqxSelectable with the values &#8216;on&#8217; or &#8216;off&#8217;.\nIn webkit, a special css property will be used (-webkit-user-select).</p>","!type":"fn(value: bool)"},"setStyle":{"!doc":"<p>Set up the given style attribute</p>","!type":"fn(key: string, value: Object, direct?: bool) -> +qx.html.Element"},"setStyles":{"!doc":"<p>Convenience method to modify a set of styles at once.</p>","!type":"fn(map: +Map, direct?: bool) -> +qx.html.Element"},"setTextSelection":{"!doc":"<p>Set the selection of the element with the given start and end value.\nIf no end value is passed the selection will extend to the end.</p>\n\n<p>This method only works if the underlying <span class=\"caps\">DOM</span> element is already created.</p>","!type":"fn(start: +Integer, end: +Integer)"},"show":{"!doc":"<p>Marks the element as visible which means that a previously applied\n<span class=\"caps\">CSS</span> style of display=none gets removed and the element will inserted\ninto the <span class=\"caps\">DOM</span>, when this had not already happened before.</p>","!type":"fn() -> +qx.html.Element"},"useElement":{"!doc":"<p>Uses an existing element instead of creating one. This may be interesting\nwhen the <span class=\"caps\">DOM</span> element is directly needed to add content etc.</p>","!type":"fn(elem: +Element)"},"useMarkup":{"!doc":"<p>Uses existing markup for this element. This is mainly used\nto insert pre-built markup blocks into the element hierarchy.</p>","!type":"fn(html: string) -> +Element"}}},"Flash":{"!proto":"qx.html.Element","!doc":"<p>Managed wrapper for the <span class=\"caps\">HTML</span> Flash tag.</p>","!type":"fn()","prototype":{"_createDomElement":{"!type":"fn()"},"createFlash":{"!doc":"<p>Creates the <span class=\"caps\">DOM</span> Flash movie with all needed attributes and\n<code>FlashVars</code>.</p>","!type":"fn()"},"getAttributes":{"!doc":"<p>Returns the attributes for the Flash <span class=\"caps\">DOM</span> element.</p>","!type":"fn() -> +Map"},"getFlashElement":{"!doc":"<p>Return the created <span class=\"caps\">DOM</span> Flash movie.</p>","!type":"fn() -> +Element"},"getParams":{"!doc":"<p>Returns the params for the Flash <span class=\"caps\">DOM</span> element.</p>","!type":"fn() -> +Map"},"getVariables":{"!doc":"<p>Returns the <code>FlashVars</code> for the Flash movie.</p>","!type":"fn() -> +Map"},"setAttribute":{"!doc":"<p>Set an attribute for the Flash <span class=\"caps\">DOM</span> element.</p>","!type":"fn(key: string, value: string)"},"setId":{"!doc":"<p>Set the <span class=\"caps\">URL</span> from the Flash movie to display.</p>","!type":"fn(value: string)"},"setParam":{"!doc":"<p>Set the param for the Flash <span class=\"caps\">DOM</span> element, also called attribute.</p>","!type":"fn(key: string, value: string)"},"setSource":{"!doc":"<p>Set the <span class=\"caps\">URL</span> from the Flash movie to display.</p>","!type":"fn(value: string)"},"setVariables":{"!doc":"<p>Set the <code>FlashVars</code> to pass variables to the Flash movie.</p>","!type":"fn(value: +Map)"}}},"Iframe":{"!proto":"qx.html.Element","!doc":"<p>A cross browser iframe instance.</p>","!type":"fn()","prototype":{"__onNavigate":{"!doc":"<p>Handle user navigation. Sync actual <span class=\"caps\">URL</span> of iframe with source property.</p>","!type":"fn(e: +qx.event.type.Data)"},"_applyProperty":{"!type":"fn(name: +undefined, value: +undefined)"},"_createDomElement":{"!type":"fn()"},"getBody":{"!doc":"<p>Get the <span class=\"caps\">HTML</span> body element of the iframe.</p>","!type":"fn() -> +Element"},"getDocument":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> document object of an iframe.</p>","!type":"fn() -> +Document"},"getName":{"!doc":"<p>Get the current name.</p>","!type":"fn() -> string"},"getSource":{"!doc":"<p>Get the current source.</p>","!type":"fn() -> string"},"getWindow":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> window object of an iframe.</p>","!type":"fn() -> +Window"},"reload":{"!doc":"<p>Reloads iframe</p>","!type":"fn()"},"setName":{"!doc":"<p>Sets iframe&#8217;s name attribute to given value</p>","!type":"fn(name: string) -> +qx.html.Iframe"},"setSource":{"!doc":"<p>Sets iframe&#8217;s source attribute to given value</p>","!type":"fn(source: string) -> +qx.html.Iframe"}}},"Image":{"!proto":"qx.html.Element","!doc":"<p>This is a simple image class using the low level image features of\nqooxdoo and wraps it for the qx.html layer.</p>","prototype":{"_applyProperty":{"!type":"fn(name: +undefined, value: +undefined)"},"_copyData":{"!type":"fn(fromMarkup: +undefined)"},"_createDomElement":{"!type":"fn()"},"_removeProperty":{"!type":"fn(key: +undefined, direct: +undefined)"},"getScale":{"!doc":"<p>Returns whether the image is scaled or not.</p>","!type":"fn() -> bool"},"getSource":{"!doc":"<p>Returns the image source.</p>","!type":"fn() -> string"},"resetSource":{"!doc":"<p>Resets the current source to null which means that no image\nis shown anymore.</p>","!type":"fn() -> +qx.html.Image"},"setPadding":{"!doc":"<p>Maps padding to background-position if the widget is rendered as a\nbackground image</p>","!type":"fn(paddingLeft: +Integer, paddingTop: +Integer)"},"setScale":{"!doc":"<p>Whether the image should be scaled or not.</p>","!type":"fn(value: bool) -> +qx.html.Label"},"setSource":{"!doc":"<p>Configures the image source</p>","!type":"fn(value: bool) -> +qx.html.Label"}}},"Input":{"!proto":"qx.html.Element","!doc":"<p>A Input wrap any valid <span class=\"caps\">HTML</span> input element and make it accessible\nthrough the normalized qooxdoo element interface.</p>","!type":"fn()","prototype":{"_applyProperty":{"!type":"fn(name: +undefined, value: +undefined)"},"_createDomElement":{"!type":"fn()"},"getValue":{"!doc":"<p>Get the current value.</p>","!type":"fn() -> string"},"getWrap":{"!doc":"<p>Gets the text wrap behavior of a text area element.</p>\n\n<p>This property uses the style property &#8220;wrap&#8221; (IE) respectively &#8220;whiteSpace&#8221;</p>","!type":"fn() -> bool"},"setEnabled":{"!doc":"<p>Set the input element enabled / disabled.\nWebkit needs a special treatment because the set color of the input\nfield changes automatically. Therefore, we use\n<code>-webkit-user-modify: read-only</code> and\n<code>-webkit-user-select: none</code>\nfor disabling the fields in webkit. All other browsers use the disabled\nattribute.</p>","!type":"fn(value: bool)"},"setValue":{"!doc":"<p>Sets the value of the input element.</p>","!type":"fn(value: Object) -> +qx.html.Input"},"setWrap":{"!doc":"<p>Sets the text wrap behavior of a text area element.</p>\n\n<p>This property uses the style property &#8220;wrap&#8221; (IE) respectively &#8220;whiteSpace&#8221;</p>","!type":"fn(wrap: bool, direct?: bool) -> +qx.html.Input"}}},"Label":{"!proto":"qx.html.Element","!doc":"<p>A cross browser label instance with support for rich <span class=\"caps\">HTML</span> and text labels.</p>\n\n<p>Text labels supports ellipsis to reduce the text width.</p>\n\n<p>The mode can be changed through the method {@link #setRich}\nwhich accepts a boolean value. The default mode is &#8220;text&#8221; which is\na good choice because it has a better performance.</p>","prototype":{"_applyProperty":{"!type":"fn(name: +undefined, value: +undefined)"},"_copyData":{"!type":"fn(fromMarkup: +undefined)"},"_createDomElement":{"!type":"fn()"},"getValue":{"!doc":"<p>Get the current content.</p>","!type":"fn() -> string"},"setRich":{"!doc":"<p>Toggles between rich <span class=\"caps\">HTML</span> mode and pure text mode.</p>","!type":"fn(value: bool) -> +qx.html.Label"},"setValue":{"!doc":"<p>Sets the <span class=\"caps\">HTML</span>/text content depending on the content mode.</p>","!type":"fn(value: string) -> +qx.html.Label"}}},"Root":{"!proto":"qx.html.Element","!doc":"<p>This is the root element for a set of {@link qx.html.Element}s.</p>\n\n<p>To make other elements visible these elements must be inserted\ninto an root element at any level.</p>\n\n<p>A root element uses an existing <span class=\"caps\">DOM</span> element where is assumed that\nthis element is always visible. In the easiest case, the root element\nis identical to the document&#8217;s body.</p>","!type":"fn()","prototype":{"useElement":{"!doc":"<p>Sets the element to an already existing node. It will be\nassumed that this <span class=\"caps\">DOM</span> element is already visible e.g.\nlike a normal displayed element in the document&#8217;s body.</p>","!type":"fn(elem: +Element)"}}}},"Interface":{"!doc":"<p>This class is used to define interfaces (similar to Java interfaces).</p>\n\n<p>See the description of the {@link #define} method how an interface is\ndefined.</p>","__checkEvents":{"!doc":"<p>Assert events</p>","!type":"fn(clazz: +Class, iface: +Interface, shouldThrow: bool) -> bool"},"__checkMembers":{"!doc":"<p>Assert members</p>","!type":"fn(object: +qx.core.Object, clazz: +Class, iface: +Interface, wrap?: bool, shouldThrow: bool) -> bool"},"__checkProperties":{"!doc":"<p>Assert properties</p>","!type":"fn(clazz: +Class, iface: +Interface, shouldThrow: bool) -> bool"},"__isPropertyMethod":{"!doc":"<p>Internal helper to detect if the method will be generated by the\nproperty system.</p>","!type":"fn(clazz: +Class, methodName: string) -> bool"},"__validateConfig":{"!doc":"<p>Validates incoming configuration and checks keys and values</p>","!type":"fn(name: string, config: +Map)"},"__wrapInterfaceMember":{"!doc":"<p>Wrap a method with a precondition check.</p>","!type":"fn(iface: string, origFunction: fn(), functionName: string, preCondition: fn()) -> fn()"},"assert":{"!doc":"<p>Checks if an interface is implemented by a class</p>","!type":"fn(clazz: +Class, iface: +Interface, wrap?: bool)"},"assertObject":{"!doc":"<p>Asserts that the given object implements all the methods defined in the\ninterface. This method throws an exception if the object does not\nimplement the interface.</p>","!type":"fn(object: +qx.core.Object, iface: +Interface)"},"classImplements":{"!doc":"<p>Tests whether an interface is implemented by a class, without throwing an\nexception when it doesn&#8217;t.</p>","!type":"fn(clazz: +Class, iface: +Interface) -> bool"},"define":{"!doc":"<p>Define a new interface. Interface definitions look much like class definitions.</p>\n\n<p>The main difference is that the bodies of functions defined in <code>members</code>\nand <code>statics</code> are called before the original function with the\nsame arguments. This can be used to check the passed arguments. If the\nchecks fail, an exception should be thrown. It is convenient to use the\nmethod defined in {@link qx.core.MAssert} to check the arguments.</p>\n\n<p>In the <code>build</code> version the checks are omitted.</p>\n\n<p>For properties only the names are required so the value of the properties\ncan be empty maps.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.Interface.define(\"name\",\n{\n  extend: [SuperInterfaces],\n\n  statics:\n  {\n    PI : 3.14\n  },\n\n  properties: {\"color\": {}, \"name\": {} },\n\n  members:\n  {\n    meth1: function() {},\n    meth2: function(a, b) { this.assertArgumentsCount(arguments, 2, 2); },\n    meth3: function(c) { this.assertInterface(c.constructor, qx.some.Interface); }\n  },\n\n  events :\n  {\n    keydown : \"qx.event.type.KeySequence\"\n  }\n});\n</pre>","!type":"fn(name: string, config?: +Map) -> +qx.Interface"},"flatten":{"!doc":"<p>Generates a list of all interfaces including their super interfaces\n(resolved recursively)</p>","!type":"fn(ifaces?: +Interface) -> +Array"},"genericToString":{"!doc":"<p>This method will be attached to all interface to return\na nice identifier for them.</p>","!type":"fn() -> string"},"getByName":{"!doc":"<p>Returns an interface by name</p>","!type":"fn(name: string) -> +Class"},"getTotalNumber":{"!doc":"<p>Determine the number of interfaces which are defined</p>","!type":"fn() -> number"},"isDefined":{"!doc":"<p>Determine if interface exists</p>","!type":"fn(name: string) -> bool"},"objectImplements":{"!doc":"<p>Asserts that the given object implements all the methods defined in the\ninterface.</p>","!type":"fn(object: +qx.core.Object, iface: +Interface) -> bool"}},"io":{"ImageLoader":{"!doc":"<p>The ImageLoader can preload and manage loaded image resources. It easily\nhandles multiple requests and supports callbacks for successful and failed\nrequests.</p>\n\n<p>After loading of an image the dimension of the image is stored as long\nas the application is running. This is quite useful for in-memory layouting.</p>\n\n<p>Use {@link #load} to preload your own images.</p>","__getHeight":{"!doc":"<p>Returns the natural height of the given image element.</p>","!type":"fn(element: +Element) -> +Integer"},"__getWidth":{"!doc":"<p>Returns the natural width of the given image element.</p>","!type":"fn(element: +Element) -> +Integer"},"__onload":{"!doc":"<p>Internal event listener for all load/error events.</p>","!type":"fn(event: +Event, element: +Element, source: string)"},"abort":{"!doc":"<p>Abort the loading for the given url.</p>","!type":"fn(source: string)"},"dispose":{"!doc":"<p>Dispose stored images.</p>","!type":"fn()"},"getFormat":{"!doc":"<p>Returns the format of a previously loaded image</p>","!type":"fn(source: string) -> string"},"getHeight":{"!doc":"<p>Returns the image height</p>","!type":"fn(source: string) -> +Integer"},"getSize":{"!doc":"<p>Returns the size of a previously loaded image</p>","!type":"fn(source: string) -> +Map"},"getWidth":{"!doc":"<p>Returns the image width</p>","!type":"fn(source: string) -> +Integer"},"isFailed":{"!doc":"<p>Whether the given image has previously been requested using the\n{@link #load} method but failed.</p>","!type":"fn(source: string) -> bool"},"isLoaded":{"!doc":"<p>Whether the given image has previously been loaded using the\n{@link #load} method.</p>","!type":"fn(source: string) -> bool"},"isLoading":{"!doc":"<p>Whether the given image is currently loading.</p>","!type":"fn(source: string) -> bool"},"load":{"!doc":"<p>Loads the given image. Supports a callback which is\nexecuted when the image is loaded.</p>\n\n<p>This method works asychronous.</p>","!type":"fn(source: string, callback: fn(), context: Object)"}},"part":{"ClosurePart":{"!proto":"qx.io.part.Part","!doc":"<p>Wrapper for a part as defined in the config file. This class knows about all\npackages the part depends on and provides functionality to load the part.</p>","!type":"fn()","prototype":{"__executePackages":{"!doc":"<p>Executes the packages in their correct order and marks the part as\ncomplete after execution.</p>","!type":"fn()"},"_onPackageLoad":{"!doc":"<p>Handler for every package load. It checks for errors and decreases the\npackages to load. If all packages has been loaded, it invokes the\nexecution.</p>","!type":"fn(pkg: +qx.io.part.Package)"},"load":{"!doc":"<p>Loads the closure part including all its packages. The loading will\nbe done parallel. After all packages are available, the closures are\nexecuted in the correct order.</p>","!type":"fn(callback: fn(), self?: Object)"},"preload":{"!type":"fn(callback: +undefined, self: +undefined)"}}},"Package":{"!doc":"<p>The Package wraps a list of related script URLs, which are required by one\nor more parts.</p>","!type":"fn()","prototype":{"__importPackageData":{"!doc":"<p>Import the data of a package. The function is defined in the loader\nscript.</p>","!type":"fn(packageData: +Map)"},"__loadScriptList":{"!doc":"<p>Loads a list of scripts in the correct order.</p>","!type":"fn(urlList: string, callback: fn(), errBack: fn(), self?: Object)"},"execute":{"!doc":"<p>Executes the stored closure. This is only relevant if a\n{@link qx.io.part.ClosurePart} is used.</p>","!type":"fn()"},"getId":{"!doc":"<p>Get the package ID.</p>","!type":"fn() -> string"},"getReadyState":{"!doc":"<p>Get the ready state of the package. The value is one of\n<ul>\n<li>\n  <b>initialized</b>: The package is initialized. The {@link #load}\n  method has not yet been called\n</li>\n<li><b>loading</b>: The package is still loading.</li>\n<li><b>complete</b>: The package has been loaded successfully</li>\n<li><b>cached</b>: The package is loaded but is not executed\n  (for closure parts)</li>\n</li></p>","!type":"fn() -> string"},"getUrls":{"!doc":"<p>Returns the urlsstored stored in the package.</p>","!type":"fn() -> string"},"load":{"!doc":"<p>Load the part&#8217;s script URLs in the correct order.</p>","!type":"fn(notifyPackageResult: fn(), self?: Object)"},"loadClosure":{"!doc":"<p>Load method if the package loads a closure. This is only relevant if a\n{@link qx.io.part.ClosurePart} is used.</p>","!type":"fn(notifyPackageResult: fn(), self?: Object)"},"saveClosure":{"!doc":"<p>Method for storing the closure for this package. This is only relevant\nif a {@link qx.io.part.ClosurePart} is used.</p>","!type":"fn(closure: fn())"}}},"Part":{"!doc":"<p>Wrapper for a part as defined in the config file. This class knows about all\npackages the part depends on and provides functionality to load the part.</p>","!type":"fn()","prototype":{"_appendPartListener":{"!doc":"<p>Helper for appending a listener for this part.</p>","!type":"fn(callback: fn(), self?: Object, part: +qx.io.part.Part)"},"_checkCompleteLoading":{"!doc":"<p>Helper for checking if the part is loaded completely.</p>","!type":"fn(callback: fn(), self: Object) -> bool"},"_markAsCompleted":{"!doc":"<p>Helper for marking the part as complete.</p>","!type":"fn(readyState: string)"},"_signalStartup":{"!doc":"<p>Method used to start up the application in case not all parts\nnecessary to initialize the application are in the boot part. [BUG #3793]</p>","!type":"fn()"},"getName":{"!doc":"<p>The part name as defined in the config file</p>","!type":"fn() -> string"},"getPackages":{"!doc":"<p>Internal helper for testing purposes.</p>","!type":"fn() -> +qx.io.part.Package"},"getReadyState":{"!doc":"<p>Get the ready state of the part. The value is one of\n<ul>\n<li>\n  <b>initialized</b>: The part is initialized. The {@link #load}\n  method has not yet been called\n</li>\n<li><b>loading</b>: The part is still loading.</li>\n<li><b>complete</b>: The part has been loaded successfully</li>\n</li></p>","!type":"fn() -> string"},"load":{"!doc":"<p>Loads the part asynchronously. The callback is called after the part and\nits dependencies are fully loaded. If the part is already loaded the\ncallback is called immediately.</p>","!type":"fn(callback: fn(), self?: Object)"},"preload":{"!doc":"<p>Method for preloading this part.\nEmpty implementation! Regular parts can not be preloaded.</p>","!type":"fn(callback: fn(), self?: Object)"}}}},"PartLoader":{"!proto":"qx.core.Object","!doc":"<p>The part loader knows about all generated packages and parts.</p>\n\n<p>It contains functionality to load parts and to retrieve part instances.</p>","!type":"fn()","getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.io.PartLoader"},"require":{"!doc":"<p>Loads one or more parts asynchronously. The callback is called after all\nparts and their dependencies are fully loaded. If the parts are already\nloaded the callback is called immediately.</p>","!type":"fn(partNames: string, callback: fn(), self?: Object)"},"prototype":{"getPart":{"!doc":"<p>Get the part instance of the part with the given name.</p>","!type":"fn(name: string) -> +qx.io.part.Part"},"getParts":{"!doc":"<p>Returns a map of all known parts.</p>","!type":"fn() -> +Map"},"hasPart":{"!doc":"<p>Checks if a part with the given name is available.</p>","!type":"fn(name: string) -> bool"},"require":{"!doc":"<p>Loads one or more parts asynchronously. The callback is called after all\nparts and their dependencies are fully loaded. If the parts are already\nloaded the callback is called immediately.</p>","!type":"fn(partNames: string, callback: fn(), self?: Object)"}}},"remote":{"Exchange":{"!proto":"qx.core.Object","!doc":"<p>Transport layer to control which transport class (XmlHttp, Iframe or Script)\ncan be used.</p>","!type":"fn()","canHandle":{"!doc":"<p>Checks which supported transport class can handle the request with the\ngiven content type.</p>","!type":"fn(vImpl: Object, vNeeds: +Map, vResponseType: string) -> bool"},"initTypes":{"!doc":"<p>Initializes the available type of transport classes and\nchecks for the supported ones.</p>","!type":"fn()"},"registerType":{"!doc":"<p>Registers a transport type.\nAt the moment one out of XmlHttp, Iframe or Script.</p>","!type":"fn(vClass: Object, vId: string)"},"statusCodeToString":{"!doc":"<p>Status code to string conversion</p>","!type":"fn(vStatusCode: +Integer) -> string"},"wasSuccessful":{"!doc":"<p>Called from the transport class when a request was completed.</p>","!type":"fn(vStatusCode: +Integer, vReadyState: string, vIsLocal: bool) -> bool"},"prototype":{"__disableRequestTimeout":{"!doc":"<p>Disables the timer of the request to prevent that the timer is expiring\neven if the user handler (e.g. &#8220;completed&#8221;) was already called.</p>","!type":"fn()"},"_applyImplementation":{"!doc":"<p>Apply method for the implementation property.</p>","!type":"fn(value: Object, old: Object)"},"_applyState":{"!doc":"<p>Apply method for the state property.</p>","!type":"fn(value: Object, old: Object)"},"_onabort":{"!doc":"<p>Event listener for &#8220;abort&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_oncompleted":{"!doc":"<p>Event listener for &#8220;completed&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onfailed":{"!doc":"<p>Event listener for &#8220;failed&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onreceiving":{"!doc":"<p>Event listener for &#8220;receiving&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onsending":{"!doc":"<p>Event listener for &#8220;sending&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_ontimeout":{"!doc":"<p>Event listener for &#8220;timeout&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"abort":{"!doc":"<p>Force the transport into the aborted (&#8220;aborted&#8221;)\n state.</p>","!type":"fn()"},"getImplementation":{"!doc":"<p>Returns the (computed) value of the property <code>implementation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #implementation}.</p>","!type":"fn() -> Object"},"getRequest":{"!doc":"<p>Returns the (computed) value of the property <code>request</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn() -> Object"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"initImplementation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>implementation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #implementation}.</p>","!type":"fn(value: Object) -> Object"},"initRequest":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>request</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn(value: Object) -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"resetImplementation":{"!doc":"<p>Resets the user value of the property <code>implementation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #implementation}.</p>","!type":"fn()"},"resetRequest":{"!doc":"<p>Resets the user value of the property <code>request</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"send":{"!doc":"<p>Sends the request.</p>","!type":"fn() -> Object"},"setImplementation":{"!doc":"<p>Sets the user value of the property <code>implementation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #implementation}.</p>","!type":"fn(value: Object) -> Object"},"setRequest":{"!doc":"<p>Sets the user value of the property <code>request</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #request}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"timeout":{"!doc":"<p>Force the transport into the timeout state.</p>","!type":"fn()"}}},"Request":{"!proto":"qx.core.Object","!doc":"<p>This class is used to send <span class=\"caps\">HTTP</span> requests to the server.</p>\n\n<p>Note: This class will be deprecated in a future release. Instead,\nplease use classes found in {@link qx.io.request}.</p>","!type":"fn()","methodAllowsRequestBody":{"!doc":"<p>Returns true if the given <span class=\"caps\">HTTP</span> method allows a request body being transferred to the server.\nThis is currently <span class=\"caps\">POST</span> and <span class=\"caps\">PUT</span>. Other methods require their data being encoded into\nthe <span class=\"caps\">URL</span></p>","!type":"fn(httpMethod: string) -> bool"},"prototype":{"_applyMethod":{"!doc":"<p>Applies changes of the property value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object, old: Object)"},"_applyProhibitCaching":{"!doc":"<p>Applies changes of the property value of the property <code>prohibitCaching</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #prohibitCaching}.</p>","!type":"fn(value: Object, old: Object)"},"_applyResponseType":{"!doc":"<p>Applies changes of the property value of the property <code>responseType</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn(value: Object, old: Object)"},"_applyState":{"!doc":"<p>Applies changes of the property value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object, old: Object)"},"_onaborted":{"!doc":"<p>Event handler called when the request enters the aborted state.</p>","!type":"fn(e: +qx.event.type.Event)"},"_oncompleted":{"!doc":"<p>Event handler called when the request enters the completed state.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onfailed":{"!doc":"<p>Event handler called when the request enters the failed state.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onqueued":{"!doc":"<p>Event handler called when the request enters the queued state.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onreceiving":{"!doc":"<p>Event handler called when the request enters the receiving state.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onsending":{"!doc":"<p>Event handler called when the request enters the sending state.</p>","!type":"fn(e: +qx.event.type.Event)"},"_ontimeout":{"!doc":"<p>Event handler called when the request enters the timeout state.</p>","!type":"fn(e: +qx.event.type.Event)"},"abort":{"!doc":"<p>Abort sending this request.</p>\n\n<p>The request is removed from the singleton class qx.io.remote.RequestQueue&#8217;s\nlist of pending events. If the request haven&#8217;t been scheduled this\nmethod is a noop.</p>","!type":"fn()"},"getAsynchronous":{"!doc":"<p>Returns the (computed) value of the property <code>asynchronous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn() -> Object"},"getCrossDomain":{"!doc":"<p>Returns the (computed) value of the property <code>crossDomain</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn() -> Object"},"getData":{"!doc":"<p>Returns the (computed) value of the property <code>data</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn() -> Object"},"getFileUpload":{"!doc":"<p>Returns the (computed) value of the property <code>fileUpload</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fileUpload}.</p>","!type":"fn() -> Object"},"getFormField":{"!doc":"<p>Get a form field in the <span class=\"caps\">POST</span> request.</p>","!type":"fn(vId: string) -> string"},"getFormFields":{"!doc":"<p>Returns the object containg all form fields for the <span class=\"caps\">POST</span> request.</p>","!type":"fn() -> Object"},"getMethod":{"!doc":"<p>Returns the (computed) value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn() -> Object"},"getParameter":{"!doc":"<p>Get a parameter in the request.</p>","!type":"fn(vId: string, bFromData: bool) -> Object"},"getParameters":{"!doc":"<p>Returns the object containg all parameters for the request.</p>","!type":"fn(bFromData: bool) -> Object"},"getParseJson":{"!doc":"<p>Returns the (computed) value of the property <code>parseJson</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn() -> Object"},"getPassword":{"!doc":"<p>Returns the (computed) value of the property <code>password</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn() -> Object"},"getProhibitCaching":{"!doc":"<p>Returns the (computed) value of the property <code>prohibitCaching</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #prohibitCaching}.</p>","!type":"fn() -> Object"},"getRequestHeader":{"!doc":"<p>Retrieve the value of a header which was previously set</p>","!type":"fn(vId: string) -> string"},"getRequestHeaders":{"!doc":"<p>Return the object containing all of the headers which have been added.</p>","!type":"fn() -> Object"},"getResponseType":{"!doc":"<p>Returns the (computed) value of the property <code>responseType</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn() -> Object"},"getSequenceNumber":{"!doc":"<p>Obtain the sequence (id) number used for this request</p>","!type":"fn() -> +Integer"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"getTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn() -> Object"},"getTransport":{"!doc":"<p>Returns the (computed) value of the property <code>transport</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transport}.</p>","!type":"fn() -> Object"},"getUrl":{"!doc":"<p>Returns the (computed) value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn() -> Object"},"getUseBasicHttpAuth":{"!doc":"<p>Returns the (computed) value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> Object"},"getUsername":{"!doc":"<p>Returns the (computed) value of the property <code>username</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn() -> Object"},"initAsynchronous":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>asynchronous</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn(value: Object) -> Object"},"initCrossDomain":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>crossDomain</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn(value: Object) -> Object"},"initData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>data</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn(value: Object) -> Object"},"initFileUpload":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>fileUpload</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #fileUpload}.</p>","!type":"fn(value: Object) -> Object"},"initMethod":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>method</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object) -> Object"},"initParseJson":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>parseJson</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn(value: Object) -> Object"},"initPassword":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>password</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn(value: Object) -> Object"},"initProhibitCaching":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>prohibitCaching</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #prohibitCaching}.</p>","!type":"fn(value: Object) -> Object"},"initResponseType":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>responseType</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn(value: Object) -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"initTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"initTransport":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>transport</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #transport}.</p>","!type":"fn(value: Object) -> Object"},"initUrl":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>url</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"initUseBasicHttpAuth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useBasicHttpAuth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn(value: Object) -> Object"},"initUsername":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>username</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn(value: Object) -> Object"},"isAborted":{"!doc":"<p>Determine if this request is in the aborted state.</p>","!type":"fn() -> bool"},"isAsynchronous":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>asynchronous</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn() -> bool"},"isCompleted":{"!doc":"<p>Determine if this request is in the completed state.</p>","!type":"fn() -> bool"},"isConfigured":{"!doc":"<p>Determine if this request is in the configured state.</p>","!type":"fn() -> bool"},"isCrossDomain":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>crossDomain</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn() -> bool"},"isFailed":{"!doc":"<p>Determine if this request is in the failed state.</p>","!type":"fn() -> bool"},"isFileUpload":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>fileUpload</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fileUpload}.</p>","!type":"fn() -> bool"},"isParseJson":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>parseJson</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn() -> bool"},"isQueued":{"!doc":"<p>Determine if this request is in the queued state.</p>","!type":"fn() -> bool"},"isReceiving":{"!doc":"<p>Determine if this request is in the receiving state.</p>","!type":"fn() -> bool"},"isSending":{"!doc":"<p>Determine if this request is in the sending state.</p>","!type":"fn() -> bool"},"isTimeout":{"!doc":"<p>Determine if this request is in the timeout state.</p>","!type":"fn() -> bool"},"isUseBasicHttpAuth":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useBasicHttpAuth</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> bool"},"removeFormField":{"!doc":"<p>Remove a form field from the <span class=\"caps\">POST</span> request.</p>","!type":"fn(vId: string)"},"removeParameter":{"!doc":"<p>Remove a parameter from the request.</p>","!type":"fn(vId: string, bFromData: bool)"},"removeRequestHeader":{"!doc":"<p>Remove a previously-added request header</p>","!type":"fn(vId: string)"},"reset":{"!doc":"<p>Abort sending this request if it has not already been aborted.</p>","!type":"fn()"},"resetAsynchronous":{"!doc":"<p>Resets the user value of the property <code>asynchronous</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn()"},"resetCrossDomain":{"!doc":"<p>Resets the user value of the property <code>crossDomain</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn()"},"resetData":{"!doc":"<p>Resets the user value of the property <code>data</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn()"},"resetFileUpload":{"!doc":"<p>Resets the user value of the property <code>fileUpload</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #fileUpload}.</p>","!type":"fn()"},"resetMethod":{"!doc":"<p>Resets the user value of the property <code>method</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn()"},"resetParseJson":{"!doc":"<p>Resets the user value of the property <code>parseJson</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn()"},"resetPassword":{"!doc":"<p>Resets the user value of the property <code>password</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn()"},"resetProhibitCaching":{"!doc":"<p>Resets the user value of the property <code>prohibitCaching</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #prohibitCaching}.</p>","!type":"fn()"},"resetResponseType":{"!doc":"<p>Resets the user value of the property <code>responseType</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"resetTimeout":{"!doc":"<p>Resets the user value of the property <code>timeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn()"},"resetTransport":{"!doc":"<p>Resets the user value of the property <code>transport</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #transport}.</p>","!type":"fn()"},"resetUrl":{"!doc":"<p>Resets the user value of the property <code>url</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn()"},"resetUseBasicHttpAuth":{"!doc":"<p>Resets the user value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn()"},"resetUsername":{"!doc":"<p>Resets the user value of the property <code>username</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn()"},"send":{"!doc":"<p>Schedule this request for transport to server.</p>\n\n<p>The request is added to the singleton class qx.io.remote.RequestQueue&#8217;s\nlist of pending requests.</p>","!type":"fn()"},"setAsynchronous":{"!doc":"<p>Sets the user value of the property <code>asynchronous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn(value: Object) -> Object"},"setCrossDomain":{"!doc":"<p>Sets the user value of the property <code>crossDomain</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn(value: Object) -> Object"},"setData":{"!doc":"<p>Sets the user value of the property <code>data</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn(value: Object) -> Object"},"setFileUpload":{"!doc":"<p>Sets the user value of the property <code>fileUpload</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fileUpload}.</p>","!type":"fn(value: Object) -> Object"},"setFormField":{"!doc":"<p>Add a form field to the <span class=\"caps\">POST</span> request.</p>\n\n<p><span class=\"caps\">NOTE</span>: Adding any programatic form fields using this method will switch the\n      Transport implementation to IframeTransport.</p>\n\n<p><span class=\"caps\">NOTE</span>: Use of these programatic form fields disallow use of synchronous\n      requests and cross-domain requests.  Be sure that you do not need\n      those features when setting these programatic form fields.</p>","!type":"fn(vId: string, vValue: string)"},"setMethod":{"!doc":"<p>Sets the user value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object) -> Object"},"setParameter":{"!doc":"<p>Add a parameter to the request.</p>","!type":"fn(vId: string, vValue: Object, bAsData: bool)"},"setParseJson":{"!doc":"<p>Sets the user value of the property <code>parseJson</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn(value: Object) -> Object"},"setPassword":{"!doc":"<p>Sets the user value of the property <code>password</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn(value: Object) -> Object"},"setProhibitCaching":{"!doc":"<p>Sets the user value of the property <code>prohibitCaching</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #prohibitCaching}.</p>","!type":"fn(value: Object) -> Object"},"setRequestHeader":{"!doc":"<p>Add a request header to the request.</p>\n\n<p>Example: request.setRequestHeader(&#8220;Content-Type&#8221;, &#8220;text/html&#8221;)</p>\n\n<p>Please note: Some browsers, such as Safari 3 and 4, will capitalize\nheader field names. This is in accordance with <span class=\"caps\">RFC</span> 2616<sup class=\"footnote\"><a href=\"#fn1\">1</a></sup>, which states\nthat <span class=\"caps\">HTTP</span> 1.1 header names are case-insensitive, so your server backend\nshould be case-agnostic when dealing with request headers.</p>\n\n<p>[1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\"><span class=\"caps\">RFC</span> 2616: <span class=\"caps\">HTTP</span> Message Headers</a></p>","!type":"fn(vId: string, vValue: string)"},"setResponseType":{"!doc":"<p>Sets the user value of the property <code>responseType</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"setTimeout":{"!doc":"<p>Sets the user value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"setTransport":{"!doc":"<p>Sets the user value of the property <code>transport</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transport}.</p>","!type":"fn(value: Object) -> Object"},"setUrl":{"!doc":"<p>Sets the user value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"setUseBasicHttpAuth":{"!doc":"<p>Sets the user value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn(value: Object) -> Object"},"setUsername":{"!doc":"<p>Sets the user value of the property <code>username</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn(value: Object) -> Object"},"toggleAsynchronous":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>asynchronous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn() -> bool"},"toggleCrossDomain":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>crossDomain</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn() -> bool"},"toggleFileUpload":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>fileUpload</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fileUpload}.</p>","!type":"fn() -> bool"},"toggleParseJson":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>parseJson</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn() -> bool"},"toggleUseBasicHttpAuth":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> bool"}}},"RequestQueue":{"!proto":"qx.core.Object","!doc":"<p>Handles scheduling of requests to be sent to a server.</p>\n\n<p>This class is a singleton and is used by qx.io.remote.Request to schedule its\nrequests. It should not be used directly.</p>","!type":"fn()","prototype":{"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_check":{"!doc":"<p>Checks the queue if any request is left to send and uses the transport\nlayer to send the open requests.\nThis method calls itself until every request in the queue is send.</p>","!type":"fn()"},"_debug":{"!doc":"<p>Generates debug output</p>","!type":"fn()"},"_oncompleted":{"!doc":"<p>Listens for the &#8220;completed&#8221; event of the transport object and decreases\nthe counter for active requests.</p>","!type":"fn(e: +qx.event.type.Event)"},"_oninterval":{"!doc":"<p>Listens for the &#8220;interval&#8221; event of the transport object and checks\nif the active requests are timed out.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onreceiving":{"!doc":"<p>Listens for the &#8220;receiving&#8221; event of the transport object and delegate\nthe event to the current request object.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onsending":{"!doc":"<p>Listens for the &#8220;sending&#8221; event of the transport object and increases\nthe counter for active requests.</p>","!type":"fn(e: +qx.event.type.Event)"},"_remove":{"!doc":"<p>Removes a transport object from the active queue and disposes the\ntransport object in order stop the request.</p>","!type":"fn(vTransport: +qx.io.remote.Exchange)"},"abort":{"!doc":"<p>Remove the request from the pending requests queue.</p>\n\n<p>The underlying transport of the request is forced into the aborted\n state (&#8220;aborted&#8221;) and listeners of the &#8220;aborted&#8221;\n signal are notified about the event. If the request isn&#8217;t in the\n pending requests queue, this method is a noop.</p>","!type":"fn(vRequest: Object)"},"add":{"!doc":"<p>Add the request to the pending requests queue.</p>","!type":"fn(vRequest: Object)"},"getActiveQueue":{"!doc":"<p>Get a list of active queued requests, each one wrapped in an instance of\n{@link qx.io.remote.Exchange}</p>","!type":"fn() -> +Exchange"},"getDefaultTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>defaultTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultTimeout}.</p>","!type":"fn() -> Object"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getMaxConcurrentRequests":{"!doc":"<p>Returns the (computed) value of the property <code>maxConcurrentRequests</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxConcurrentRequests}.</p>","!type":"fn() -> Object"},"getMaxTotalRequests":{"!doc":"<p>Returns the (computed) value of the property <code>maxTotalRequests</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxTotalRequests}.</p>","!type":"fn() -> Object"},"getRequestQueue":{"!doc":"<p>Get a list of queued requests</p>","!type":"fn() -> +Request"},"initDefaultTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultTimeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultTimeout}.</p>","!type":"fn(value: Object) -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initMaxConcurrentRequests":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxConcurrentRequests</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxConcurrentRequests}.</p>","!type":"fn(value: Object) -> Object"},"initMaxTotalRequests":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxTotalRequests</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxTotalRequests}.</p>","!type":"fn(value: Object) -> Object"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"resetDefaultTimeout":{"!doc":"<p>Resets the user value of the property <code>defaultTimeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultTimeout}.</p>","!type":"fn()"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetMaxConcurrentRequests":{"!doc":"<p>Resets the user value of the property <code>maxConcurrentRequests</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxConcurrentRequests}.</p>","!type":"fn()"},"resetMaxTotalRequests":{"!doc":"<p>Resets the user value of the property <code>maxTotalRequests</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxTotalRequests}.</p>","!type":"fn()"},"setDefaultTimeout":{"!doc":"<p>Sets the user value of the property <code>defaultTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultTimeout}.</p>","!type":"fn(value: Object) -> Object"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setMaxConcurrentRequests":{"!doc":"<p>Sets the user value of the property <code>maxConcurrentRequests</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxConcurrentRequests}.</p>","!type":"fn(value: Object) -> Object"},"setMaxTotalRequests":{"!doc":"<p>Sets the user value of the property <code>maxTotalRequests</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxTotalRequests}.</p>","!type":"fn(value: Object) -> Object"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.io.remote.RequestQueue"}},"Response":{"!proto":"qx.event.type.Event","!doc":"<p>This class is used to work with the result of a <span class=\"caps\">HTTP</span> request.</p>","prototype":{"_applyResponseHeaders":{"!doc":"<p>Keep lower-cased shadow of response headers for later\ncase-insensitive matching.</p>","!type":"fn(value: Object, old: Object)"},"clone":{"!type":"fn(embryo: +undefined)"},"getContent":{"!doc":"<p>Returns the (computed) value of the property <code>content</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #content}.</p>","!type":"fn() -> Object"},"getResponseHeader":{"!doc":"<p>Returns a specific response header</p>","!type":"fn(vHeader: string) -> Object"},"getResponseHeaders":{"!doc":"<p>Returns the (computed) value of the property <code>responseHeaders</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseHeaders}.</p>","!type":"fn() -> Object"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"getStatusCode":{"!doc":"<p>Returns the (computed) value of the property <code>statusCode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusCode}.</p>","!type":"fn() -> Object"},"initContent":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>content</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #content}.</p>","!type":"fn(value: Object) -> Object"},"initResponseHeaders":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>responseHeaders</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #responseHeaders}.</p>","!type":"fn(value: Object) -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"initStatusCode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>statusCode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #statusCode}.</p>","!type":"fn(value: Object) -> Object"},"resetContent":{"!doc":"<p>Resets the user value of the property <code>content</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #content}.</p>","!type":"fn()"},"resetResponseHeaders":{"!doc":"<p>Resets the user value of the property <code>responseHeaders</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #responseHeaders}.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"resetStatusCode":{"!doc":"<p>Resets the user value of the property <code>statusCode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #statusCode}.</p>","!type":"fn()"},"setContent":{"!doc":"<p>Sets the user value of the property <code>content</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #content}.</p>","!type":"fn(value: Object) -> Object"},"setResponseHeaders":{"!doc":"<p>Sets the user value of the property <code>responseHeaders</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseHeaders}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"setStatusCode":{"!doc":"<p>Sets the user value of the property <code>statusCode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusCode}.</p>","!type":"fn(value: Object) -> Object"}}},"Rpc":{"!proto":"qx.core.Object","!doc":"<p>Provides a Remote Procedure Call (RPC) implementation.</p>\n\n<p>Each instance of this class represents a &#8220;Service&#8221;. These services can\ncorrespond to various concepts on the server side (depending on the\nprogramming language/environment being used), but usually, a service means\na class on the server.</p>\n\n<p>In case multiple instances of the same service are needed, they can be\ndistinguished by ids. If such an id is specified, the server routes all\ncalls to a service that have the same id to the same server-side instance.</p>\n\n<p>When calling a server-side method, the parameters and return values are\nconverted automatically. Supported types are int (and Integer), double\n(and Double), String, Date, Map, and JavaBeans. Beans must have a default\nconstructor on the server side and are represented by simple JavaScript\nobjects on the client side (used as associative arrays with keys matching\nthe server-side properties). Beans can also be nested, but be careful not to\ncreate circular references! There are no checks to detect these (which would\nbe expensive), so you as the user are responsible for avoiding them.</p>\n\n<p>A simple example:</p>\n\n<pre class=\"javascript\">\n  function callRpcServer ()\n  {\n    var rpc = new qx.io.remote.Rpc();\n    rpc.setTimeout(10000);\n    rpc.setUrl(\"http://127.0.0.1:8007\");\n    rpc.setServiceName(\"qooxdoo.admin\");\n\n    // call a remote procedure -- takes no arguments, returns a string\n    var that = this;\n    this.RpcRunning = rpc.callAsync(\n      function(result, ex, id)\n      {\n        that.RpcRunning = null;\n        if (ex == null) {\n            alert(result);\n        } else {\n            alert(\"Async(\" + id + \") exception: \" + ex);\n        }\n      },\n      \"fss.getBaseDir\");\n  }\n</pre>\n\n<p><i>fss.getBaseDir</i> is the remote procedure in this case, potential arguments\nwould be listed after the procedure name.</p>\n\n<p>Passing data from the client (qooxdoo) side is demonstrated in the\nqooxdoo-contrib project RpcExample. There are three ways to issue a remote\nprocedure call: synchronously (qx.io.remote.Rpc.callSync&#8212;dangerous\nbecause it blocks the whole browser, not just your application, so is\nhighly discouraged); async with results via a callback function\n(qx.io.remote.Rpc.callAsync) and async with results via an event listener\n(qx.io.remote.Rpc.callAsyncListeners).</p>\n\n<p>You may also find the server writer&#8217;s guide helpful:\n  <a href=\"http://manual.qooxdoo.org/4.1/pages/communication/rpc_server_writer_guide.html\">http://manual.qooxdoo.org/4.1/pages/communication/rpc_server_writer_guide.html</a></p>","!type":"fn()","makeServerURL":{"!doc":"<p>Creates an <span class=\"caps\">URL</span> for talking to a local service. A local service is one that\nlives in the same application as the page calling the service. For backends\nthat don&#8217;t support this auto-generation, this method returns null.</p>","!type":"fn(instanceId?: string) -> string"},"prototype":{"_callInternal":{"!doc":"<p>Internal <span class=\"caps\">RPC</span> call method</p>","!type":"fn(args: +Array, callType: +Integer, refreshSession: bool) -> Object"},"_isConvertDates":{"!doc":"<p>Whether to convert date objects to pseudo literals and\nparse with eval.</p>\n\n<p>Controlled by {@link #CONVERT_DATES}.</p>","!type":"fn() -> bool"},"_isResponseJson":{"!doc":"<p>Whether to expect and verify a <span class=\"caps\">JSON</span> response.</p>\n\n<p>Controlled by {@link #RESPONSE_JSON}.</p>","!type":"fn() -> bool"},"abort":{"!doc":"<p>Aborts an asynchronous server call. Consequently, the callback function\nprovided to <code>callAsync</code> or <code>callAsyncListeners</code>\nwill be called with an exception.</p>","!type":"fn(opaqueCallRef: Object)"},"callAsync":{"!doc":"<p>Makes an asynchronous server call. The method arguments (if any) follow\nafter the method name (as normal JavaScript arguments, separated by\ncommas, not as an array).</p>\n\n<p>When an answer from the server arrives, the <code>handler</code>\nfunction is called with the result of the call as the first, an\nexception as the second parameter, and the id (aka sequence number) of\nthe invoking request as the third parameter. If the call was\nsuccessful, the second parameter is <code>null</code>. If there was a\nproblem, the second parameter contains an exception, and the first one\nis <code>null</code>.</p>\n\n<p>The return value of this method is a call reference that you can store\nif you want to abort the request later on. This value should be treated\nas opaque and can change completely in the future! The only thing you\ncan rely on is that the <code>abort</code> method will accept this\nreference and that you can retrieve the sequence number of the request\nby invoking the getSequenceNumber() method (see below).</p>\n\n<p>If a specific method is being called, asynchronously, a number of times\nin succession, the getSequenceNumber() method may be used to\ndisambiguate which request a response corresponds to.  The sequence\nnumber value is a value which increments with each request.)</p>","!type":"fn(handler: fn(), methodName: string) -> Object"},"callAsyncListeners":{"!doc":"<p>Makes an asynchronous server call and dispatches an event upon completion\nor failure. The method arguments (if any) follow after the method name\n(as normal JavaScript arguments, separated by commas, not as an array).</p>\n\n<p>When an answer from the server arrives (or fails to arrive on time), if\nan exception occurred, a &#8220;failed&#8221;, &#8220;timeout&#8221; or &#8220;aborted&#8221; event, as\nappropriate, is dispatched to any waiting event listeners.  If no\nexception occurred, a &#8220;completed&#8221; event is dispatched.</p>\n\n<p>When a &#8220;failed&#8221;, &#8220;timeout&#8221; or &#8220;aborted&#8221; event is dispatched, the event\ndata contains an object with the properties &#8216;origin&#8217;, &#8216;code&#8217;, &#8216;message&#8217;\nand &#8216;id&#8217;.  The object has a toString() function which may be called to\nconvert the exception to a string.</p>\n\n<p>When a &#8220;completed&#8221; event is dispatched, the event data contains a\nmap with the <span class=\"caps\">JSON</span>-RPC sequence number and result:</p>\n\n<p>{\n  id: rpc_id,\n  result: json-rpc result\n}</p>\n\n<p>The return value of this method is a call reference that you can store\nif you want to abort the request later on. This value should be treated\nas opaque and can change completely in the future! The only thing you\ncan rely on is that the <code>abort</code> method will accept this\nreference and that you can retrieve the sequence number of the request\nby invoking the getSequenceNumber() method (see below).</p>\n\n<p>If a specific method is being called, asynchronously, a number of times\nin succession, the getSequenceNumber() method may be used to\ndisambiguate which request a response corresponds to.  The sequence\nnumber value is a value which increments with each request.)</p>","!type":"fn(coalesce: bool, methodName: string) -> Object"},"callSync":{"!doc":"<p>Makes a synchronous server call. The method arguments (if any) follow\nafter the method name (as normal JavaScript arguments, separated by\ncommas, not as an array).</p>\n\n<p>If a problem occurs when making the call, an exception is thrown.</p>\n\n<p><span class=\"caps\">WARNING</span>.  With some browsers, the synchronous interface\ncauses the browser to hang while awaiting a response!  If the server\ndecides to pause for a minute or two, your browser may do nothing\n(including refreshing following window changes) until the response is\nreceived.  Instead, use the asynchronous interface.</p>\n\n<p><span class=\"caps\">YOU</span> <span class=\"caps\">HAVE</span> <span class=\"caps\">BEEN</span> <span class=\"caps\">WARNED</span>.</p>","!type":"fn(methodName: string) -> Object"},"createRequest":{"!doc":"<p>Factory method to create a request object. By default, a <span class=\"caps\">POST</span> request\nwill be made, and the expected response type will be\n&#8220;application/json&#8221;. Classes extending this one may override this method\nto obtain a Request object with different parameters.</p>","!type":"fn() -> +qx.io.remote.Request"},"createRpcData":{"!doc":"<p>Factory method to create the object containing the remote procedure\ncall data. By default, a qooxdoo-style <span class=\"caps\">RPC</span> request is built, which\ncontains the following members: &#8220;service&#8221;, &#8220;method&#8221;, &#8220;id&#8221;, and\n&#8220;params&#8221;. If a different style of <span class=\"caps\">RPC</span> request is desired, a class\nextending this one may override this method.</p>","!type":"fn(id: +Integer, method: string, parameters: +Array, serverData: Object) -> Object"},"fixUrl":{"!doc":"<p>Helper method to rewrite a <span class=\"caps\">URL</span> with a stale session id (so that it includes\nthe correct session id afterwards).</p>","!type":"fn(url: string) -> string"},"getCrossDomain":{"!doc":"<p>Returns the (computed) value of the property <code>crossDomain</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn() -> Object"},"getPassword":{"!doc":"<p>Returns the (computed) value of the property <code>password</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn() -> Object"},"getProtocol":{"!doc":"<p>Returns the (computed) value of the property <code>protocol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #protocol}.</p>","!type":"fn() -> Object"},"getServerData":{"!doc":"<p>Returns the (computed) value of the property <code>serverData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #serverData}.</p>","!type":"fn() -> Object"},"getServiceName":{"!doc":"<p>Returns the (computed) value of the property <code>serviceName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #serviceName}.</p>","!type":"fn() -> Object"},"getTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn() -> Object"},"getUrl":{"!doc":"<p>Returns the (computed) value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn() -> Object"},"getUseBasicHttpAuth":{"!doc":"<p>Returns the (computed) value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> Object"},"getUsername":{"!doc":"<p>Returns the (computed) value of the property <code>username</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn() -> Object"},"initCrossDomain":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>crossDomain</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn(value: Object) -> Object"},"initPassword":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>password</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn(value: Object) -> Object"},"initProtocol":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>protocol</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #protocol}.</p>","!type":"fn(value: Object) -> Object"},"initServerData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>serverData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #serverData}.</p>","!type":"fn(value: Object) -> Object"},"initServiceName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>serviceName</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #serviceName}.</p>","!type":"fn(value: Object) -> Object"},"initTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"initUrl":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>url</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"initUseBasicHttpAuth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useBasicHttpAuth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn(value: Object) -> Object"},"initUsername":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>username</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn(value: Object) -> Object"},"isCrossDomain":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>crossDomain</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn() -> bool"},"isUseBasicHttpAuth":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useBasicHttpAuth</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> bool"},"refreshSession":{"!doc":"<p>Refreshes a server session by retrieving the session id again from the\nserver.</p>\n\n<p>The specified handler function is called when the refresh is\ncomplete. The first parameter can be <code>true</code> (indicating that\na refresh either wasn&#8217;t necessary at this time or it was successful) or\n<code>false</code> (indicating that a refresh would have been necessary\nbut can&#8217;t be performed because the server backend doesn&#8217;t support\nit). If there is a non-null second parameter, it&#8217;s an exception\nindicating that there was an error when refreshing the session.</p>","!type":"fn(handler: fn())"},"resetCrossDomain":{"!doc":"<p>Resets the user value of the property <code>crossDomain</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn()"},"resetPassword":{"!doc":"<p>Resets the user value of the property <code>password</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn()"},"resetProtocol":{"!doc":"<p>Resets the user value of the property <code>protocol</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #protocol}.</p>","!type":"fn()"},"resetServerData":{"!doc":"<p>Resets the user value of the property <code>serverData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #serverData}.</p>","!type":"fn()"},"resetServiceName":{"!doc":"<p>Resets the user value of the property <code>serviceName</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #serviceName}.</p>","!type":"fn()"},"resetTimeout":{"!doc":"<p>Resets the user value of the property <code>timeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn()"},"resetUrl":{"!doc":"<p>Resets the user value of the property <code>url</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn()"},"resetUseBasicHttpAuth":{"!doc":"<p>Resets the user value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn()"},"resetUsername":{"!doc":"<p>Resets the user value of the property <code>username</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn()"},"setCrossDomain":{"!doc":"<p>Sets the user value of the property <code>crossDomain</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn(value: Object) -> Object"},"setPassword":{"!doc":"<p>Sets the user value of the property <code>password</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn(value: Object) -> Object"},"setProtocol":{"!doc":"<p>Sets the user value of the property <code>protocol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #protocol}.</p>","!type":"fn(value: Object) -> Object"},"setServerData":{"!doc":"<p>Sets the user value of the property <code>serverData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #serverData}.</p>","!type":"fn(value: Object) -> Object"},"setServiceName":{"!doc":"<p>Sets the user value of the property <code>serviceName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #serviceName}.</p>","!type":"fn(value: Object) -> Object"},"setTimeout":{"!doc":"<p>Sets the user value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"setUrl":{"!doc":"<p>Sets the user value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"setUseBasicHttpAuth":{"!doc":"<p>Sets the user value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn(value: Object) -> Object"},"setUsername":{"!doc":"<p>Sets the user value of the property <code>username</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn(value: Object) -> Object"},"toggleCrossDomain":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>crossDomain</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #crossDomain}.</p>","!type":"fn() -> bool"},"toggleUseBasicHttpAuth":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> bool"}}},"RpcError":{"!doc":"<p>The well-defined error codes for <span class=\"caps\">JSON</span>-RPC.</p>"},"transport":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Abstract for all transport implementations</p>","!type":"fn()","prototype":{"_applyState":{"!doc":"<p>Apply method for &#8220;state&#8221; property. For each state value a corresponding\nevent is fired to inform the listeners.</p>","!type":"fn(value: Object, old: Object)"},"abort":{"!doc":"<p>Force the transport into the aborted state (&#8220;aborted&#8221;).</p>\n\n<p>Listeners of the &#8220;aborted&#8221; signal are notified about the event.</p>","!type":"fn()"},"failed":{"!doc":"<p>Force the transport into the failed state (&#8220;failed&#8221;).</p>\n\n<p>Listeners of the &#8220;failed&#8221; signal are notified about the event.</p>","!type":"fn()"},"getAsynchronous":{"!doc":"<p>Returns the (computed) value of the property <code>asynchronous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn() -> Object"},"getData":{"!doc":"<p>Returns the (computed) value of the property <code>data</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn() -> Object"},"getFetchedLength":{"!doc":"<p>Returns the length of the content as fetched thus far.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn() -> +Integer"},"getFormFields":{"!doc":"<p>Returns the (computed) value of the property <code>formFields</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #formFields}.</p>","!type":"fn() -> Object"},"getMethod":{"!doc":"<p>Returns the (computed) value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn() -> Object"},"getParameters":{"!doc":"<p>Returns the (computed) value of the property <code>parameters</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parameters}.</p>","!type":"fn() -> Object"},"getPassword":{"!doc":"<p>Returns the (computed) value of the property <code>password</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn() -> Object"},"getRequestHeaders":{"!doc":"<p>Returns the (computed) value of the property <code>requestHeaders</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requestHeaders}.</p>","!type":"fn() -> Object"},"getResponseHeader":{"!doc":"<p>Returns the request header of the request.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn(vLabel: string) -> Object"},"getResponseHeaders":{"!doc":"<p>Provides an hash of all response headers.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn() -> Object"},"getResponseText":{"!doc":"<p>Provides the response text from the request when available and null otherwise.\nBy passing true as the &#8220;partial&#8221; parameter of this method, incomplete data will\nbe made available to the caller.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn() -> string"},"getResponseType":{"!doc":"<p>Returns the (computed) value of the property <code>responseType</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn() -> Object"},"getResponseXml":{"!doc":"<p>Provides the <span class=\"caps\">XML</span> provided by the response if any and null otherwise.\nBy passing true as the &#8220;partial&#8221; parameter of this method, incomplete data will\nbe made available to the caller.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn() -> Object"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"getStatusCode":{"!doc":"<p>Returns the current status code of the request if available or -1 if not.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn() -> +Integer"},"getStatusText":{"!doc":"<p>Provides the status text for the current request if available and null otherwise.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn() -> string"},"getUrl":{"!doc":"<p>Returns the (computed) value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn() -> Object"},"getUseBasicHttpAuth":{"!doc":"<p>Returns the (computed) value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> Object"},"getUsername":{"!doc":"<p>Returns the (computed) value of the property <code>username</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn() -> Object"},"initAsynchronous":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>asynchronous</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn(value: Object) -> Object"},"initData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>data</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn(value: Object) -> Object"},"initFormFields":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>formFields</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #formFields}.</p>","!type":"fn(value: Object) -> Object"},"initMethod":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>method</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object) -> Object"},"initParameters":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>parameters</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #parameters}.</p>","!type":"fn(value: Object) -> Object"},"initPassword":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>password</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn(value: Object) -> Object"},"initRequestHeaders":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>requestHeaders</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #requestHeaders}.</p>","!type":"fn(value: Object) -> Object"},"initResponseType":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>responseType</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn(value: Object) -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"initUrl":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>url</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"initUseBasicHttpAuth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useBasicHttpAuth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn(value: Object) -> Object"},"initUsername":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>username</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn(value: Object) -> Object"},"isAsynchronous":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>asynchronous</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn() -> bool"},"isUseBasicHttpAuth":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useBasicHttpAuth</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> bool"},"resetAsynchronous":{"!doc":"<p>Resets the user value of the property <code>asynchronous</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn()"},"resetData":{"!doc":"<p>Resets the user value of the property <code>data</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn()"},"resetFormFields":{"!doc":"<p>Resets the user value of the property <code>formFields</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #formFields}.</p>","!type":"fn()"},"resetMethod":{"!doc":"<p>Resets the user value of the property <code>method</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn()"},"resetParameters":{"!doc":"<p>Resets the user value of the property <code>parameters</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #parameters}.</p>","!type":"fn()"},"resetPassword":{"!doc":"<p>Resets the user value of the property <code>password</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn()"},"resetRequestHeaders":{"!doc":"<p>Resets the user value of the property <code>requestHeaders</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #requestHeaders}.</p>","!type":"fn()"},"resetResponseType":{"!doc":"<p>Resets the user value of the property <code>responseType</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"resetUrl":{"!doc":"<p>Resets the user value of the property <code>url</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn()"},"resetUseBasicHttpAuth":{"!doc":"<p>Resets the user value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn()"},"resetUsername":{"!doc":"<p>Resets the user value of the property <code>username</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn()"},"send":{"!doc":"<p>Sending a request.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn()"},"setAsynchronous":{"!doc":"<p>Sets the user value of the property <code>asynchronous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn(value: Object) -> Object"},"setData":{"!doc":"<p>Sets the user value of the property <code>data</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #data}.</p>","!type":"fn(value: Object) -> Object"},"setFormFields":{"!doc":"<p>Sets the user value of the property <code>formFields</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #formFields}.</p>","!type":"fn(value: Object) -> Object"},"setMethod":{"!doc":"<p>Sets the user value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object) -> Object"},"setParameters":{"!doc":"<p>Sets the user value of the property <code>parameters</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parameters}.</p>","!type":"fn(value: Object) -> Object"},"setPassword":{"!doc":"<p>Sets the user value of the property <code>password</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #password}.</p>","!type":"fn(value: Object) -> Object"},"setRequestHeader":{"!doc":"<p>Add a request header to this transports qx.io.remote.Request.</p>\n\n<p>This method is virtual and concrete subclasses are supposed to\nimplement it.</p>","!type":"fn(vLabel: string, vValue: Object)"},"setRequestHeaders":{"!doc":"<p>Sets the user value of the property <code>requestHeaders</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requestHeaders}.</p>","!type":"fn(value: Object) -> Object"},"setResponseType":{"!doc":"<p>Sets the user value of the property <code>responseType</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #responseType}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"setUrl":{"!doc":"<p>Sets the user value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"setUseBasicHttpAuth":{"!doc":"<p>Sets the user value of the property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn(value: Object) -> Object"},"setUsername":{"!doc":"<p>Sets the user value of the property <code>username</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #username}.</p>","!type":"fn(value: Object) -> Object"},"timeout":{"!doc":"<p>Force the transport into the timeout state (&#8220;timeout&#8221;).</p>\n\n<p>Listeners of the &#8220;timeout&#8221; signal are notified about the event.</p>","!type":"fn()"},"toggleAsynchronous":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>asynchronous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #asynchronous}.</p>","!type":"fn() -> bool"},"toggleUseBasicHttpAuth":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useBasicHttpAuth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useBasicHttpAuth}.</p>","!type":"fn() -> bool"}}},"Iframe":{"!proto":"qx.io.remote.transport.Abstract","!doc":"<p>Transports requests to a server using an <span class=\"caps\">IFRAME</span>.</p>\n\n<p>This class should not be used directly by client programmers.</p>","!type":"fn()","isSupported":{"!doc":"<p>Returns always true, because iframe transport is supported by all browsers.</p>","!type":"fn() -> bool"},"prototype":{"_onload":{"!doc":"<p>Converting complete state to numeric value and update state property</p>","!type":"fn(e: +qx.event.type.Event)"},"_onreadystatechange":{"!doc":"<p>Converting named readyState to numeric value and update state property</p>","!type":"fn(e: +qx.event.type.Event)"},"_switchReadyState":{"!doc":"<p>Switches the readystate by setting the internal state.</p>","!type":"fn(vReadyState: string)"},"getFetchedLength":{"!doc":"<p>Returns the length of the content as fetched thus far.\nThis method needs implementation (returns always 0).</p>","!type":"fn() -> +Integer"},"getIframeBody":{"!doc":"<p>Returns the body node of the used iframe.</p>","!type":"fn() -> Object"},"getIframeDocument":{"!doc":"<p>Returns the document node of the used iframe.</p>","!type":"fn() -> Object"},"getIframeHtmlContent":{"!doc":"<p>Returns the iframe content as <span class=\"caps\">HTML</span>.</p>","!type":"fn() -> string"},"getIframeTextContent":{"!doc":"<p>Returns the iframe content (innerHTML) as text.</p>","!type":"fn() -> string"},"getIframeWindow":{"!doc":"<p>Returns the <span class=\"caps\">DOM</span> window object of the used iframe.</p>","!type":"fn() -> Object"},"getResponseContent":{"!doc":"<p>Returns the content of the response</p>","!type":"fn() -> +null"},"getResponseHeader":{"!doc":"<p>Returns the value of the given response header.</p>\n\n<p>This method is not implemented at the moment and returns always &#8220;null&#8221;.</p>","!type":"fn(vLabel: string) -> +null"},"getResponseHeaders":{"!doc":"<p>Provides an hash of all response headers.</p>\n\n<p>This method is not implemented at the moment and returns an empty map.</p>","!type":"fn() -> +Map"},"getStatusCode":{"!doc":"<p>Returns the current status code of the request if available or -1 if not.\nThis method needs implementation (returns always 200).</p>","!type":"fn() -> +Integer"},"getStatusText":{"!doc":"<p>Provides the status text for the current request if available and null otherwise.\nThis method needs implementation (returns always an empty string)</p>","!type":"fn() -> string"},"send":{"!doc":"<p>Sends a request with the use of a form.</p>","!type":"fn()"},"setRequestHeader":{"!doc":"<p>Sets a request header with the given value.</p>\n\n<p>This method is not implemented at the moment.</p>","!type":"fn(vLabel: string, vValue: Object)"}}},"Script":{"!proto":"qx.io.remote.transport.Abstract","!doc":"<p>Transports requests to a server using dynamic script tags.</p>\n\n<p>This class should not be used directly by client programmers.</p>","!type":"fn()","_requestFinished":{"!doc":"<p>This method can be called by the script loaded by the ScriptTransport\nclass.</p>","!type":"fn(id: string, content: string)"},"isSupported":{"!doc":"<p>Returns always true, because script transport is supported by all browsers.</p>","!type":"fn() -> bool"},"prototype":{"_switchReadyState":{"!doc":"<p>Switches the readystate by setting the internal state.</p>","!type":"fn(vReadyState: string)"},"getFetchedLength":{"!doc":"<p>Returns the length of the content as fetched thus far.\nThis method needs implementation (returns always 0).</p>","!type":"fn() -> +Integer"},"getResponseContent":{"!doc":"<p>Returns the content of the response.</p>","!type":"fn() -> +null"},"getResponseHeader":{"!doc":"<p>Returns the value of the given response header.</p>\n\n<p>This method is not implemented at the moment and returns always &#8220;null&#8221;.</p>","!type":"fn(vLabel: string) -> +null"},"getResponseHeaders":{"!doc":"<p>Provides an hash of all response headers.</p>\n\n<p>This method is not implemented at the moment and returns an empty map.</p>","!type":"fn() -> +Map"},"getStatusCode":{"!doc":"<p>Returns the current status code of the request if available or -1 if not.\nThis method needs implementation (returns always 200).</p>","!type":"fn() -> +Integer"},"getStatusText":{"!doc":"<p>Provides the status text for the current request if available and null otherwise.\nThis method needs implementation (returns always an empty string)</p>","!type":"fn() -> string"},"send":{"!doc":"<p>Sends the request using &#8220;script&#8221; elements</p>","!type":"fn()"},"setRequestHeader":{"!doc":"<p>Sets a request header with the given value.</p>\n\n<p>This method is not implemented at the moment.</p>","!type":"fn(vLabel: string, vValue: Object)"}}},"XmlHttp":{"!proto":"qx.io.remote.transport.Abstract","!doc":"<p>Transports requests to a server using the native XmlHttpRequest object.</p>\n\n<p>This class should not be used directly by client programmers.</p>","createRequestObject":{"!doc":"<p>Return a new XMLHttpRequest object suitable for the client browser.</p>","!type":"fn() -> Object"},"isSupported":{"!doc":"<p>Whether the transport type is supported by the client.</p>","!type":"fn() -> bool"},"prototype":{"_applyState":{"!doc":"<p>Apply method for the &#8220;state&#8221; property.\nFires an event for each state value to inform the listeners.</p>","!type":"fn(value: Object, old: Object)"},"_onreadystatechange":{"!doc":"<p>Listener method for change of the &#8220;readystate&#8221;.\nSets the internal state and informs the transport layer.</p>","!type":"fn(e: +Event)"},"failedLocally":{"!doc":"<p>Force the transport into the failed state (&#8220;failed&#8221;).</p>\n\n<p>This method should be used only if the requests <span class=\"caps\">URI</span> was local\naccess. I.e. it started with &#8220;file://&#8221;.</p>","!type":"fn()"},"getFetchedLength":{"!doc":"<p>Returns the length of the content as fetched thus far</p>","!type":"fn() -> +Integer"},"getParseJson":{"!doc":"<p>Returns the (computed) value of the property <code>parseJson</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn() -> Object"},"getReadyState":{"!doc":"<p>Get the ready state of this transports request.</p>\n\n<p>For qx.io.remote.transport.XmlHttp, ready state is a number between 1 to 4.</p>","!type":"fn() -> +Integer"},"getRequest":{"!doc":"<p>Returns the native request object</p>","!type":"fn() -> Object"},"getResponseContent":{"!doc":"<p>Returns the content of the response</p>","!type":"fn() -> +null"},"getResponseHeader":{"!doc":"<p>Returns a specific header provided by the server upon sending a request,\nwith header name determined by the argument headerName.</p>\n\n<p>Only available at readyState 3 and 4 universally and in readyState 2\nin Gecko.</p>\n\n<p>Please note: Some servers/proxies (such as Selenium RC) will capitalize\nresponse header names. This is in accordance with <span class=\"caps\">RFC</span> 2616<sup class=\"footnote\"><a href=\"#fn1\">1</a></sup>, which\nstates that <span class=\"caps\">HTTP</span> 1.1 header names are case-insensitive, so your\napplication should be case-agnostic when dealing with response headers.</p>\n\n<p>[1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\"><span class=\"caps\">RFC</span> 2616: <span class=\"caps\">HTTP</span> Message Headers</a></p>","!type":"fn(vLabel: string) -> string"},"getResponseHeaders":{"!doc":"<p>Provides a hash of all response headers.</p>","!type":"fn() -> Object"},"getResponseText":{"!doc":"<p>Provides the response text from the request when available and null\notherwise.  By passing true as the &#8220;partial&#8221; parameter of this method,\nincomplete data will be made available to the caller.</p>","!type":"fn() -> string"},"getResponseXml":{"!doc":"<p>Provides the <span class=\"caps\">XML</span> provided by the response if any and null otherwise.  By\npassing true as the &#8220;partial&#8221; parameter of this method, incomplete data will\nbe made available to the caller.</p>","!type":"fn() -> string"},"getStatusCode":{"!doc":"<p>Returns the current status code of the request if available or -1 if not.</p>","!type":"fn() -> +Integer"},"getStatusText":{"!doc":"<p>Provides the status text for the current request if available and null\notherwise.</p>","!type":"fn() -> string"},"getStringResponseHeaders":{"!doc":"<p>Returns all response headers of the request.</p>","!type":"fn() -> Object"},"initParseJson":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>parseJson</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn(value: Object) -> Object"},"isParseJson":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>parseJson</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn() -> bool"},"resetParseJson":{"!doc":"<p>Resets the user value of the property <code>parseJson</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn()"},"send":{"!doc":"<p>Implementation for sending the request</p>","!type":"fn()"},"setParseJson":{"!doc":"<p>Sets the user value of the property <code>parseJson</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn(value: Object) -> Object"},"setRequestHeader":{"!doc":"<p>Set a request header to this transports request.</p>","!type":"fn(vLabel: string, vValue: Object)"},"toggleParseJson":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>parseJson</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parseJson}.</p>","!type":"fn() -> bool"}}}}},"request":{"AbstractRequest":{"!proto":"qx.core.Object","!doc":"<p>AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\nand {@link qx.io.request.Jsonp}. It contains methods to conveniently\ncommunicate with transports found in {@link qx.bom.request}.</p>\n\n<p>The general procedure to derive a new request is to choose a\ntransport (override {@link #_createTransport}) and link\nthe transport&#8217;s response (override {@link #_getParsedResponse}).\nThe transport must implement {@link qx.bom.request.IRequest}.</p>\n\n<p>To adjust the behavior of {@link #send} override\n{@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.</p>","!type":"fn()","prototype":{"__getAuthRequestHeaders":{"!doc":"<p>Retrieve authentication headers from auth delegate.</p>","!type":"fn() -> +Map"},"__onReadyStateDone":{"!doc":"<p>Called internally when readyState is <span class=\"caps\">DONE</span>.</p>","!type":"fn()"},"_createTransport":{"!doc":"<p>Create and return transport.</p>\n\n<p>This method <span class=\"caps\">MUST</span> be overridden, unless the constructor is overridden as\nwell. It is called by the constructor and should return the transport that\nis to be interfaced.</p>","!type":"fn() -> +qx.bom.request"},"_fireStatefulEvent":{"!doc":"<p>Fire stateful event.</p>\n\n<p>Fires event and sets phase to name of event.</p>","!type":"fn(evt: string)"},"_getAllRequestHeaders":{"!doc":"<p>Get all request headers.</p>","!type":"fn() -> +Map"},"_getConfiguredRequestHeaders":{"!doc":"<p>Get configuration related request headers.</p>\n\n<p>This method <span class=\"caps\">MAY</span> be overridden to add request headers for features limited\nto a certain transport.</p>","!type":"fn() -> +Map"},"_getConfiguredUrl":{"!doc":"<p>Get configured <span class=\"caps\">URL</span>.</p>\n\n<p>A configured <span class=\"caps\">URL</span> typically includes a query string that\nencapsulates transport specific settings such as request\ndata or no-cache settings.</p>\n\n<p>This method <span class=\"caps\">MAY</span> be overridden. It is called in {@link #send}\nbefore the request is initialized.</p>","!type":"fn() -> string"},"_getMethod":{"!doc":"<p>Get method.</p>\n\n<p>This method <span class=\"caps\">MAY</span> be overridden. It is called in {@link #send}\nbefore the request is initialized.</p>","!type":"fn() -> string"},"_getParsedResponse":{"!doc":"<p>Get parsed response.</p>\n\n<p>Is called in the {@link #_onReadyStateChange} event handler\nto parse and store the transport&#8217;s response.</p>\n\n<p>This method <span class=\"caps\">MUST</span> be overridden.</p>","!type":"fn() -> string"},"_isAsync":{"!doc":"<p>Whether async.</p>\n\n<p>This method <span class=\"caps\">MAY</span> be overridden. It is called in {@link #send}\nbefore the request is initialized.</p>","!type":"fn() -> bool"},"_onAbort":{"!doc":"<p>Handle &#8220;abort&#8221; event.</p>","!type":"fn()"},"_onError":{"!doc":"<p>Handle &#8220;error&#8221; event.</p>","!type":"fn()"},"_onLoad":{"!doc":"<p>Handle &#8220;load&#8221; event.</p>","!type":"fn()"},"_onLoadEnd":{"!doc":"<p>Handle &#8220;loadEnd&#8221; event.</p>","!type":"fn()"},"_onReadyStateChange":{"!doc":"<p>Handle &#8220;readyStateChange&#8221; event.</p>","!type":"fn()"},"_onTimeout":{"!doc":"<p>Handle &#8220;timeout&#8221; event.</p>","!type":"fn()"},"_serializeData":{"!doc":"<p>Serialize data.</p>","!type":"fn(data: string) -> string"},"_setPhase":{"!doc":"<p>Set phase.</p>","!type":"fn(phase: string)"},"_setRequestHeaders":{"!doc":"<p>Apply configured request headers to transport.</p>\n\n<p>This method <span class=\"caps\">MAY</span> be overridden to customize application of request headers\nto transport.</p>","!type":"fn()"},"_setResponse":{"!doc":"<p>Set response.</p>","!type":"fn(response: string)"},"abort":{"!doc":"<p>Abort request.</p>","!type":"fn()"},"getAllResponseHeaders":{"!doc":"<p>Get all response headers from response.</p>","!type":"fn() -> string"},"getAuthentication":{"!doc":"<p>Returns the (computed) value of the property <code>authentication</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #authentication}.</p>","!type":"fn() -> Object"},"getPhase":{"!doc":"<p>Get current phase.</p>\n\n<p>A more elaborate version of {@link #getReadyState}, this method indicates\nthe current phase of the request. Maps to stateful (i.e. deterministic)\nevents (success, abort, timeout, statusError) and intermediate\nreadyStates (unsent, configured, loading, load).</p>\n\n<p>When the requests is successful, it progresses the states:</p>\n\n<p>&#8216;unsent&#8217;, &#8216;opened&#8217;, &#8216;sent&#8217;, &#8216;loading&#8217;, &#8216;load&#8217;, &#8216;success&#8217;</p>\n\n<p>In case of failure, the final state is one of:</p>\n\n<p>&#8216;abort&#8217;, &#8216;timeout&#8217;, &#8216;statusError&#8217;</p>\n\n<p>For each change of the phase, a {@link #changePhase} data event is fired.</p>","!type":"fn() -> string"},"getReadyState":{"!doc":"<p>Get current ready state.</p>\n\n<p>States can be:\n<span class=\"caps\">UNSENT</span>:           0,\n<span class=\"caps\">OPENED</span>:           1,\nHEADERS_RECEIVED: 2,\n<span class=\"caps\">LOADING</span>:          3,\n<span class=\"caps\">DONE</span>:             4</p>","!type":"fn() -> number"},"getRequestData":{"!doc":"<p>Returns the (computed) value of the property <code>requestData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requestData}.</p>","!type":"fn() -> Object"},"getRequestHeader":{"!doc":"<p>Get a request header.</p>","!type":"fn(key: string) -> string"},"getResponse":{"!doc":"<p>Get parsed response.</p>","!type":"fn() -> string"},"getResponseContentType":{"!doc":"<p>Get the content type response header from response.</p>","!type":"fn() -> string"},"getResponseHeader":{"!doc":"<p>Get a single response header from response.</p>","!type":"fn(key: string) -> string"},"getResponseText":{"!doc":"<p>Get raw (unprocessed) response.</p>","!type":"fn() -> string"},"getStatus":{"!doc":"<p>Get status code.</p>","!type":"fn() -> number"},"getStatusText":{"!doc":"<p>Get status text.</p>","!type":"fn() -> string"},"getTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn() -> Object"},"getTransport":{"!doc":"<p>Get low-level transport.</p>\n\n<p>Note: To be used with caution!</p>\n\n<p>This method can be used to query the transport directly,\nbut should be used with caution. Especially, it\nis not advisable to call any destructive methods\nsuch as <code>open</code> or <code>send</code>.</p>","!type":"fn() -> Object"},"getUrl":{"!doc":"<p>Returns the (computed) value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn() -> Object"},"initAuthentication":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>authentication</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #authentication}.</p>","!type":"fn(value: Object) -> Object"},"initRequestData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>requestData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #requestData}.</p>","!type":"fn(value: Object) -> Object"},"initTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"initUrl":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>url</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"},"isDone":{"!doc":"<p>Whether request completed (is done).</p>","!type":"fn()"},"overrideResponseContentType":{"!doc":"<p>Override the content type response header from response.</p>","!type":"fn(contentType: string)"},"removeRequestHeader":{"!doc":"<p>Remove a request header.</p>\n\n<p>Note: Removing request headers has no effect after the request was send.</p>","!type":"fn(key: string)"},"resetAuthentication":{"!doc":"<p>Resets the user value of the property <code>authentication</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #authentication}.</p>","!type":"fn()"},"resetRequestData":{"!doc":"<p>Resets the user value of the property <code>requestData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #requestData}.</p>","!type":"fn()"},"resetTimeout":{"!doc":"<p>Resets the user value of the property <code>timeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn()"},"resetUrl":{"!doc":"<p>Resets the user value of the property <code>url</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn()"},"send":{"!doc":"<p>Send request.</p>","!type":"fn()"},"setAuthentication":{"!doc":"<p>Sets the user value of the property <code>authentication</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #authentication}.</p>","!type":"fn(value: Object) -> Object"},"setRequestData":{"!doc":"<p>Sets the user value of the property <code>requestData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requestData}.</p>","!type":"fn(value: Object) -> Object"},"setRequestHeader":{"!doc":"<p>Set a request header.</p>\n\n<p>Note: Setting request headers has no effect after the request was send.</p>","!type":"fn(key: string, value: string)"},"setTimeout":{"!doc":"<p>Sets the user value of the property <code>timeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timeout}.</p>","!type":"fn(value: Object) -> Object"},"setUrl":{"!doc":"<p>Sets the user value of the property <code>url</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #url}.</p>","!type":"fn(value: Object) -> Object"}}},"authentication":{"Basic":{"!proto":"qx.core.Object","!doc":"<p>Basic authentication.</p>","!type":"fn()","prototype":{"getAuthHeaders":{"!doc":"<p>Headers to include for basic authentication.</p>","!type":"fn() -> +Map"}}},"IAuthentication":{"!doc":"<p>Interface of an authentication delegate.</p>","prototype":{"getAuthHeaders":{"!doc":"<p>Headers to include in request for authentication purposes.</p>","!type":"fn() -> +Map"}}}},"Jsonp":{"!proto":"qx.io.request.AbstractRequest","!doc":"<p>Query <span class=\"caps\">JSONP</span> services using the script element. Requests may be cross-origin.</p>\n\n<p>Configuration of the request is done with properties. Events are fired for\nvarious states in the life cycle of a request, such as &#8220;success&#8221;. Request\ndata is transparently processed.</p>\n\n<p>For an introduction to <span class=\"caps\">JSONP</span>, please refer to\n<a href=\"http://ajaxian.com/archives/jsonp-json-with-padding\">Ajaxian.com</a>.</p>\n\n<p>Here is how to request a <span class=\"caps\">JSON</span> file from a <span class=\"caps\">REST</span> service and listen to\nthe &#8220;success&#8221; event:</p>\n\n<pre class=\"javascript\">\nvar req = new qx.io.request.Jsonp();\nreq.setUrl(\"http://feeds.delicious.com/v2/json/popular\");\n\n// Some services have a fixed callback name\n// req.setCallbackName(\"callback\");\n\nreq.addListener(\"success\", function(e) {\n  var req = e.getTarget();\n\n  // HTTP status code indicating success, e.g. 200\n  req.getStatus();\n\n  // \"success\"\n  req.getPhase();\n\n  // JSON response\n  req.getResponse();\n}, this);\n\n// Send request\nreq.send();\n</pre>\n\n<p>Some noteable features:</p>\n\n<ul>\n<li>Abstraction of low-level request</li>\n<li>Convenient setup using properties</li>\n<li>Fine-grained events</li>\n<li>Symbolic phases</li>\n<li>Transparent processing of request data</li>\n<li>Stream-lined authentication</li>\n<li>Flexible callback handling</li>\n<li>Cross-origin requests</li>\n</ul>\n\n<p>In order to debug requests, set the environment flag\n<code>qx.debug.io</code>.</p>\n\n<p>Internally uses {@link qx.bom.request.Jsonp}.</p>","prototype":{"_createTransport":{"!doc":"<p>Create <span class=\"caps\">JSONP</span> transport.</p>","!type":"fn() -> +qx.bom.request.Jsonp"},"_getConfiguredUrl":{"!doc":"<p>Get configured <span class=\"caps\">URL</span>.</p>\n\n<p>Append request data to <span class=\"caps\">URL</span>. Also append random string\nto <span class=\"caps\">URL</span> if required by value of {@link #cache}.</p>","!type":"fn() -> string"},"_getParsedResponse":{"!doc":"<p>Return the transport&#8217;s responseJson property.</p>\n\n<p>See {@link qx.bom.request.Jsonp}.</p>","!type":"fn() -> Object"},"getCache":{"!doc":"<p>Returns the (computed) value of the property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn() -> Object"},"initCache":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cache</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn(value: Object) -> Object"},"isCache":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>cache</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn() -> bool"},"resetCache":{"!doc":"<p>Resets the user value of the property <code>cache</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn()"},"setCache":{"!doc":"<p>Sets the user value of the property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn(value: Object) -> Object"},"setCallbackName":{"!doc":"<p>Set callback name.</p>\n\n<p>See {@link qx.bom.request.Jsonp#setCallbackName}.</p>","!type":"fn(name: string)"},"setCallbackParam":{"!doc":"<p>Set callback parameter.</p>\n\n<p>See {@link qx.bom.request.Jsonp#setCallbackParam}.</p>","!type":"fn(param: string)"},"toggleCache":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn() -> bool"}}},"Xhr":{"!proto":"qx.io.request.AbstractRequest","!doc":"<p>Send <span class=\"caps\">HTTP</span> requests and handle responses using the <span class=\"caps\">HTTP</span> client <span class=\"caps\">API</span>.</p>\n\n<p>Configuration of the request is done with properties. Events are fired for\nvarious states in the life cycle of a request, such as &#8220;success&#8221;. Request\ndata is transparently processed.</p>\n\n<p>Here is how to request a <span class=\"caps\">JSON</span> file and listen to the &#8220;success&#8221; event:</p>\n\n<pre class=\"javascript\">\nvar req = new qx.io.request.Xhr(\"/some/path/file.json\");\n\nreq.addListener(\"success\", function(e) {\n  var req = e.getTarget();\n\n  // Response parsed according to the server's\n  // response content type, e.g. JSON\n  req.getResponse();\n}, this);\n\n// Send request\nreq.send();\n</pre>\n\n<p>Some noteable features:</p>\n\n<ul>\n<li>Abstraction of low-level request</li>\n<li>Convenient setup using properties</li>\n<li>Fine-grained events</li>\n<li>Symbolic phases</li>\n<li>Transparent processing of request data</li>\n<li>Stream-lined authentication</li>\n<li>Automagic parsing of response based on content type</li>\n</ul>\n\n<p>Cross-origin requests are supported, but require browser support\n(see <a href=\"http://caniuse.com/#search=CORS\">caniuse.com</a>) and backend configuration\n(see <a href=\"https://developer.mozilla.org/en-US/docs/docs/HTTP/Access_control_CORS><span class=\"><span class=\"caps\">MDN</span></a>).\nNote that IE&#8217;s <code>XDomainRequest</code> is not currently supported.\nFor a cross-browser alternative, consider {@link qx.io.request.Jsonp}.</p>\n\n<p>In order to debug requests, set the environment flag\n<code>qx.debug.io</code>.</p>\n\n<p>Internally uses {@link qx.bom.request.Xhr}.</p>","!type":"fn()","prototype":{"_createResponseParser":{"!doc":"<p>Create response parser.</p>","!type":"fn() -> +qx.util.ResponseParser"},"_createTransport":{"!doc":"<p>Create <span class=\"caps\">XHR</span> transport.</p>","!type":"fn() -> +qx.bom.request.Xhr"},"_getConfiguredRequestHeaders":{"!type":"fn()"},"_getConfiguredUrl":{"!doc":"<p>Get configured <span class=\"caps\">URL</span>.</p>\n\n<p>Append request data to <span class=\"caps\">URL</span> if <span class=\"caps\">HTTP</span> method is <span class=\"caps\">GET</span>. Append random\nstring to <span class=\"caps\">URL</span> if required by value of {@link #cache}.</p>","!type":"fn() -> string"},"_getMethod":{"!type":"fn()"},"_getParsedResponse":{"!doc":"<p>Returns response parsed with parser determined by content type.</p>","!type":"fn() -> string"},"_isAsync":{"!type":"fn()"},"getAccept":{"!doc":"<p>Returns the (computed) value of the property <code>accept</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #accept}.</p>","!type":"fn() -> Object"},"getAsync":{"!doc":"<p>Returns the (computed) value of the property <code>async</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #async}.</p>","!type":"fn() -> Object"},"getCache":{"!doc":"<p>Returns the (computed) value of the property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn() -> Object"},"getMethod":{"!doc":"<p>Returns the (computed) value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn() -> Object"},"initAccept":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>accept</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #accept}.</p>","!type":"fn(value: Object) -> Object"},"initAsync":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>async</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #async}.</p>","!type":"fn(value: Object) -> Object"},"initCache":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cache</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn(value: Object) -> Object"},"initMethod":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>method</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object) -> Object"},"isAsync":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>async</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #async}.</p>","!type":"fn() -> bool"},"resetAccept":{"!doc":"<p>Resets the user value of the property <code>accept</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #accept}.</p>","!type":"fn()"},"resetAsync":{"!doc":"<p>Resets the user value of the property <code>async</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #async}.</p>","!type":"fn()"},"resetCache":{"!doc":"<p>Resets the user value of the property <code>cache</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn()"},"resetMethod":{"!doc":"<p>Resets the user value of the property <code>method</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn()"},"setAccept":{"!doc":"<p>Sets the user value of the property <code>accept</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #accept}.</p>","!type":"fn(value: Object) -> Object"},"setAsync":{"!doc":"<p>Sets the user value of the property <code>async</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #async}.</p>","!type":"fn(value: Object) -> Object"},"setCache":{"!doc":"<p>Sets the user value of the property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>","!type":"fn(value: Object) -> Object"},"setMethod":{"!doc":"<p>Sets the user value of the property <code>method</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #method}.</p>","!type":"fn(value: Object) -> Object"},"setParser":{"!doc":"<p>Set parser used to parse response once request has\ncompleted successfully.</p>","!type":"fn(parser: string) -> fn()"},"toggleAsync":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>async</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #async}.</p>","!type":"fn() -> bool"}}}},"rest":{"Resource":{"!proto":"qx.core.Object","!doc":"<p>Client-side wrapper of a <span class=\"caps\">REST</span> resource.</p>\n\n<p>Each instance represents a resource in terms of <span class=\"caps\">REST</span>. A number of actions\n(usually <span class=\"caps\">HTTP</span> methods) unique to the resource can be defined and invoked.\nA resource with its actions is configured declaratively by passing a resource\ndescription to the constructor, or programatically using {@link #map}.</p>\n\n<p>Each action is associated to a route. A route is a combination of method,\n<span class=\"caps\">URL</span> pattern and optional parameter constraints.</p>\n\n<p>An action is invoked by calling a method with the same name. When a <span class=\"caps\">URL</span>\npattern of a route contains positional parameters, those parameters must be\npassed when invoking the associated action. Also, constraints defined in the\nroute must be satisfied.</p>\n\n<p>When an action is invoked, a request is configured according to the associated\nroute, is passed the <span class=\"caps\">URL</span> parameters, request body data, and finally send.\nWhat kind of request is send can be configured by overwriting {@link #_getRequest}.</p>\n\n<p>No contraints on the action&#8217;s name or the scope of the URLs are imposed. However,\nif you want to follow RESTful design patterns it is recommended to name actions\nthe same as the <span class=\"caps\">HTTP</span> action.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n \"post\": { method: \"POST\", url: \"/photos/\"}\n};\nvar photo = new qx.io.rest.Resource(description);\n// Can also be written: photo.invoke(\"get\", {id: 1});\nphoto.get({id: 1});\n\n// Additionally sets request data (provide it as string or set the content type)\n// In a RESTful environment this creates a new resource with the given 'id'\nphoto.configureRequest(function(req) {\n req.setRequestHeader(\"Content-Type\", \"application/json\");\n});\nphoto.put({id: 1}, {title: \"Monkey\"});\n\n// Additionally sets request data (provide it as string or set the content type)\n// In a RESTful environment this adds a new resource to the resource collection 'photos'\nphoto.configureRequest(function(req) {\n req.setRequestHeader(\"Content-Type\", \"application/json\");\n});\nphoto.post(null, {title: \"Monkey\"});\n</pre>\n\n<p>To check for existence of <span class=\"caps\">URL</span> parameters or constrain them to a certain format, you\ncan add a <code>check</code> property to the description. See {@link #map} for details.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n};\nvar photo = new qx.io.rest.Resource(description);\n// photo.get({id: \"FAIL\"});\n// -- Error: \"Parameter 'id' is invalid\"\n</pre>\n\n<p>If your description happens to use the same action more than once, consider\ndefining another resource.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photos\"},\n};\n// Distinguish \"photo\" (singular) and \"photos\" (plural) resource\nvar photos = new qx.io.rest.Resource(description);\nphotos.get();\n</pre>\n\n<p>Basically, all routes of a resource should point to the same <span class=\"caps\">URL</span> (resource in\nterms of <span class=\"caps\">HTTP</span>). One acceptable exception of this constraint are resources where\nrequired parameters are part of the <span class=\"caps\">URL</span> (<code>/photos/1/</code>) or filter\nresources. For instance:</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n};\nvar photos = new qx.io.rest.Resource(description);\nphotos.get();\nphotos.get({tag: \"wildlife\"})\n</pre>\n\n<p>Strictly speaking, the <code>photos</code> instance represents two distinct resources\nand could therefore just as well mapped to two distinct resources (for instance,\nnamed photos and photosTagged). What style to choose depends on the kind of data\nreturned. For instance, it seems sensible to stick with one resource if the filter\nonly limits the result set (i.e. the invidual results have the same properties).</p>\n\n<p>In order to respond to successful (or erroneous) invocations of actions,\neither listen to the generic &#8220;success&#8221; or &#8220;error&#8221; event and get the action\nfrom the event data, or listen to action specific events defined at runtime.\nAction specific events follow the pattern &#8221;&lt;action&gt;Success&#8221; and\n&#8221;&lt;action&gt;Error&#8221;, e.g. &#8220;indexSuccess&#8221;.</p>","!type":"fn()","placeholdersFromUrl":{"!doc":"<p>Get placeholders from <span class=\"caps\">URL</span>.</p>","!type":"fn(url: string) -> +Array"},"prototype":{"__addAction":{"!doc":"<p>Map actions to members.</p>","!type":"fn(action: string, method: string, url: string, check?: +Map)"},"__declareEvent":{"!doc":"<p>Declare event at runtime.</p>","!type":"fn(type: string)"},"__mapFromDescription":{"!doc":"<p>Map actions from description.</p>\n\n<p>Allows to decoratively define routes.</p>","!type":"fn(description: +Map)"},"_getRequest":{"!doc":"<p>Get request.</p>\n\n<p>May be overriden to change type of request.</p>","!type":"fn() -> +qx.io.request.Xhr"},"_getRequestConfig":{"!doc":"<p>Get request configuration for action and parameters.</p>\n\n<p>This is were placeholders are replaced with parameters.</p>","!type":"fn(action: string, params: +Map) -> +Map"},"_getResource":{"!doc":"<p>Get resource.</p>\n\n<p>May be overriden to change type of resource.</p>","!type":"fn(description?: +Map) -> +qx.bom.rest.Resource"},"_getThrottleCount":{"!doc":"<p>Override to adjust the throttle count.</p>","!type":"fn() -> +Integer"},"_getThrottleLimit":{"!doc":"<p>Override to adjust the throttle limit.</p>","!type":"fn() -> +Integer"},"_tailorResource":{"!doc":"<p>Tailors (apply dependency injection) the given resource to fit our needs.</p>","!type":"fn(resource: +qx.bom.rest.Resource) -> +qx.bom.rest.Resource"},"abort":{"!doc":"<p>Abort action.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n  // Abort all invocations of action\n  res.get({id: 1});\n  res.get({id: 2});\n  res.abort(\"get\");\n\n  // Abort specific invocation of action (by id)\n  var actionId = res.get({id: 1});\n  res.abort(actionId);\n</pre>","!type":"fn(varargs: string)"},"configureRequest":{"!doc":"<p>Configure request.</p>","!type":"fn(callback: fn())"},"invoke":{"!doc":"<p>Invoke action with parameters.</p>\n\n<p>Internally called by actions dynamically created.</p>\n\n<p>May be overriden to customize action and parameter handling.</p>","!type":"fn(action: string, params: +Map, data: +Map) -> number"},"longPoll":{"!doc":"<p>Long-poll action.</p>\n\n<p>Use Ajax long-polling to continously fetch a resource as soon as the\nserver signals new data. The server determines when new data is available,\nwhile the client keeps open a request. Requires configuration on the\nserver side. Basically, the server must not close a connection until\nnew data is available. For a high level introduction to long-polling,\nrefer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\nAjax with long polling</a>.</p>\n\n<p>Uses {@link #refresh} internally. Make sure you understand the\nimplications of IE&#8217;s tendency to cache overly agressive.</p>\n\n<p>Note no interval is given on the client side.</p>","!type":"fn(action: string) -> string"},"map":{"!doc":"<p>Map action to combination of method and <span class=\"caps\">URL</span> pattern.</p>\n\n<pre class=\"javascript\">\n  res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n\n  // GET /photos/123\n  res.get({id: \"123\"});\n</pre>","!type":"fn(action: string, method: string, url: string, check?: +Map)"},"poll":{"!doc":"<p>Periodically invoke action.</p>\n\n<p>Replays parameters given when action was invoked originally. When the\naction was not yet invoked and requires parameters, parameters must be\ngiven.</p>\n\n<p>Please note that IE tends to cache overly agressive. One work-around is\nto disable caching on the client side by configuring the request with\n<code>setCache(false)</code>. If you control the server, a better\nwork-around is to include appropriate headers to explicitly control\ncaching. This way you still avoid requests that can be correctly answered\nfrom cache (e.g. when nothing has changed since the last poll). Please\nrefer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\nXMLHttpRequest Caching Test</a> for available options.</p>","!type":"fn(action: string, interval: number, params?: +Map, immediately?: bool) -> +qx.event.Timer"},"refresh":{"!doc":"<p>Resend request associated to action.</p>\n\n<p>Replays parameters given when action was invoked originally.</p>","!type":"fn(action: string)"},"setBaseUrl":{"!doc":"<p>Set base <span class=\"caps\">URL</span>.</p>\n\n<p>The base <span class=\"caps\">URL</span> is prepended to the URLs given in the description.\nChanges affect all future invocations.</p>","!type":"fn(baseUrl: string)"}}}}},"lang":{"Array":{"!doc":"<p>Static helper functions for arrays with a lot of often used convenience\nmethods like <code>remove</code> or <code>contains</code>.</p>\n\n<p>The native JavaScript Array is not modified by this class. However,\nthere are modifications to the native Array in {@link qx.lang.normalize.Array} for\nbrowsers that do not support certain JavaScript features natively .</p>","append":{"!doc":"<p>Append the elements of an array to the array</p>","!type":"fn(arr1: +Array, arr2: +Array) -> +Array"},"cast":{"!doc":"<p>Converts an array like object to any other array like\nobject.</p>\n\n<p>Attention: The returned array may be same\ninstance as the incoming one if the constructor is identical!</p>","!type":"fn(object: Object, constructor: fn(), offset?: +Integer) -> +Array"},"clone":{"!doc":"<p>Return a copy of the given array</p>","!type":"fn(arr: +Array) -> +Array"},"contains":{"!doc":"<p>Whether the array contains the given element</p>","!type":"fn(arr: +Array, obj: Object) -> bool"},"equals":{"!doc":"<p>Check whether the two arrays have the same content. Checks only the\nequality of the arrays&#8217; content.</p>","!type":"fn(arr1: +Array, arr2: +Array) -> bool"},"exclude":{"!doc":"<p>Modifies the first array as it removes all elements\nwhich are listed in the second array as well.</p>","!type":"fn(arr1: +Array, arr2: +Array) -> +Array"},"fromArguments":{"!doc":"<p>Convert an arguments object into an array.</p>","!type":"fn(args: +arguments, offset?: +Integer) -> +Array"},"fromCollection":{"!doc":"<p>Convert a (node) collection into an array</p>","!type":"fn(coll: Object) -> +Array"},"fromShortHand":{"!doc":"<p>Expand shorthand definition to a four element list.\nThis is an utility function for padding/margin and all other shorthand handling.</p>","!type":"fn(input: +Array) -> +Array"},"insertAfter":{"!doc":"<p>Insert an element into the array after a given second element.</p>","!type":"fn(arr: +Array, obj: Object, obj2: Object) -> +Array"},"insertAt":{"!doc":"<p>Insert an element at a given position into the array</p>","!type":"fn(arr: +Array, obj: Object, i: +Integer) -> +Array"},"insertBefore":{"!doc":"<p>Insert an element into the array before a given second element.</p>","!type":"fn(arr: +Array, obj: Object, obj2: Object) -> +Array"},"max":{"!doc":"<p>Returns the highest value in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: number) -> number"},"min":{"!doc":"<p>Returns the lowest value in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: number) -> number"},"remove":{"!doc":"<p>Remove an element from the array.</p>","!type":"fn(arr: +Array, obj: Object) -> Object"},"removeAll":{"!doc":"<p>Remove all elements from the array</p>","!type":"fn(arr: +Array) -> +Array"},"removeAt":{"!doc":"<p>Remove an element from the array at the given index</p>","!type":"fn(arr: +Array, i: +Integer) -> Object"},"sum":{"!doc":"<p>Returns the sum of all values in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: number) -> number"},"unique":{"!doc":"<p>Recreates an array which is free of all duplicate elements from the original.</p>\n\n<p>This method does not modify the original array!</p>\n\n<p>Keep in mind that this methods deletes undefined indexes.</p>","!type":"fn(arr: +Array) -> +Array"}},"Function":{"!doc":"<p>Collection of helper methods operating on functions.</p>","attempt":{"!doc":"<p>Tries to execute the function.</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">var result = qx.lang.Function.attempt(myFunction, [self, [varargs...]]);</pre>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nvar myObject = {\n  'cow': 'moo!'\n};\n\nvar myFunction = function()\n{\n  for(var i = 0; i < arguments.length; i++) {\n    if(!this[arguments[i]]) throw('doh!');\n  }\n};\n\nvar result = qx.lang.Function.attempt(myFunction, myObject, 'pig', 'cow'); // false\n</pre>","!type":"fn(func: fn(), self?: Object, varargs?: +arguments) -> bool"},"bind":{"!doc":"<p>Returns a function whose &#8220;this&#8221; is altered.</p>\n\n<p><strong>Native way</strong></p>\n\n<p>This is also a feature of JavaScript 1.8.5 and will be supplied\nby modern browsers. Including {@link qx.lang.normalize.Function}\nwill supply a cross browser normalization of the native\nimplementation. We like to encourage you to use the native function!</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">qx.lang.Function.bind(myFunction, [self, [varargs...]]);</pre>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nfunction myFunction()\n{\n  this.setStyle('color', 'red');\n  // note that 'this' here refers to myFunction, not an element\n  // we'll need to bind this function to the element we want to alter\n};\n\nvar myBoundFunction = qx.lang.Function.bind(myFunction, myElement);\nmyBoundFunction(); // this will make the element myElement red.\n</pre>\n\n<p>If you find yourself using this static method a lot, you may be\ninterested in the bindTo() method in the mixin qx.core.MBindTo.</p>","!type":"fn(func: fn(), self?: Object, varargs?: +arguments) -> fn()"},"create":{"!doc":"<p>Base function for creating functional closures which is used by most other methods here.</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">var createdFunction = qx.lang.Function.create(myFunction, [options]);</pre>","!type":"fn(func: fn(), options?: +Map) -> fn()"},"curry":{"!doc":"<p>Returns a function whose arguments are pre-configured.</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">qx.lang.Function.curry(myFunction, [varargs...]);</pre>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nfunction myFunction(elem) {\n  elem.setStyle('color', 'red');\n};\n\nvar myBoundFunction = qx.lang.Function.curry(myFunction, myElement);\nmyBoundFunction(); // this will make the element myElement red.\n</pre>","!type":"fn(func: fn(), varargs: +arguments) -> Object"},"delay":{"!doc":"<p>Delays the execution of a function by a specified duration.</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">var timeoutID = qx.lang.Function.delay(myFunction, [delay, [self, [varargs...]]]);</pre>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nvar myFunction = function(){ alert('moo! Element id is: ' + this.id); };\n//wait 50 milliseconds, then call myFunction and bind myElement to it\nqx.lang.Function.delay(myFunction, 50, myElement); // alerts: 'moo! Element id is: ... '\n\n// An anonymous function, example\nqx.lang.Function.delay(function(){ alert('one second later...'); }, 1000); //wait a second and alert\n</pre>","!type":"fn(func: fn(), delay: +Integer, self?: Object, varargs?: +arguments) -> +Integer"},"getCaller":{"!doc":"<p>Extract the caller of a function from the arguments variable.\nThis will not work in Opera < 9.6.</p>","!type":"fn(args: +arguments) -> fn()"},"getName":{"!doc":"<p>Try to get a sensible textual description of a function object.\nThis may be the class/mixin and method name of a function\nor at least the signature of the function.</p>","!type":"fn(fcn: fn()) -> string"},"globalEval":{"!doc":"<p>Evaluates JavaScript code globally</p>","!type":"fn(data: string) -> Object"},"listener":{"!doc":"<p>Returns a function which could be used as a listener for a native event callback.</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">qx.lang.Function.listener(myFunction, [self, [varargs...]]);</pre>","!type":"fn(func: fn(), self?: Object, varargs?: +arguments) -> Object"},"periodical":{"!doc":"<p>Executes a function in the specified intervals of time</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"javascript\">var intervalID = qx.lang.Function.periodical(myFunction, [period, [self, [varargs...]]]);</pre>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nvar Site = { counter: 0 };\nvar addCount = function(){ this.counter++; };\nqx.lang.Function.periodical(addCount, 1000, Site); // will add the number of seconds at the Site\n</pre>","!type":"fn(func: fn(), interval: +Integer, self?: Object, varargs?: +arguments) -> +Integer"}},"Json":{"!doc":"<p>Exposes (potentially polyfilled or patched) window.JSON to qooxdoo\n(enabled by <a href=\"https://github.com/bestiejs/json3\"><span class=\"caps\">JSON</span> 3</a>).</p>","parse":{"!doc":"<p>This method parses a <span class=\"caps\">JSON</span> text to produce an object or array.\nIt can throw a SyntaxError exception.</p>\n\n<p>The optional reviver parameter is a function that can filter and\ntransform the results. It receives each of the keys and values,\nand its return value is used instead of the original value.\nIf it returns what it received, then the structure is not modified.\nIf it returns undefined then the member is deleted.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n// Parse the text. Values that look like ISO date strings will\n// be converted to Date objects.\n\nmyData = JSON.parse(text, function (key, value)\n{\n  if (typeof value === 'string')\n  {\n    var a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n    if (a) {\n      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n    }\n  }\n  return value;\n});\n\nmyData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n    var d;\n    if (typeof value === 'string' &&\n            value.slice(0, 5) === 'Date(' &&\n            value.slice(-1) === ')') {\n        d = new Date(value.slice(5, -1));\n        if (d) {\n            return d;\n        }\n    }\n    return value;\n});\n</pre>","!type":"fn(text: string, reviver?: fn()) -> Object"},"stringify":{"!doc":"<p>This method produces a <span class=\"caps\">JSON</span> text from a JavaScript value.</p>\n\n<p>When an object value is found, if the object contains a toJSON\nmethod, its toJSON method will be called and the result will be\nstringified. A toJSON method does not serialize: it returns the\nvalue represented by the name/value pair that should be serialized,\nor undefined if nothing should be serialized. The toJSON method\nwill be passed the key associated with the value, and this will be\nbound to the object holding the key.</p>\n\n<p>For example, this would serialize Dates as <span class=\"caps\">ISO</span> strings.</p>\n\n<pre class=\"javascript\">\n    Date.prototype.toJSON = function (key) {\n        function f(n) {\n            // Format integers to have at least two digits.\n            return n < 10 ? '0' + n : n;\n        }\n\n        return this.getUTCFullYear()   + '-' +\n             f(this.getUTCMonth() + 1) + '-' +\n             f(this.getUTCDate())      + 'T' +\n             f(this.getUTCHours())     + ':' +\n             f(this.getUTCMinutes())   + ':' +\n             f(this.getUTCSeconds())   + 'Z';\n    };\n</pre>\n\n<p>You can provide an optional replacer method. It will be passed the\nkey and value of each member, with this bound to the containing\nobject. The value that is returned from your method will be\nserialized. If your method returns undefined, then the member will\nbe excluded from the serialization.</p>\n\n<p>If the replacer parameter is an array of strings, then it will be\nused to select the members to be serialized. It filters the results\nsuch that only members with keys listed in the replacer array are\nstringified.</p>\n\n<p>Values that do not have <span class=\"caps\">JSON</span> representations, such as undefined or\nfunctions, will not be serialized. Such values in objects will be\ndropped; in arrays they will be replaced with null. You can use\na replacer function to replace those with <span class=\"caps\">JSON</span> values.\n<span class=\"caps\">JSON</span>.stringify(undefined) returns undefined.</p>\n\n<p>The optional space parameter produces a stringification of the\nvalue that is filled with line breaks and indentation to make it\neasier to read.</p>\n\n<p>If the space parameter is a non-empty string, then that string will\nbe used for indentation. If the space parameter is a number, then\nthe indentation will be that many spaces.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\ntext = JSON.stringify(['e', {pluribus: 'unum'}]);\n// text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\ntext = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n// text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\ntext = JSON.stringify([new Date()], function (key, value) {\n    return this[key] instanceof Date ?\n        'Date(' + this[key] + ')' : value;\n});\n// text is '[\"Date(---current time---)\"]'\n</pre>","!type":"fn(value: Object, replacer?: fn(), space?: string) -> string"}},"normalize":{"Array":{"!doc":"<p>This class is responsible for the normalization of the native &#8216;Array&#8217; object.\nIt checks if these methods are available and, if not, appends them to\nensure compatibility in all browsers.\nFor usage samples, check out the attached links.</p>\n\n<p><span class=\"caps\">MDN</span> documentation &copy; Mozilla Contributors.</p>","every":{"!doc":"<p>The <code>every()</code> method tests whether all elements\nin the array pass the test implemented by the provided function.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.16\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), obj?: Object) -> +Array"},"filter":{"!doc":"<p>The <code>filter()</code> method creates a new array with\nall elements that pass the test implemented by the provided\nfunction.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.20\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), obj?: Object) -> +Array"},"forEach":{"!doc":"<p>The <code>forEach()</code> method executes a provided function\nonce per array element. You can not break the loop with this function.\nIf you want to do so, use {@link #some} or {@link #every}.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.18\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), obj?: Object)"},"indexOf":{"!doc":"<p>The <code>indexOf()</code> method returns the first index at which a given\nelement can be found in the array, or -1 if it is not present.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.14\">Annotated ES5 Spec</a>","!type":"fn(searchElement: Object, fromIndex?: +Integer) -> +Integer"},"lastIndexOf":{"!doc":"<p>The <code>lastIndexOf()</code> method returns the last index\nat which a given element can be found in the array, or -1 if\nit is not present. The array is searched backwards, starting at\n<code>fromIndex</code>.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.15\">Annotated ES5 Spec</a>","!type":"fn(searchElement: Object, fromIndex?: +Integer) -> +Integer"},"map":{"!doc":"<p>The <code>map()</code> method creates a new array with\nthe results of calling a provided function on every\nelement in this array.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.19\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), obj?: Object) -> +Array"},"reduce":{"!doc":"<p>The <code>reduce()</code> method applies a function against\nan accumulator and each value of the array (from left-to-right)\nhas to reduce it to a single value.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.21\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), init?: Object) -> Object"},"reduceRight":{"!doc":"<p>The reduceRight() method applies a function against an\naccumulator and each value of the array (from right-to-left)\nas to reduce it to a single value.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.22\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), init?: Object) -> Object"},"some":{"!doc":"<p>The <code>some()</code> method tests whether some\nelement in the array passes the test implemented by\nthe provided function.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.4.4.17\">Annotated ES5 Spec</a>","!type":"fn(callback: fn(), obj?: Object) -> +Array"}},"Date":{"!doc":"<p>This class is responsible for the normalization of the native &#8216;Date&#8217; object.\nIt checks if these methods are available and, if not, appends them to\nensure compatibility in all browsers.\nFor usage samples, check out the attached links.</p>","now":{"!doc":"<p>Returns the time elapsed since January 1, 1970 in milliseconds.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.9.4.4\">Annotated ES5 Spec</a>","!type":"fn() -> +Integer"}},"Error":{"!doc":"<p>This class is responsible for the normalization of the native &#8216;Error&#8217; object.\nIt contains a simple bugfix for toString which might not print out the proper\nerror message.</p>","toString":{"!doc":"<p>Returns a string representation of the Error object.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/toString\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.11.4.4\">Annotated ES5 Spec</a>","!type":"fn() -> string"}},"Function":{"!doc":"<p>This class is responsible for the normalization of the native &#8216;Function&#8217; object.\nIt checks if these methods are available and, if not, appends them to\nensure compatibility in all browsers.\nFor usage samples, check out the attached links.</p>","bind":{"!doc":"<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.3.4.5\">Annotated ES5 Spec</a>\n\n<p>Example for the <code>bind</code> method:</p>\n\n<pre class=\"javascript\">\n// sample code, assumes the used variables are already defined\n\n// the listener method demonstrates how to pass dynamic values\n// to a method using 'bind'\nvar changeValueListener = function(value, event) {\n  // value is passed by the 'bind' method: its value is 'myArray[i]'\n  // second argument is passed by the 'on' method: its value is a event object\n  // 'this' is pointing to 'myComponent', since the first argument of 'bind' defines the context of the function call\n};\nvar myArray = [ 0, 2, 4, 6 ];\nfor (var i=0, j=myArray.length; i&lt;j; i++) {\n  myComponent.on(\"changeValue\", changeValueListener.bind(myComponent, myArray[i]));\n}\n</pre>","!type":"fn(that?: Object) -> fn()"}},"Object":{"!doc":"<p>This class is responsible for the normalization of the native Object.\nIt checks if these methods are available and, if not, appends them to\nensure compatibility in all browsers.\nFor usage samples, check out the attached links.</p>","keys":{"!doc":"<p>Get the keys of a map as array as returned by a &#8220;for&#8230; in&#8221; statement.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.2.3.14\">Annotated ES5 Spec</a>","!type":"fn(map: Object) -> +Array"}},"String":{"!doc":"<p>This class is responsible for the normalization of the native &#8216;String&#8217; object.\nIt checks if these methods are available and, if not, appends them to\nensure compatibility in all browsers.\nFor usage samples, check out the attached links.</p>","trim":{"!doc":"<p>Removes whitespace from both ends of the string.</p>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim\">MDN documentation</a> |\n<a href=\"http://es5.github.com/#x15.5.4.20\">Annotated ES5 Spec</a>","!type":"fn() -> string"}}},"Number":{"!doc":"<p>Helper functions for numbers.</p>\n\n<p>The native JavaScript Number is not modified by this class.</p>","isBetweenRange":{"!doc":"<p>Check whether the number is between a given range</p>","!type":"fn(nr: number, vmin: +Integer, vmax: +Integer) -> bool"},"isInRange":{"!doc":"<p>Check whether the number is in a given range</p>","!type":"fn(nr: number, vmin: +Integer, vmax: +Integer) -> bool"},"limit":{"!doc":"<p>Limit the number to a given range</p>\n\n<ul>\n<li>If the number is greater than the upper bound, the upper bound is returned</li>\n<li>If the number is smaller than the lower bound, the lower bound is returned</li>\n<li>If the number is in the range, the number is returned</li>\n</ul>","!type":"fn(nr: number, vmin: +Integer, vmax: +Integer) -> +Integer"}},"Object":{"!doc":"<p>Helper functions to handle Object as a Hash map.</p>","__equals":{"!doc":"<p>Internal recursive comparison function for equals</p>","!type":"fn(object1: Object, object2: Object, aStack: Object, bStack: Object) -> bool"},"clone":{"!doc":"<p>Return a copy of an Object</p>","!type":"fn(source: Object, deep: bool) -> Object"},"contains":{"!doc":"<p>Whether the map contains the given value.</p>","!type":"fn(map: Object, value: Object) -> bool"},"empty":{"!doc":"<p>Clears the map from all values</p>","!type":"fn(map: Object)"},"equals":{"!doc":"<p>Perform a deep comparison to check if two objects are equal</p>","!type":"fn(object1: Object, object2: Object) -> bool"},"fromArray":{"!doc":"<p>Convert an array into a map.</p>\n\n<p>All elements of the array become keys of the returned map by\ncalling <code>toString</code> on the array elements. The values of the\nmap are set to <code>true</code></p>","!type":"fn(array: +Array) -> +Map"},"getKeyFromValue":{"!doc":"<p>Get the key of the given value from a map.\nIf the map has more than one key matching the value, the first match is returned.\nIf the map does not contain the value, <code>null</code> is returned.</p>","!type":"fn(map: Object, value: Object) -> string"},"getLength":{"!doc":"<p>Get the number of objects in the map</p>","!type":"fn(map: Object) -> +Integer"},"getValues":{"!doc":"<p>Get the values of a map as array</p>","!type":"fn(map: Object) -> +Array"},"invert":{"!doc":"<p>Inverts a map by exchanging the keys with the values.</p>\n\n<p>If the map has the same values for different keys, information will get lost.\nThe values will be converted to strings using the toString methods.</p>","!type":"fn(map: Object) -> Object"},"isEmpty":{"!doc":"<p>Check if the hash has any keys</p>","!type":"fn(map: Object) -> bool"},"mergeWith":{"!doc":"<p>Inserts all keys of the source object into the\ntarget objects. Attention: The target map gets modified.</p>","!type":"fn(target: Object, source: Object, overwrite?: bool) -> Object"}},"String":{"!doc":"<p>String helper functions</p>\n\n<p>The native JavaScript String is not modified by this class. However,\nthere are modifications to the native String in {@link qx.lang.normalize.String} for\nbrowsers that do not support certain features.</p>","camelCase":{"!doc":"<p>Converts a hyphenated string (separated by &#8217;-&#8217;) to camel case.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.lang.String.camelCase(\"I-like-cookies\"); //returns \"ILikeCookies\"</pre>","!type":"fn(str: string) -> string"},"capitalize":{"!doc":"<p>Converts a string to camel case.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.lang.String.camelCase(\"i like cookies\"); //returns \"I Like Cookies\"</pre>","!type":"fn(str: string) -> string"},"clean":{"!doc":"<p>Removes all extraneous whitespace from a string and trims it</p>\n\n<p>Example:</p>\n\n<code>\nqx.lang.String.clean(\" i      like     cookies      \\n\\n\");\n</code>\n\n<p>Returns &#8220;i like cookies&#8221;</p>","!type":"fn(str: string) -> string"},"contains":{"!doc":"<p>Check whether the string contains a given substring</p>","!type":"fn(str: string, substring: string) -> bool"},"endsWith":{"!doc":"<p>Check whether the string ends with the given substring</p>","!type":"fn(fullstr: string, substr: string) -> bool"},"escapeRegexpChars":{"!doc":"<p>Escapes all chars that have a special meaning in regular expressions</p>","!type":"fn(str: string) -> string"},"firstLow":{"!doc":"<p>Convert the first character of the string to lower case.</p>","!type":"fn(str: string) -> string"},"firstUp":{"!doc":"<p>Convert the first character of the string to upper case.</p>","!type":"fn(str: string) -> string"},"format":{"!doc":"<p>Print a list of arguments using a format string\nIn the format string occurrences of %n are replaced by the n&#8217;th element of the args list.\nExample:</p>\n\n<pre class=\"javascript\">qx.lang.String.format(\"Hello %1, my name is %2\", [\"Egon\", \"Franz\"]) == \"Hello Egon, my name is Franz\"</pre>","!type":"fn(pattern: string, args: +Array) -> string"},"hyphenate":{"!doc":"<p>Converts a camelcased string to a hyphenated (separated by &#8217;-&#8217;) string.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.lang.String.hyphenate(\"weLikeCookies\"); //returns \"we-like-cookies\"</pre>","!type":"fn(str: string) -> string"},"pad":{"!doc":"<p>Pad a string up to a given length. Padding characters are added to the left of the string.</p>","!type":"fn(str: string, length: +Integer, ch: string) -> string"},"quote":{"!doc":"<p>Quotes the given string.</p>","!type":"fn(str: string) -> string"},"repeat":{"!doc":"<p>Returns a string, which repeats a string &#8216;length&#8217; times</p>","!type":"fn(str: string, times: +Integer) -> string"},"startsWith":{"!doc":"<p>Check whether the string starts with the given substring</p>","!type":"fn(fullstr: string, substr: string) -> bool"},"stripScripts":{"!doc":"<p>Strips </p>","!type":"fn(str: string, exec?: bool) -> string"},"stripTags":{"!doc":"<p>Remove <span class=\"caps\">HTML</span>/XML tags from a string\nExample:</p>\n\n<pre class=\"javascript\">qx.lang.String.stripTags(\"&lt;h1>Hello&lt;/h1>\") == \"Hello\"</pre>","!type":"fn(str: string) -> string"},"toArray":{"!doc":"<p>Converts a string to an array of characters.</p>\n\n<pre>\"hello\" => [ \"h\", \"e\", \"l\", \"l\", \"o\" ];</pre>","!type":"fn(str: string) -> +Array"},"trimLeft":{"!doc":"<p>removes white space from the left side of a string</p>","!type":"fn(str: string) -> string"},"trimRight":{"!doc":"<p>removes white space from the right side of a string</p>","!type":"fn(str: string) -> string"}},"Type":{"!doc":"<p>Utility class with type check for all native JavaScript data types.</p>","getClass":{"!doc":"<p>Get the internal class of the value. See\n<a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a>\nfor details.</p>","!type":"fn(value: Object) -> string"},"isArray":{"!doc":"<p>Whether the value is an array.</p>","!type":"fn(value: Object) -> bool"},"isBoolean":{"!doc":"<p>Whether the value is a boolean.</p>","!type":"fn(value: Object) -> bool"},"isDate":{"!doc":"<p>Whether the value is a date.</p>","!type":"fn(value: Object) -> bool"},"isError":{"!doc":"<p>Whether the value is a Error.</p>","!type":"fn(value: Object) -> bool"},"isFunction":{"!doc":"<p>Whether the value is a function.</p>","!type":"fn(value: Object) -> bool"},"isNumber":{"!doc":"<p>Whether the value is a number.</p>","!type":"fn(value: Object) -> bool"},"isObject":{"!doc":"<p>Whether the value is an object. Note that built-in types like Window are\nnot reported to be objects.</p>","!type":"fn(value: Object) -> bool"},"isRegExp":{"!doc":"<p>Whether the value is a regular expression.</p>","!type":"fn(value: Object) -> bool"},"isString":{"!doc":"<p>Whether the value is a string.</p>","!type":"fn(value: Object) -> bool"}}},"locale":{"Date":{"!doc":"<p>Static class that provides localized date information (like names of week\ndays, AM/PM markers, start of week, etc.).</p>","__localizeWithFallback":{"!doc":"<p>Provide localisation (CLDR) data with fallback between &#8220;format&#8221; and &#8220;stand-alone&#8221; contexts.\nIt is used in {@link #getDayName} and {@link #getMonthName} methods.</p>","!type":"fn(context: string, fallbackContext: string, key: string, locale: string) -> string"},"_getTerritory":{"!doc":"<p>Extract the territory part from a locale</p>","!type":"fn(locale: string) -> string"},"getAmMarker":{"!doc":"<p>Get AM marker for time definitions</p>","!type":"fn(locale: string) -> string"},"getDateFormat":{"!doc":"<p>Return localized date format string to be used with {@link qx.util.format.DateFormat}.</p>","!type":"fn(size: string, locale?: string) -> string"},"getDateTimeFormat":{"!doc":"<p>Try to localize a date/time format string. For format string possibillities see\n<a href=\"http://cldr.unicode.org/translation/date-time\">Date/Time Symbol reference</a>\nat <span class=\"caps\">CLDR</span> &#8211; Unicode Common Locale Data Repository.</p>\n\n<p>If no localization is available take the fallback format string.</p>","!type":"fn(canonical: string, fallback: string, locale: string) -> string"},"getDayName":{"!doc":"<p>Return localized name of a week day name</p>","!type":"fn(length: string, day: +Integer, locale: string, context: string, withFallback?: bool) -> string"},"getDayNames":{"!doc":"<p>Return localized names of day names</p>","!type":"fn(length: string, locale: string, context: string, withFallback?: bool) -> string"},"getMonthName":{"!doc":"<p>Return localized name of a month</p>","!type":"fn(length: string, month: +Integer, locale: string, context: string, withFallback?: bool) -> string"},"getMonthNames":{"!doc":"<p>Return localized names of month names</p>","!type":"fn(length: string, locale: string, context: string, withFallback?: bool) -> string"},"getPmMarker":{"!doc":"<p>Get PM marker for time definitions</p>","!type":"fn(locale: string) -> string"},"getTimeFormat":{"!doc":"<p>Return localized time format string to be used with {@link qx.util.format.DateFormat}.</p>","!type":"fn(size: string, locale: string) -> string"},"getWeekendEnd":{"!doc":"<p>Return the day the weekend ends with</p>\n\n<p>Reference: Common Locale Data Repository (cldr) supplementalData.xml</p>","!type":"fn(locale: string) -> +Integer"},"getWeekendStart":{"!doc":"<p>Return the day the weekend starts with</p>\n\n<p>Reference: Common Locale Data Repository (cldr) supplementalData.xml</p>","!type":"fn(locale: string) -> +Integer"},"getWeekStart":{"!doc":"<p>Return the day the week starts with</p>\n\n<p>Reference: Common Locale Data Repository (cldr) supplementalData.xml</p>","!type":"fn(locale: string) -> +Integer"},"isWeekend":{"!doc":"<p>Returns whether a certain day of week belongs to the week end.</p>","!type":"fn(day: +Integer, locale: string) -> bool"}},"Key":{"!doc":"<p>Static class, which contains functionality to localize the names of keyboard keys.</p>","getKeyName":{"!doc":"<p>Return localized name of a key identifier\n{@link qx.event.type.KeySequence}</p>","!type":"fn(size: string, keyIdentifier: string, locale: string) -> string"}},"LocalizedString":{"!proto":"qx.type.BaseString","!doc":"<p>This class contains the translation of a message and all information\nto translate it again into a different language.</p>","!type":"fn()","prototype":{"getMessageId":{"!doc":"<p>Returns the messageId.</p>","!type":"fn() -> string"},"translate":{"!doc":"<p>Get a translation of the string using the current locale.</p>","!type":"fn() -> +LocalizedString"}}},"Manager":{"!proto":"qx.core.Object","!doc":"<p>The qx.locale.Manager provides static translation methods (like tr()) and\ngeneral locale information.</p>","!type":"fn()","getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.locale.Manager"},"marktr":{"!doc":"<p>Mark the message for translation but return the original message.</p>","!type":"fn(messageId: string) -> string"},"tr":{"!doc":"<p>Translate a message</p>","!type":"fn(messageId: string, varargs: Object) -> string"},"trc":{"!doc":"<p>Translate a message with translation hint (from developer addressed to translator).</p>","!type":"fn(hint: string, messageId: string, varargs: Object) -> string"},"trn":{"!doc":"<p>Translate a plural message</p>\n\n<p>Depending on the third argument the plural or the singular form is chosen.</p>","!type":"fn(singularMessageId: string, pluralMessageId: string, count: +Integer, varargs: Object) -> string"},"trnc":{"!doc":"<p>Translate a plural message with translation hint (from developer addressed to translator).</p>\n\n<p>Depending on the third argument the plural or the singular form is chosen.</p>","!type":"fn(hint: string, singularMessageId: string, pluralMessageId: string, count: +Integer, varargs: Object) -> string"},"prototype":{"__extractLanguage":{"!doc":"<p>Extract the language part from a locale.</p>","!type":"fn(locale: string) -> string"},"__lookupAndExpand":{"!doc":"<p>Look up an I18N key in a catalog and expand format strings.</p>\n\n<p>Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\ndefault locale (e.g. C). Localizes the arguments if possible and splices\nthem into the message. If qx.dynlocale is on, returns a {@link\nLocalizedString}.</p>","!type":"fn(catalog: +Map, messageId: string, args: Object, locale?: string) -> string"},"_applyLocale":{"!doc":"<p>Applies changes of the property value of the property <code>locale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn(value: string, old: string)"},"addLocale":{"!doc":"<p>Add a localization to the localization manager.</p>\n\n<p>If <code>localeCode</code> already exists, its map will be updated with\n<code>localeMap</code> (new keys will be added, existing keys will be overwritten).</p>","!type":"fn(localeCode: string, localeMap: +Map)"},"addTranslation":{"!doc":"<p>Add a translation to the translation manager.</p>\n\n<p>If <code>languageCode</code> already exists, its map will be updated with\n<code>translationMap</code> (new keys will be added, existing keys will be\noverwritten).</p>","!type":"fn(languageCode: string, translationMap: +Map)"},"getAvailableLocales":{"!doc":"<p>Return the available application locales</p>\n\n<p>This corresponds to the <span class=\"caps\">LOCALES</span> setting in config.json. Without argument,\nit only returns the currently loaded locales, with an argument of true\nall locales that went into the build. This is particularly interesting if\nlocales were generated as dedicated I18N parts, and have to be loaded\nexplicitly before being available.</p>","!type":"fn(includeNonloaded?: bool) -> string"},"getLanguage":{"!doc":"<p>Get the language code of the current locale</p>\n\n<p>This is the first part of a locale definition. The language for &#8220;de_DE&#8221; would be &#8220;de&#8221;</p>","!type":"fn() -> string"},"getLocale":{"!doc":"<p>Returns the (computed) value of the property <code>locale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn() -> Object"},"getTerritory":{"!doc":"<p>Get the territory code of the current locale</p>\n\n<p>This is the second part of a locale definition. The territory for &#8220;de_DE&#8221; would be &#8220;DE&#8221;</p>","!type":"fn() -> string"},"initLocale":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>locale</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn(value: Object) -> Object"},"localize":{"!doc":"<p>Provide localisation (CLDR) data.</p>\n\n<p>Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\ndefault locale (e.g. C). Localizes the arguments if possible and splices\nthem into the message. If qx.dynlocale is on, returns a {@link\nLocalizedString}.</p>","!type":"fn(messageId: string, args: Object, locale?: string) -> string"},"resetLocale":{"!doc":"<p>Resets the user value of the property <code>locale</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn()"},"setLocale":{"!doc":"<p>Sets the user value of the property <code>locale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn(value: Object) -> Object"},"translate":{"!doc":"<p>Translate a message using the current locale and apply format string to the arguments.</p>\n\n<p>Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\ndefault locale (e.g. C). Localizes the arguments if possible and splices\nthem into the message. If qx.dynlocale is on, returns a {@link\nLocalizedString}.</p>","!type":"fn(messageId: string, args: Object, locale?: string) -> string"}}},"MTranslation":{"!doc":"<p>This mixin contains the methods needed to use the translation features\nof qooxdoo.</p>","prototype":{"marktr":{"!doc":"<p>Mark the message for translation but return the original message.</p>","!type":"fn(messageId: string) -> string"},"tr":{"!doc":"<p>Translate a message\nMark the message for translation.</p>","!type":"fn(messageId: string, varargs: Object) -> string"},"trc":{"!doc":"<p>Translate a message with translation hint\nMark the messages for translation.</p>","!type":"fn(hint: string, messageId: string, varargs: Object) -> string"},"trn":{"!doc":"<p>Translate a plural message\nMark the messages for translation.</p>\n\n<p>Depending on the third argument the plural or the singular form is chosen.</p>","!type":"fn(singularMessageId: string, pluralMessageId: string, count: +Integer, varargs: Object) -> string"},"trnc":{"!doc":"<p>Translate a plural message with translation hint\nMark the messages for translation.</p>\n\n<p>Depending on the third argument the plural or the singular form is chosen.</p>","!type":"fn(hint: string, singularMessageId: string, pluralMessageId: string, count: +Integer, varargs: Object) -> string"}}},"Number":{"!doc":"<p>Provides information about locale-dependent number formatting (like the decimal\nseparator).</p>","getDecimalSeparator":{"!doc":"<p>Get decimal separator for number formatting</p>","!type":"fn(locale: string) -> string"},"getGroupSeparator":{"!doc":"<p>Get thousand grouping separator for number formatting</p>","!type":"fn(locale: string) -> string"},"getPercentFormat":{"!doc":"<p>Get percent format string</p>","!type":"fn(locale: string) -> string"}},"String":{"!doc":"<p>Provides information about locale-dependent string formatting (like quotation\nsigns).</p>","getAlternateQuotationEnd":{"!doc":"<p>Get quotation alternative end sign</p>","!type":"fn(locale: string) -> string"},"getAlternateQuotationStart":{"!doc":"<p>Get quotation alternative start sign</p>","!type":"fn(locale: string) -> string"},"getQuotationEnd":{"!doc":"<p>Get quotation end sign</p>","!type":"fn(locale: string) -> string"},"getQuotationStart":{"!doc":"<p>Get quotation start sign</p>","!type":"fn(locale: string) -> string"}}},"log":{"appender":{"Console":{"!doc":"<p>Feature-rich console appender for the qooxdoo logging system.</p>\n\n<p>Creates a small inline element which is placed in the top-right corner\nof the window. Prints all messages with a nice color highlighting.</p>\n\n<ul>\n<li>Allows user command inputs.</li>\n<li>Command history enabled by default (Keyboard up/down arrows).</li>\n<li>Lazy creation on first open.</li>\n<li>Clearing the console using a button.</li>\n<li>Display of offset (time after loading) of each message</li>\n<li>Supports keyboard shortcuts F7 or Ctrl+D to toggle the visibility</li>\n</ul>","__onKeyPress":{"!doc":"<p>Event handler for keydown listener</p>","!type":"fn(e: +Event)"},"__onResize":{"!doc":"<p>Event handler for resize listener</p>","!type":"fn(e: +Event)"},"__scrollDown":{"!doc":"<p>Automatically scroll down to the last line</p>","!type":"fn()"},"clear":{"!doc":"<p>Clears the current console output.</p>","!type":"fn()"},"dispose":{"!doc":"<p>Used by the object registry to dispose this instance e.g. remove listeners etc.</p>","!type":"fn()"},"execute":{"!doc":"<p>Executes the currently given command</p>","!type":"fn()"},"init":{"!doc":"<p>Initializes the console, building <span class=\"caps\">HTML</span> and pushing last\nlog messages to the output window.</p>","!type":"fn()"},"process":{"!doc":"<p>Processes a single log entry</p>","!type":"fn(entry: +Map)"},"show":{"!doc":"<p>Shows the console.</p>","!type":"fn()"},"toggle":{"!doc":"<p>Toggles the visibility of the console between visible and hidden.</p>","!type":"fn()"}},"Element":{"!proto":"qx.core.Object","!doc":"<p>This appender is used to log to an existing <span class=\"caps\">DOM</span> element</p>","!type":"fn()","prototype":{"clear":{"!doc":"<p>Clears the current output.</p>","!type":"fn()"},"process":{"!doc":"<p>Processes a single log entry</p>","!type":"fn(entry: +Map)"},"setElement":{"!doc":"<p>Configures the <span class=\"caps\">DOM</span> element to use.</p>","!type":"fn(element: +Element)"}}},"Native":{"!doc":"<p>Processes the incoming log entry and displays it by means of the native\nlogging capabilities of the client.</p>\n\n<p>Supported browsers:\n* Firefox <4 using FireBug (if available).\n* Firefox >=4 using the Web Console.\n* WebKit browsers using the Web Inspector/Developer Tools.\n* Internet Explorer 8+ using the F12 Developer Tools.\n* Opera >=10.60 using either the Error Console or Dragonfly</p>\n\n<p>Currently unsupported browsers:\n* Opera <10.60</p>","process":{"!doc":"<p>Processes a single log entry</p>","!type":"fn(entry: +Map)"}},"NodeConsole":{"!doc":"<p>Log appender for qooxdoo applications running in Node.js. Writes log\nmessages to <span class=\"caps\">STDOUT</span>/STDERR.</p>","debug":{"!doc":"<p>Logs a debug message</p>","!type":"fn(logMessage: string)"},"error":{"!doc":"<p>Logs an error message</p>","!type":"fn(logMessage: string)"},"info":{"!doc":"<p>Logs an info message</p>","!type":"fn(logMessage: string)"},"log":{"!doc":"<p>Writes a message to the shell. Errors will be sent to <span class=\"caps\">STDERR</span>, everything\nelse goes to <span class=\"caps\">STDOUT</span></p>","!type":"fn(logMessage: string, level: string)"},"process":{"!doc":"<p>Process a log entry object from qooxdoo&#8217;s logging system.</p>","!type":"fn(entry: +Map)"},"warn":{"!doc":"<p>Logs a warning message</p>","!type":"fn(logMessage: string)"}},"PhoneGap":{"!doc":"<p>Processes the incoming log entry and displays it using the PhoneGap\nlogging capabilities.</p>","process":{"!doc":"<p>Processes a single log entry</p>","!type":"fn(entry: +Map)"}},"RhinoConsole":{"!doc":"<p>Log appender for qooxdoo applications running in Mozilla Rhino. Writes log\nmessages to <span class=\"caps\">STDOUT</span>/STDERR.</p>","debug":{"!doc":"<p>Logs a debug message</p>","!type":"fn(logMessage: string)"},"error":{"!doc":"<p>Logs an error message</p>","!type":"fn(logMessage: string)"},"info":{"!doc":"<p>Logs an info message</p>","!type":"fn(logMessage: string)"},"log":{"!doc":"<p>Writes a message to the shell. Errors will be sent to <span class=\"caps\">STDERR</span>, everything\nelse goes to <span class=\"caps\">STDOUT</span></p>","!type":"fn(logMessage: string, level: string)"},"process":{"!doc":"<p>Process a log entry object from qooxdoo&#8217;s logging system.</p>","!type":"fn(entry: +Map)"},"warn":{"!doc":"<p>Logs a warning message</p>","!type":"fn(logMessage: string)"}},"RhinoFile":{"!doc":"<p>Log appender for qooxdoo applications running in Mozilla Rhino. Writes log\nmessages to a text file.</p>","create":{"!doc":"<p>Creates a new log file using the value of {@link #FILENAME} as the\nfile path/name.</p>","!type":"fn()"},"debug":{"!doc":"<p>Logs a debug message</p>","!type":"fn(logMessage: string)"},"error":{"!doc":"<p>Logs an error message</p>","!type":"fn(logMessage: string)"},"info":{"!doc":"<p>Logs an info message</p>","!type":"fn(logMessage: string)"},"log":{"!doc":"<p>Writes a message to the file.</p>","!type":"fn(logMessage: string, level: string)"},"process":{"!doc":"<p>Process a log entry object from qooxdoo&#8217;s logging system.</p>","!type":"fn(entry: +Map)"},"warn":{"!doc":"<p>Logs a warning message</p>","!type":"fn(logMessage: string)"}},"RingBuffer":{"!proto":"qx.util.RingBuffer","!doc":"<p>An appender that writes all messages to a memory container. The messages\ncan be retrieved later, f. i. when an error dialog pops up and the question\narises what actions have caused the error.</p>\n\n<p>A mark feature also exists which can be used to remember a point in time.\nWhen retrieving log events, it is possible to get only those events\nafter the marked time. This is useful if data from the buffer is extracted\nand f. i. sent to a logging system. Whenever this happens, a mark() call\ncan be used so that the next extraction will only get new data.</p>","!type":"fn()","prototype":{"clearHistory":{"!doc":"<p>Clears the log history</p>","!type":"fn()"},"getAllLogEvents":{"!doc":"<p>Returns all stored log events</p>","!type":"fn() -> +Array"},"getMaxMessages":{"!doc":"<p>Get the maximum number of messages to hold</p>","!type":"fn() -> +Integer"},"process":{"!doc":"<p>Processes a single log entry</p>","!type":"fn(entry: +Map)"},"retrieveLogEvents":{"!doc":"<p>Returns log events which have been logged previously.</p>","!type":"fn(count: +Integer, startingFromMark?: bool) -> +Array"},"setMaxMessages":{"!doc":"<p>Set the maximum number of messages to hold. If null the number of\nmessages is not limited.</p>\n\n<p>Warning: Changing this property will clear the events logged so far.</p>","!type":"fn(maxMessages: +Integer)"}}},"Util":{"!doc":"<p>Contains some common methods available to all log appenders.</p>","__escapeHTMLReplace":{"!doc":"<p>Internal replacement helper for <span class=\"caps\">HTML</span> escape.</p>","!type":"fn(ch: string) -> string"},"escapeHTML":{"!doc":"<p>Escapes the <span class=\"caps\">HTML</span> in the given value</p>","!type":"fn(value: string) -> string"},"formatOffset":{"!doc":"<p>Formats a numeric time offset to 6 characters.</p>","!type":"fn(offset: +Integer, length?: +Integer) -> string"},"toHtml":{"!doc":"<p>Converts a single log entry to <span class=\"caps\">HTML</span></p>","!type":"fn(entry: +Map)"},"toText":{"!doc":"<p>Converts a single log entry to plain text</p>","!type":"fn(entry: +Map) -> string"},"toTextArray":{"!doc":"<p>Converts a single log entry to an array of plain text</p>","!type":"fn(entry: +Map) -> +Array"}}},"Logger":{"!doc":"<p>Main qooxdoo logging class.</p>\n\n<p>Used as central logging feature by qx.core.Object.</p>\n\n<p>Extremely modular and lightweight to support logging at bootstrap and\nat shutdown as well.</p>\n\n<ul>\n<li>Supports dynamic appenders to push the output to the user</li>\n<li>Supports buffering of the last 50 messages (configurable)</li>\n<li>Supports different debug levels (&#8220;debug&#8221;, &#8220;info&#8221;, &#8220;warn&#8221; or &#8220;error&#8221;)</li>\n<li>Simple data serialization for incoming messages</li>\n</ul>","__detect":{"!doc":"<p>Detects the type of the variable given.</p>","!type":"fn(value: Object) -> string"},"__log":{"!doc":"<p>Internal logging main routine.</p>","!type":"fn(level: string, args: +Array)"},"__serialize":{"!doc":"<p>Serializes the incoming value. If it is a singular value, the result is\na simple string. For an array or a map the result can also be a\nserialized string of a limited number of individual items.</p>","!type":"fn(value: Object, deep?: bool) -> +Map"},"clear":{"!doc":"<p>Deletes the current buffer. Does not influence message handling of the\nconnected appenders.</p>","!type":"fn()"},"debug":{"!doc":"<p>Sending a message at level &#8220;debug&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"},"deprecatedClassWarning":{"!doc":"<p>Prints a class deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>","!type":"fn(clazz: +Class, msg?: string)"},"deprecatedConstantWarning":{"!doc":"<p>Prints a constant deprecation warning and a stacktrace if the setting\n<code>qx.debug</code> is set to <code>true</code> <span class=\"caps\">AND</span> the browser supports\n<i>defineGetter</i>!</p>","!type":"fn(clazz: +Class, constant: string, msg: string)"},"deprecatedEventWarning":{"!doc":"<p>Prints an event deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>","!type":"fn(clazz: +Class, event: string, msg?: string)"},"deprecatedMethodWarning":{"!doc":"<p>Prints a method deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>","!type":"fn(fcn: fn(), msg?: string)"},"deprecatedMixinWarning":{"!doc":"<p>Prints a mixin deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>","!type":"fn(clazz: +Class, msg?: string)"},"deprecateMethodOverriding":{"!doc":"<p>Prints a deprecation waring and a stacktrace when a subclass overrides\nthe passed method name. The deprecation is only printed if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>","!type":"fn(object: +qx.core.Object, baseclass: +Class, methodName: string, msg?: string)"},"error":{"!doc":"<p>Sending a message at level &#8220;error&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"},"getLevel":{"!doc":"<p>Returns the currently configured minimum log level required for new\nmessages.</p>","!type":"fn() -> +Integer"},"getTreshold":{"!doc":"<p>Returns the currently configured number of messages to be kept in the\nbuffer.</p>","!type":"fn() -> +Integer"},"info":{"!doc":"<p>Sending a message at level &#8220;info&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"},"register":{"!doc":"<p>Registers the given appender and inserts the last cached messages.</p>","!type":"fn(appender: +Class)"},"setLevel":{"!doc":"<p>Configures the minimum log level required for new messages.</p>","!type":"fn(value: string)"},"setTreshold":{"!doc":"<p>Configures the number of messages to be kept in the buffer.</p>","!type":"fn(value: +Integer)"},"trace":{"!doc":"<p>Prints the current stack trace at level &#8220;info&#8221;</p>","!type":"fn(object?: Object)"},"unregister":{"!doc":"<p>Unregisters the given appender</p>","!type":"fn(appender: +Class)"},"warn":{"!doc":"<p>Sending a message at level &#8220;warn&#8221; to the logger.</p>","!type":"fn(object: Object, message: Object)"}}},"Mixin":{"!doc":"<p>This class is used to define mixins (similar to mixins in Ruby).</p>\n\n<p>Mixins are collections of code and variables, which can be merged into\nother classes. They are similar to classes but don&#8217;t support inheritance.</p>\n\n<p>See the description of the {@link #define} method how a mixin is defined.</p>","__validateConfig":{"!doc":"<p>Validates incoming configuration and checks keys and values</p>","!type":"fn(name: string, config: +Map)"},"checkCompatibility":{"!doc":"<p>Check compatibility between mixins (including their includes)</p>","!type":"fn(mixins: +Mixin) -> bool"},"define":{"!doc":"<p>Define a new mixin.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.Mixin.define(\"name\",\n{\n  include: [SuperMixins],\n\n  properties: {\n    tabIndex: {type: \"number\", init: -1}\n  },\n\n  members:\n  {\n    prop1: \"foo\",\n    meth1: function() {},\n    meth2: function() {}\n  }\n});\n</pre>","!type":"fn(name: string, config?: +Map) -> +qx.Mixin"},"flatten":{"!doc":"<p>Generates a list of all mixins given plus all the\nmixins these includes plus&#8230; (deep)</p>","!type":"fn(mixins?: +Mixin) -> +Array"},"genericToString":{"!doc":"<p>This method will be attached to all mixins to return\na nice identifier for them.</p>","!type":"fn() -> string"},"getByName":{"!doc":"<p>Returns a mixin by name</p>","!type":"fn(name: string) -> +Class"},"getTotalNumber":{"!doc":"<p>Determine the number of mixins which are defined</p>","!type":"fn() -> number"},"isCompatible":{"!doc":"<p>Checks if a class is compatible to the given mixin (no conflicts)</p>","!type":"fn(mixin: +Mixin, clazz: +Class) -> bool"},"isDefined":{"!doc":"<p>Determine if mixin exists</p>","!type":"fn(name: string) -> bool"}},"module":{"Animation":{"!doc":"<p>Cross browser animation layer. It uses feature detection to check if <span class=\"caps\">CSS</span>\nanimations are available and ready to use. If not, a JavaScript-based\nfallback will be used.</p>","_animate":{"!doc":"<p>Animation execute either regular or reversed direction.</p>","!type":"fn(desc: +Map, duration?: number, reverse: bool)"},"animate":{"!doc":"<p>Starts the animation with the given description.\nThe description should be a map, which could look like this:</p>\n\n<pre class=\"javascript\">\n{\n  \"duration\": 1000,\n  \"keep\": 100,\n  \"keyFrames\": {\n    0 : {\"opacity\": 1, \"scale\": 1},\n    100 : {\"opacity\": 0, \"scale\": 0}\n  },\n  \"origin\": \"50% 50%\",\n  \"repeat\": 1,\n  \"timing\": \"ease-out\",\n  \"alternate\": false,\n  \"delay\": 2000\n}\n</pre>\n\n<p><strong>duration</strong> is the time in milliseconds one animation cycle should take.</p>\n\n<p><strong>keep</strong> is the key frame to apply at the end of the animation. (optional)</p>\n\n<p><strong>keyFrames</strong> is a map of separate frames. Each frame is defined by a\n  number which is the percentage value of time in the animation. The value\n  is a map itself which holds css properties or transforms\n  (Transforms only for <span class=\"caps\">CSS</span> Animations).</p>\n\n<p><strong>origin</strong> maps to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\">transform origin</a>\n(Only for <span class=\"caps\">CSS</span> animations).</p>\n\n<p><strong>repeat</strong> is the amount of time the animation should be run in\n  sequence. You can also use &#8220;infinite&#8221;.</p>\n\n<p><strong>timing</strong> takes one of these predefined values:\n  <code>ease</code> | <code>linear</code> | <code>ease-in</code>\n  | <code>ease-out</code> | <code>ease-in-out</code> |\n  <code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n  (cubic-bezier only available for <span class=\"caps\">CSS</span> animations)</p>\n\n<p><strong>alternate</strong> defines if every other animation should be run in reverse order.</p>\n\n<p><strong>delay</strong> is the time in milliseconds the animation should wait before start.</p>","!type":"fn(desc: +Map, duration?: number) -> +qxWeb"},"animateReverse":{"!doc":"<p>Starts an animation in reversed order. For further details, take a look at\nthe {@link #animate} method.</p>","!type":"fn(desc: +Map, duration?: number) -> +qxWeb"},"fadeIn":{"!doc":"<p>Fades in all elements in the collection.</p>","!type":"fn(duration?: number) -> +qxWeb"},"fadeOut":{"!doc":"<p>Fades out all elements in the collection.</p>","!type":"fn(duration?: number) -> +qxWeb"},"getAnimationHandles":{"!doc":"<p>Returns the stored animation handles. The handles are only\navailable while an animation is running.</p>","!type":"fn() -> +Array"},"isEnded":{"!doc":"<p>Returns whether an animation has ended or not.</p>","!type":"fn() -> bool"},"isPlaying":{"!doc":"<p>Returns whether an animation is running or not.</p>","!type":"fn() -> bool"},"pause":{"!doc":"<p>Manipulates the play state of the animation.\nThis can be used to pause an animation when running.</p>","!type":"fn() -> +qxWeb"},"play":{"!doc":"<p>Manipulates the play state of the animation.\nThis can be used to continue an animation when paused.</p>","!type":"fn() -> +qxWeb"},"stop":{"!doc":"<p>Stops a running animation.</p>","!type":"fn() -> +qxWeb"}},"Attribute":{"!doc":"<p>Attribute/Property handling for <span class=\"caps\">DOM</span> elements.</p>","getAttribute":{"!doc":"<p>Returns the value of the given attribute for the first item in the\ncollection.</p>","!type":"fn(name: string) -> Object"},"getAttributes":{"!doc":"<p>Returns the values of multiple attributes for the first item in the collection</p>","!type":"fn(names: string) -> +Map"},"getHtml":{"!doc":"<p>Returns the <span class=\"caps\">HTML</span> content of the first item in the collection</p>","!type":"fn() -> string"},"getProperties":{"!doc":"<p>Returns the values of multiple properties for the first item in the collection</p>","!type":"fn(names: string) -> +Map"},"getProperty":{"!doc":"<p>Returns the value of the given property for the first item in the\ncollection</p>","!type":"fn(name: string) -> Object"},"getValue":{"!doc":"<p>Returns the currently configured value for the first item in the collection.\nWorks with simple input fields as well as with select boxes or option\nelements. Returns an array for select boxes with multi selection. In all\nother cases, a string is returned.</p>","!type":"fn() -> string"},"removeAttribute":{"!doc":"<p>Removes the given attribute from all elements in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"removeAttributes":{"!doc":"<p>Removes multiple attributes from each item in the collection.</p>","!type":"fn(attributes: string) -> +qxWeb"},"setAttribute":{"!doc":"<p>Sets an <span class=\"caps\">HTML</span> attribute on each item in the collection</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"setAttributes":{"!doc":"<p>Sets multiple attributes for each item in the collection.</p>","!type":"fn(attributes: +Map) -> +qxWeb"},"setHtml":{"!doc":"<p>Sets the <span class=\"caps\">HTML</span> content of each item in the collection</p>","!type":"fn(html: string) -> +qxWeb"},"setProperties":{"!doc":"<p>Sets multiple properties for each item in the collection.</p>","!type":"fn(properties: +Map) -> +qxWeb"},"setProperty":{"!doc":"<p>Sets a property on each item in the collection</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"setValue":{"!doc":"<p>Applies the given value to each element in the collection.\nNormally the value is given as a string/number value and applied to the\nfield content (textfield, textarea) or used to detect whether the field\nis checked (checkbox, radiobutton).\nSupports array values for selectboxes (multiple selection) and checkboxes\nor radiobuttons (for convenience).\nPlease note: To modify the value attribute of a checkbox or radiobutton\nuse @link{#set} instead.</p>","!type":"fn(value: string) -> +qxWeb"}},"Blocker":{"!doc":"<p>Provides a way to block elements so they will no longer receive (native)\nevents by overlaying them with a <span class=\"caps\">DIV</span> element.</p>\n\n<p>The blocker can also be applied to the entire document, e.g.:</p>\n\n<pre class=\"javascript\">\nq(document).block();\n</pre>","__attachBlocker":{"!doc":"<p>Attaches a blocker div to the given element.</p>","!type":"fn(item: +Element, color: string, opacity: number, zIndex: number)"},"__detachBlocker":{"!doc":"<p>Removes the given item&#8217;s blocker element(s) from the <span class=\"caps\">DOM</span></p>","!type":"fn(item: +Element, index: number)"},"__getBlocker":{"!doc":"<p>Returns the blocker elements as collection</p>","!type":"fn(collection: +qxWeb) -> +qxWeb"},"__styleBlocker":{"!doc":"<p>Styles the blocker element(s)</p>","!type":"fn(item: +Element, color: string, opacity: number, zIndex: number, isDocument: bool)"},"block":{"!doc":"<p>Adds an overlay to all items in the collection that intercepts mouse\nevents.</p>","!type":"fn(color?: string, opacity?: number, zIndex?: number) -> +qxWeb"},"getBlocker":{"!doc":"<p>Returns all blocker elements as collection.</p>\n\n<strong>Note:</strong> This will only return elements if\nthe <code>block</code> method was called at least once,\nsince the blocker elements are created on-demand.","!type":"fn() -> +qxWeb"},"unblock":{"!doc":"<p>Removes the blockers from all items in the collection</p>","!type":"fn() -> +qxWeb"}},"Cookie":{"!doc":"<p>Cookie handling module</p>","del":{"!doc":"<p>Deletes the string value of a cookie.</p>","!type":"fn(key: string, path?: string, domain?: string)"},"get":{"!doc":"<p>Returns the string value of a cookie.</p>","!type":"fn(key: string) -> string"},"set":{"!doc":"<p>Sets the string value of a cookie.</p>","!type":"fn(key: string, value: string, expires?: number, path?: string, domain?: string, secure?: bool)"}},"Core":{"!doc":"<p>Placeholder class which simply defines and includes the core of qxWeb.\nThe core modules are:</p>\n\n<ul>\n<li>{@link qx.module.Attribute}</li>\n<li>{@link qx.module.Css}</li>\n<li>{@link qx.module.Environment}</li>\n<li>{@link qx.module.Event}</li>\n<li>{@link qx.module.Manipulating}</li>\n<li>{@link qx.module.Polyfill}</li>\n<li>{@link qx.module.Traversing}</li>\n</ul>"},"Css":{"!doc":"<p><span class=\"caps\">CSS</span>/Style property manipulation module</p>","__getDisplayDefault":{"!doc":"<p>Attempts tp determine the default &#8220;display&#8221; style value for\nelements with the given tag name.</p>","!type":"fn(tagName: string, doc?: +Document) -> string"},"__swap":{"!doc":"<p>Swaps the given styles of the element and execute the callback\nbefore the original values are restored.</p>\n\n<p>Finally returns the return value of the callback.</p>","!type":"fn(element: +Element, styles: +Map, callback: fn(), context: Object) -> Object"},"addClass":{"!doc":"<p>Adds a class name to each element in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"addClasses":{"!doc":"<p>Adds multiple class names to each element in the collection</p>","!type":"fn(names: string) -> +qxWeb"},"getClass":{"!doc":"<p>Returns the class name of the first element in the collection</p>","!type":"fn() -> string"},"getContentHeight":{"!doc":"<p>Returns the content height of the first element in the collection.\nThis is the maximum height the element can use, excluding borders,\nmargins, padding or scroll bars.</p>","!type":"fn(force?: bool) -> number"},"getContentWidth":{"!doc":"<p>Returns the content width of the first element in the collection.\nThis is the maximum width the element can use, excluding borders,\nmargins, padding or scroll bars.</p>","!type":"fn(force?: bool) -> number"},"getHeight":{"!doc":"<p>Returns the rendered height of the first element in the collection.</p>","!type":"fn(force?: bool) -> number"},"getOffset":{"!doc":"<p>Returns the computed location of the given element in the context of the\ndocument dimensions.</p>\n\n<p>Supported modes:</p>\n\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).</li>\n</ul>","!type":"fn(mode?: string) -> +Map"},"getPosition":{"!doc":"<p>Returns the distance between the first element in the collection and its\noffset parent</p>","!type":"fn() -> +Map"},"getStyle":{"!doc":"<p>Returns the value of the given style property for the first item in the\ncollection.</p>","!type":"fn(name: string) -> Object"},"getStyles":{"!doc":"<p>Returns the values of multiple style properties for each item in the\ncollection</p>","!type":"fn(names: string) -> +Map"},"getWidth":{"!doc":"<p>Returns the rendered width of the first element in the collection</p>","!type":"fn(force?: bool) -> number"},"hasClass":{"!doc":"<p>Checks if the first element in the collection has the given class name</p>","!type":"fn(name: string) -> bool"},"hide":{"!doc":"<p>Hides all elements in the collection by setting their &#8220;display&#8221;\nstyle to &#8220;none&#8221;. The previous value is stored so it can be re-applied\nwhen {@link #show} is called.</p>","!type":"fn() -> +qxWeb"},"includeStylesheet":{"!doc":"<p>Includes a Stylesheet file</p>","!type":"fn(uri: string, doc?: +Document)"},"removeClass":{"!doc":"<p>Removes a class name from each element in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"removeClasses":{"!doc":"<p>Removes multiple class names from each element in the collection.\nUse {@link qx.module.Attribute#removeAttribute} to remove all classes.</p>","!type":"fn(names: string) -> +qxWeb"},"replaceClass":{"!doc":"<p>Replaces a class name on each element in the collection</p>","!type":"fn(oldName: string, newName: string) -> +qxWeb"},"setStyle":{"!doc":"<p>Modifies the given style property on all elements in the collection.</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"setStyles":{"!doc":"<p>Sets multiple style properties for each item in the collection.</p>","!type":"fn(styles: +Map) -> +qxWeb"},"show":{"!doc":"<p>Shows any elements with &#8220;display: none&#8221; in the collection. If an element\nwas hidden by using the {@link #hide} method, its previous\n&#8220;display&#8221; style value will be re-applied. Otherwise, the\ndefault &#8220;display&#8221; value for the element type will be applied.</p>","!type":"fn() -> +qxWeb"},"toggleClass":{"!doc":"<p>Toggles the given class name on each item in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"toggleClasses":{"!doc":"<p>Toggles the given list of class names on each item in the collection</p>","!type":"fn(names: string) -> +qxWeb"}},"Dataset":{"!doc":"<p>Module for handling of HTML5 data-* attributes</p>","getAllData":{"!doc":"<p>Returns a map containing all the <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attributes of the specified element</p>","!type":"fn() -> +Map"},"getData":{"!doc":"<p>Returns the value of the given <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute for the first item in the collection</p>","!type":"fn(name: string) -> Object"},"removeData":{"!doc":"<p>Remove an <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute from the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(name: string) -> +qxWeb"},"setData":{"!doc":"<p>Sets an <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute on each item in the collection</p>","!type":"fn(name: string, value: Object) -> +qxWeb"}},"dev":{"FakeServer":{"!doc":"<p>A wrapper around Sinon.JS&#8217;s FakeXMLHttpRequest and FakeServer features that\nallows quick and simple configuration of mock <span class=\"caps\">HTTP</span> backends for testing and\ndevelopment.\nAutomatically creates <span class=\"caps\">URL</span> filtering rules to ensure that only configured\nrequests are faked while others will be processed normally by the browser&#8217;s\n<span class=\"caps\">XHR</span> implementation.</p>\n\n<p>The following example shows how to configure mock responses for two different\nrequests:</p>\n\n<pre class=\"javascript\">\n  var responseData = [\n    {\n      method: \"GET\",\n      url: /\\/api\\/resource\\/\\d+/,\n      response : function(request) {\n        var status = 200;\n        var headers = { \"Content-Type\": \"application/json\" };\n        var responseData = {\n          description: \"Mock REST response for resource \" + request.url\n        };\n        var body = JSON.stringify(responseData);\n        request.respond(status, headers, body);\n      }\n    },\n    {\n      method: \"GET\",\n      url: \"/users/{userId}\",\n      response: [\n        200,\n        { \"Content-Type\": \"application/json\" },\n        JSON.stringify({userId: 'someUser'})\n      ]\n    }\n  ];\n\n  q.dev.fakeServer.configure(responseData);\n</pre>","addFilter":{"!doc":"<p>Adds a <span class=\"caps\">URL</span> filtering function to decide whether a request should be handled\nby the FakeServer or passed to the regular XMLHttp implementation.\nSee <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\nfor details.</p>","!type":"fn(filter: fn())"},"configure":{"!doc":"<p>Configures a set of fake <span class=\"caps\">HTTP</span> responses. Each response is defined as a map\nthat must provide the following keys:\n<ul>\n  <li><code>method</code> <span class=\"caps\">HTTP</span> method to respond to, e.g. <code><span class=\"caps\">PUT</span></code></li>\n  <li><code>url</code> <span class=\"caps\">URL</span> used to match requests to fake responses. Can be\n  a RegExp or a String. <span class=\"caps\">REST</span>-style parameter placeholders in curly braces\n  will be replaced with wildcards, e.g. the string &#8221;/resource/{resourceId}&#8221;\n  is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n  <li><code>response</code> This can be either:\n    <ul>\n      <li>a string: This will be the response body, status code will be 200</li>\n      <li>an array containing the status code, a map of response headers and\n        the response text, e.g. <code>[200, { &#8220;Content-Type&#8221;: &#8220;text/html&#8221; }, &#8220;OK&#8221;]</code>\n      </li>\n      <li>a function: This will be called with a FakeXMLHttpRequest object as\n      the only argument. Its <code>respond</code> method must be called to send a response.\n      See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n      </li>\n    </ul>\n  </li>\n</ul></p>","!type":"fn(responseData: +Map)"},"getFakeServer":{"!doc":"<p>Creates and configures a FakeServer if necessary and returns it.</p>","!type":"fn() -> Object"},"removeFilter":{"!doc":"<p>Remove a filter that was added with {@link #addFilter}</p>","!type":"fn(filter: fn())"},"removeResponse":{"!doc":"<p>Removes a response that was configured with {@link #configure}</p>","!type":"fn(method: string, url: string)"},"respondWith":{"!doc":"<p>Defines a fake <span class=\"caps\">XHR</span> response to a matching request.</p>","!type":"fn(method: string, urlRegExp: +RegExp, response: fn())"},"restore":{"!doc":"<p>Stops the FakeServer and removes all configured responses and/or filters.</p>","!type":"fn()"}}},"Environment":{"!doc":"<p>Module for querying information about the environment / runtime.\nIt adds a static key <code>env</code> to qxWeb and offers the given methods.</p>\n\n<pre class=\"javascript\">\nq.env.get(\"engine.name\"); // return \"webkit\" e.g.\n</pre>\n\n<p>The following values are predefined:</p>\n\n<ul>\n<li><code>browser.name</code> : The name of the browser</li>\n<li><code>browser.version</code> : The version of the browser</li>\n<li><code>browser.quirksmode</code>  : <code>true</code> if the browser is in quirksmode</li>\n<li><code>browser.documentmode</code> : The document mode of the browser</li>\n</ul>\n\n<ul>\n<li><code>device.name</code> : The name of the device e.g. <code>iPad</code>.</li>\n<li><code>device.type</code> : Either <code>desktop</code>, <code>tablet</code> or <code>mobile</code>.</li>\n</ul>\n\n<ul>\n<li><code>engine.name</code> : The name of the browser engine</li>\n<li><code>engine.version</code> : The version of the browser engine</li>\n</ul>\n\n<ul>\n<li><code>event.touch</code> : Checks if touch events are supported</li>\n<li><code>event.mspointer</code> : Checks if MSPointer events are available</li>\n</ul>","add":{"!doc":"<p>Adds a new environment setting which can be queried via {@link #get}.</p>","!type":"fn(key: string, value: Object) -> +qxWeb"},"get":{"!doc":"<p>Get the value stored for the given key.</p>","!type":"fn(key: string) -> Object"}},"event":{"GestureHandler":{"!doc":"<p>Creates a gesture handler that fires high-level events such as &#8220;swipe&#8221;\nbased on low-level event sequences on the given element</p>","register":{"!doc":"<p>Creates a gesture handler for the given element when a gesture event listener\nis attached to it</p>","!type":"fn(element: +Element, type: string)"},"unregister":{"!doc":"<p>Removes the gesture event handler from the element if there are no more\ngesture event listeners attached to it</p>","!type":"fn(element: +Element)"}},"Keyboard":{"!doc":"<p>Normalization for native keyboard events.</p>\n\n<p><span class=\"caps\">NOTE</span>: Some browsers won&#8217;t fire the <code>keypress</code> event for all keys.\nIt&#8217;s generally better to listen for <code>keyup</code> or <code>keydown</code>\ninstead.</p>","_inputFix":{"!doc":"<p>IE9 fix: Emits an &#8220;input&#8221; event if a text input element&#8217;s value was changed\nusing the Backspace key</p>","!type":"fn(ev: +Event)"},"getKeyIdentifier":{"!doc":"<p>Identifier of the pressed key. This property is modeled after the <em>KeyboardEvent.keyIdentifier</em> property\nof the W3C <span class=\"caps\">DOM</span> 3 event specification\n(<a href=\"http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier\">http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier</a>).</p>\n\n<p>Printable keys are represented by an unicode string, non-printable keys\nhave one of the following values:</p>\n\n<table>\n<tr><th>Backspace</th><td>The Backspace (Back) key.</td></tr>\n<tr><th>Tab</th><td>The Horizontal Tabulation (Tab) key.</td></tr>\n<tr><th>Space</th><td>The Space (Spacebar) key.</td></tr>\n<tr><th>Enter</th><td>The Enter key. Note: This key identifier is also used for the Return (Macintosh numpad) key.</td></tr>\n<tr><th>Shift</th><td>The Shift key.</td></tr>\n<tr><th>Control</th><td>The Control (Ctrl) key.</td></tr>\n<tr><th>Alt</th><td>The Alt (Menu) key.</td></tr>\n<tr><th>CapsLock</th><td>The CapsLock key</td></tr>\n<tr><th>Meta</th><td>The Meta key. (Apple Meta and Windows key)</td></tr>\n<tr><th>Escape</th><td>The Escape (Esc) key.</td></tr>\n<tr><th>Left</th><td>The Left Arrow key.</td></tr>\n<tr><th>Up</th><td>The Up Arrow key.</td></tr>\n<tr><th>Right</th><td>The Right Arrow key.</td></tr>\n<tr><th>Down</th><td>The Down Arrow key.</td></tr>\n<tr><th>PageUp</th><td>The Page Up key.</td></tr>\n<tr><th>PageDown</th><td>The Page Down (Next) key.</td></tr>\n<tr><th>End</th><td>The End key.</td></tr>\n<tr><th>Home</th><td>The Home key.</td></tr>\n<tr><th>Insert</th><td>The Insert (Ins) key. (Does not fire in Opera/Win)</td></tr>\n<tr><th>Delete</th><td>The Delete (Del) Key.</td></tr>\n<tr><th>F1</th><td>The F1 key.</td></tr>\n<tr><th>F2</th><td>The F2 key.</td></tr>\n<tr><th>F3</th><td>The F3 key.</td></tr>\n<tr><th>F4</th><td>The F4 key.</td></tr>\n<tr><th>F5</th><td>The F5 key.</td></tr>\n<tr><th>F6</th><td>The F6 key.</td></tr>\n<tr><th>F7</th><td>The F7 key.</td></tr>\n<tr><th>F8</th><td>The F8 key.</td></tr>\n<tr><th>F9</th><td>The F9 key.</td></tr>\n<tr><th>F10</th><td>The F10 key.</td></tr>\n<tr><th>F11</th><td>The F11 key.</td></tr>\n<tr><th>F12</th><td>The F12 key.</td></tr>\n<tr><th>NumLock</th><td>The Num Lock key.</td></tr>\n<tr><th>PrintScreen</th><td>The Print Screen (PrintScrn, SnapShot) key.</td></tr>\n<tr><th>Scroll</th><td>The scroll lock key</td></tr>\n<tr><th>Pause</th><td>The pause/break key</td></tr>\n<tr><th>Win</th><td>The Windows Logo key</td></tr>\n<tr><th>Apps</th><td>The Application key (Windows Context Menu)</td></tr>\n</table>","!type":"fn() -> string"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"},"registerInputFix":{"!doc":"<p>IE9 will not fire an &#8220;input&#8221; event on text input elements if the user changes\nthe field&#8217;s value by pressing the Backspace key. We fix this by listening\nfor the &#8220;keyup&#8221; event and emitting the missing event if necessary</p>","!type":"fn(element: +Element)"},"unregisterInputFix":{"!doc":"<p>Removes the IE9 input event fix</p>","!type":"fn(element: +Element)"}},"Mouse":{"!doc":"<p>Normalization for native mouse events. For cross-device applications that\nsupport both mouse and touchscreen interaction, consider using\n<a href=\"#Pointer\">Pointer</a> and/or Gesture events (e.g. <a href=\"Tap\"></a>).</p>","getButton":{"!doc":"<p>Returns the identifier of the mouse button that change state when the\nevent was triggered</p>","!type":"fn() -> string"},"getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getScreenLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getScreenTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getViewportLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"getViewportTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}},"Native":{"!doc":"<p>Common normalizations for native events</p>","getCurrentTarget":{"!doc":"<p>Computes the current target from the native <span class=\"caps\">DOM</span> event. Emulates the current target\nfor all browsers without native support (like older IEs).</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n  var collection = q(\"div.inline\");\n  collection.on(\"mouseout\", function(e) {\n    var current = e.getCurrentTarget();\n  });\n</pre>","!type":"fn() -> +Element"},"getRelatedTarget":{"!doc":"<p>Computes the related target from the native <span class=\"caps\">DOM</span> event</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n  var collection = q(\"div.inline\");\n  collection.on(\"mouseout\", function(e) {\n    // when using 'mouseout' events the 'relatedTarget' is pointing to the DOM element\n    //  the device exited to.\n    // Useful for scenarios you only interested if e.g. the user moved away from a\n    // section at the website\n    var exitTarget = e.getRelatedTarget();\n  });\n\n  collection.on(\"mouseover\", function(e){\n     // when using 'mouseover' events the 'relatedTarget' is pointing to the DOM element\n     // the device entered from.\n     var earlierElement = e.getRelatedTarget();\n  });\n</pre>","!type":"fn() -> +Element"},"getTarget":{"!doc":"<p>Returns the target of the event.\nExample:</p>\n\n<pre class=\"javascript\">\n  var collection = q(\"div.inline\");\n  collection.on(\"click\", function(e) {\n    var clickedElement = e.getTarget();\n  });\n</pre>","!type":"fn() -> Object"},"getType":{"!doc":"<p>Returns the event&#8217;s type</p>","!type":"fn() -> string"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"},"preventDefault":{"!doc":"<p>Prevent the native default behavior of the event.</p>","!type":"fn()"},"stopPropagation":{"!doc":"<p>Stops the event&#8217;s propagation to the element&#8217;s parent</p>","!type":"fn()"}},"Orientation":{"!doc":"<p>Normalization for orientationchange events\nExample:</p>\n\n<pre class=\"javascript\">\n  q(window).on(\"orientationchange\", function(ev) {\n    ev.getOrientation();\n    ev.isLandscape();\n  });\n</pre>","getOrientation":{"!doc":"<p>Returns the current orientation of the viewport in degrees.</p>\n\n<p>All possible values and their meaning:</p>\n\n<ul>\n<li><code>0</code>: &#8220;Portrait&#8221;</li>\n<li><code>-90</code>: &#8220;Landscape (right, screen turned clockwise)&#8221;</li>\n<li><code>90</code>: &#8220;Landscape (left, screen turned counterclockwise)&#8221;</li>\n<li><code>180</code>: &#8220;Portrait (upside-down portrait)&#8221;</li>\n</ul>","!type":"fn() -> number"},"isLandscape":{"!doc":"<p>Whether the viewport orientation is currently in landscape mode.</p>","!type":"fn() -> bool"},"isPortrait":{"!doc":"<p>Whether the viewport orientation is currently in portrait mode.</p>","!type":"fn() -> bool"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element, type: string) -> +Event"}},"OrientationHandler":{"!doc":"<p>Orientation handler which is responsible for registering and unregistering a\n{@link qx.event.handler.OrientationCore} handler for each given element.</p>","register":{"!doc":"<p>Creates an orientation handler for the given window when an\norientationchange event listener is attached to it</p>","!type":"fn(element: +Window)"},"unregister":{"!doc":"<p>Removes the orientation event handler from the element if there are no more\norientationchange event listeners attached to it</p>","!type":"fn(element: +Element)"}},"Pinch":{"!doc":"<p>Normalization for the pinch gesture.</p>","getScale":{"!doc":"<p>Returns the calculated scale of this event.</p>","!type":"fn() -> +Float"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}},"Pointer":{"!doc":"<p>Normalization for pointer events. Pointer events are hardware-agnostic and\nwill be fired regardless of which input type of input device is used (e.g. mouse or touchscreen).</p>","getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getPointerType":{"!doc":"<p>Returns the device type which the event triggered. This can be one\nof the following strings: <code>mouse</code>, <code>pen</code>\nor <code>touch</code>.</p>","!type":"fn() -> string"},"getScreenLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getScreenTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getViewportLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"getViewportTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}},"PointerHandler":{"register":{"!doc":"<p>Creates a pointer handler for the given element when a pointer event listener\nis attached to it</p>","!type":"fn(element: +Element, type: string)"},"unregister":{"!doc":"<p>Removes the pointer event handler from the element if there are no more\npointer event listeners attached to it</p>","!type":"fn(element: +Element)"}},"Rotate":{"!doc":"<p>Normalization for the rotate gesture.</p>","getAngle":{"!doc":"<p>Returns a number with the current calculated angle between the primary and secondary active pointers.</p>","!type":"fn() -> number"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}},"Swipe":{"!doc":"<p>Normalization for the swipe gesture. This gesture is based on <a href=\"#Pointer\">Pointer events</a>\nmeaning that it&#8217;s available on all devices, no matter which input device type is used (e.g. mouse or\ntouchscreen).</p>","getAxis":{"!doc":"<p>Returns whether the performed swipe was on the x or y axis.</p>","!type":"fn() -> string"},"getDirection":{"!doc":"<p>Returns the direction of the performed swipe in reference to the axis.\ny = up / down\nx = left / right</p>","!type":"fn() -> string"},"getDistance":{"!doc":"<p>Returns the distance of the performed swipe.</p>","!type":"fn() -> +Integer"},"getDuration":{"!doc":"<p>Returns the duration the performed swipe took.</p>","!type":"fn() -> +Integer"},"getStartTime":{"!doc":"<p>Returns the start time of the performed swipe.</p>","!type":"fn() -> +Integer"},"getVelocity":{"!doc":"<p>Returns the velocity of the performed swipe.</p>","!type":"fn() -> number"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}},"Tap":{"!doc":"<p>Normalization for tap gesture events. These gestures are based on <a href=\"#Pointer\">Pointer events</a>,\nmeaning that they are available on all devices, no matter which input device type is used (e.g. mouse or\ntouchscreen).</p>","getDocumentLeft":{"!doc":"<p>Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getDocumentTop":{"!doc":"<p>Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page.</p>","!type":"fn() -> number"},"getScreenLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getScreenTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.</p>\n\n<p>Note: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate.</p>","!type":"fn() -> number"},"getViewportLeft":{"!doc":"<p>Get the horizontal coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"getViewportTop":{"!doc":"<p>Get the vertical coordinate at which the event occurred relative\nto the viewport.</p>","!type":"fn() -> number"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}},"Touch":{"!doc":"<p>Normalization for touch events. For cross-device applications that\nsupport both mouse and touchscreen interaction, consider using\n<a href=\"#Pointer\">Pointer</a> and/or Gesture events (e.g. <a href=\"Tap\"></a>).</p>","normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element, type: string) -> +Event"}},"TouchHandler":{"!doc":"<p>Creates a touch event handler that fires high-level events such as &#8220;swipe&#8221;\nbased on low-level event sequences on the given element</p>","register":{"!doc":"<p>Creates a touch handler for the given element when a touch event listener\nis attached to it</p>","!type":"fn(element: +Element)"},"unregister":{"!doc":"<p>Removes the touch event handler from the element if there are no more\ntouch event listeners attached to it</p>","!type":"fn(element: +Element)"}},"Track":{"!doc":"<p>Normalization for the track gesture. This gesture is based on <a href=\"#Pointer\">Pointer events</a>,\nmeaning that it&#8217;s available on all devices, no matter which input device type is used (e.g. mouse or\ntouchscreen).</p>","getDelta":{"!doc":"<p>Returns a map with the calculated delta coordinates and axis,\nrelative to the position on <code>trackstart</code> event.</p>","!type":"fn() -> +Map"},"normalize":{"!doc":"<p>Manipulates the native event object, adding methods if they&#8217;re not\nalready present</p>","!type":"fn(event: +Event, element: +Element) -> +Event"}}},"Event":{"!doc":"<p>Support for native and custom events.</p>","$getHookRegistry":{"!doc":"<p>Returns all registered event hooks</p>","!type":"fn() -> +Map"},"$getRegistry":{"!doc":"<p>Returns all registered event normalizers</p>","!type":"fn() -> +Map"},"$registerEventHook":{"!doc":"<p>Registers an event hook for the given event types.</p>","!type":"fn(types: string, registerHook: fn(), unregisterHook?: fn())"},"$registerNormalization":{"!doc":"<p>Registers a normalization function for the given event types. Listener\ncallbacks for these types will be called with the return value of the\nnormalization function instead of the regular event object.</p>\n\n<p>The normalizer will be called with two arguments: The original event\nobject and the element on which the event was triggered</p>","!type":"fn(types: string, normalizer: fn())"},"$unregisterEventHook":{"!doc":"<p>Unregisters a hook from the given event types.</p>","!type":"fn(types: string, registerHook: fn(), unregisterHook?: fn())"},"$unregisterNormalization":{"!doc":"<p>Unregisters a normalization function from the given event types.</p>","!type":"fn(types: string, normalizer: fn())"},"allOff":{"!doc":"<p>Removes all event listeners (or all listeners for a given type) from the\ncollection.</p>","!type":"fn(type?: string) -> +qxWeb"},"copyEventsTo":{"!doc":"<p>Copies any event listeners that are attached to the elements in the\ncollection to the provided target element</p>","!type":"fn(target: +Element)"},"emit":{"!doc":"<p>Fire an event of the given type.</p>","!type":"fn(type: string, data?: Object) -> +qxWeb"},"hasListener":{"!doc":"<p>Checks if one or more listeners for the given event type are attached to\nthe first element in the collection</p>","!type":"fn(type: string, listener?: fn(), context?: Object) -> bool"},"hover":{"!doc":"<p>Bind one or two callbacks to the collection.\nIf only the first callback is defined the collection\ndoes react on &#8216;pointerover&#8217; only.</p>","!type":"fn(callbackIn: fn(), callbackOut?: fn()) -> +qxWeb"},"off":{"!doc":"<p>Unregisters event listeners for the given type from each element in the\ncollection.</p>","!type":"fn(type: string, listener: fn(), context?: Object, useCapture?: bool) -> +qxWeb"},"on":{"!doc":"<p>Registers a listener for the given event type on each item in the\ncollection. This can be either native or custom events.</p>","!type":"fn(type: string, listener: fn(), context?: Object, useCapture?: bool) -> +qxWeb"},"once":{"!doc":"<p>Attaches a listener for the given event that will be executed only once.</p>","!type":"fn(type: string, listener: fn(), context?: Object) -> +qxWeb"},"ready":{"!doc":"<p>Executes the given function once the document is ready.</p>","!type":"fn(callback: fn())"}},"Io":{"!doc":"<p>This module provides basic IO functionality. It contains three ways to load\ndata:</p>\n\n<ul>\n<li>XMLHttpRequest</li>\n<li>Script tag</li>\n<li>Script tag using <span class=\"caps\">JSONP</span></li>\n</ul>","jsonp":{"!doc":"<p>Returns a predefined script tag wrapper which can be used to load data\nfrom cross-domain origins via <span class=\"caps\">JSONP</span>.</p>","!type":"fn(url: string, settings?: +Map) -> +qx.bom.request.Jsonp"},"script":{"!doc":"<p>Returns a predefined script tag wrapper which can be used to load data\nfrom cross-domain origins.</p>","!type":"fn(url: string) -> +qx.bom.request.Script"},"xhr":{"!doc":"<p>Returns a configured XMLHttpRequest object. Using the send method will\nfinally send the request.</p>","!type":"fn(url: string, settings?: +Map) -> +qx.bom.request.Xhr"}},"Manipulating":{"!doc":"<p><span class=\"caps\">DOM</span> manipulation module</p>","__animateScroll":{"!doc":"<p>Performs animated scrolling</p>","!type":"fn(property: string, value: number, duration: number) -> +q"},"__getCollectionFromArgument":{"!doc":"<p>Creates a new collection from the given argument</p>","!type":"fn(arg: Object) -> +qxWeb"},"__getElementArray":{"!doc":"<p>Returns an array from a selector expression or a single element</p>","!type":"fn(arg: string) -> +Element"},"__getInnermostElement":{"!doc":"<p>Returns the innermost element of a <span class=\"caps\">DOM</span> tree as determined by a simple\ndepth-first search.</p>","!type":"fn(element: +Element) -> +Element"},"after":{"!doc":"<p>Inserts content after each element in the collection. This can either\nbe an <span class=\"caps\">HTML</span> string, an array of <span class=\"caps\">HTML</span> strings, a single <span class=\"caps\">DOM</span> element or an\narray of elements.</p>","!type":"fn(content: string) -> +qxWeb"},"append":{"!doc":"<p>Appends content to each element in the current set. Accepts an <span class=\"caps\">HTML</span> string,\na single <span class=\"caps\">DOM</span> element or an array of elements</p>","!type":"fn(html: string) -> +qxWeb"},"appendTo":{"!doc":"<p>Appends all items in the collection to the specified parents. If multiple\nparents are given, the items will be moved to the first parent, while\nclones of the items will be appended to subsequent parents.</p>","!type":"fn(parent: string) -> +qxWeb"},"before":{"!doc":"<p>Inserts content before each element in the collection. This can either\nbe an <span class=\"caps\">HTML</span> string, an array of <span class=\"caps\">HTML</span> strings, a single <span class=\"caps\">DOM</span> element or an\narray of elements.</p>","!type":"fn(content: string) -> +qxWeb"},"blur":{"!doc":"<p>Blurs each element in the collection</p>","!type":"fn() -> +qxWeb"},"clone":{"!doc":"<p>Clones the items in the current collection and returns them in a new set.\nEvent listeners can also be cloned.</p>","!type":"fn(events: bool) -> +qxWeb"},"create":{"!doc":"<p>Creates a new collection from the given argument. This can either be an\n<span class=\"caps\">HTML</span> string, a single <span class=\"caps\">DOM</span> element or an array of elements</p>\n\n<p>When no <code>context</code> is given the global document is used to\ncreate new <span class=\"caps\">DOM</span> elements.</p>\n\n<strong>Note:</strong> When a complex HTML string is provided the <code>innerHTML</code>\nmechanism of the browser is used. Some browsers do filter out elements like <code>&lt;html&gt;</code>,\n<code>&lt;head&gt;</code> or <code>&lt;body&gt;</code>. The better approach is to create\na single element and the appending the child nodes like in the example below.","!type":"fn(html: string, context?: +Document) -> +qxWeb"},"empty":{"!doc":"<p>Removes all content from the elements in the collection</p>","!type":"fn() -> +qxWeb"},"focus":{"!doc":"<p>Focuses the first element in the collection</p>","!type":"fn() -> +qxWeb"},"getScrollLeft":{"!doc":"<p>Returns the left scroll position of the first element in the collection.</p>","!type":"fn() -> number"},"getScrollTop":{"!doc":"<p>Returns the top scroll position of the first element in the collection.</p>","!type":"fn() -> number"},"insertAfter":{"!doc":"<p>Inserts the current collection after each target item. The collection\nitems are moved after the first target. For subsequent targets,\nclones of the collection items are created and inserted.</p>","!type":"fn(target: string) -> +qxWeb"},"insertBefore":{"!doc":"<p>Inserts the current collection before each target item. The collection\nitems are moved before the first target. For subsequent targets,\nclones of the collection items are created and inserted.</p>","!type":"fn(target: string) -> +qxWeb"},"remove":{"!doc":"<p>Removes each element in the current collection from the <span class=\"caps\">DOM</span></p>","!type":"fn() -> +qxWeb"},"setScrollLeft":{"!doc":"<p>Scrolls the elements of the collection to the given coordinate.</p>","!type":"fn(value: number, duration?: number) -> +qxWeb"},"setScrollTop":{"!doc":"<p>Scrolls the elements of the collection to the given coordinate.</p>","!type":"fn(value: number, duration?: number) -> +qxWeb"},"wrap":{"!doc":"<p>Wraps each element in the collection in a copy of an <span class=\"caps\">HTML</span> structure.\nElements will be appended to the deepest nested element in the structure\nas determined by a depth-first search.</p>","!type":"fn(wrapper: string) -> +qxWeb"}},"MatchMedia":{"!doc":"<p>Module for mediaqueries evaluation. The module is a wrapper for media.match.js,\nthat implements a polyfill for window.matchMedia when it&#8217;s not supported natively.</p>","__applyClass":{"!doc":"<p>Adds or removes a class depending on matching a given media query</p>","!type":"fn(query: +undefined, className: +undefined)"},"addSizeClasses":{"!doc":"<p>Adds pre-defined media queries</p>","!type":"fn()"},"matchMedia":{"!doc":"<p>Evaluates the specified mediaquery list</p>","!type":"fn(query: string, ctxWindow?: Object) -> +qx.bom.MediaQuery"},"mediaQueryToClass":{"!doc":"<p>Maps a class to a html element  media query</p>","!type":"fn(queryString: +undefined, className: +undefined, contextWindow: +undefined)"}},"Messaging":{"!doc":"<p>Define messages to react on certain channels.</p>\n\n<p>The channel names will be used in the q.messaging.on method to define handlers which will\nbe called on certain channels and routes. The q.messaging.emit method can be used\nto execute a given route on a channel. q.messaging.onAny defines a handler on any channel.</p>","emit":{"!doc":"<p>Sends a message on the given channel and informs all matching route handlers.</p>","!type":"fn(channel: string, path: string, params: +Map, customData: Object)"},"on":{"!doc":"<p>Adds a route handler for the given channel. The route is called\nif the {@link #emit} method finds a match.</p>","!type":"fn(channel: string, type: string, handler: fn(), scope?: Object) -> string"},"onAny":{"!doc":"<p>Adds a handler for the &#8220;any&#8221; channel. The &#8220;any&#8221; channel is called\nbefore all other channels.</p>","!type":"fn(type: string, handler: fn(), scope?: Object) -> string"},"remove":{"!doc":"<p>Removes a registered listener by the given id.</p>","!type":"fn(id: string)"}},"Placeholder":{"!doc":"<p>The module supplies a fallback implementation for placeholders, which is\nused on input and textarea elements. If the browser supports native placeholders\nthe <span class=\"caps\">API</span> silently ignores all calls. If not, an element will be created for every\ngiven input element and acts as placeholder. Most modern browsers support\nplaceholders which makes the fallback only relevant for IE < 10 and FF < 4.</p>\n\n<ul>\n<li><a href=\"http://dev.w3.org/html5/spec/single-page.html#the-placeholder-attribute\"><span class=\"caps\">HTML</span> Spec</a></li>\n</ul>\n\n<ul>\n<li><a href=\"http://caniuse.com/#feat=input-placeholder\">Browser Support</a></li>\n</ul>","__createPlaceholderElement":{"!doc":"<p>Creates a placeholder element based on the given input element.</p>","!type":"fn(item: +qxWeb) -> +qxWeb"},"__syncStyles":{"!doc":"<p>Internal helper method to update the styles for a given input element.</p>","!type":"fn(item: +qxWeb)"},"update":{"!doc":"<p>Queries for all input and textarea elements on the page and updates\ntheir placeholder.</p>","!type":"fn()"},"updatePlaceholder":{"!doc":"<p>Updates the placeholders for input&#8217;s and textarea&#8217;s in the collection.\nThis includes positioning, styles and <span class=\"caps\">DOM</span> positioning.\nIn case the browser supports native placeholders, this methods simply\ndoes nothing.</p>","!type":"fn() -> +qxWeb"}},"Placement":{"!doc":"<p>The Placement module provides a convenient way to align two elements relative\nto each other using various pre-defined algorithms.</p>","_computePlacement":{"!doc":"<p>Returns the computed coordinates for the element to be placed</p>","!type":"fn(axes: +Map, size: +Map, area: +Map, target: +Map, offsets: +Map, position: +Map) -> +Map"},"_getAxis":{"!doc":"<p>Returns the appropriate axis implementation for the given placement\nmode</p>","!type":"fn(mode: string) -> Object"},"_getPositionX":{"!doc":"<p>Returns the X axis positioning type for the given edge and alignment\nvalues</p>","!type":"fn(edge: string, align: string) -> string"},"_getPositionY":{"!doc":"<p>Returns the Y axis positioning type for the given edge and alignment\nvalues</p>","!type":"fn(edge: string, align: string) -> string"},"placeTo":{"!doc":"<p>Moves the first element in the collection, aligning it with the given\ntarget.</p>\n\n<div>\n<strong>NOTE:</strong> The <code>placeTo</code> method also works for hidden\nelements. However, the visibility / display styles are only manipulated during\nthe placement operation. As a result a previously hidden element <strong>stays hidden</strong>\n</div>\n\n<div>\n<strong>NOTE:</strong> If the target is changing its position due e.g. a DOM manipulation the\nplaced element <strong>is not</strong> updated automatically. You have to call <code>placeTo</code>\nagain to place the element to the target. The element is <strong>always</strong> positioned by using\n<code>position:absolute</code> independently on the chosen <code>position</code> and <code>mode</code>.\n</div>","!type":"fn(target: +Element, position: string, offsets?: +Map, modeX?: string, modeY?: string) -> +qxWeb"}},"Polyfill":{"!doc":"<p>Adds JavaScript features that may not be supported by all clients.</p>"},"Rest":{"!doc":"<p>This modules eases the communication with a RESTful web service by providing\na client-side wrapper of a <span class=\"caps\">REST</span> resource.</p>\n\n<p>See {@link qx.bom.rest.Resource}.</p>","resource":{"!type":"fn(description?: +Map) -> +qx.bom.rest.Resource"}},"Storage":{"!doc":"<p>This module offers a cross browser storage implementation. The <span class=\"caps\">API</span> is aligned\nwith the <span class=\"caps\">API</span> of the <span class=\"caps\">HTML</span> web storage (<a href=\"http://www.w3.org/TR/webstorage/\">http://www.w3.org/TR/webstorage/</a>) which is\nalso the preferred implementation used. As fallback for IE < 8, we use user data.\nIf both techniques are unsupported, we supply a in memory storage, which is\nof course, not persistent.</p>","clearLocal":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"clearSession":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"forEachLocal":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"forEachSession":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"getLocalItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"getLocalKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: number) -> string"},"getLocalLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> number"},"getSessionItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"getSessionKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: number) -> string"},"getSessionLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> number"},"removeLocalItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"removeSessionItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"setLocalItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"},"setSessionItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"}},"Template":{"!doc":"<p><span class=\"caps\">HTML</span> templating module. This is a wrapper for mustache.js which is a\n&#8220;framework-agnostic way to render logic-free views&#8221;.</p>\n\n<p>Here is a basic example how to use it:</p>\n\n<pre class=\"javascript\">\nvar template = \"Hi, my name is {{name}}!\";\nvar view = {name: \"qooxdoo\"};\nq.template.render(template, view);\n  // return \"Hi, my name is qooxdoo!\"\n</pre>\n\n<p>For further details, please visit the mustache.js documentation here:\n  <a href=\"https://github.com/janl/mustache.js/blob/master/README.md\">https://github.com/janl/mustache.js/blob/master/README.md</a></p>","__wrap":{"!doc":"<p>If the given node is a <span class=\"caps\">DOM</span> text node, wrap it in a span element and return\nthe wrapper.</p>","!type":"fn(el: +Node) -> +Element"},"get":{"!doc":"<p>Helper method which provides direct access to templates stored as <span class=\"caps\">HTML</span> in\nthe <span class=\"caps\">DOM</span>. The <span class=\"caps\">DOM</span> node with the given ID will be treated as a template,\nparsed and a new <span class=\"caps\">DOM</span> element will be returned containing the parsed data.\nKeep in mind that templates can only have one root element.\nAdditionally, you should not put the template into a regular, hidden\n<span class=\"caps\">DOM</span> element because the template may not be valid <span class=\"caps\">HTML</span> due to the containing\nmustache tags. We suggest to put it into a script tag with the type\n<code>text/template</code>.</p>","!type":"fn(id: string, view: Object, partials: Object) -> +qxWeb"},"render":{"!doc":"<p>Original and only template method of mustache.js. For further\ndocumentation, please visit <a href=\"https://github.com/janl/mustache.js\">mustache.js</a>.</p>","!type":"fn(template: string, view: Object, partials: Object) -> string"},"renderToNode":{"!doc":"<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\nand output is equal to {@link #get}. The advantage over {@link #get}\nis that you don&#8217;t need a <span class=\"caps\">HTML</span> template but can use a template\nstring and still get a collection. Keep in mind that templates\ncan only have one root element.</p>","!type":"fn(template: string, view: Object, partials: Object) -> +qxWeb"}},"TextSelection":{"!doc":"<p>Text selection manipulation module</p>","__getTextNode":{"!doc":"<p>Returns the first text child node of the given element</p>","!type":"fn(el: +Element) -> +Node"},"__isInput":{"!doc":"<p>Checks if the given <span class=\"caps\">DOM</span> node is a text input field or textarea</p>","!type":"fn(el: +Element) -> bool"},"clearTextSelection":{"!doc":"<p>Clears the text selection of all elements.</p>","!type":"fn() -> +qxWeb"},"getTextSelection":{"!doc":"<p>Get the text selection of the first element.</p>","!type":"fn() -> string"},"getTextSelectionEnd":{"!doc":"<p>Get the end of the text selection of the first element.</p>","!type":"fn() -> +Integer"},"getTextSelectionLength":{"!doc":"<p>Get the length of the text selection of the first element.</p>","!type":"fn() -> +Integer"},"getTextSelectionStart":{"!doc":"<p>Get the start of the text selection of the first element.</p>","!type":"fn() -> +Integer"},"setTextSelection":{"!doc":"<p>Set the text selection of the first element in the collection\nwith the given start and end value.\nIf no end value is passed the selection will extend to the end.</p>","!type":"fn(start: +Integer, end: +Integer) -> +qxWeb"}},"Transform":{"!doc":"<p>This class is responsible for applying CSS3 transforms to the collection.\nThe implementation is mostly a cross browser wrapper for applying the\ntransforms.\nThe <span class=\"caps\">API</span> is keep to the spec as close as possible.</p>\n\n<p><a href=\"http://www.w3.org/TR/css3-3d-transforms/\">http://www.w3.org/TR/css3-3d-transforms/</a></p>","getTransformBackfaceVisibility":{"!doc":"<p>Returns the backface-visibility property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>","!type":"fn() -> bool"},"getTransformOrigin":{"!doc":"<p>Returns the transform-origin property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</a></p>","!type":"fn() -> string"},"getTransformPerspective":{"!doc":"<p>Returns the perspective property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-property</a></p>","!type":"fn() -> string"},"getTransformPerspectiveOrigin":{"!doc":"<p>Returns the perspective-origin property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</a></p>","!type":"fn() -> string"},"getTransformStyle":{"!doc":"<p>Returns the transform-style property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</a></p>","!type":"fn() -> string"},"rotate":{"!doc":"<p>Rotates by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: string) -> +qxWeb"},"scale":{"!doc":"<p>Scales by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: number) -> +qxWeb"},"setTransformBackfaceVisibility":{"!doc":"<p>Sets the backface-visibility property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>","!type":"fn(value: bool) -> +qxWeb"},"setTransformOrigin":{"!doc":"<p>Sets the transform-origin property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</a></p>","!type":"fn(value: string) -> +qxWeb"},"setTransformPerspective":{"!doc":"<p>Sets the perspective property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-property</a></p>","!type":"fn(value: number) -> +qxWeb"},"setTransformPerspectiveOrigin":{"!doc":"<p>Sets the perspective-origin property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</a></p>","!type":"fn(value: string) -> +qxWeb"},"setTransformStyle":{"!doc":"<p>Sets the transform-style property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</a></p>","!type":"fn(value: string) -> +qxWeb"},"skew":{"!doc":"<p>Skews by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: string) -> +qxWeb"},"transform":{"!doc":"<p>Method to apply multiple transforms at once to the given element. It\ntakes a map containing the transforms you want to apply plus the values\ne.g.<code>{scale: 2, rotate: &#8220;5deg&#8221;}</code>.\nThe values can be either singular, which means a single value will\nbe added to the <span class=\"caps\">CSS</span>. If you give an array, the values will be split up\nand each array entry will be used for the X, Y or Z dimension in that\norder e.g. <code>{scale: [2, 0.5]}</code> will result in a element\ndouble the size in X direction and half the size in Y direction.\nMake sure your browser supports all transformations you apply.</p>","!type":"fn(transforms: +Map) -> +qxWeb"},"translate":{"!doc":"<p>Translates by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: string) -> +qxWeb"}},"Traversing":{"!doc":"<p><span class=\"caps\">DOM</span> traversal module</p>","__getAncestors":{"!doc":"<p>Internal helper for getAncestors and getAncestorsUntil</p>","!type":"fn(selector: string, filter?: string) -> +qxWeb"},"__getAttributes":{"!doc":"<p>Returns a map containing the given <span class=\"caps\">DOM</span> node&#8217;s attribute names\nand values</p>","!type":"fn(node: +Node) -> +Map"},"__getElementFromArgument":{"!doc":"<p>Helper which returns the element from the given argument. If it&#8217;s a collection,\nit returns it&#8217;s first child. If it&#8217;s a string, it tries to use the string\nas selector and returns the first child of the new collection.</p>","!type":"fn(arg: +Node) -> +Node"},"__getNodeFromArgument":{"!doc":"<p>Helper that attempts to convert the given argument into a <span class=\"caps\">DOM</span> node</p>","!type":"fn(arg: Object) -> +Node"},"__hierarchyHelper":{"!doc":"<p>Helper function that iterates over a set of items and applies the given\nqx.dom.Hierarchy method to each entry, storing the results in a new Array.\nDuplicates are removed and the items are filtered if a selector is\nprovided.</p>","!type":"fn(collection: +Array, method: string, selector?: string) -> +Array"},"add":{"!doc":"<p>Adds an element to the collection</p>","!type":"fn(el: +Element) -> +qxWeb"},"contains":{"!doc":"<p>Returns a new collection containing only those nodes that\ncontain the given element. Also accepts a qxWeb\ncollection or an Array of elements. In those cases, the first element\nin the list is used.</p>","!type":"fn(element: +Element) -> +qxWeb"},"eq":{"!doc":"<p>Reduce the set of matched elements to a single element.</p>","!type":"fn(index: number) -> +qxWeb"},"equalNodes":{"!doc":"<p>Determines if two <span class=\"caps\">DOM</span> nodes are equal as defined in the\n<a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode\"><span class=\"caps\">DOM</span> Level 3 isEqualNode spec</a>.\nAlso works in legacy browsers without native <em>isEqualNode</em> support.</p>","!type":"fn(node1: string, node2: string) -> bool"},"find":{"!doc":"<p>Searches the child elements of each item in the collection and returns\na new collection containing the children that match the provided selector</p>","!type":"fn(selector: string) -> +qxWeb"},"forEach":{"!doc":"<p>Executes the provided callback function once for each item in the\ncollection.</p>","!type":"fn(fn: fn(), ctx: Object) -> +qxWeb"},"getAncestors":{"!doc":"<p>Gets a set of elements containing all ancestors of each element in the\ncollection.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(filter?: string) -> +qxWeb"},"getAncestorsUntil":{"!doc":"<p>Gets a set of elements containing all ancestors of each element in the\ncollection, up to (but not including) the element matched by the provided\nselector.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector: string, filter?: string) -> +qxWeb"},"getChildren":{"!doc":"<p>Gets a set of elements containing all of the unique immediate children of\neach of the matched set of elements.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getClosest":{"!doc":"<p>Gets a set containing the closest matching ancestor for each item in\nthe collection.\nIf the item itself matches, it is added to the new set. Otherwise, the\nitem&#8217;s parent chain will be traversed until a match is found.</p>","!type":"fn(selector: string) -> +qxWeb"},"getContents":{"!doc":"<p>Gets a new set of elements containing the child nodes of each item in the\ncurrent set.</p>","!type":"fn() -> +qxWeb"},"getDocument":{"!doc":"<p>Returns the owner document of the given node</p>","!type":"fn(selector: +Node) -> +Document"},"getFirst":{"!doc":"<p>Reduces the collection to the first element.</p>","!type":"fn() -> +qxWeb"},"getLast":{"!doc":"<p>Reduces the collection to the last element.</p>","!type":"fn() -> +qxWeb"},"getNext":{"!doc":"<p>Gets a collection containing the next sibling element of each item in\nthe current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getNextAll":{"!doc":"<p>Gets a collection containing all following sibling elements of each\nitem in the current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getNextUntil":{"!doc":"<p>Gets a collection containing the following sibling elements of each\nitem in the current set up to but not including any element that matches\nthe given selector.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getNodeName":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> node&#8217;s name as a lowercase string</p>","!type":"fn(selector: +Node) -> string"},"getNodeText":{"!doc":"<p>Returns the text content of a node where the node type may be one of\nNODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT, NODE_CDATA</p>","!type":"fn(selector: +Node) -> string"},"getOffsetParent":{"!doc":"<p>Gets a new collection containing the offset parent of each item in the\ncurrent set.</p>","!type":"fn() -> +qxWeb"},"getParents":{"!doc":"<p>Gets a set of elements containing the parent of each element in the\ncollection.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getPrev":{"!doc":"<p>Gets a collection containing the previous sibling element of each item in\nthe current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getPrevAll":{"!doc":"<p>Gets a collection containing all preceding sibling elements of each\nitem in the current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getPrevUntil":{"!doc":"<p>Gets a collection containing the preceding sibling elements of each\nitem in the current set up to but not including any element that matches\nthe given selector.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getSiblings":{"!doc":"<p>Gets a collection containing all sibling elements of the items in the\ncurrent set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getWindow":{"!doc":"<p>Returns the DOM2 <code>defaultView</code> (window) for the given node.</p>","!type":"fn(selector: +Node) -> +Window"},"has":{"!doc":"<p>Gets a collection containing only the elements that have descendants\nmatching the given selector</p>","!type":"fn(selector: string) -> +qxWeb"},"is":{"!doc":"<p>Checks if at least one element in the collection passes the provided\nfilter. This can be either a selector expression or a filter\nfunction</p>","!type":"fn(selector: string) -> bool"},"isBlockNode":{"!doc":"<p>Checks if the given node is a block node</p>","!type":"fn(selector: +Node) -> bool"},"isChildOf":{"!doc":"<p>Checks if any element of the current collection is child of any element of a given\nparent collection.</p>","!type":"fn(parent: +qxWeb) -> bool"},"isDocument":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> document object</p>","!type":"fn(node: Object) -> bool"},"isDocumentFragment":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> document fragment object</p>","!type":"fn(node: Object) -> bool"},"isElement":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> element</p>","!type":"fn(selector: Object) -> bool"},"isNode":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> node</p>","!type":"fn(selector: +Node) -> bool"},"isNodeName":{"!doc":"<p>Whether the node has the given node name</p>","!type":"fn(selector: +Node, nodeName: string) -> bool"},"isRendered":{"!doc":"<p>Whether the first element in the collection is inserted into\nthe document for which it was created.</p>","!type":"fn() -> bool"},"isTextNode":{"!doc":"<p>Checks whether the given object is a <span class=\"caps\">DOM</span> text node</p>","!type":"fn(obj: Object) -> bool"},"isWindow":{"!doc":"<p>Check whether the given object is a browser window object.</p>","!type":"fn(obj: Object) -> bool"},"not":{"!doc":"<p>Remove elements from the collection that do not pass the given filter.\nThis can be either a selector expression or a filter function</p>","!type":"fn(selector: string) -> +qxWeb"}},"util":{"Array":{"!doc":"<p>Utility module to give some support to work with arrays.</p>","cast":{"!doc":"<p>Converts an array like object to any other array like\nobject.</p>\n\n<p>Attention: The returned array may be same\ninstance as the incoming one if the constructor is identical!</p>","!type":"fn(object: Object, constructor: fn(), offset?: number) -> +Array"},"equals":{"!doc":"<p>Check whether the two arrays have the same content. Checks only the\nequality of the arrays&#8217; content.</p>","!type":"fn(arr1: +Array, arr2: +Array) -> bool"},"exclude":{"!doc":"<p>Modifies the first array as it removes all elements\nwhich are listed in the second array as well.</p>","!type":"fn(arr1: +Array, arr2: +Array) -> +Array"},"fromArguments":{"!doc":"<p>Convert an arguments object into an array.</p>","!type":"fn(args: +arguments, offset?: number) -> +Array"},"insertAfter":{"!doc":"<p>Insert an element into the array after a given second element.</p>","!type":"fn(arr: +Array, obj: Object, obj2: Object) -> +Array"},"insertBefore":{"!doc":"<p>Insert an element into the array before a given second element.</p>","!type":"fn(arr: +Array, obj: Object, obj2: Object) -> +Array"},"max":{"!doc":"<p>Returns the highest value in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: +Array) -> number"},"min":{"!doc":"<p>Returns the lowest value in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: +Array) -> number"},"remove":{"!doc":"<p>Remove an element from the array.</p>","!type":"fn(arr: +Array, obj: Object) -> Object"},"removeAll":{"!doc":"<p>Remove all elements from the array</p>","!type":"fn(arr: +Array) -> +Array"},"unique":{"!doc":"<p>Recreates an array which is free of all duplicate elements from the original.\nThis method do not modifies the original array!\nKeep in mind that this methods deletes undefined indexes.</p>","!type":"fn(arr: +Array) -> +Array"}},"Function":{"!doc":"<p>Utility module to give some support to work with functions.</p>","debounce":{"!doc":"<p>Returns a debounced version of the given callback. The execution of the callback\nis delayed by the given delay and after no events were triggered anymore.\nThis mechanism is very useful for event handling: only after a specified delay\nthe event should be handled (e.g. at keyboard input by the user) to prevent flooding\nthe handler with a large amounts of events.</p>","!type":"fn(callback: fn(), delay: number, immediate: bool) -> fn()"},"throttle":{"!doc":"<p>Returns a throttled version of the given callback. The execution of the callback\nis throttled which means it is only executed in the given interval.\nThis mechanism is very useful for event handling: only in specified intervals\nthe event should be handled (e.g. at resize of the browser window) to prevent flooding\nthe handler with a large amounts of events.\nAs default the <code>leading</code> and <code>trailing</code> calls are executed.</p>","!type":"fn(callback: fn(), interval: number, options: +Map) -> fn()"}},"Object":{"!doc":"<p>Helper functions to handle an Object as a Hash map.</p>","clone":{"!doc":"<p>Return a copy of an Object</p>","!type":"fn(source: Object, deep: bool) -> Object"},"contains":{"!doc":"<p>Whether the map contains the given value.</p>","!type":"fn(map: Object, value: Object) -> bool"},"getValues":{"!doc":"<p>Get the values of a map as array</p>","!type":"fn(map: Object) -> +Array"},"invert":{"!doc":"<p>Inverts a map by exchanging the keys with the values.</p>","!type":"fn(map: Object) -> Object"}},"String":{"!doc":"<p>Utility module to give some support to work with strings.</p>\n\n<p><strong>Info:</strong> The</p>\n\n<pre class=\"javascript\">trim</pre>\n\n<p>method is available as <a href=\"#String\">Polyfill</a>.</p>","camelCase":{"!doc":"<p>Converts a hyphenated string (separated by &#8217;-&#8217;) to camel case.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">q.string.camelCase(\"I-like-cookies\"); //returns \"ILikeCookies\"</pre>","!type":"fn(str: string) -> string"},"endsWith":{"!doc":"<p>Check whether the string ends with the given substring.</p>","!type":"fn(fullstr: string, substr: string) -> bool"},"escapeHtml":{"!doc":"<p>Escapes the characters in a <code>String</code> using <span class=\"caps\">HTML</span> entities.</p>\n\n<p>For example: <tt>&#8220;bread&#8221; &amp; &#8220;butter&#8221;</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\nSupports all known <span class=\"caps\">HTML</span> 4.0 entities, including funky accents.</p>","!type":"fn(str: string) -> string"},"escapeRegexpChars":{"!doc":"<p>Escapes all chars that have a special meaning in regular expressions.</p>","!type":"fn(str: string) -> string"},"firstLow":{"!doc":"<p>Convert the first character of the string to lower case.</p>","!type":"fn(str: string) -> string"},"firstUp":{"!doc":"<p>Convert the first character of the string to upper case.</p>","!type":"fn(str: string) -> string"},"hyphenate":{"!doc":"<p>Converts a camelcased string to a hyphenated (separated by &#8217;-&#8217;) string.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">q.string.hyphenate(\"weLikeCookies\"); //returns \"we-like-cookies\"</pre>","!type":"fn(str: string) -> string"},"startsWith":{"!doc":"<p>Check whether the string starts with the given substring.</p>","!type":"fn(fullstr: string, substr: string) -> bool"}},"Type":{"!doc":"<p>Utility for checking the type of a variable.\nIt adds a <code>type</code> key static to q and offers the given method.</p>\n\n<pre class=\"javascript\">\nq.type.get(\"abc\"); // return \"String\" e.g.\n</pre>","get":{"!doc":"<p>Get the internal class of the value. The following classes are possible:</p>\n\n<pre>\n<code>\"String\"</code>,\n<code>\"Array\"</code>,\n<code>\"Object\"</code>,\n<code>\"RegExp\"</code>,\n<code>\"Number\"</code>,\n<code>\"Boolean\"</code>,\n<code>\"Date\"</code>,\n<code>\"Function\"</code>,\n<code>\"Error\"</code>\n</pre>","!type":"fn(value: Object) -> string"}}}},"Part":{"!doc":"<p>The part loader knows about all generated packages and parts.</p>\n\n<p>It contains functionality to load parts.</p>","!type":"fn()","$$notifyLoad":{"!doc":"<p>Loaded closure packages have to call this method to indicate\nsuccessful loading and to get their closure stored.</p>","!type":"fn(id: string, closure: fn())"},"getInstance":{"!doc":"<p>Get the default part loader instance</p>","!type":"fn() -> +qx.Part"},"preload":{"!doc":"<p>Preloads one or more closure parts but does not execute them. This means\nthe closure (the whole code of the part) is already loaded but not\nexecuted so you can&#8217;t use the classes in the the part after a preload.\nIf you want to execute them, just use the regular {@link #require}\nfunction.</p>","!type":"fn(partNames: string)"},"require":{"!doc":"<p>Loads one or more parts asynchronously. The callback is called after all\nparts and their dependencies are fully loaded. If the parts are already\nloaded the callback is called immediately.</p>","!type":"fn(partNames: string, callback: fn(), self?: Object)"},"prototype":{"__decodeUris":{"!doc":"<p>Decodes a list of source URIs. The function is defined in the loader\nscript.</p>","!type":"fn(compressedUris: string) -> string"},"__getUris":{"!doc":"<p>Get the <span class=\"caps\">URI</span> lists of all packages</p>","!type":"fn() -> string"},"addPackageListener":{"!doc":"<p>Register callback, which is called after the given package has been loaded\nor fails with an error. After the call the listener is removed.</p>","!type":"fn(pkg: Object, callback: Object)"},"addPartListener":{"!doc":"<p>Register callback, which is called after the given part has been loaded\nor fails with an error. After the call the listener is removed.</p>","!type":"fn(part: Object, callback: Object)"},"addToPackage":{"!doc":"<p>This method is only for testing purposes! Don&#8217;t use it!</p>","!type":"fn(pkg: +qx.io.part.Package)"},"getParts":{"!doc":"<p>Internal method for testing purposes which returns the internal parts\nstore.</p>","!type":"fn() -> +Array"},"notifyPackageResult":{"!doc":"<p>This method is called after a packages has been loaded or failed to load.\nIt calls all listeners for this package.</p>","!type":"fn(pkg: Object)"},"notifyPartResult":{"!doc":"<p>This method is called after a part has been loaded or failed to load.\nIt calls all listeners for this part.</p>","!type":"fn(part: Object)"},"preload":{"!doc":"<p>Preloader for the given part.</p>","!type":"fn(partNames: string, callback: fn(), self?: Object)"},"require":{"!doc":"<p>Loads one or more parts asynchronously. The callback is called after all\nparts and their dependencies are fully loaded. If the parts are already\nloaded the callback is called immediately.</p>","!type":"fn(partNames: string, callback: fn(), self?: Object)"},"saveClosure":{"!doc":"<p>Internal helper method to save the closure and notify that the load.</p>","!type":"fn(id: string, closure: fn())"}}},"theme":{"classic":{"Appearance":{"!doc":"<p>The classic qooxdoo appearance theme.</p>"},"Color":{"!doc":"<p>Windows classic color theme</p>"},"Decoration":{"!doc":"<p>The classic qooxdoo decoration theme.</p>"},"Font":{"!doc":"<p>The classic qooxdoo font theme.</p>"}},"Classic":{"!doc":"<p>Classic Windows Theme</p>"},"icon":{"Oxygen":{"!doc":"<p><span class=\"caps\">KDE</span> Oxygen icons</p>"},"Tango":{"!doc":"<p>Tango icons</p>"}},"indigo":{"Appearance":{"!doc":"<p>The simple qooxdoo appearance theme.</p>"},"Color":{"!doc":"<p>Indigo color theme</p>"},"Decoration":{"!doc":"<p>The indigo qooxdoo decoration theme.</p>"},"Font":{"!doc":"<p>The simple qooxdoo font theme.</p>"}},"Indigo":{"!doc":"<p>Simple Theme</p>"},"manager":{"Appearance":{"!proto":"qx.core.Object","!doc":"<p>Manager for appearance themes</p>","!type":"fn()","prototype":{"__resolveId":{"!doc":"<p>Returns the appearance entry ID to use\nwhen all aliases etc. are processed.</p>","!type":"fn(id: string, theme: +Theme, defaultId: string, chain: +Array) -> string"},"_applyTheme":{"!doc":"<p>Applies changes of the property value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: +Theme, old: +Theme)"},"getTheme":{"!doc":"<p>Returns the (computed) value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn() -> Object"},"initTheme":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>theme</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"resetTheme":{"!doc":"<p>Resets the user value of the property <code>theme</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn()"},"setTheme":{"!doc":"<p>Sets the user value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"styleFrom":{"!doc":"<p>Get the result of the &#8220;state&#8221; function for a given id and states</p>","!type":"fn(id: string, states: +Map, theme?: +Theme, defaultId: string) -> +Map"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.theme.manager.Appearance"}},"Color":{"!proto":"qx.util.ValueManager","!doc":"<p>Manager for color themes</p>","prototype":{"__parseColor":{"!doc":"<p>Helper to take a color stored in the theme and returns the string color value.\nIn most of the times that means it just returns the string stored in the theme.\nIt additionally checks if its a valid color at all.</p>","!type":"fn(colors: +Map, name: string) -> string"},"_applyTheme":{"!doc":"<p>Applies changes of the property value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: +Theme, old: +Theme)"},"getTheme":{"!doc":"<p>Returns the (computed) value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn() -> Object"},"initTheme":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>theme</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"isDynamic":{"!doc":"<p>Whether a value is interpreted dynamically</p>","!type":"fn(value: string) -> bool"},"resetTheme":{"!doc":"<p>Resets the user value of the property <code>theme</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn()"},"resolve":{"!doc":"<p>Returns the dynamically interpreted result for the incoming value,\n(if available), otherwise returns the original value</p>","!type":"fn(value: string) -> Object"},"setTheme":{"!doc":"<p>Sets the user value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.theme.manager.Color"}},"Decoration":{"!proto":"qx.core.Object","!doc":"<p>Manager for decoration themes</p>","!type":"fn()","prototype":{"_applyTheme":{"!doc":"<p>Applies changes of the property value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: +Theme, old: +Theme)"},"addCssClass":{"!doc":"<p>Adds a css class to the global stylesheet for the given decorator.\nThis includes resolving the decorator if it&#8217;s a string.</p>","!type":"fn(value: string) -> string"},"getCssClassName":{"!doc":"<p>Returns the name which will be / is used as css class name.</p>","!type":"fn(value: string) -> string"},"getTheme":{"!doc":"<p>Returns the (computed) value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn() -> Object"},"initTheme":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>theme</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"isCached":{"!doc":"<p>Whether the given decorator is cached</p>","!type":"fn(decorator: string) -> bool"},"isDynamic":{"!doc":"<p>Whether a value is interpreted dynamically</p>","!type":"fn(value: string) -> bool"},"isValidPropertyValue":{"!doc":"<p>Whether the given value is valid for being used in a property\nwith the &#8216;check&#8217; configured to &#8216;Decorator&#8217;.</p>","!type":"fn(value: Object) -> bool"},"resetTheme":{"!doc":"<p>Resets the user value of the property <code>theme</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn()"},"resolve":{"!doc":"<p>Returns the dynamically interpreted result for the incoming value</p>","!type":"fn(value: string) -> Object"},"setTheme":{"!doc":"<p>Sets the user value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.theme.manager.Decoration"}},"Font":{"!proto":"qx.util.ValueManager","!doc":"<p>Manager for font themes</p>","prototype":{"__getFontClass":{"!doc":"<p>Decides which Font class should be used based on the theme configuration</p>","!type":"fn(config: +Map) -> +Class"},"__resolveInclude":{"!doc":"<p>Checks for includes and resolves them recursively</p>","!type":"fn(fonts: +Map, fontName: string)"},"_applyTheme":{"!doc":"<p>Applies changes of the property value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: +Theme, old: +Theme)"},"getTheme":{"!doc":"<p>Returns the (computed) value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn() -> Object"},"initTheme":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>theme</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"isDynamic":{"!doc":"<p>Whether a value is interpreted dynamically</p>","!type":"fn(value: string) -> bool"},"resetTheme":{"!doc":"<p>Resets the user value of the property <code>theme</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn()"},"resolve":{"!doc":"<p>Returns the dynamically interpreted result for the incoming value,\n(if available), otherwise returns the original value</p>","!type":"fn(value: string) -> Object"},"resolveDynamic":{"!doc":"<p>Returns the dynamically interpreted result for the incoming value</p>","!type":"fn(value: string) -> Object"},"setTheme":{"!doc":"<p>Sets the user value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.theme.manager.Font"}},"Icon":{"!proto":"qx.core.Object","!doc":"<p>Manager for icon themes</p>","prototype":{"_applyTheme":{"!doc":"<p>Applies changes of the property value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: +Theme, old: +Theme)"},"getTheme":{"!doc":"<p>Returns the (computed) value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn() -> Object"},"initTheme":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>theme</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"resetTheme":{"!doc":"<p>Resets the user value of the property <code>theme</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn()"},"setTheme":{"!doc":"<p>Sets the user value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.theme.manager.Icon"}},"Meta":{"!proto":"qx.core.Object","!doc":"<p>Manager for meta themes</p>","prototype":{"_applyTheme":{"!doc":"<p>Applies changes of the property value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: +Theme, old: +Theme)"},"getTheme":{"!doc":"<p>Returns the (computed) value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn() -> Object"},"initialize":{"!doc":"<p>Initialize the themes which were selected using the settings. Should only\nbe called from qooxdoo based application.</p>","!type":"fn()"},"initTheme":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>theme</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"},"resetTheme":{"!doc":"<p>Resets the user value of the property <code>theme</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn()"},"setTheme":{"!doc":"<p>Sets the user value of the property <code>theme</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #theme}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.theme.manager.Meta"}}},"modern":{"Appearance":{"!doc":"<p>The modern appearance theme.</p>"},"Color":{"!doc":"<p>Modern color theme</p>"},"Decoration":{"!doc":"<p>The modern decoration theme.</p>"},"Font":{"!doc":"<p>The modern font theme.</p>"}},"Modern":{"!doc":"<p>Contemporary Theme</p>"},"simple":{"Appearance":{"!doc":"<p>The simple qooxdoo appearance theme.</p>"},"Color":{"!doc":"<p>Simple color theme</p>"},"Decoration":{"!doc":"<p>The simple qooxdoo decoration theme.</p>"},"Font":{"!doc":"<p>The simple qooxdoo font theme.</p>"},"Image":{"!proto":"qx.core.Object","!doc":"<p>Mapping class for all images used in the simple theme.</p>"}},"Simple":{"!doc":"<p>Simple Theme</p>"}},"Theme":{"!doc":"<p>Theme classes contain styling information for certain aspects of the\ngraphical user interface.</p>\n\n<p>Supported themes are: colors, decorations, fonts, icons, appearances.\nThe additional meta theme allows for grouping of the individual\nthemes.</p>\n\n<p>For more details, take a look at the\n<a href=\"http://manual.qooxdoo.org/4.1/pages/desktop/ui_theming.html\" target=\"_blank\">\ndocumentation of the theme system in the qooxdoo manual.</a></p>","__checkForInvalidTheme":{"!doc":"<p>Helper method to check for an invalid theme</p>","!type":"fn(mixinTheme?: +qx.Theme)"},"__convert":{"!doc":"<p>Convert existing entry to a prototype based inheritance function</p>","!type":"fn(theme: +Theme, config: +Map)"},"__extractType":{"!doc":"<p>Extract the inheritable key (could be only one)</p>","!type":"fn(config: +Map) -> string"},"__initializeAliases":{"!doc":"<p>Initialize alias inheritance</p>","!type":"fn(theme: +Map, config: +Map)"},"__normalizeArray":{"!doc":"<p>Normalize an object to an array</p>","!type":"fn(objectOrArray: Object) -> +Array"},"__validateConfig":{"!doc":"<p>Validates incoming configuration and checks keys and values</p>","!type":"fn(name: string, config: +Map)"},"define":{"!doc":"<p>Theme config</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.Theme.define(\"name\",\n{\n  aliases : {\n    \"aliasKey\" : \"resourceFolderOrUri\"\n  },\n  extend : otherTheme,\n  include : [MMixinTheme],\n  patch : [MMixinTheme],\n  colors : {},\n  decorations : {},\n  fonts : {},\n  widgets : {},\n  appearances : {},\n  meta : {}\n});\n</pre>\n\n<p>For more details, take a look at the\n<a href=\"http://manual.qooxdoo.org/4.1/pages/desktop/ui_theming.html\" target=\"_blank\">\ndocumentation of the theme system in the qooxdoo manual.</a></p>","!type":"fn(name: string, config: +Map)"},"genericToString":{"!doc":"<p>This method will be attached to all themes to return\na nice identifier for them.</p>","!type":"fn() -> string"},"getAll":{"!doc":"<p>Return a map of all known themes</p>","!type":"fn() -> +Map"},"getByName":{"!doc":"<p>Returns a theme by name</p>","!type":"fn(name: string) -> Object"},"getTotalNumber":{"!doc":"<p>Determine the number of themes which are defined</p>","!type":"fn() -> number"},"include":{"!doc":"<p>Include all keys of the given mixin theme into the theme. If the\nmixin includes any keys that are already available in the\nclass, they will be silently ignored. Use the {@link #patch} method\nif you need to overwrite keys in the current class.</p>","!type":"fn(theme: +Theme, mixinTheme: +Theme)"},"isDefined":{"!doc":"<p>Determine if theme exists</p>","!type":"fn(name: string) -> bool"},"patch":{"!doc":"<p>Include all keys of the given mixin theme into the theme. The mixin may\ninclude keys which are already defined in the target theme. Existing\nfeatures of equal name will be overwritten.</p>","!type":"fn(theme: +Theme, mixinTheme: +Theme)"}},"type":{"Array":{"!proto":"qx.type.BaseArray","!doc":"<p>An extended array class which adds a lot of often used\nconvenience methods to the regular array like <code>remove</code> or\n<code>contains</code>.</p>","!type":"fn()","prototype":{"__toPlainArray":{"!doc":"<p>Helper which checks for the given element and converts that to a\nnative array if necessary.</p>","!type":"fn(arr: +Array) -> +Array"},"append":{"!doc":"<p>Append the elements of the given array</p>","!type":"fn(arr: +Array) -> +Array"},"clone":{"!doc":"<p>Returns a clone of the array. Primitive values are copied.\nOthers are referenced.</p>","!type":"fn() -> +Array"},"contains":{"!doc":"<p>Whether the array contains the given element</p>","!type":"fn(obj: Object) -> bool"},"insertAfter":{"!doc":"<p>Insert an element after a given second element</p>","!type":"fn(obj: Object, obj2: Object) -> +Array"},"insertAt":{"!doc":"<p>Insert an element at a given position</p>","!type":"fn(obj: Object, i: +Integer) -> +Array"},"insertBefore":{"!doc":"<p>Insert an element before a given second element</p>","!type":"fn(obj: Object, obj2: Object) -> +Array"},"prepend":{"!doc":"<p>Prepend the elements of the given array.</p>","!type":"fn(arr: +Array) -> +Array"},"remove":{"!doc":"<p>Remove an element</p>","!type":"fn(obj: Object) -> Object"},"removeAll":{"!doc":"<p>Remove all elements</p>","!type":"fn() -> +Array"},"removeAt":{"!doc":"<p>Remove an element at the given index</p>","!type":"fn(i: +Integer) -> Object"}}},"BaseArray":{"!proto":"Array","!doc":"<p>This class is the common superclass for most array classes in\nqooxdoo. It supports all of the shiny 1.6 JavaScript array features\nlike <code>forEach</code> and <code>map</code>.</p>\n\n<p>This class may be instantiated instead of the native Array if\none wants to work with a feature-unified Array instead of the native\none. This class uses native features whereever possible but fills\nall missing implementations with custom ones.</p>\n\n<p>Through the ability to extend from this class one could add even\nmore utility features on top of it.</p>","!type":"fn()","prototype":{"concat":{"!doc":"<p>Returns a new array comprised of this array joined with other array(s) and/or value(s).</p>\n\n<p>This method does not modify the array and returns a modified copy of the original.</p>","!type":"fn(varargs: +Array) -> +qx.type.BaseArray"},"every":{"!doc":"<p>Tests whether all elements in the array pass the test implemented by the provided function.</p>\n\n<code>every</code> executes the provided <code>callback</code> function once for each element\npresent in the array until it finds one where <code>callback</code> returns a false value. If\nsuch an element is found, the <code>every</code> method immediately returns <code>false</code>.\nOtherwise, if <code>callback</code> returned a true value for all elements, <code>every</code>\nwill return <code>true</code>.  <code>callback</code> is invoked only for indexes of the array\nwhich have assigned values; it is not invoked for indexes which have been deleted or which have\nnever been assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index of\nthe element, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>every</code>, it will be used as\nthe <code>this</code> for each invocation of the <code>callback</code>. If it is not provided,\nor is <code>null</code>, the global object associated with <code>callback</code> is used instead.</p>\n\n<code>every</code> does not mutate the array on which it is called. The range of elements processed\nby <code>every</code> is set before the first invocation of <code>callback</code>. Elements which\nare appended to the array after the call to <code>every</code> begins will not be visited by\n<code>callback</code>.  If existing elements of the array are changed, their value as passed\nto <code>callback</code> will be the value at the time <code>every</code> visits them; elements\nthat are deleted are not visited.","!type":"fn(callback: fn(), obj: Object) -> bool"},"filter":{"!doc":"<p>Creates a new array with all elements that pass the test implemented by the provided\nfunction.</p>\n\n<code>filter</code> calls a provided <code>callback</code> function once for each\nelement in an array, and constructs a new array of all the values for which\n<code>callback</code> returns a true value.  <code>callback</code> is invoked only\nfor indexes of the array which have assigned values; it is not invoked for indexes\nwhich have been deleted or which have never been assigned values.  Array elements which\ndo not pass the <code>callback</code> test are simply skipped, and are not included\nin the new array.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>filter</code>, it will\nbe used as the <code>this</code> for each invocation of the <code>callback</code>.\nIf it is not provided, or is <code>null</code>, the global object associated with\n<code>callback</code> is used instead.</p>\n\n<code>filter</code> does not mutate the array on which it is called. The range of\nelements processed by <code>filter</code> is set before the first invocation of\n<code>callback</code>. Elements which are appended to the array after the call to\n<code>filter</code> begins will not be visited by <code>callback</code>. If existing\nelements of the array are changed, or deleted, their value as passed to <code>callback</code>\nwill be the value at the time <code>filter</code> visits them; elements that are deleted\nare not visited.","!type":"fn(callback: fn(), obj: Object) -> +BaseArray"},"forEach":{"!doc":"<p>Executes a provided function once per array element.</p>\n\n<code>forEach</code> executes the provided function (<code>callback</code>) once for each\nelement present in the array.  <code>callback</code> is invoked only for indexes of the array\nwhich have assigned values; it is not invoked for indexes which have been deleted or which\nhave never been assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index\nof the element, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>forEach</code>, it will be used\nas the <code>this</code> for each invocation of the <code>callback</code>.  If it is not\nprovided, or is <code>null</code>, the global object associated with <code>callback</code>\nis used instead.</p>\n\n<code>forEach</code> does not mutate the array on which it is called.\n\n<p>The range of elements processed by <code>forEach</code> is set before the first invocation of\n<code>callback</code>.  Elements which are appended to the array after the call to\n<code>forEach</code> begins will not be visited by <code>callback</code>. If existing elements\nof the array are changed, or deleted, their value as passed to <code>callback</code> will be\nthe value at the time <code>forEach</code> visits them; elements that are deleted are not visited.</p>","!type":"fn(callback: fn(), obj: Object)"},"indexOf":{"!doc":"<p>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.</p>","!type":"fn(searchElement: Object, fromIndex?: +Integer) -> +Integer"},"join":{"!doc":"<p>Joins all elements of an array into a string.</p>","!type":"fn(separator: string) -> string"},"lastIndexOf":{"!doc":"<p>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.</p>","!type":"fn(searchElement: Object, fromIndex?: +Integer) -> +Integer"},"map":{"!doc":"<p>Creates a new array with the results of calling a provided function on every element in this array.</p>\n\n<code>map</code> calls a provided <code>callback</code> function once for each element in an array,\nin order, and constructs a new array from the results.  <code>callback</code> is invoked only for\nindexes of the array which have assigned values; it is not invoked for indexes which have been\ndeleted or which have never been assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index of the\nelement, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>map</code>, it will be used as the\n<code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n<code>null</code>, the global object associated with <code>callback</code> is used instead.</p>\n\n<code>map</code> does not mutate the array on which it is called.\n\n<p>The range of elements processed by <code>map</code> is set before the first invocation of\n<code>callback</code>. Elements which are appended to the array after the call to <code>map</code>\nbegins will not be visited by <code>callback</code>.  If existing elements of the array are changed,\nor deleted, their value as passed to <code>callback</code> will be the value at the time\n<code>map</code> visits them; elements that are deleted are not visited.</p>","!type":"fn(callback: fn(), obj: Object) -> +BaseArray"},"pop":{"!doc":"<p>Removes the last element from an array and returns that element.</p>\n\n<p>This method modifies the array.</p>","!type":"fn() -> Object"},"push":{"!doc":"<p>Adds one or more elements to the end of an array and returns the new length of the array.</p>\n\n<p>This method modifies the array.</p>","!type":"fn(varargs: Object) -> +Integer"},"reverse":{"!doc":"<p>Reverses the order of the elements of an array&#8212;the first becomes the last, and the last becomes the first.</p>\n\n<p>This method modifies the array.</p>","!type":"fn() -> +Array"},"shift":{"!doc":"<p>Removes the first element from an array and returns that element.</p>\n\n<p>This method modifies the array.</p>","!type":"fn() -> Object"},"slice":{"!doc":"<p>Extracts a section of an array and returns a new array.</p>","!type":"fn(begin: +Integer, end?: +Integer) -> +BaseArray"},"some":{"!doc":"<p>Tests whether some element in the array passes the test implemented by the provided function.</p>\n\n<code>some</code> executes the <code>callback</code> function once for each element present in\nthe array until it finds one where <code>callback</code> returns a true value. If such an element\nis found, <code>some</code> immediately returns <code>true</code>. Otherwise, <code>some</code>\nreturns <code>false</code>. <code>callback</code> is invoked only for indexes of the array which\nhave assigned values; it is not invoked for indexes which have been deleted or which have never\nbeen assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index of the\nelement, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>some</code>, it will be used as the\n<code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n<code>null</code>, the global object associated with <code>callback</code> is used instead.</p>\n\n<code>some</code> does not mutate the array on which it is called.\n\n<p>The range of elements processed by <code>some</code> is set before the first invocation of\n<code>callback</code>.  Elements that are appended to the array after the call to <code>some</code>\nbegins will not be visited by <code>callback</code>. If an existing, unvisited element of the array\nis changed by <code>callback</code>, its value passed to the visiting <code>callback</code> will\nbe the value at the time that <code>some</code> visits that element&#8217;s index; elements that are\ndeleted are not visited.</p>","!type":"fn(callback: fn(), obj: Object) -> bool"},"sort":{"!doc":"<p>Sorts the elements of an array.</p>\n\n<p>This method modifies the array.</p>","!type":"fn(compareFunction?: fn()) -> +Array"},"splice":{"!doc":"<p>Adds and/or removes elements from an array.</p>","!type":"fn(index: +Integer, howMany: +Integer, varargs?: Object) -> +BaseArray"},"toArray":{"!doc":"<p>Converts a base array to a native Array</p>","!type":"fn() -> +Array"},"toString":{"!doc":"<p>Returns a string representing the array and its elements. Overrides the Object.prototype.toString method.</p>","!type":"fn() -> string"},"unshift":{"!doc":"<p>Adds one or more elements to the front of an array and returns the new length of the array.</p>\n\n<p>This method modifies the array.</p>","!type":"fn(varargs: Object) -> +Integer"},"valueOf":{"!doc":"<p>Returns the current number of items stored in the Array</p>","!type":"fn() -> +Integer"}}},"BaseError":{"!proto":"Error","!doc":"<p>This class is the common super class for all error classes in qooxdoo.</p>\n\n<p>It has a comment and a fail message as members. The toString method returns\nthe comment and the fail message separated by a colon.</p>","!type":"fn()","prototype":{"getComment":{"!doc":"<p>Comment passed to the assertion call</p>","!type":"fn() -> string"},"toString":{"!doc":"<p>Get the error message</p>","!type":"fn() -> string"}}},"BaseString":{"!proto":"Object","!doc":"<p>This class emulates the built-in JavaScript String class. It can be used as\nbase class for classes, which need to derive from String.</p>\n\n<p>Instances of this class can be used in any place a JavaScript string can.</p>","!type":"fn()","prototype":{"base":{"!doc":"<p>Call the same method of the super class.</p>","!type":"fn(args: +arguments, varags: Object) -> Object"},"charAt":{"!doc":"<p>Returns the specified character from a string.</p>\n\n<p>Characters in a string are indexed from left to right. The index of the\nfirst character is 0, and the index of the last character in a string\ncalled stringName is stringName.length &#8211; 1. If the index you supply is\nout of range, JavaScript returns an empty string.</p>","!type":"fn(index: +Integer) -> string"},"charCodeAt":{"!doc":"<p>Returns a number indicating the Unicode value of the character at the given index.</p>","!type":"fn(index: +Integer) -> +Integer"},"concat":{"!doc":"<p>Combines the text of two or more strings and returns a new string.\nChanges to the text in one string do not affect the other string.</p>","!type":"fn(stringN: string) -> string"},"indexOf":{"!doc":"<p>Returns the index within the calling String object of the first\noccurrence of the specified value, starting the search at fromIndex,\nreturns -1 if the value is not found.</p>","!type":"fn(index: string, offset?: +Integer) -> +Integer"},"lastIndexOf":{"!doc":"<p>Returns the index within the calling String object of the last occurrence\nof the specified value, or -1 if not found. The calling string is\nsearched backward, starting at fromIndex.</p>","!type":"fn(index: string, offset?: +Integer) -> +Integer"},"match":{"!doc":"<p>Used to retrieve the matches when matching a string against a regular\nexpression.</p>\n\n<p>If the regular expression does not include the g flag, returns the same\nresult as regexp.exec(string). If the regular expression includes the g\nflag, the method returns an Array containing all matches.</p>","!type":"fn(regexp: Object) -> Object"},"replace":{"!doc":"<p>Finds a match between a regular expression and a string, and replaces the\nmatched substring with a new substring.</p>","!type":"fn(regexp: Object, aFunction: fn()) -> string"},"search":{"!doc":"<p>Executes the search for a match between a regular expression and this\nString object.</p>\n\n<p>If successful, search returns the index of the regular expression inside\nthe string. Otherwise, it returns -1.</p>","!type":"fn(regexp: Object) -> Object"},"slice":{"!doc":"<p>Extracts a section of a string and returns a new string.</p>\n\n<p>Slice extracts the text from one string and returns a new string. Changes\nto the text in one string do not affect the other string.\nAs a negative index, endSlice indicates an offset from the end of the\nstring.</p>","!type":"fn(beginslice: +Integer, endSlice?: +Integer) -> string"},"split":{"!doc":"<p>Splits a String object into an array of strings by separating the string\ninto substrings.</p>\n\n<p>When found, separator is removed from the string and the substrings are\nreturned in an array. If separator is omitted, the array contains one\nelement consisting of the entire string.</p>\n\n<p>If separator is a regular expression that contains capturing parentheses,\nthen each time separator is matched the results (including any undefined\nresults) of the capturing parentheses are spliced into the output array.\nHowever, not all browsers support this capability.</p>\n\n<p>Note: When the string is empty, split returns an array containing one</p>","!type":"fn(separator?: string, limit?: +Integer) -> +Array"},"substr":{"!doc":"<p>Returns the characters in a string beginning at the specified location\nthrough the specified number of characters.</p>\n\n<p>Start is a character index. The index of the first character is 0, and the\nindex of the last character is 1 less than the length of the string. substr\n begins extracting characters at start and collects length characters\n(unless it reaches the end of the string first, in which case it will\nreturn fewer).\nIf start is positive and is greater than or equal to the length of the\nstring, substr returns an empty string.</p>","!type":"fn(start: +Integer, length?: +Integer) -> string"},"substring":{"!doc":"<p>Returns a subset of a String object.</p>\n\n<p>substring extracts characters from indexA up to but not including indexB.\nIn particular:\nIf indexA equals indexB, substring returns an empty string.\nIf indexB is omitted, substring extracts characters to the end of the\nstring.\nIf either argument is less than 0 or is NaN, it is treated as if it were\n0.\nIf either argument is greater than stringName.length, it is treated as if\nit were stringName.length.\nIf indexA is larger than indexB, then the effect of substring is as if\nthe two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).</p>","!type":"fn(indexA: +Integer, indexB?: +Integer) -> string"},"toHashCode":{"!doc":"<p>Return unique hash code of object</p>","!type":"fn() -> +Integer"},"toLocaleLowerCase":{"!doc":"<p>The characters within a string are converted to lower case while\nrespecting the current locale.</p>\n\n<p>The toLowerCase method returns the value of the string converted to\nlowercase. toLowerCase does not affect the value of the string itself.</p>","!type":"fn() -> string"},"toLocaleUpperCase":{"!doc":"<p>The characters within a string are converted to upper case while\nrespecting the current locale.\nThe toUpperCase method returns the value of the string converted to\nuppercase. toUpperCase does not affect the value of the string itself.</p>","!type":"fn() -> string"},"toLowerCase":{"!doc":"<p>Returns the calling string value converted to lowercase.\nThe toLowerCase method returns the value of the string converted to\nlowercase. toLowerCase does not affect the value of the string itself.</p>","!type":"fn() -> string"},"toString":{"!doc":"<p>Returns a string representing the specified object.</p>\n\n<p>The valueOf method of String returns the primitive value of a String\nobject as a string data type.\nThis method is usually called internally by JavaScript and not\nexplicitly in code.</p>","!type":"fn() -> string"},"toUpperCase":{"!doc":"<p>Returns the calling string value converted to uppercase.\nThe toUpperCase method returns the value of the string converted to\nuppercase. toUpperCase does not affect the value of the string itself.</p>","!type":"fn() -> string"},"valueOf":{"!doc":"<p>Returns the primitive value of a String object.</p>\n\n<p>The valueOf method of String returns the primitive value of a String\nobject as a string data type.\nThis method is usually called internally by JavaScript and not\nexplicitly in code.</p>","!type":"fn() -> string"}}}},"ui":{"basic":{"Atom":{"!proto":"qx.ui.core.Widget","!doc":"<p>A multi-purpose widget, which combines a label with an icon.</p>\n\n<p>The intended purpose of qx.ui.basic.Atom is to easily align the common icon-text\ncombination in different ways.</p>\n\n<p>This is useful for all types of buttons, tooltips, ...</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var atom = new qx.ui.basic.Atom(\"Icon Right\", \"icon/32/actions/go-next.png\");\n  this.getRoot().add(atom);\n</pre>\n\n<p>This example creates an atom with the label &#8220;Icon Right&#8221; and an icon.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/atom.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_applyCenter":{"!doc":"<p>Applies changes of the property value of the property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn(value: bool, old: bool)"},"_applyGap":{"!doc":"<p>Applies changes of the property value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyIconPosition":{"!doc":"<p>Applies changes of the property value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object, old: Object)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyRich":{"!doc":"<p>Applies changes of the property value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelectable":{"!doc":"<p>Applies changes of the property value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShow":{"!doc":"<p>Applies changes of the property value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object, old: Object)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_handleIcon":{"!doc":"<p>Updates the visibility of the icon</p>","!type":"fn()"},"_handleLabel":{"!doc":"<p>Updates the visibility of the label</p>","!type":"fn()"},"getCenter":{"!doc":"<p>Returns the (computed) value of the property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn() -> Object"},"getGap":{"!doc":"<p>Returns the (computed) value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn() -> Object"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getIconPosition":{"!doc":"<p>Returns the (computed) value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getRich":{"!doc":"<p>Returns the (computed) value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> Object"},"getShow":{"!doc":"<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn() -> Object"},"initCenter":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>center</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn(value: Object) -> Object"},"initGap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>gap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: Object) -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initIconPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initRich":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rich</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: Object) -> Object"},"initShow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"isCenter":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>center</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn() -> bool"},"isRich":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>rich</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> bool"},"resetCenter":{"!doc":"<p>Resets the user value of the property <code>center</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn()"},"resetGap":{"!doc":"<p>Resets the user value of the property <code>gap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn()"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetIconPosition":{"!doc":"<p>Resets the user value of the property <code>iconPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetRich":{"!doc":"<p>Resets the user value of the property <code>rich</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn()"},"resetShow":{"!doc":"<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn()"},"setCenter":{"!doc":"<p>Sets the user value of the property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn(value: Object) -> Object"},"setGap":{"!doc":"<p>Sets the user value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: Object) -> Object"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setIconPosition":{"!doc":"<p>Sets the user value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setRich":{"!doc":"<p>Sets the user value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: Object) -> Object"},"setShow":{"!doc":"<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"toggleCenter":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn() -> bool"},"toggleRich":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> bool"}}},"Image":{"!proto":"qx.ui.core.Widget","!doc":"<p>The image class displays an image file</p>\n\n<p>This class supports image clipping, which means that multiple images can be combined\ninto one large image and only the relevant part is shown.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var image = new qx.ui.basic.Image(\"icon/32/actions/format-justify-left.png\");\n\n  this.getRoot().add(image);\n</pre>\n\n<p>This example create a widget to display the image\n<code>icon/32/actions/format-justify-left.png</code>.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/image.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"__checkForContentElementReplacement":{"!doc":"<p>Checks the current child and replaces it if necessary</p>","!type":"fn(elementToAdd: +qx.html.Image)"},"__createSuitableContentElement":{"!doc":"<p>Creates a contentElement suitable for the current mode</p>","!type":"fn(mode: string) -> +qx.html.Image"},"__fireLoadEvent":{"!doc":"<p>Helper function, which fires <code>loaded</code> event asynchronously.\nIt emulates native <code>loaded</code> event of an image object. This\nhelper will be called, if you try to load a managed image or an\npreviously loaded unmanaged image.</p>","!type":"fn()"},"__getContentElement":{"!doc":"<p>Returns the content element.</p>","!type":"fn() -> +qx.html.Image"},"__getMode":{"!doc":"<p>Returns the current mode if set. Otherwise checks the current source and\nthe current scaling to determine the current mode.</p>","!type":"fn() -> string"},"__getSuitableContentElement":{"!doc":"<p>Returns a contentElement suitable for the current mode</p>","!type":"fn() -> +qx.html.Image"},"__loaderCallback":{"!doc":"<p>Event handler fired after the preloader has finished loading the icon</p>","!type":"fn(source: string, imageInfo: +Map)"},"__loadUnmanagedImage":{"!doc":"<p>Use the ImageLoader to load an unmanaged image</p>","!type":"fn(el: +Element, source: string)"},"__setManagedImage":{"!doc":"<p>Use the ResourceManager to set a managed image</p>","!type":"fn(el: +Element, source: string)"},"__setMode":{"!doc":"<p>Remembers the mode to keep track which contentElement is currently in use.</p>","!type":"fn(mode: string)"},"__setSource":{"!doc":"<p>Combines the decorator&#8217;s image styles with our own image to make sure\ngradient and backgroundImage decorators work on Images.</p>","!type":"fn(el: +Element, source: string)"},"__setUnmanagedImage":{"!doc":"<p>Use the infos of the ImageLoader to set an unmanaged image</p>","!type":"fn(el: +Element, source: string)"},"__updateContentHint":{"!doc":"<p>Updates the content hint when the image size has been changed</p>","!type":"fn(width: +Integer, height: +Integer)"},"_applyDecorator":{"!doc":"<p>Applies changes of the property value of the property <code>decorator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decorator}.</p>","!type":"fn(value: +Decorator, old: +Decorator)"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyPadding":{"!doc":"<p>Applies changes of the property value of the properties <code>paddingBottom</code>, <code>paddingLeft</code>, <code>paddingRight</code> and <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #paddingBottom}, {@link #paddingLeft}, {@link #paddingRight} and {@link #paddingTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyScale":{"!doc":"<p>Applies changes of the property value of the property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn(value: bool, old: bool)"},"_applySource":{"!doc":"<p>Applies changes of the property value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: string, old: string)"},"_createContentElement":{"!type":"fn()"},"_getContentHint":{"!type":"fn()"},"_onChangeTheme":{"!type":"fn()"},"_styleSource":{"!doc":"<p>Applies the source to the clipped image instance or preload\nan image to detect sizes and apply it afterwards.</p>","!type":"fn()"},"getContentElement":{"!type":"fn()"},"getScale":{"!doc":"<p>Returns the (computed) value of the property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn() -> Object"},"getSource":{"!doc":"<p>Returns the (computed) value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn() -> Object"},"initScale":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scale</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn(value: Object) -> Object"},"initSource":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>source</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"},"isScale":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>scale</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"resetScale":{"!doc":"<p>Resets the user value of the property <code>scale</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn()"},"resetSource":{"!doc":"<p>Resets the user value of the property <code>source</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn()"},"setScale":{"!doc":"<p>Sets the user value of the property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn(value: Object) -> Object"},"setSource":{"!doc":"<p>Sets the user value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"},"toggleScale":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn() -> bool"}}},"Label":{"!proto":"qx.ui.core.Widget","!doc":"<p>The label class brings typical text content to the widget system.</p>\n\n<p>It supports simple text nodes and complex <span class=\"caps\">HTML</span> (rich). The default\ncontent mode is for text only. The mode is changeable through the property\n{@link #rich}.</p>\n\n<p>The label supports heightForWidth when used in <span class=\"caps\">HTML</span> mode. This means\nthat multi line <span class=\"caps\">HTML</span> automatically computes the correct preferred height.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // a simple text label without wrapping and markup support\n  var label1 = new qx.ui.basic.Label(\"Simple text label\");\n  this.getRoot().add(label1, {left:20, top:10});\n\n  // a HTML label with automatic line wrapping\n  var label2 = new qx.ui.basic.Label().set({\n    value: \"A <b>long label</b> text with auto-wrapping. This also may contain <b>rich HTML</b> markup.\",\n    rich : true,\n    width: 120\n  });\n  this.getRoot().add(label2, {left:20, top:50});\n</pre>\n\n<p>The first label in this example is a basic text only label. As such no\nautomatic wrapping is supported. The second label is a long label containing\n<span class=\"caps\">HTML</span> markup with automatic line wrapping.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/label.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"__computeContentSize":{"!doc":"<p>Internal utility to compute the content dimensions.</p>","!type":"fn(width?: +Integer) -> +Map"},"__fixEllipsis":{"!doc":"<p>Firefox > 9 on OS X will draw an ellipsis on top of the label content even\nthough there is enough space for the text. Re-applying the content forces\na recalculation and fixes the problem. See qx bug #6293</p>","!type":"fn()"},"_applyBuddy":{"!doc":"<p>Applies changes of the property value of the property <code>buddy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buddy}.</p>","!type":"fn(value: +qx.ui.core.Widget, old: +qx.ui.core.Widget)"},"_applyFont":{"!doc":"<p>Applies changes of the property value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: +Font, old: +Font)"},"_applyRich":{"!doc":"<p>Applies changes of the property value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelectable":{"!doc":"<p>Applies changes of the property value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTextAlign":{"!doc":"<p>Applies changes of the property value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object, old: Object)"},"_applyTextColor":{"!doc":"<p>Applies changes of the property value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: string, old: string)"},"_applyWrap":{"!doc":"<p>Applies changes of the property value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: bool, old: bool)"},"_createContentElement":{"!type":"fn()"},"_getContentHeightForWidth":{"!type":"fn(width: +undefined)"},"_getContentHint":{"!type":"fn()"},"_hasHeightForWidth":{"!type":"fn()"},"_onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"_onWebFontStatusChange":{"!doc":"<p>Triggers layout recalculation after a web font was loaded</p>","!type":"fn(ev: +qx.event.type.Data)"},"getBuddy":{"!doc":"<p>Returns the (computed) value of the property <code>buddy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buddy}.</p>","!type":"fn() -> Object"},"getRich":{"!doc":"<p>Returns the (computed) value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> Object"},"getTextAlign":{"!doc":"<p>Returns the (computed) value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"getWrap":{"!doc":"<p>Returns the (computed) value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> Object"},"initBuddy":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>buddy</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #buddy}.</p>","!type":"fn(value: Object) -> Object"},"initRich":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rich</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: Object) -> Object"},"initTextAlign":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>textAlign</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"initWrap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wrap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"isRich":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>rich</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> bool"},"isWrap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>wrap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"},"resetBuddy":{"!doc":"<p>Resets the user value of the property <code>buddy</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #buddy}.</p>","!type":"fn()"},"resetRich":{"!doc":"<p>Resets the user value of the property <code>rich</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn()"},"resetTextAlign":{"!doc":"<p>Resets the user value of the property <code>textAlign</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"resetWrap":{"!doc":"<p>Resets the user value of the property <code>wrap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn()"},"setBuddy":{"!doc":"<p>Sets the user value of the property <code>buddy</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buddy}.</p>","!type":"fn(value: Object) -> Object"},"setRich":{"!doc":"<p>Sets the user value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: Object) -> Object"},"setTextAlign":{"!doc":"<p>Sets the user value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"setWrap":{"!doc":"<p>Sets the user value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"toggleRich":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> bool"},"toggleWrap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"}}}},"container":{"Composite":{"!proto":"qx.ui.core.Widget","!doc":"<p>The Composite is a generic container widget.</p>\n\n<p>It exposes all methods to set layouts and to manage child widgets\nas public methods. You must configure this widget with a layout manager to\ndefine the way the widget&#8217;s children are positioned.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // create the composite\n  var composite = new qx.ui.container.Composite()\n\n  // configure it with a horizontal box layout with a spacing of '5'\n  composite.setLayout(new qx.ui.layout.HBox(5));\n\n  // add some children\n  composite.add(new qx.ui.basic.Label(\"Name: \"));\n  composite.add(new qx.ui.form.TextField());\n\n  this.getRoot().add(composite);\n</pre>\n\n<p>This example horizontally groups a label and text field by using a\nComposite configured with a horizontal box layout as a container.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/composite.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_afterAddChild":{"!type":"fn(child: +undefined)"},"_afterRemoveChild":{"!type":"fn(child: +undefined)"}}},"Resizer":{"!proto":"qx.ui.container.Composite","!doc":"<p>The Resizer is a resizable container widget.</p>\n\n<p>It allows to be resized (not moved), normally in\nthe right and/or bottom directions. It is an alternative to splitters.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var resizer = new qx.ui.container.Resizer().set({\n    width: 200,\n    height: 100\n  });\n\n  resizer.setLayout(new qx.ui.layout.Canvas());\n  var text = new qx.ui.form.TextArea(\"Resize me\\nI'm resizable\");\n  resizer.add(text, {edge: 0});\n\n  this.getRoot().add(resizer);\n</pre>\n\n<p>This example creates a resizer, configures it with a canvas layout and\nadds a text area to it.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/resizer.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>"},"Scroll":{"!proto":"qx.ui.core.scroll.AbstractScrollArea","!doc":"<p>Container, which allows vertical and horizontal scrolling if the contents is\nlarger than the container.</p>\n\n<p>Note that this class can only have one child widget. This container has a\nfixed layout, which cannot be changed.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // create scroll container\n  var scroll = new qx.ui.container.Scroll().set({\n    width: 300,\n    height: 200\n  });\n\n  // add a widget which is larger than the container\n  scroll.add(new qx.ui.core.Widget().set({\n    width: 600,\n    minWidth: 600,\n    height: 400,\n    minHeight: 400\n  }));\n\n  this.getRoot().add(scroll);\n</pre>\n\n<p>This example creates a scroll container and adds a widget, which is larger\nthan the container. This will cause the container to display vertical\nand horizontal toolbars.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/scroll.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"add":{"!doc":"<p>Sets the content of the scroll container. Scroll containers\nmay only have one child, so it always replaces the current\nchild with the given one.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"getChildren":{"!doc":"<p>Returns the content of the scroll container.</p>\n\n<p>Scroll containers may only have one child. This\nmethod returns an array containing the child or an empty array.</p>","!type":"fn() -> Object"},"remove":{"!doc":"<p>Returns the content of the scroll area.</p>","!type":"fn(widget: +qx.ui.core.Widget)"}}},"SlideBar":{"!proto":"qx.ui.core.Widget","!doc":"<p>Container, which provides scrolling in one dimension (vertical or horizontal).</p>","!type":"fn()","prototype":{"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object, old: Object)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_hideArrows":{"!doc":"<p>Hide the arrows (Called from resize event)</p>","!type":"fn()"},"_onExecuteBackward":{"!doc":"<p>Scroll handler for left scrolling</p>","!type":"fn()"},"_onExecuteForward":{"!doc":"<p>Scroll handler for right scrolling</p>","!type":"fn()"},"_onResize":{"!doc":"<p>Listener for resize event. This event is fired after the\nfirst flush of the element which leads to another queuing\nwhen the changes modify the visibility of the scroll buttons.</p>","!type":"fn(e: +Event)"},"_onRoll":{"!doc":"<p>Scrolls pane on roll events</p>","!type":"fn(e: +qx.event.type.Roll)"},"_onScroll":{"!doc":"<p>Update arrow enabled state after scrolling</p>","!type":"fn()"},"_onScrollAnimationEnd":{"!doc":"<p>Handler to fire the &#8216;scrollAnimationEnd&#8217; event.</p>","!type":"fn()"},"_showArrows":{"!doc":"<p>Show the arrows (Called from resize event)</p>","!type":"fn()"},"_updateArrowsEnabled":{"!doc":"<p>Update arrow enabled state</p>","!type":"fn()"},"getChildrenContainer":{"!type":"fn()"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getScrollStep":{"!doc":"<p>Returns the (computed) value of the property <code>scrollStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollStep}.</p>","!type":"fn() -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initScrollStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollStep}.</p>","!type":"fn(value: Object) -> Object"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetScrollStep":{"!doc":"<p>Resets the user value of the property <code>scrollStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollStep}.</p>","!type":"fn()"},"scrollBy":{"!doc":"<p>Scrolls the element&#8217;s content by the given amount.</p>","!type":"fn(offset?: +Integer, duration?: number)"},"scrollTo":{"!doc":"<p>Scrolls the element&#8217;s content to the given coordinate</p>","!type":"fn(value: +Integer, duration?: number)"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setScrollStep":{"!doc":"<p>Sets the user value of the property <code>scrollStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollStep}.</p>","!type":"fn(value: Object) -> Object"}}},"Stack":{"!proto":"qx.ui.core.Widget","!doc":"<p>The stack container puts its child widgets on top of each other and only the\ntopmost widget is visible.</p>\n\n<p>This is used e.g. in the tab view widget. Which widget is visible can be\ncontrolled by using the {@link #getSelection} method.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // create stack container\n  var stack = new qx.ui.container.Stack();\n\n  // add some children\n  stack.add(new qx.ui.core.Widget().set({\n   backgroundColor: \"red\"\n  }));\n  stack.add(new qx.ui.core.Widget().set({\n   backgroundColor: \"green\"\n  }));\n  stack.add(new qx.ui.core.Widget().set({\n   backgroundColor: \"blue\"\n  }));\n\n  // select green widget\n  stack.setSelection([stack.getChildren()[1]]);\n\n  this.getRoot().add(stack);\n</pre>\n\n<p>This example creates an stack with three children. Only the selected &#8220;green&#8221;\nwidget is visible.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/stack.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"__onChangeSelection":{"!doc":"<p>Event handler for <code>changeSelection</code>.</p>\n\n<p>Shows the new selected widget and hide the old one.</p>","!type":"fn(e: +qx.event.type.Data)"},"_afterAddChild":{"!type":"fn(child: +undefined)"},"_afterRemoveChild":{"!type":"fn(child: +undefined)"},"_applyDynamic":{"!doc":"<p>Applies changes of the property value of the property <code>dynamic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn(value: bool, old: bool)"},"_getItems":{"!doc":"<p>Returns the widget for the selection.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_isAllowEmptySelection":{"!doc":"<p>Returns if the selection could be empty or not.</p>","!type":"fn() -> bool"},"_isItemSelectable":{"!doc":"<p>Returns whether the given item is selectable.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"getDynamic":{"!doc":"<p>Returns the (computed) value of the property <code>dynamic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn() -> Object"},"initDynamic":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dynamic</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn(value: Object) -> Object"},"isDynamic":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>dynamic</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn() -> bool"},"next":{"!doc":"<p>Go to the next child in the children list.</p>","!type":"fn()"},"previous":{"!doc":"<p>Go to the previous child in the children list.</p>","!type":"fn()"},"resetDynamic":{"!doc":"<p>Resets the user value of the property <code>dynamic</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn()"},"setDynamic":{"!doc":"<p>Sets the user value of the property <code>dynamic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn(value: Object) -> Object"},"toggleDynamic":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>dynamic</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dynamic}.</p>","!type":"fn() -> bool"}}}},"control":{"ColorPopup":{"!proto":"qx.ui.popup.Popup","!doc":"<p>A popup which contains palettes of colors and the possibility to open the\nColorselector to choose a color.</p>","!type":"fn()","prototype":{"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object, old: Object)"},"_createBoxes":{"!doc":"<p>Creates the GroupBoxes containing the colored fields.</p>","!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_createColorSelector":{"!doc":"<p>Creates the ColorSelector and adds buttons.</p>","!type":"fn()"},"_onAutomaticBtnExecute":{"!doc":"<p>Listener of execute event on the &#8220;cancel&#8221; button.\nHides the ColorPopup and resets it&#8217;s color value.</p>","!type":"fn()"},"_onChangeVisibility":{"!doc":"<p>Listener for visibility changes.\nSets preview pane&#8217;s background color to the current color,\nwhen the popup is visible.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onColorSelectorCancel":{"!doc":"<p>Listener of execute event on the &#8220;Cancel&#8221; button.\nHides the ColorPopup.</p>","!type":"fn()"},"_onColorSelectorOk":{"!doc":"<p>Listener of execute event on the &#8220;OK&#8221; button.\nHides the ColorPopup and sets it&#8217;s color value to the selected color.</p>","!type":"fn()"},"_onFieldPointerDown":{"!doc":"<p>Listener of pointerdown event on a color field. Sets the ColorPoup&#8217;s value\nto field&#8217;s color value and paint the preview pane.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onFieldPointerOut":{"!doc":"<p>Listener of pointerout event on a color field. Reset the preview pane&#8217;s\nbackground color to the old color value.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onFieldPointerOver":{"!doc":"<p>Listener of pointermove event on a color field. Sets preview pane&#8217;s\nbackground color to the field&#8217;s color value.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onSelectorButtonExecute":{"!doc":"<p>Listener of execute event on the &#8220;Open ColorSelector&#8221; button.\nOpens a ColorSelector widget and hides the ColorPopup.</p>","!type":"fn()"},"_rotatePreviousColors":{"!doc":"<p>Adds the most recent selected color to the &#8220;Recent colors&#8221; list.\nIf this list is full, the first color will be removed before inserting\nthe new one.</p>","!type":"fn()"},"getBlue":{"!doc":"<p>Returns the (computed) value of the property <code>blue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn() -> Object"},"getGreen":{"!doc":"<p>Returns the (computed) value of the property <code>green</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn() -> Object"},"getRed":{"!doc":"<p>Returns the (computed) value of the property <code>red</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initBlue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blue</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn(value: Object) -> Object"},"initGreen":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>green</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn(value: Object) -> Object"},"initRed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>red</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"resetBlue":{"!doc":"<p>Resets the user value of the property <code>blue</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn()"},"resetGreen":{"!doc":"<p>Resets the user value of the property <code>green</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn()"},"resetRed":{"!doc":"<p>Resets the user value of the property <code>red</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setBlue":{"!doc":"<p>Sets the user value of the property <code>blue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn(value: Object) -> Object"},"setGreen":{"!doc":"<p>Sets the user value of the property <code>green</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn(value: Object) -> Object"},"setRed":{"!doc":"<p>Sets the user value of the property <code>red</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"}}},"ColorSelector":{"!proto":"qx.ui.core.Widget","!doc":"<p>A typical color selector as known from native applications.</p>\n\n<p>Includes support for <span class=\"caps\">RGB</span> and <span class=\"caps\">HSB</span> color areas.</p>","!type":"fn()","prototype":{"__fireChangeValueEvent":{"!doc":"<p>Helper for firing the changeValue event and checking for the mutex.</p>","!type":"fn()"},"_applyBlue":{"!doc":"<p>Applies changes of the property value of the property <code>blue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyBrightness":{"!doc":"<p>Applies changes of the property value of the property <code>brightness</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #brightness}.</p>","!type":"fn(value: number, old: number)"},"_applyGreen":{"!doc":"<p>Applies changes of the property value of the property <code>green</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyHue":{"!doc":"<p>Applies changes of the property value of the property <code>hue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hue}.</p>","!type":"fn(value: number, old: number)"},"_applyRed":{"!doc":"<p>Applies changes of the property value of the property <code>red</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applySaturation":{"!doc":"<p>Applies changes of the property value of the property <code>saturation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #saturation}.</p>","!type":"fn(value: number, old: number)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onAppear":{"!doc":"<p>Listener for appear.\nSets preview pane&#8217;s background color to the current color.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onBrightnessFieldPointerDown":{"!doc":"<p>Listener of pointerdown event on the brightness field.\nAdjusts the color by changing the brightness.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onBrightnessHandlePointerDown":{"!doc":"<p>Listener of pointerdown event on the brightness handle.\nAdjusts the color by changing the brightness.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onBrightnessHandlePointerMove":{"!doc":"<p>Listener of pointermove event on the brightness handle.\nForwards the event to _setBrightnessOnFieldEvent().</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onBrightnessHandlePointerUp":{"!doc":"<p>Listener of pointerup event on the brightness handle.\nReleases the capture.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onBrightnessPaneRoll":{"!doc":"<p>Listener of roll event on the brightness pane.\nAdjusts the color by changing the brightness.</p>","!type":"fn(e: +qx.event.type.Roll)"},"_onColorFieldTap":{"!doc":"<p>Listener of tap event on the color field.\nSets red, green and blue values to tapped color field&#8217;s background color.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onHexFieldChange":{"!doc":"<p>Changes red, green and blue value to the corresponding hexfield value.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onHueSaturationFieldPointerDown":{"!doc":"<p>Listener of pointerdown event on the saturation field.\nAdjusts the color by changing the saturation.\nSets pointer capture.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onHueSaturationHandlePointerMove":{"!doc":"<p>Listener of pointermove event on the saturation handle.\nForwards the event to _onHueSaturationHandlePointerMove().</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onHueSaturationHandlePointerUp":{"!doc":"<p>Listener of pointerup event on the saturation handle.\nReleases pointer capture.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onHueSaturationPaneRoll":{"!doc":"<p>Listener of roll event on the saturation pane.\nAdjusts the color by changing the saturation.</p>","!type":"fn(e: +qx.event.type.Roll)"},"_setBlueFromSpinner":{"!doc":"<p>Sets widget&#8217;s blue value to spinner&#8217;s value.</p>","!type":"fn()"},"_setBrightnessFromSpinner":{"!doc":"<p>Sets widget&#8217;s brightness value to spinner&#8217;s value.</p>","!type":"fn()"},"_setBrightnessGradiant":{"!doc":"<p>Updates the background of the brightness field to give a nicer gradient</p>","!type":"fn()"},"_setBrightnessOnFieldEvent":{"!doc":"<p>Sets the brightness and moves the brightness handle.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_setGreenFromSpinner":{"!doc":"<p>Sets widget&#8217;s green value to spinner&#8217;s value.</p>","!type":"fn()"},"_setHexFromRgb":{"!doc":"<p>Sets hexfield value to it&#8217;s corresponding red, green and blue value.</p>","!type":"fn()"},"_setHueFromRgb":{"!doc":"<p>Sets hue value to it&#8217;s corresponding red, green and blue value.</p>","!type":"fn()"},"_setHueFromSpinner":{"!doc":"<p>Sets widget&#8217;s hue value to spinner&#8217;s value.</p>","!type":"fn()"},"_setHueSaturationOnFieldEvent":{"!doc":"<p>Sets the saturation and moves the saturation handle.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_setPreviewFromRgb":{"!doc":"<p>Sets preview pane&#8217;s background color to corresponding red, green and blue color values.</p>","!type":"fn()"},"_setRedFromSpinner":{"!doc":"<p>Sets widget&#8217;s red value to spinner&#8217;s value.</p>","!type":"fn()"},"_setRgbFromHue":{"!doc":"<p>Sets red, green and blue value to corresponding hue value.</p>","!type":"fn()"},"_setSaturationFromSpinner":{"!doc":"<p>Sets widget&#8217;s saturation value to spinner&#8217;s value.</p>","!type":"fn()"},"getBlue":{"!doc":"<p>Returns the (computed) value of the property <code>blue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn() -> Object"},"getBrightness":{"!doc":"<p>Returns the (computed) value of the property <code>brightness</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #brightness}.</p>","!type":"fn() -> Object"},"getGreen":{"!doc":"<p>Returns the (computed) value of the property <code>green</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn() -> Object"},"getHue":{"!doc":"<p>Returns the (computed) value of the property <code>hue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hue}.</p>","!type":"fn() -> Object"},"getRed":{"!doc":"<p>Returns the (computed) value of the property <code>red</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn() -> Object"},"getSaturation":{"!doc":"<p>Returns the (computed) value of the property <code>saturation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #saturation}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the currently selected color.</p>","!type":"fn() -> string"},"initBlue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blue</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn(value: Object) -> Object"},"initBrightness":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>brightness</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #brightness}.</p>","!type":"fn(value: Object) -> Object"},"initGreen":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>green</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn(value: Object) -> Object"},"initHue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hue</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hue}.</p>","!type":"fn(value: Object) -> Object"},"initRed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>red</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn(value: Object) -> Object"},"initSaturation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>saturation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #saturation}.</p>","!type":"fn(value: Object) -> Object"},"resetBlue":{"!doc":"<p>Resets the user value of the property <code>blue</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn()"},"resetBrightness":{"!doc":"<p>Resets the user value of the property <code>brightness</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #brightness}.</p>","!type":"fn()"},"resetGreen":{"!doc":"<p>Resets the user value of the property <code>green</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn()"},"resetHue":{"!doc":"<p>Resets the user value of the property <code>hue</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hue}.</p>","!type":"fn()"},"resetRed":{"!doc":"<p>Resets the user value of the property <code>red</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn()"},"resetSaturation":{"!doc":"<p>Resets the user value of the property <code>saturation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #saturation}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the color to null.</p>","!type":"fn()"},"setBlue":{"!doc":"<p>Sets the user value of the property <code>blue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blue}.</p>","!type":"fn(value: Object) -> Object"},"setBrightness":{"!doc":"<p>Sets the user value of the property <code>brightness</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #brightness}.</p>","!type":"fn(value: Object) -> Object"},"setGreen":{"!doc":"<p>Sets the user value of the property <code>green</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #green}.</p>","!type":"fn(value: Object) -> Object"},"setHue":{"!doc":"<p>Sets the user value of the property <code>hue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hue}.</p>","!type":"fn(value: Object) -> Object"},"setPreviousColor":{"!doc":"<p>Sets previous color&#8217;s to given values.</p>","!type":"fn(red: number, green: number, blue: number)"},"setRed":{"!doc":"<p>Sets the user value of the property <code>red</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #red}.</p>","!type":"fn(value: Object) -> Object"},"setSaturation":{"!doc":"<p>Sets the user value of the property <code>saturation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #saturation}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>The value of the ColorSelector is a string containing the <span class=\"caps\">HEX</span> value of\nthe currently selected color. Take a look at\n{@link qx.util.ColorUtil#stringToRgb} to see what kind of input the\nmethod can handle.</p>","!type":"fn(value: string)"}}},"DateChooser":{"!proto":"qx.ui.core.Widget","!doc":"<p>A <strong>date chooser</strong> is a small calendar including a navigation bar to switch the shown\nmonth. It includes a column for the calendar week and shows one month. Selecting\na date is as easy as tapping on it.</p>\n\n<p>To be conform with all form widgets, the {@link qx.ui.form.IForm} interface\nis implemented.</p>\n\n<p>The following example creates and adds a date chooser to the root element.\nA listener alerts the user if a new date is selected.</p>\n\n<pre class=\"javascript\">\nvar chooser = new qx.ui.control.DateChooser();\nthis.getRoot().add(chooser, { left : 20, top: 20});\n\nchooser.addListener(\"changeValue\", function(e) {\n  alert(e.getData());\n});\n</pre>\n\n<p>Additionally to a selection event an execute event is available which is\nfired by doubletap or tapping the space / enter key. With this event you\ncan for example save the selection and close the date chooser.</p>","!type":"fn()","prototype":{"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: +Date, old: +Date)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onDayDblTap":{"!doc":"<p>Event handler. Called when a day has been double-tapped.</p>","!type":"fn()"},"_onDayTap":{"!doc":"<p>Event handler. Called when a day has been tapped.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onKeyPress":{"!doc":"<p>Event handler. Called when a key was pressed.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onNavButtonTap":{"!doc":"<p>Event handler. Called when a navigation button has been tapped.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onPointerUpDown":{"!doc":"<p>Handler which stops the propagation of the tap event if\nthe navigation bar or calendar headers will be tapped.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_updateDatePane":{"!doc":"<p>Updates the date pane.</p>","!type":"fn()"},"getShownMonth":{"!doc":"<p>Returns the (computed) value of the property <code>shownMonth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shownMonth}.</p>","!type":"fn() -> Object"},"getShownYear":{"!doc":"<p>Returns the (computed) value of the property <code>shownYear</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shownYear}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"handleKeyPress":{"!doc":"<p>Event handler. Used to handle the key events.</p>","!type":"fn(e: +qx.event.type.Data)"},"initShownMonth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shownMonth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shownMonth}.</p>","!type":"fn(value: Object) -> Object"},"initShownYear":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shownYear</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shownYear}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"resetShownMonth":{"!doc":"<p>Resets the user value of the property <code>shownMonth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shownMonth}.</p>","!type":"fn()"},"resetShownYear":{"!doc":"<p>Resets the user value of the property <code>shownYear</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shownYear}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setShownMonth":{"!doc":"<p>Sets the user value of the property <code>shownMonth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shownMonth}.</p>","!type":"fn(value: Object) -> Object"},"setShownYear":{"!doc":"<p>Sets the user value of the property <code>shownYear</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shownYear}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"showMonth":{"!doc":"<p>Shows a certain month.</p>","!type":"fn(month?: +Integer, year?: +Integer)"}}}},"core":{"Blocker":{"!proto":"qx.core.Object","!doc":"<p>This class blocks events and can be included into all widgets.</p>\n\n<p>The {@link #block} and {@link #unblock} methods provided by this class can be used\nto block any event from the widget. When blocked,\nthe blocker widget overlays the widget to block, including the padding area.</p>","!type":"fn()","prototype":{"__activateBlockerElement":{"!doc":"<p>Sets the blocker element to avtive.</p>","!type":"fn()"},"__createBlockerElement":{"!doc":"<p>Creates the blocker element.</p>","!type":"fn() -> +qx.html.Element"},"__onBoundsChange":{"!doc":"<p>Adjust html element size on layout resizes.</p>","!type":"fn(e: +qx.event.type.Data)"},"__onWidgetAppear":{"!doc":"<p>Widget re-appears: Update blocker size/position and attach to (new) parent</p>","!type":"fn()"},"__onWidgetDisappear":{"!doc":"<p>Remove the blocker if the widget disappears</p>","!type":"fn()"},"__setBlockersStyle":{"!doc":"<p>Set the style to all blockers (blocker and content blocker).</p>","!type":"fn(key: string, value: string)"},"__stopTabEvent":{"!doc":"<p>Stops the passed &#8220;Tab&#8221; event.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"__unblock":{"!doc":"<p>Unblock the widget blocked by {@link #block}.</p>","!type":"fn()"},"_applyColor":{"!doc":"<p>Applies changes of the property value of the property <code>color</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyOpacity":{"!doc":"<p>Applies changes of the property value of the property <code>opacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn(value: number, old: number)"},"_backupActiveWidget":{"!doc":"<p>Backup the current active and focused widget.</p>","!type":"fn()"},"_block":{"!doc":"<p>Adds the blocker to the appropriate element and includes it.</p>","!type":"fn(zIndex: number, blockContent: bool)"},"_onChangeTheme":{"!doc":"<p>Handler for the theme change.</p>","!type":"fn()"},"_restoreActiveWidget":{"!doc":"<p>Restore the current active and focused widget.</p>","!type":"fn()"},"_updateBlockerBounds":{"!doc":"<p>set the blocker&#8217;s size and position</p>","!type":"fn(bounds: +Map)"},"block":{"!doc":"<p>Block all events from this widget by placing a transparent overlay widget,\nwhich receives all events, exactly over the widget.</p>","!type":"fn()"},"blockContent":{"!doc":"<p>Block direct child widgets with a zIndex below <code>zIndex</code></p>","!type":"fn(zIndex: +Integer)"},"forceUnblock":{"!doc":"<p>Unblock the widget blocked by {@link #block}, but it doesn&#8217;t take care of\nthe amount of {@link #block} calls. The blocker is directly removed.</p>","!type":"fn()"},"getBlockerElement":{"!doc":"<p>Get/create the blocker element</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.html.Element"},"getColor":{"!doc":"<p>Returns the (computed) value of the property <code>color</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn() -> Object"},"getKeepBlockerActive":{"!doc":"<p>Returns the (computed) value of the property <code>keepBlockerActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepBlockerActive}.</p>","!type":"fn() -> Object"},"getOpacity":{"!doc":"<p>Returns the (computed) value of the property <code>opacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn() -> Object"},"initColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>color</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(value: Object) -> Object"},"initKeepBlockerActive":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>keepBlockerActive</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #keepBlockerActive}.</p>","!type":"fn(value: Object) -> Object"},"initOpacity":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>opacity</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn(value: Object) -> Object"},"isBlocked":{"!doc":"<p>Returns whether the widget is blocked.</p>","!type":"fn() -> bool"},"isKeepBlockerActive":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>keepBlockerActive</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepBlockerActive}.</p>","!type":"fn() -> bool"},"resetColor":{"!doc":"<p>Resets the user value of the property <code>color</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn()"},"resetKeepBlockerActive":{"!doc":"<p>Resets the user value of the property <code>keepBlockerActive</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #keepBlockerActive}.</p>","!type":"fn()"},"resetOpacity":{"!doc":"<p>Resets the user value of the property <code>opacity</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn()"},"setColor":{"!doc":"<p>Sets the user value of the property <code>color</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(value: Object) -> Object"},"setKeepBlockerActive":{"!doc":"<p>Sets the user value of the property <code>keepBlockerActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepBlockerActive}.</p>","!type":"fn(value: Object) -> Object"},"setOpacity":{"!doc":"<p>Sets the user value of the property <code>opacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn(value: Object) -> Object"},"toggleKeepBlockerActive":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>keepBlockerActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepBlockerActive}.</p>","!type":"fn() -> bool"},"unblock":{"!doc":"<p>Unblock the widget blocked by {@link #block}, but it takes care of\nthe amount of {@link #block} calls. The blocker is only removed if\nthe numer of {@link #unblock} calls is identical to {@link #block} calls.</p>","!type":"fn()"}}},"ColumnData":{"!proto":"qx.ui.core.LayoutItem","!doc":"<p>All of the resizing information about a column.</p>\n\n<p>This is used internally by qx.ui.table and qx.ui.progressive&#8217;s table and\n may be used for other widgets as well.</p>","!type":"fn()","prototype":{"getComputedWidth":{"!doc":"<p>Get the computed width of the column.</p>","!type":"fn() -> +Integer"},"getFlex":{"!doc":"<p>Get the column&#8217;s flex value</p>","!type":"fn() -> +Integer"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"setColumnWidth":{"!doc":"<p>Set the column width. The column width can be one of the following\nvalues:</p>\n\n<ul>\n<li>Pixels: e.g. <code>23</code></li>\n<li>Autosized: <code>&#8220;auto&#8221;</code></li>\n<li>Flex: e.g. <code>&#8220;1*&#8221;</code></li>\n<li>Percent: e.g. <code>&#8220;33%&#8221;</code></li>\n</ul>","!type":"fn(width: +Integer, flex?: +Integer)"}}},"Command":{"!proto":"qx.core.Object","!doc":"<p>Commands can be used to globally define keyboard shortcuts. They could\nalso be used to assign an execution of a command sequence to multiple\nwidgets. It is possible to use the same Command in a MenuButton and\nToolBarButton for example.</p>","!type":"fn()","prototype":{"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShortcut":{"!doc":"<p>Applies changes of the property value of the property <code>shortcut</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn(value: string, old: string)"},"execute":{"!doc":"<p>Fire the &#8220;execute&#8221; event on this command.</p>","!type":"fn(target: Object)"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getMenu":{"!doc":"<p>Returns the (computed) value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> Object"},"getShortcut":{"!doc":"<p>Returns the (computed) value of the property <code>shortcut</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn() -> Object"},"getToolTipText":{"!doc":"<p>Returns the (computed) value of the property <code>toolTipText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>menu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"initShortcut":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shortcut</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn(value: Object) -> Object"},"initToolTipText":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>toolTipText</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetMenu":{"!doc":"<p>Resets the user value of the property <code>menu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn()"},"resetShortcut":{"!doc":"<p>Resets the user value of the property <code>shortcut</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn()"},"resetToolTipText":{"!doc":"<p>Resets the user value of the property <code>toolTipText</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setMenu":{"!doc":"<p>Sets the user value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"setShortcut":{"!doc":"<p>Sets the user value of the property <code>shortcut</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shortcut}.</p>","!type":"fn(value: Object) -> Object"},"setToolTipText":{"!doc":"<p>Sets the user value of the property <code>toolTipText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"toString":{"!doc":"<p>Returns the used shortcut as string using the currently selected locale.</p>","!type":"fn() -> string"}}},"DragDropCursor":{"!proto":"qx.ui.basic.Image","!doc":"<p>This widget is used as feedback widget in drag and drop actions.</p>","!type":"fn()","prototype":{"_applyAction":{"!doc":"<p>Applies changes of the property value of the property <code>action</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn(value: Object, old: Object)"},"getAction":{"!doc":"<p>Returns the (computed) value of the property <code>action</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn() -> Object"},"initAction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>action</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn(value: Object) -> Object"},"resetAction":{"!doc":"<p>Resets the user value of the property <code>action</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn()"},"setAction":{"!doc":"<p>Sets the user value of the property <code>action</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #action}.</p>","!type":"fn(value: Object) -> Object"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.core.DragDropCursor"}},"EventHandler":{"!proto":"qx.core.Object","!doc":"<p>Connects the widgets to the browser <span class=\"caps\">DOM</span> events.</p>","!type":"fn()","prototype":{"_dispatchEvent":{"!doc":"<p>Dispatches a <span class=\"caps\">DOM</span> event on a widget.</p>","!type":"fn(domEvent: +qx.event.type.Event)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"FocusHandler":{"!proto":"qx.core.Object","!doc":"<p>Each focus root delegates the focus handling to instances of the FocusHandler.</p>","!type":"fn()","prototype":{"__collectAllAfter":{"!doc":"<p>Collects all widgets which are after the given widget in\nthe given parent widget. Append all found children to the\n<code>list</code>.</p>","!type":"fn(parent: +qx.ui.core.Widget, widget: +qx.ui.core.Widget, result: +Array)"},"__collectAllBefore":{"!doc":"<p>Collects all widgets which are before the given widget in\nthe given parent widget. Append all found children to the\n<code>list</code>.</p>","!type":"fn(parent: +qx.ui.core.Widget, widget: +qx.ui.core.Widget, result: +Array)"},"__compareTabOrder":{"!doc":"<p>Compares the order of two widgets</p>","!type":"fn(widget1: +qx.ui.core.Widget, widget2: +qx.ui.core.Widget) -> +Integer"},"__findFocusRoot":{"!doc":"<p>Finds the next focus root, starting with the given widget.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.ui.core.Widget"},"__getFirst":{"!doc":"<p>Find first (positioned) widget. (Sorted by coordinates, zIndex, etc.)</p>","!type":"fn(parent: +qx.ui.core.Widget, firstWidget?: +qx.ui.core.Widget) -> +qx.ui.core.Widget"},"__getFirstWidget":{"!doc":"<p>Returns the first widget.</p>","!type":"fn() -> +qx.ui.core.Widget"},"__getLast":{"!doc":"<p>Find last (positioned) widget. (Sorted by coordinates, zIndex, etc.)</p>","!type":"fn(parent: +qx.ui.core.Widget, lastWidget?: +qx.ui.core.Widget) -> +qx.ui.core.Widget"},"__getLastWidget":{"!doc":"<p>Returns the last widget.</p>","!type":"fn() -> +qx.ui.core.Widget"},"__getWidgetAfter":{"!doc":"<p>Returns the widget after the given one.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.ui.core.Widget"},"__getWidgetBefore":{"!doc":"<p>Returns the widget before the given one.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.ui.core.Widget"},"__onKeyPress":{"!doc":"<p>Internal event handler for <span class=\"caps\">TAB</span> key.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onActivate":{"!doc":"<p>Internal event handler for activate event.</p>","!type":"fn(e: +qx.event.type.Focus)"},"_onDeactivate":{"!doc":"<p>Internal event handler for deactivate event.</p>","!type":"fn(e: +qx.event.type.Focus)"},"_onFocusIn":{"!doc":"<p>Internal event handler for focusin event.</p>","!type":"fn(e: +qx.event.type.Focus)"},"_onFocusOut":{"!doc":"<p>Internal event handler for focusout event.</p>","!type":"fn(e: +qx.event.type.Focus)"},"addRoot":{"!doc":"<p>Registers a widget as a focus root. A focus root comes\nwith an separate tab sequence handling.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"connectTo":{"!doc":"<p>Connects to a top-level root element (which initially receives\nall events of the root). This are normally all page and application\nroots, but no inline roots (they are typically sitting inside\nanother root).</p>","!type":"fn(root: +qx.ui.root.Abstract)"},"getActiveWidget":{"!doc":"<p>Get the active widget</p>","!type":"fn() -> +qx.ui.core.Widget"},"getFocusedWidget":{"!doc":"<p>Get the focused widget</p>","!type":"fn() -> +qx.ui.core.Widget"},"isActive":{"!doc":"<p>Whether the given widget is the active one</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"isFocused":{"!doc":"<p>Whether the given widget is the focused one.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"isFocusRoot":{"!doc":"<p>Whether the given widgets acts as a focus root.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"removeRoot":{"!doc":"<p>Deregisters a previous added widget.</p>","!type":"fn(widget: +qx.ui.core.Widget)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.core.FocusHandler"}},"IMultiSelection":{"!doc":"<p>Each object, which should support multiselection selection have to\nimplement this interface.</p>","prototype":{"addToSelection":{"!doc":"<p>Adds the given item to the existing selection.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"removeFromSelection":{"!doc":"<p>Removes the given item from the selection.</p>\n\n<p>Use {@link qx.ui.core.ISingleSelection#resetSelection} when you\nwant to clear the whole selection at once.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"selectAll":{"!doc":"<p>Selects all items of the managed object.</p>","!type":"fn()"}}},"ISingleSelection":{"!doc":"<p>Each object, which should support single selection have to\nimplement this interface.</p>","prototype":{"getSelectables":{"!doc":"<p>Returns all elements which are selectable.</p>","!type":"fn(all: bool) -> +qx.ui.core.Widget"},"getSelection":{"!doc":"<p>Returns an array of currently selected items.</p>\n\n<p>Note: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added.</p>","!type":"fn() -> +qx.ui.core.Widget"},"isSelected":{"!doc":"<p>Detects whether the given item is currently selected.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"isSelectionEmpty":{"!doc":"<p>Whether the selection is empty.</p>","!type":"fn() -> bool"},"resetSelection":{"!doc":"<p>Clears the whole selection at once.</p>","!type":"fn()"},"setSelection":{"!doc":"<p>Replaces current selection with the given items.</p>","!type":"fn(items: +qx.ui.core.Widget)"}}},"ISingleSelectionProvider":{"!doc":"<p>Defines the callback for the single selection manager.</p>","prototype":{"getItems":{"!doc":"<p>Returns the elements which are part of the selection.</p>","!type":"fn() -> +qx.ui.core.Widget"},"isItemSelectable":{"!doc":"<p>Returns whether the given item is selectable.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"}}},"LayoutItem":{"!proto":"qx.core.Object","!doc":"<p>The base class of all items, which should be laid out using a layout manager\n{@link qx.ui.layout.Abstract}.</p>","!type":"fn()","prototype":{"_applyAlign":{"!doc":"<p>Applies changes of the property value of the properties <code>alignX</code> and <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #alignX} and {@link #alignY}.</p>","!type":"fn(value: Object, old: Object)"},"_applyDimension":{"!doc":"<p>Applies changes of the property value of the properties <code>height</code>, <code>maxHeight</code>, <code>maxWidth</code>, <code>minHeight</code>, <code>minWidth</code> and <code>width</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #height}, {@link #maxHeight}, {@link #maxWidth}, {@link #minHeight}, {@link #minWidth} and {@link #width}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyMargin":{"!doc":"<p>Applies changes of the property value of the properties <code>marginBottom</code>, <code>marginLeft</code>, <code>marginRight</code> and <code>marginTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #marginBottom}, {@link #marginLeft}, {@link #marginRight} and {@link #marginTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyStretching":{"!doc":"<p>Applies changes of the property value of the properties <code>allowGrowX</code>, <code>allowGrowY</code>, <code>allowShrinkX</code> and <code>allowShrinkY</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #allowGrowX}, {@link #allowGrowY}, {@link #allowShrinkX} and {@link #allowShrinkY}.</p>","!type":"fn(value: bool, old: bool)"},"_computeSizeHint":{"!doc":"<p>Computes the size hint of the layout item.</p>","!type":"fn() -> +Map"},"_getHeightForWidth":{"!doc":"<p>If an item wants to trade height for width it has to implement this\nmethod and return the preferred height of the item if it is resized to\nthe given width. This function returns <code>null</code> if the item\ndo not support height for width.</p>","!type":"fn(width: +Integer) -> +Integer"},"_getLayout":{"!doc":"<p>Get the widget&#8217;s layout manager.</p>","!type":"fn() -> +qx.ui.layout.Abstract"},"_getRoot":{"!doc":"<p>Returns the root item. The root item is the item which\nis directly inserted into an existing <span class=\"caps\">DOM</span> node at <span class=\"caps\">HTML</span> level.\nThis is often the <span class=\"caps\">BODY</span> element of a typical web page.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_hasHeightForWidth":{"!doc":"<p>Whether the item supports height for width.</p>","!type":"fn() -> bool"},"_onChangeTheme":{"!doc":"<p>Handler for the dynamic theme change.</p>","!type":"fn()"},"clearLayoutProperties":{"!doc":"<p>Removes all stored layout properties.</p>","!type":"fn()"},"clearSeparators":{"!doc":"<p>Reconfigure number of separators</p>","!type":"fn()"},"clone":{"!type":"fn()"},"getAlignX":{"!doc":"<p>Returns the (computed) value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn() -> Object"},"getAlignY":{"!doc":"<p>Returns the (computed) value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn() -> Object"},"getAllowGrowX":{"!doc":"<p>Returns the (computed) value of the property <code>allowGrowX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowX}.</p>","!type":"fn() -> Object"},"getAllowGrowY":{"!doc":"<p>Returns the (computed) value of the property <code>allowGrowY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowY}.</p>","!type":"fn() -> Object"},"getAllowShrinkX":{"!doc":"<p>Returns the (computed) value of the property <code>allowShrinkX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkX}.</p>","!type":"fn() -> Object"},"getAllowShrinkY":{"!doc":"<p>Returns the (computed) value of the property <code>allowShrinkY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkY}.</p>","!type":"fn() -> Object"},"getApplicationRoot":{"!doc":"<p>Returns the application root</p>","!type":"fn() -> +qx.ui.root.Abstract"},"getBounds":{"!doc":"<p>Get the computed location and dimension as computed by\nthe layout manager.</p>","!type":"fn() -> +Map"},"getHeight":{"!doc":"<p>Returns the (computed) value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn() -> Object"},"getLayoutParent":{"!doc":"<p>Get the items parent. Even if the item has been added to a\nlayout, the parent is always a child of the containing item. The parent\nitem may be <code>null</code>.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getLayoutProperties":{"!doc":"<p>Returns currently stored layout properties</p>","!type":"fn() -> +Map"},"getMarginBottom":{"!doc":"<p>Returns the (computed) value of the property <code>marginBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginBottom}.</p>","!type":"fn() -> Object"},"getMarginLeft":{"!doc":"<p>Returns the (computed) value of the property <code>marginLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginLeft}.</p>","!type":"fn() -> Object"},"getMarginRight":{"!doc":"<p>Returns the (computed) value of the property <code>marginRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginRight}.</p>","!type":"fn() -> Object"},"getMarginTop":{"!doc":"<p>Returns the (computed) value of the property <code>marginTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginTop}.</p>","!type":"fn() -> Object"},"getMaxHeight":{"!doc":"<p>Returns the (computed) value of the property <code>maxHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxHeight}.</p>","!type":"fn() -> Object"},"getMaxWidth":{"!doc":"<p>Returns the (computed) value of the property <code>maxWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxWidth}.</p>","!type":"fn() -> Object"},"getMinHeight":{"!doc":"<p>Returns the (computed) value of the property <code>minHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minHeight}.</p>","!type":"fn() -> Object"},"getMinWidth":{"!doc":"<p>Returns the (computed) value of the property <code>minWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minWidth}.</p>","!type":"fn() -> Object"},"getSizeHint":{"!doc":"<p>A size hint computes the dimensions of a widget. It returns\nthe recommended dimensions as well as the min and max dimensions.\nThe min and max values already respect the stretching properties.</p>\n\n<h3>Wording</h3>\n<ul>\n<li>User value: Value defined by the widget user, using the size properties</li>\n\n<li>Layout value: The value computed by {@link qx.ui.core.Widget#_getContentHint}</li>\n</ul>\n\n<h3>Algorithm</h3>\n<ul>\n<li>minSize: If the user min size is not null, the user value is taken,\n    otherwise the layout value is used.</li>\n\n<li>(preferred) size: If the user value is not null the user value is used,\n    otherwise the layout value is used.</li>\n\n<li>max size: Same as the preferred size.</li>\n</ul>","!type":"fn(compute?: bool) -> +Map"},"getWidth":{"!doc":"<p>Returns the (computed) value of the property <code>width</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #width}.</p>","!type":"fn() -> Object"},"hasUserBounds":{"!doc":"<p>Whether user bounds are set on this layout item</p>","!type":"fn() -> bool"},"hasValidLayout":{"!doc":"<p>Whether the layout of this item (to layout the children)\nis valid.</p>","!type":"fn() -> bool"},"initAlignX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"initAlignY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"initAllowGrowX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowGrowX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowX}.</p>","!type":"fn(value: Object) -> Object"},"initAllowGrowY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowGrowY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowY}.</p>","!type":"fn(value: Object) -> Object"},"initAllowShrinkX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowShrinkX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkX}.</p>","!type":"fn(value: Object) -> Object"},"initAllowShrinkY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowShrinkY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkY}.</p>","!type":"fn(value: Object) -> Object"},"initHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>height</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: Object) -> Object"},"initMarginBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>marginBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #marginBottom}.</p>","!type":"fn(value: Object) -> Object"},"initMarginLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>marginLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #marginLeft}.</p>","!type":"fn(value: Object) -> Object"},"initMarginRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>marginRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #marginRight}.</p>","!type":"fn(value: Object) -> Object"},"initMarginTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>marginTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #marginTop}.</p>","!type":"fn(value: Object) -> Object"},"initMaxHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxHeight}.</p>","!type":"fn(value: Object) -> Object"},"initMaxWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxWidth}.</p>","!type":"fn(value: Object) -> Object"},"initMinHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minHeight}.</p>","!type":"fn(value: Object) -> Object"},"initMinWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minWidth}.</p>","!type":"fn(value: Object) -> Object"},"initWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>width</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #width}.</p>","!type":"fn(value: Object) -> Object"},"invalidateLayoutCache":{"!doc":"<p>Called by the layout manager to mark this item&#8217;s layout as invalid.\nThis function should clear all layout relevant caches.</p>","!type":"fn()"},"isAllowGrowX":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowGrowX</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowX}.</p>","!type":"fn() -> bool"},"isAllowGrowY":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowGrowY</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowY}.</p>","!type":"fn() -> bool"},"isAllowShrinkX":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowShrinkX</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkX}.</p>","!type":"fn() -> bool"},"isAllowShrinkY":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowShrinkY</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkY}.</p>","!type":"fn() -> bool"},"isExcluded":{"!doc":"<p>Whether the item should be excluded from the layout</p>","!type":"fn() -> bool"},"isRootWidget":{"!doc":"<p>Whether the item is a root item and directly connected to\nthe <span class=\"caps\">DOM</span>.</p>","!type":"fn() -> bool"},"renderLayout":{"!doc":"<p>Used by the layout engine to apply coordinates and dimensions.</p>","!type":"fn(left: +Integer, top: +Integer, width: +Integer, height: +Integer) -> +Map"},"renderSeparator":{"!doc":"<p>Renders a separator between two children</p>","!type":"fn(separator: string, bounds: +Map)"},"resetAlignX":{"!doc":"<p>Resets the user value of the property <code>alignX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn()"},"resetAlignY":{"!doc":"<p>Resets the user value of the property <code>alignY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn()"},"resetAllowGrowX":{"!doc":"<p>Resets the user value of the property <code>allowGrowX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowX}.</p>","!type":"fn()"},"resetAllowGrowY":{"!doc":"<p>Resets the user value of the property <code>allowGrowY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowY}.</p>","!type":"fn()"},"resetAllowShrinkX":{"!doc":"<p>Resets the user value of the property <code>allowShrinkX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkX}.</p>","!type":"fn()"},"resetAllowShrinkY":{"!doc":"<p>Resets the user value of the property <code>allowShrinkY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkY}.</p>","!type":"fn()"},"resetAllowStretchX":{"!doc":"<p>Resets the user value of the property <code>allowStretchX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowStretchX}.</p>","!type":"fn()"},"resetAllowStretchY":{"!doc":"<p>Resets the user value of the property <code>allowStretchY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowStretchY}.</p>","!type":"fn()"},"resetHeight":{"!doc":"<p>Resets the user value of the property <code>height</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn()"},"resetMargin":{"!doc":"<p>Resets the user value of the property <code>margin</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #margin}.</p>","!type":"fn()"},"resetMarginBottom":{"!doc":"<p>Resets the user value of the property <code>marginBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #marginBottom}.</p>","!type":"fn()"},"resetMarginLeft":{"!doc":"<p>Resets the user value of the property <code>marginLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #marginLeft}.</p>","!type":"fn()"},"resetMarginRight":{"!doc":"<p>Resets the user value of the property <code>marginRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #marginRight}.</p>","!type":"fn()"},"resetMarginTop":{"!doc":"<p>Resets the user value of the property <code>marginTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #marginTop}.</p>","!type":"fn()"},"resetMaxHeight":{"!doc":"<p>Resets the user value of the property <code>maxHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxHeight}.</p>","!type":"fn()"},"resetMaxWidth":{"!doc":"<p>Resets the user value of the property <code>maxWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxWidth}.</p>","!type":"fn()"},"resetMinHeight":{"!doc":"<p>Resets the user value of the property <code>minHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minHeight}.</p>","!type":"fn()"},"resetMinWidth":{"!doc":"<p>Resets the user value of the property <code>minWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minWidth}.</p>","!type":"fn()"},"resetUserBounds":{"!doc":"<p>Clear the user bounds. After this call the layout item is laid out by\nthe layout manager again.</p>","!type":"fn()"},"resetWidth":{"!doc":"<p>Resets the user value of the property <code>width</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #width}.</p>","!type":"fn()"},"scheduleLayoutUpdate":{"!doc":"<p>Indicate that the item has layout changes and propagate this information\nup the item hierarchy.</p>","!type":"fn()"},"setAlignX":{"!doc":"<p>Sets the user value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"setAlignY":{"!doc":"<p>Sets the user value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"setAllowGrowX":{"!doc":"<p>Sets the user value of the property <code>allowGrowX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowX}.</p>","!type":"fn(value: Object) -> Object"},"setAllowGrowY":{"!doc":"<p>Sets the user value of the property <code>allowGrowY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowY}.</p>","!type":"fn(value: Object) -> Object"},"setAllowShrinkX":{"!doc":"<p>Sets the user value of the property <code>allowShrinkX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkX}.</p>","!type":"fn(value: Object) -> Object"},"setAllowShrinkY":{"!doc":"<p>Sets the user value of the property <code>allowShrinkY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkY}.</p>","!type":"fn(value: Object) -> Object"},"setAllowStretchX":{"!doc":"<p>Sets the values of the property group <code>allowStretchX</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowStretchX}.</p>","!type":"fn(allowGrowX: Object, allowShrinkX: Object)"},"setAllowStretchY":{"!doc":"<p>Sets the values of the property group <code>allowStretchY</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowStretchY}.</p>","!type":"fn(allowGrowY: Object, allowShrinkY: Object)"},"setHeight":{"!doc":"<p>Sets the user value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: Object) -> Object"},"setLayoutParent":{"!doc":"<p>Set the parent</p>","!type":"fn(parent: +qx.ui.core.Widget)"},"setLayoutProperties":{"!doc":"<p>Stores the given layout properties</p>","!type":"fn(props: +Map)"},"setMargin":{"!doc":"<p>Sets the values of the property group <code>margin</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #margin}.</p>","!type":"fn(marginTop: Object, marginRight: Object, marginBottom: Object, marginLeft: Object)"},"setMarginBottom":{"!doc":"<p>Sets the user value of the property <code>marginBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginBottom}.</p>","!type":"fn(value: Object) -> Object"},"setMarginLeft":{"!doc":"<p>Sets the user value of the property <code>marginLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginLeft}.</p>","!type":"fn(value: Object) -> Object"},"setMarginRight":{"!doc":"<p>Sets the user value of the property <code>marginRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginRight}.</p>","!type":"fn(value: Object) -> Object"},"setMarginTop":{"!doc":"<p>Sets the user value of the property <code>marginTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #marginTop}.</p>","!type":"fn(value: Object) -> Object"},"setMaxHeight":{"!doc":"<p>Sets the user value of the property <code>maxHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxHeight}.</p>","!type":"fn(value: Object) -> Object"},"setMaxWidth":{"!doc":"<p>Sets the user value of the property <code>maxWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxWidth}.</p>","!type":"fn(value: Object) -> Object"},"setMinHeight":{"!doc":"<p>Sets the user value of the property <code>minHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minHeight}.</p>","!type":"fn(value: Object) -> Object"},"setMinWidth":{"!doc":"<p>Sets the user value of the property <code>minWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minWidth}.</p>","!type":"fn(value: Object) -> Object"},"setUserBounds":{"!doc":"<p>Set user bounds of the widget. Widgets with user bounds are sized and\npositioned manually and are ignored by any layout manager.</p>","!type":"fn(left: +Integer, top: +Integer, width: +Integer, height: +Integer)"},"setWidth":{"!doc":"<p>Sets the user value of the property <code>width</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #width}.</p>","!type":"fn(value: Object) -> Object"},"toggleAllowGrowX":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowGrowX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowX}.</p>","!type":"fn() -> bool"},"toggleAllowGrowY":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowGrowY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowGrowY}.</p>","!type":"fn() -> bool"},"toggleAllowShrinkX":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowShrinkX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkX}.</p>","!type":"fn() -> bool"},"toggleAllowShrinkY":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowShrinkY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowShrinkY}.</p>","!type":"fn() -> bool"},"updateLayoutProperties":{"!doc":"<p>Should be executed on every change of layout properties.</p>\n\n<p>This also includes &#8220;virtual&#8221; layout properties like margin or align\nwhen they have an effect on the parent and not on the widget itself.</p>\n\n<p>This method is always executed on the parent not on the\nmodified widget itself.</p>","!type":"fn(props?: +Map)"}}},"MBlocker":{"!doc":"<p>This mixin blocks events and can be included into all widgets.</p>\n\n<p>The {@link #block} and {@link #unblock} methods provided by this mixin can be used\nto block any event from the widget. When blocked,\nthe blocker widget overlays the widget to block, including the padding area.</p>\n\n<p>The ({@link #blockContent} method can be used to block child widgets with a\nzIndex below a certain value.</p>","prototype":{"_applyBlockerColor":{"!doc":"<p>Applies changes of the property value of the property <code>blockerColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyBlockerOpacity":{"!doc":"<p>Applies changes of the property value of the property <code>blockerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn(value: number, old: number)"},"_createBlocker":{"!doc":"<p>Template method for creating the blocker item.</p>","!type":"fn() -> +qx.ui.core.Blocker"},"block":{"!doc":"<p>Block all events from this widget by placing a transparent overlay widget,\nwhich receives all events, exactly over the widget.</p>","!type":"fn()"},"blockContent":{"!doc":"<p>Block direct child widgets with a zIndex below <code>zIndex</code></p>","!type":"fn(zIndex: +Integer)"},"forceUnblock":{"!doc":"<p>Unblock the widget blocked by {@link #block}, but it doesn&#8217;t take care of\nthe amount of {@link #block} calls. The blocker is directly removed.</p>","!type":"fn()"},"getBlocker":{"!doc":"<p>Get the blocker</p>","!type":"fn() -> +qx.ui.core.Blocker"},"getBlockerColor":{"!doc":"<p>Returns the (computed) value of the property <code>blockerColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn() -> Object"},"getBlockerOpacity":{"!doc":"<p>Returns the (computed) value of the property <code>blockerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn() -> Object"},"initBlockerColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockerColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn(value: Object) -> Object"},"initBlockerOpacity":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockerOpacity</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn(value: Object) -> Object"},"isBlocked":{"!doc":"<p>Returns whether the widget is blocked.</p>","!type":"fn() -> bool"},"resetBlockerColor":{"!doc":"<p>Resets the user value of the property <code>blockerColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn()"},"resetBlockerOpacity":{"!doc":"<p>Resets the user value of the property <code>blockerOpacity</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn()"},"setBlockerColor":{"!doc":"<p>Sets the user value of the property <code>blockerColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn(value: Object) -> Object"},"setBlockerOpacity":{"!doc":"<p>Sets the user value of the property <code>blockerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn(value: Object) -> Object"},"unblock":{"!doc":"<p>Unblock the widget blocked by {@link #block}, but it takes care of\nthe amount of {@link #block} calls. The blocker is only removed if\nthe numer of {@link #unblock} calls is identical to {@link #block} calls.</p>","!type":"fn()"}}},"MChildrenHandling":{"!doc":"<p>This mixin exposes all basic methods to manage widget children as public methods.\nIt can only be included into instances of {@link Widget}.</p>\n\n<p>To optimize the method calls the including widget should call the method\n{@link #remap} in its defer function. This will map the protected\nmethods to the public ones and save one method call for each function.</p>","prototype":{"add":{"!doc":"<p>Adds a new child widget.</p>\n\n<p>The supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}.</p>","!type":"fn(child: +LayoutItem, options?: +Map)"},"addAfter":{"!doc":"<p>Add a widget after another already inserted widget</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem, after: +LayoutItem, options?: +Map)"},"addAt":{"!doc":"<p>Add a child widget at the specified index</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem, index: +Integer, options?: +Map)"},"addBefore":{"!doc":"<p>Add a widget before another already inserted widget</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem, before: +LayoutItem, options?: +Map)"},"getChildren":{"!doc":"<p>Returns the children list</p>","!type":"fn() -> +LayoutItem"},"hasChildren":{"!doc":"<p>Whether the widget contains children.</p>","!type":"fn() -> bool"},"indexOf":{"!doc":"<p>Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>.</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +Widget) -> +Integer"},"remove":{"!doc":"<p>Remove the given child widget.</p>","!type":"fn(child: +LayoutItem)"},"removeAll":{"!doc":"<p>Remove all children.</p>","!type":"fn() -> +Array"},"removeAt":{"!doc":"<p>Remove the widget at the specified index.</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(index: +Integer) -> +LayoutItem"}},"remap":{"!doc":"<p>Mapping of protected methods to public.\nThis omits an additional function call when using these methods. Call\nthis methods in the defer block of the including class.</p>","!type":"fn(members: +Map)"}},"MContentPadding":{"!doc":"<p>This mixin defines the <code>contentPadding</code> property, which is used\nby widgets like the window or group box, which must have a property, which\ndefines the padding of an inner pane.</p>\n\n<p>The including class must implement the method\n<code>_getContentPaddingTarget</code>, which must return the widget on which\nthe padding should be applied.</p>","prototype":{"_applyContentPadding":{"!doc":"<p>Applies changes of the property value of the properties <code>contentPaddingBottom</code>, <code>contentPaddingLeft</code>, <code>contentPaddingRight</code> and <code>contentPaddingTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #contentPaddingBottom}, {@link #contentPaddingLeft}, {@link #contentPaddingRight} and {@link #contentPaddingTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"getContentPaddingBottom":{"!doc":"<p>Returns the (computed) value of the property <code>contentPaddingBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingBottom}.</p>","!type":"fn() -> Object"},"getContentPaddingLeft":{"!doc":"<p>Returns the (computed) value of the property <code>contentPaddingLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingLeft}.</p>","!type":"fn() -> Object"},"getContentPaddingRight":{"!doc":"<p>Returns the (computed) value of the property <code>contentPaddingRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingRight}.</p>","!type":"fn() -> Object"},"getContentPaddingTop":{"!doc":"<p>Returns the (computed) value of the property <code>contentPaddingTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingTop}.</p>","!type":"fn() -> Object"},"initContentPaddingBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contentPaddingBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingBottom}.</p>","!type":"fn(value: Object) -> Object"},"initContentPaddingLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contentPaddingLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingLeft}.</p>","!type":"fn(value: Object) -> Object"},"initContentPaddingRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contentPaddingRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingRight}.</p>","!type":"fn(value: Object) -> Object"},"initContentPaddingTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contentPaddingTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingTop}.</p>","!type":"fn(value: Object) -> Object"},"resetContentPadding":{"!doc":"<p>Resets the user value of the property <code>contentPadding</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPadding}.</p>","!type":"fn()"},"resetContentPaddingBottom":{"!doc":"<p>Resets the user value of the property <code>contentPaddingBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingBottom}.</p>","!type":"fn()"},"resetContentPaddingLeft":{"!doc":"<p>Resets the user value of the property <code>contentPaddingLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingLeft}.</p>","!type":"fn()"},"resetContentPaddingRight":{"!doc":"<p>Resets the user value of the property <code>contentPaddingRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingRight}.</p>","!type":"fn()"},"resetContentPaddingTop":{"!doc":"<p>Resets the user value of the property <code>contentPaddingTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingTop}.</p>","!type":"fn()"},"setContentPadding":{"!doc":"<p>Sets the values of the property group <code>contentPadding</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPadding}.</p>","!type":"fn(contentPaddingTop: Object, contentPaddingRight: Object, contentPaddingBottom: Object, contentPaddingLeft: Object)"},"setContentPaddingBottom":{"!doc":"<p>Sets the user value of the property <code>contentPaddingBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingBottom}.</p>","!type":"fn(value: Object) -> Object"},"setContentPaddingLeft":{"!doc":"<p>Sets the user value of the property <code>contentPaddingLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingLeft}.</p>","!type":"fn(value: Object) -> Object"},"setContentPaddingRight":{"!doc":"<p>Sets the user value of the property <code>contentPaddingRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingRight}.</p>","!type":"fn(value: Object) -> Object"},"setContentPaddingTop":{"!doc":"<p>Sets the user value of the property <code>contentPaddingTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentPaddingTop}.</p>","!type":"fn(value: Object) -> Object"}}},"MDragDropScrolling":{"!doc":"<p>Provides scrolling ability during drag session to the widget.</p>","!type":"fn()","prototype":{"__onDrag":{"!doc":"<p>Event handler for the drag event.</p>","!type":"fn(e: +qx.event.type.Drag)"},"__onDragend":{"!doc":"<p>Event handler for the dragend event.</p>","!type":"fn(e: +qx.event.type.Drag)"},"_calculateScrollAmount":{"!doc":"<p>Calculates the scroll amount (which may be negative).\nThe amount is influenced by the scrollbar size (bigger = faster)\nthe exceedanceAmount (bigger = faster) and the slowDownFactor.</p>","!type":"fn(scrollbarSize: number, exceedanceAmount: number) -> number"},"_calculateThresholdExceedance":{"!doc":"<p>Calculates the threshold exceedance (which may be negative).</p>","!type":"fn(diff: number, threshold: number) -> number"},"_findScrollableParent":{"!doc":"<p>Finds the first scrollable parent (in the parent chain).</p>","!type":"fn(widget: +qx.ui.core.LayoutItem) -> +qx.ui.core.Widget"},"_getAxis":{"!doc":"<p>Gets the axis (&#8216;x&#8217; or &#8216;y&#8217;) by the edge type.</p>","!type":"fn(edgeType: string) -> string"},"_getBounds":{"!doc":"<p>Gets the bounds of the given scrollable.</p>","!type":"fn(scrollable: +qx.ui.core.Widget) -> +Map"},"_getEdgeType":{"!doc":"<p>Gets the edge type or null if the pointer isn&#8217;t within one of the thresholds.</p>","!type":"fn(diff: +Map, thresholdX: number, thresholdY: number) -> string"},"_getThresholdByEdgeType":{"!doc":"<p>Gets the threshold amount by edge type.</p>","!type":"fn(edgeType: string) -> number"},"_isScrollable":{"!doc":"<p>Whether the widget is scrollable.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"_isScrollbarExceedingMaxPos":{"!doc":"<p>Whether the scrollbar is exceeding it&#8217;s maximum position.</p>","!type":"fn(scrollbar: +qx.ui.core.scroll.IScrollBar, axis: string, amount: number) -> bool"},"_isScrollbarVisible":{"!doc":"<p>Whether the scrollbar is visible.</p>","!type":"fn(scrollable: +qx.ui.core.Widget, axis: string) -> bool"},"_scrollBy":{"!doc":"<p>Scrolls the given scrollable on the given axis for the given amount.</p>","!type":"fn(scrollable: +qx.ui.core.Widget, axis: string, exceedanceAmount: number)"},"getDragScrollSlowDownFactor":{"!doc":"<p>Returns the (computed) value of the property <code>dragScrollSlowDownFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollSlowDownFactor}.</p>","!type":"fn() -> Object"},"getDragScrollThresholdX":{"!doc":"<p>Returns the (computed) value of the property <code>dragScrollThresholdX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdX}.</p>","!type":"fn() -> Object"},"getDragScrollThresholdY":{"!doc":"<p>Returns the (computed) value of the property <code>dragScrollThresholdY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdY}.</p>","!type":"fn() -> Object"},"initDragScrollSlowDownFactor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dragScrollSlowDownFactor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollSlowDownFactor}.</p>","!type":"fn(value: Object) -> Object"},"initDragScrollThresholdX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dragScrollThresholdX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdX}.</p>","!type":"fn(value: Object) -> Object"},"initDragScrollThresholdY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dragScrollThresholdY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdY}.</p>","!type":"fn(value: Object) -> Object"},"resetDragScrollSlowDownFactor":{"!doc":"<p>Resets the user value of the property <code>dragScrollSlowDownFactor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollSlowDownFactor}.</p>","!type":"fn()"},"resetDragScrollThresholdX":{"!doc":"<p>Resets the user value of the property <code>dragScrollThresholdX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdX}.</p>","!type":"fn()"},"resetDragScrollThresholdY":{"!doc":"<p>Resets the user value of the property <code>dragScrollThresholdY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdY}.</p>","!type":"fn()"},"setDragScrollSlowDownFactor":{"!doc":"<p>Sets the user value of the property <code>dragScrollSlowDownFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollSlowDownFactor}.</p>","!type":"fn(value: Object) -> Object"},"setDragScrollThresholdX":{"!doc":"<p>Sets the user value of the property <code>dragScrollThresholdX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdX}.</p>","!type":"fn(value: Object) -> Object"},"setDragScrollThresholdY":{"!doc":"<p>Sets the user value of the property <code>dragScrollThresholdY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragScrollThresholdY}.</p>","!type":"fn(value: Object) -> Object"}}},"MExecutable":{"!doc":"<p>This mixin is included by all widgets, which support an &#8216;execute&#8217; like\nbuttons or menu entries.</p>","prototype":{"__onCommandExecute":{"!doc":"<p>Handler for the execute event of the command.</p>","!type":"fn(e: +qx.event.type.Event)"},"_applyCommand":{"!doc":"<p>Applies changes of the property value of the property <code>command</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #command}.</p>","!type":"fn(value: +qx.ui.core.Command, old: +qx.ui.core.Command)"},"execute":{"!doc":"<p>Initiate the execute action.</p>","!type":"fn()"},"getCommand":{"!doc":"<p>Returns the (computed) value of the property <code>command</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #command}.</p>","!type":"fn() -> Object"},"initCommand":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>command</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #command}.</p>","!type":"fn(value: Object) -> Object"},"resetCommand":{"!doc":"<p>Resets the user value of the property <code>command</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #command}.</p>","!type":"fn()"},"setCommand":{"!doc":"<p>Sets the user value of the property <code>command</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #command}.</p>","!type":"fn(value: Object) -> Object"}}},"MLayoutHandling":{"!doc":"<p>This mixin exposes all methods to manage the layout manager of a widget.\nIt can only be included into instances of {@link Widget}.</p>\n\n<p>To optimize the method calls the including widget should call the method\n{@link #remap} in its defer function. This will map the protected\nmethods to the public ones and save one method call for each function.</p>","prototype":{"getLayout":{"!doc":"<p>Get the widget&#8217;s layout manager.</p>","!type":"fn() -> +qx.ui.layout.Abstract"},"setLayout":{"!doc":"<p>Set a layout manager for the widget. A a layout manager can only be connected\nwith one widget. Reset the connection with a previous widget first, if you\nlike to use it in another widget instead.</p>","!type":"fn(layout: +qx.ui.layout.Abstract)"}},"remap":{"!doc":"<p>Mapping of protected methods to public.\nThis omits an additional function call when using these methods. Call\nthis methods in the defer block of the including class.</p>","!type":"fn(members: +Map)"}},"MMovable":{"!doc":"<p>Provides move behavior to any widget.</p>\n\n<p>The widget using the mixin must register a widget as move handle so that\nthe pointer events needed for moving it are attached to this widget).</p>\n\n<pre class=\"javascript\">this._activateMoveHandle(widget);</pre>","prototype":{"__computeMoveCoordinates":{"!doc":"<p>Computes the new drag coordinates</p>","!type":"fn(e: +qx.event.type.Pointer) -> +Map"},"__getMoveFrame":{"!doc":"<p>Get the widget, which draws the resize/move frame.</p>","!type":"fn() -> +qx.ui.core.Widget"},"__onMoveLoseCapture":{"!doc":"<p>Event listener for <code>losecapture</code> event.</p>","!type":"fn(e: +qx.event.type.Event)"},"__showMoveFrame":{"!doc":"<p>Creates, shows and syncs the frame with the widget.</p>","!type":"fn()"},"_activateMoveHandle":{"!doc":"<p>Configures the given widget as a move handle</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"_onMovePointerDown":{"!doc":"<p>Enables the capturing of the caption bar and prepares the drag session and the\nappearance (translucent, frame or opaque) for the moving of the window.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onMovePointerMove":{"!doc":"<p>Does the moving of the window by rendering the position\nof the window (or frame) at runtime using direct dom methods.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onMovePointerUp":{"!doc":"<p>Disables the capturing of the caption bar and moves the window\nto the last position of the drag session. Also restores the appearance\nof the window.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onMoveRoll":{"!doc":"<p>Roll handler which prevents the scrolling via tap &amp; move on parent widgets\nduring the move of the widget.</p>","!type":"fn(e: +qx.event.type.Roll)"},"getMovable":{"!doc":"<p>Returns the (computed) value of the property <code>movable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #movable}.</p>","!type":"fn() -> Object"},"getUseMoveFrame":{"!doc":"<p>Returns the (computed) value of the property <code>useMoveFrame</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useMoveFrame}.</p>","!type":"fn() -> Object"},"initMovable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>movable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #movable}.</p>","!type":"fn(value: Object) -> Object"},"initUseMoveFrame":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useMoveFrame</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useMoveFrame}.</p>","!type":"fn(value: Object) -> Object"},"isMovable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>movable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #movable}.</p>","!type":"fn() -> bool"},"isUseMoveFrame":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useMoveFrame</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useMoveFrame}.</p>","!type":"fn() -> bool"},"resetMovable":{"!doc":"<p>Resets the user value of the property <code>movable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #movable}.</p>","!type":"fn()"},"resetUseMoveFrame":{"!doc":"<p>Resets the user value of the property <code>useMoveFrame</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useMoveFrame}.</p>","!type":"fn()"},"setMovable":{"!doc":"<p>Sets the user value of the property <code>movable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #movable}.</p>","!type":"fn(value: Object) -> Object"},"setUseMoveFrame":{"!doc":"<p>Sets the user value of the property <code>useMoveFrame</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useMoveFrame}.</p>","!type":"fn(value: Object) -> Object"},"toggleMovable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>movable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #movable}.</p>","!type":"fn() -> bool"},"toggleUseMoveFrame":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useMoveFrame</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useMoveFrame}.</p>","!type":"fn() -> bool"}}},"MMultiSelectionHandling":{"!doc":"<p>This mixin links all methods to manage the multi selection from the\ninternal selection manager to the widget.</p>","!type":"fn()","prototype":{"_applyDragSelection":{"!doc":"<p>Applies changes of the property value of the property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn(value: bool, old: bool)"},"_applyQuickSelection":{"!doc":"<p>Applies changes of the property value of the property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelectionMode":{"!doc":"<p>Applies changes of the property value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object, old: Object)"},"_getLeadItem":{"!doc":"<p>Returns the current lead item. Generally the item which was last modified\nby the user (tapped on etc.)</p>","!type":"fn() -> +qx.ui.core.Widget"},"_getManager":{"!doc":"<p>Returns the internal selection manager. Use this with\ncaution!</p>","!type":"fn() -> +qx.ui.core.selection.Abstract"},"_onSelectionChange":{"!doc":"<p>Event listener for <code>changeSelection</code> event on selection manager.</p>","!type":"fn(e: +qx.event.type.Data)"},"addToSelection":{"!doc":"<p>Adds the given item to the existing selection.</p>\n\n<p>Use {@link #setSelection} instead if you want to replace\nthe current selection.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"getDragSelection":{"!doc":"<p>Returns the (computed) value of the property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn() -> Object"},"getQuickSelection":{"!doc":"<p>Returns the (computed) value of the property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn() -> Object"},"getSelectables":{"!doc":"<p>Returns all elements which are selectable.</p>","!type":"fn(all: bool) -> +qx.ui.core.Widget"},"getSelection":{"!doc":"<p>Returns an array of currently selected items.</p>\n\n<p>Note: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getSelectionContext":{"!doc":"<p>Returns the last selection context.</p>","!type":"fn() -> string"},"getSelectionMode":{"!doc":"<p>Returns the (computed) value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn() -> Object"},"getSortedSelection":{"!doc":"<p>Returns an array of currently selected items sorted\nby their index in the container.</p>","!type":"fn() -> +qx.ui.core.Widget"},"initDragSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dragSelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn(value: Object) -> Object"},"initQuickSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>quickSelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn(value: Object) -> Object"},"initSelectionMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectionMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object) -> Object"},"invertSelection":{"!doc":"<p>Invert the selection. Select the non selected and deselect the selected.</p>","!type":"fn()"},"isDragSelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>dragSelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn() -> bool"},"isQuickSelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>quickSelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn() -> bool"},"isSelected":{"!doc":"<p>Detects whether the given item is currently selected.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"isSelectionEmpty":{"!doc":"<p>Whether the selection is empty</p>","!type":"fn() -> bool"},"removeFromSelection":{"!doc":"<p>Removes the given item from the selection.</p>\n\n<p>Use {@link #resetSelection} when you want to clear\nthe whole selection at once.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"resetDragSelection":{"!doc":"<p>Resets the user value of the property <code>dragSelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn()"},"resetQuickSelection":{"!doc":"<p>Resets the user value of the property <code>quickSelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Clears the whole selection at once. Also\nresets the lead and anchor items and their\nstyles.</p>","!type":"fn()"},"resetSelectionMode":{"!doc":"<p>Resets the user value of the property <code>selectionMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn()"},"selectAll":{"!doc":"<p>Selects all items of the managed object.</p>","!type":"fn()"},"selectRange":{"!doc":"<p>Selects an item range between two given items.</p>","!type":"fn(begin: +qx.ui.core.Widget, end: +qx.ui.core.Widget)"},"setDragSelection":{"!doc":"<p>Sets the user value of the property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn(value: Object) -> Object"},"setQuickSelection":{"!doc":"<p>Sets the user value of the property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn(value: Object) -> Object"},"setSelection":{"!doc":"<p>Replaces current selection with the given items.</p>","!type":"fn(items: +qx.ui.core.Widget)"},"setSelectionMode":{"!doc":"<p>Sets the user value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object) -> Object"},"toggleDragSelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn() -> bool"},"toggleQuickSelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn() -> bool"}}},"MNativeOverflow":{"!doc":"<p>This mixin is included by all widgets which supports native overflowing.</p>","prototype":{"_applyOverflowX":{"!doc":"<p>Applies changes of the property value of the property <code>overflowX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowX}.</p>","!type":"fn(value: Object, old: Object)"},"_applyOverflowY":{"!doc":"<p>Applies changes of the property value of the property <code>overflowY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowY}.</p>","!type":"fn(value: Object, old: Object)"},"getOverflowX":{"!doc":"<p>Returns the (computed) value of the property <code>overflowX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowX}.</p>","!type":"fn() -> Object"},"getOverflowY":{"!doc":"<p>Returns the (computed) value of the property <code>overflowY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowY}.</p>","!type":"fn() -> Object"},"initOverflowX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>overflowX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowX}.</p>","!type":"fn(value: Object) -> Object"},"initOverflowY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>overflowY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowY}.</p>","!type":"fn(value: Object) -> Object"},"resetOverflow":{"!doc":"<p>Resets the user value of the property <code>overflow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflow}.</p>","!type":"fn()"},"resetOverflowX":{"!doc":"<p>Resets the user value of the property <code>overflowX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowX}.</p>","!type":"fn()"},"resetOverflowY":{"!doc":"<p>Resets the user value of the property <code>overflowY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowY}.</p>","!type":"fn()"},"setOverflow":{"!doc":"<p>Sets the values of the property group <code>overflow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflow}.</p>","!type":"fn(overflowX: Object, overflowY: Object)"},"setOverflowX":{"!doc":"<p>Sets the user value of the property <code>overflowX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowX}.</p>","!type":"fn(value: Object) -> Object"},"setOverflowY":{"!doc":"<p>Sets the user value of the property <code>overflowY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowY}.</p>","!type":"fn(value: Object) -> Object"}}},"MPlacement":{"!doc":"<p>Methods to place popup like widgets to other widgets, points,\npointer event coordinates, etc.</p>","getMoveDirection":{"!doc":"<p>Returns the move direction for an element which hides always visible element.\nSee {@link #setMoveDirection} for more details.</p>","!type":"fn() -> string"},"getVisibleElement":{"!doc":"<p>Returns the given always visible element. See {@link #setVisibleElement}\nfor more details.</p>","!type":"fn() -> +qx.ui.core.Widget"},"setMoveDirection":{"!doc":"<p>Set the move direction for an element which hides always visible element.\nThe value has only an effect when the {@link #setVisibleElement} is set.</p>","!type":"fn(direction: string)"},"setVisibleElement":{"!doc":"<p>Set the always visible element. If an element is set, the\n{@link #moveTo} method takes care of every move and tries not to cover\nthe given element with a movable widget like a popup or context menu.</p>","!type":"fn(elem: +qx.ui.core.Widget)"},"prototype":{"__cleanupFromLastPlaceToWidgetLiveUpdate":{"!doc":"<p>Removes all resources allocated by the last run of placeToWidget with liveupdate=true</p>","!type":"fn()"},"__getPlacementSize":{"!doc":"<p>Get the size of the object to place. The callback will be called with\nthe size as first argument. This methods works asynchronously.</p>\n\n<p>The size of the object to place is the size of the widget. If a widget\nincluding this mixin needs a different size it can implement the method\n<code>_computePlacementSize</code>, which returns the size.</p>","!type":"fn(callback: fn())"},"_getPlacementOffsets":{"!doc":"<p>Returns the placement offsets as a map</p>","!type":"fn() -> +Map"},"_place":{"!doc":"<p>Internal method to read specific this properties and\napply the results to the this afterwards.</p>","!type":"fn(coords: +Map)"},"getDomMove":{"!doc":"<p>Returns the (computed) value of the property <code>domMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #domMove}.</p>","!type":"fn() -> Object"},"getLayoutLocation":{"!doc":"<p>Returns the location data like {qx.bom.element.Location#get} does,\nbut does not rely on <span class=\"caps\">DOM</span> elements coordinates to be rendered. Instead,\nthis method works with the available layout data available in the moment\nwhen it is executed.\nThis works best when called in some type of <code>resize</code> or\n<code>move</code> event which are supported by all widgets out of the\nbox.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +Map"},"getOffsetBottom":{"!doc":"<p>Returns the (computed) value of the property <code>offsetBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetBottom}.</p>","!type":"fn() -> Object"},"getOffsetLeft":{"!doc":"<p>Returns the (computed) value of the property <code>offsetLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetLeft}.</p>","!type":"fn() -> Object"},"getOffsetRight":{"!doc":"<p>Returns the (computed) value of the property <code>offsetRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetRight}.</p>","!type":"fn() -> Object"},"getOffsetTop":{"!doc":"<p>Returns the (computed) value of the property <code>offsetTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetTop}.</p>","!type":"fn() -> Object"},"getPlacementModeX":{"!doc":"<p>Returns the (computed) value of the property <code>placementModeX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeX}.</p>","!type":"fn() -> Object"},"getPlacementModeY":{"!doc":"<p>Returns the (computed) value of the property <code>placementModeY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeY}.</p>","!type":"fn() -> Object"},"getPlaceMethod":{"!doc":"<p>Returns the (computed) value of the property <code>placeMethod</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeMethod}.</p>","!type":"fn() -> Object"},"getPosition":{"!doc":"<p>Returns the (computed) value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn() -> Object"},"initDomMove":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>domMove</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #domMove}.</p>","!type":"fn(value: Object) -> Object"},"initOffsetBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>offsetBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetBottom}.</p>","!type":"fn(value: Object) -> Object"},"initOffsetLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>offsetLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetLeft}.</p>","!type":"fn(value: Object) -> Object"},"initOffsetRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>offsetRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetRight}.</p>","!type":"fn(value: Object) -> Object"},"initOffsetTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>offsetTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetTop}.</p>","!type":"fn(value: Object) -> Object"},"initPlacementModeX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placementModeX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeX}.</p>","!type":"fn(value: Object) -> Object"},"initPlacementModeY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placementModeY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeY}.</p>","!type":"fn(value: Object) -> Object"},"initPlaceMethod":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placeMethod</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placeMethod}.</p>","!type":"fn(value: Object) -> Object"},"initPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>position</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"isDomMove":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>domMove</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #domMove}.</p>","!type":"fn() -> bool"},"moveTo":{"!doc":"<p>Sets the position. Uses low-level, high-performance <span class=\"caps\">DOM</span>\nmethods when the property {@link #domMove} is enabled.\nChecks if an always visible element is set and moves the widget to not\noverlay the always visible widget if possible. The algorithm tries to\nmove the widget as far left as necessary but not of the screen.\n({@link #setVisibleElement})</p>","!type":"fn(left: +Integer, top: +Integer)"},"placeToElement":{"!doc":"<p>Places the widget to any (rendered) <span class=\"caps\">DOM</span> element.</p>","!type":"fn(elem: +Element, liveupdate: bool)"},"placeToPoint":{"!doc":"<p>Places the widget in relation to the given point</p>","!type":"fn(point: +Map)"},"placeToPointer":{"!doc":"<p>Places the widget to the pointer position.</p>","!type":"fn(event: +qx.event.type.Pointer)"},"placeToWidget":{"!doc":"<p>Places the widget to another (at least laid out) widget. The <span class=\"caps\">DOM</span>\nelement is not needed, but the bounds are needed to compute the\nlocation of the widget to align to.</p>","!type":"fn(target: +qx.ui.core.Widget, liveupdate: bool) -> bool"},"resetDomMove":{"!doc":"<p>Resets the user value of the property <code>domMove</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #domMove}.</p>","!type":"fn()"},"resetOffset":{"!doc":"<p>Resets the user value of the property <code>offset</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn()"},"resetOffsetBottom":{"!doc":"<p>Resets the user value of the property <code>offsetBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetBottom}.</p>","!type":"fn()"},"resetOffsetLeft":{"!doc":"<p>Resets the user value of the property <code>offsetLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetLeft}.</p>","!type":"fn()"},"resetOffsetRight":{"!doc":"<p>Resets the user value of the property <code>offsetRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetRight}.</p>","!type":"fn()"},"resetOffsetTop":{"!doc":"<p>Resets the user value of the property <code>offsetTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetTop}.</p>","!type":"fn()"},"resetPlacementModeX":{"!doc":"<p>Resets the user value of the property <code>placementModeX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeX}.</p>","!type":"fn()"},"resetPlacementModeY":{"!doc":"<p>Resets the user value of the property <code>placementModeY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeY}.</p>","!type":"fn()"},"resetPlaceMethod":{"!doc":"<p>Resets the user value of the property <code>placeMethod</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placeMethod}.</p>","!type":"fn()"},"resetPosition":{"!doc":"<p>Resets the user value of the property <code>position</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn()"},"setDomMove":{"!doc":"<p>Sets the user value of the property <code>domMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #domMove}.</p>","!type":"fn(value: Object) -> Object"},"setOffset":{"!doc":"<p>Sets the values of the property group <code>offset</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn(offsetTop: Object, offsetRight: Object, offsetBottom: Object, offsetLeft: Object)"},"setOffsetBottom":{"!doc":"<p>Sets the user value of the property <code>offsetBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetBottom}.</p>","!type":"fn(value: Object) -> Object"},"setOffsetLeft":{"!doc":"<p>Sets the user value of the property <code>offsetLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetLeft}.</p>","!type":"fn(value: Object) -> Object"},"setOffsetRight":{"!doc":"<p>Sets the user value of the property <code>offsetRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetRight}.</p>","!type":"fn(value: Object) -> Object"},"setOffsetTop":{"!doc":"<p>Sets the user value of the property <code>offsetTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offsetTop}.</p>","!type":"fn(value: Object) -> Object"},"setPlacementModeX":{"!doc":"<p>Sets the user value of the property <code>placementModeX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeX}.</p>","!type":"fn(value: Object) -> Object"},"setPlacementModeY":{"!doc":"<p>Sets the user value of the property <code>placementModeY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placementModeY}.</p>","!type":"fn(value: Object) -> Object"},"setPlaceMethod":{"!doc":"<p>Sets the user value of the property <code>placeMethod</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeMethod}.</p>","!type":"fn(value: Object) -> Object"},"setPosition":{"!doc":"<p>Sets the user value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"toggleDomMove":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>domMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #domMove}.</p>","!type":"fn() -> bool"}}},"MRemoteChildrenHandling":{"!doc":"<p>This mixin redirects all children handling methods to a child widget of the\nincluding class. This is e.g. used in {@link qx.ui.window.Window} to add\nchild widgets directly to the window pane.</p>\n\n<p>The including class must implement the method <code>getChildrenContainer</code>,\nwhich has to return the widget, to which the child widgets should be added.</p>","prototype":{"__forward":{"!doc":"<p>Forward the call with the given function name to the children container</p>","!type":"fn(functionName: string, a1: Object, a2: Object, a3: Object) -> Object"},"add":{"!doc":"<p>Adds a new child widget.</p>\n\n<p>The supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}.</p>","!type":"fn(child: +LayoutItem, options?: +Map) -> +Widget"},"addAfter":{"!doc":"<p>Add an item after another already inserted item</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem, after: +LayoutItem, options?: +Map)"},"addAt":{"!doc":"<p>Add a child at the specified index</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem, index: +Integer, options?: +Map)"},"addBefore":{"!doc":"<p>Add an item before another already inserted item</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem, before: +LayoutItem, options?: +Map)"},"getChildren":{"!doc":"<p>Returns the children list</p>","!type":"fn() -> +LayoutItem"},"hasChildren":{"!doc":"<p>Whether the widget contains children.</p>","!type":"fn() -> bool"},"indexOf":{"!doc":"<p>Returns the index position of the given item if it is\na child item. Otherwise it returns <code>-1</code>.</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(child: +LayoutItem) -> +Integer"},"remove":{"!doc":"<p>Remove the given child item.</p>","!type":"fn(child: +LayoutItem) -> +Widget"},"removeAll":{"!doc":"<p>Remove all children.</p>","!type":"fn() -> +Array"},"removeAt":{"!doc":"<p>Remove the item at the specified index.</p>\n\n<p>This method works on the widget&#8217;s children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process.</p>","!type":"fn(index: +Integer) -> +qx.ui.core.LayoutItem"}}},"MRemoteLayoutHandling":{"!doc":"<p>This mixin redirects the layout manager to a child widget of the\nincluding class. This is e.g. used in {@link qx.ui.window.Window} to configure\nthe layout manager of the window pane instead of the window directly.</p>\n\n<p>The including class must implement the method <code>getChildrenContainer</code>,\nwhich has to return the widget, to which the layout should be set.</p>","prototype":{"getLayout":{"!doc":"<p>Get the widget&#8217;s layout manager.</p>","!type":"fn() -> +qx.ui.layout.Abstract"},"setLayout":{"!doc":"<p>Set a layout manager for the widget. A a layout manager can only be connected\nwith one widget. Reset the connection with a previous widget first, if you\nlike to use it in another widget instead.</p>","!type":"fn(layout: +qx.ui.layout.Abstract)"}}},"MResizable":{"!doc":"<p>Provides resizing behavior to any widget.</p>","!type":"fn()","prototype":{"__computeResizeActive":{"!doc":"<p>Internal helper for computing the proper resize action based on the\ngiven parameters.</p>","!type":"fn(location: +Map, pointerLeft: +Integer, pointerTop: +Integer, pointerTolerance: +Integer) -> +Integer"},"__computeResizeMode":{"!doc":"<p>Updates the internally stored resize mode</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__computeResizeResult":{"!doc":"<p>Computes the new boundaries at each interval\nof the resize sequence.</p>","!type":"fn(e: +qx.event.type.Pointer) -> +Map"},"__onResizeLoseCapture":{"!doc":"<p>Event listener for <code>losecapture</code> event.</p>","!type":"fn(e: +qx.event.type.Event)"},"__onResizePointerDown":{"!doc":"<p>Event handler for the pointer down event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__onResizePointerMove":{"!doc":"<p>Event handler for the pointer move event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__onResizePointerOut":{"!doc":"<p>Event handler for the pointer out event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__onResizePointerUp":{"!doc":"<p>Event handler for the pointer up event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__showResizeFrame":{"!doc":"<p>Creates, shows and syncs the frame with the widget.</p>","!type":"fn()"},"_getResizeFrame":{"!doc":"<p>Get the widget, which draws the resize/move frame. The resize frame is\nshared by all widgets and is added to the root widget.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getResizableBottom":{"!doc":"<p>Returns the (computed) value of the property <code>resizableBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableBottom}.</p>","!type":"fn() -> Object"},"getResizableLeft":{"!doc":"<p>Returns the (computed) value of the property <code>resizableLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableLeft}.</p>","!type":"fn() -> Object"},"getResizableRight":{"!doc":"<p>Returns the (computed) value of the property <code>resizableRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableRight}.</p>","!type":"fn() -> Object"},"getResizableTop":{"!doc":"<p>Returns the (computed) value of the property <code>resizableTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableTop}.</p>","!type":"fn() -> Object"},"getResizeSensitivity":{"!doc":"<p>Returns the (computed) value of the property <code>resizeSensitivity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizeSensitivity}.</p>","!type":"fn() -> Object"},"getUseResizeFrame":{"!doc":"<p>Returns the (computed) value of the property <code>useResizeFrame</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useResizeFrame}.</p>","!type":"fn() -> Object"},"initResizableBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resizableBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableBottom}.</p>","!type":"fn(value: Object) -> Object"},"initResizableLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resizableLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableLeft}.</p>","!type":"fn(value: Object) -> Object"},"initResizableRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resizableRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableRight}.</p>","!type":"fn(value: Object) -> Object"},"initResizableTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resizableTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableTop}.</p>","!type":"fn(value: Object) -> Object"},"initResizeSensitivity":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resizeSensitivity</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resizeSensitivity}.</p>","!type":"fn(value: Object) -> Object"},"initUseResizeFrame":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useResizeFrame</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useResizeFrame}.</p>","!type":"fn(value: Object) -> Object"},"isResizableBottom":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>resizableBottom</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableBottom}.</p>","!type":"fn() -> bool"},"isResizableLeft":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>resizableLeft</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableLeft}.</p>","!type":"fn() -> bool"},"isResizableRight":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>resizableRight</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableRight}.</p>","!type":"fn() -> bool"},"isResizableTop":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>resizableTop</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableTop}.</p>","!type":"fn() -> bool"},"isUseResizeFrame":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useResizeFrame</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useResizeFrame}.</p>","!type":"fn() -> bool"},"resetResizable":{"!doc":"<p>Resets the user value of the property <code>resizable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resizable}.</p>","!type":"fn()"},"resetResizableBottom":{"!doc":"<p>Resets the user value of the property <code>resizableBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableBottom}.</p>","!type":"fn()"},"resetResizableLeft":{"!doc":"<p>Resets the user value of the property <code>resizableLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableLeft}.</p>","!type":"fn()"},"resetResizableRight":{"!doc":"<p>Resets the user value of the property <code>resizableRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableRight}.</p>","!type":"fn()"},"resetResizableTop":{"!doc":"<p>Resets the user value of the property <code>resizableTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableTop}.</p>","!type":"fn()"},"resetResizeSensitivity":{"!doc":"<p>Resets the user value of the property <code>resizeSensitivity</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resizeSensitivity}.</p>","!type":"fn()"},"resetUseResizeFrame":{"!doc":"<p>Resets the user value of the property <code>useResizeFrame</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useResizeFrame}.</p>","!type":"fn()"},"setResizable":{"!doc":"<p>Sets the values of the property group <code>resizable</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizable}.</p>","!type":"fn(resizableTop: Object, resizableRight: Object, resizableBottom: Object, resizableLeft: Object)"},"setResizableBottom":{"!doc":"<p>Sets the user value of the property <code>resizableBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableBottom}.</p>","!type":"fn(value: Object) -> Object"},"setResizableLeft":{"!doc":"<p>Sets the user value of the property <code>resizableLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableLeft}.</p>","!type":"fn(value: Object) -> Object"},"setResizableRight":{"!doc":"<p>Sets the user value of the property <code>resizableRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableRight}.</p>","!type":"fn(value: Object) -> Object"},"setResizableTop":{"!doc":"<p>Sets the user value of the property <code>resizableTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableTop}.</p>","!type":"fn(value: Object) -> Object"},"setResizeSensitivity":{"!doc":"<p>Sets the user value of the property <code>resizeSensitivity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizeSensitivity}.</p>","!type":"fn(value: Object) -> Object"},"setUseResizeFrame":{"!doc":"<p>Sets the user value of the property <code>useResizeFrame</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useResizeFrame}.</p>","!type":"fn(value: Object) -> Object"},"toggleResizableBottom":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>resizableBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableBottom}.</p>","!type":"fn() -> bool"},"toggleResizableLeft":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>resizableLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableLeft}.</p>","!type":"fn() -> bool"},"toggleResizableRight":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>resizableRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableRight}.</p>","!type":"fn() -> bool"},"toggleResizableTop":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>resizableTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resizableTop}.</p>","!type":"fn() -> bool"},"toggleUseResizeFrame":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useResizeFrame</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useResizeFrame}.</p>","!type":"fn() -> bool"}}},"MSingleSelectionHandling":{"!doc":"<p>This mixin links all methods to manage the single selection.</p>\n\n<p>The class which includes the mixin has to implements two methods:</p>\n\n<ul>\n<li><code>_getItems</code>, this method has to return a <code>Array</code>\n   of <code>qx.ui.core.Widget</code> that should be managed from the manager.\n</li>\n<li><code>_isAllowEmptySelection</code>, this method has to return a\n   <code>Boolean</code> value for allowing empty selection or not.\n</li>\n</ul>","prototype":{"__getManager":{"!doc":"<p>Return the selection manager if it is already exists, otherwise creates\nthe manager.</p>","!type":"fn() -> +qx.ui.core.SingleSelectionManager"},"_onChangeSelected":{"!doc":"<p>Event listener for <code>changeSelected</code> event on single\nselection manager.</p>","!type":"fn(e: +qx.event.type.Data)"},"getSelectables":{"!doc":"<p>Returns all elements which are selectable.</p>","!type":"fn(all: bool) -> +qx.ui.core.Widget"},"getSelection":{"!doc":"<p>Returns an array of currently selected items.</p>\n\n<p>Note: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added.</p>","!type":"fn() -> +qx.ui.core.Widget"},"isSelected":{"!doc":"<p>Detects whether the given item is currently selected.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"isSelectionEmpty":{"!doc":"<p>Whether the selection is empty.</p>","!type":"fn() -> bool"},"resetSelection":{"!doc":"<p>Clears the whole selection at once.</p>","!type":"fn()"},"setSelection":{"!doc":"<p>Replaces current selection with the given items.</p>","!type":"fn(items: +qx.ui.core.Widget)"}}},"queue":{"Appearance":{"!doc":"<p>The AppearanceQueue registers all widgets which are influences through\nstate changes.</p>","add":{"!doc":"<p>Adds a widget to the queue.</p>\n\n<p>Should only be used by {@link qx.ui.core.Widget}.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"flush":{"!doc":"<p>Flushes the appearance queue.</p>\n\n<p>This is used exclusively by the {@link qx.ui.core.queue.Manager}.</p>","!type":"fn()"},"has":{"!doc":"<p>Whether the given widget is already queued</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"remove":{"!doc":"<p>Clears the widget from the internal queue. Normally only used\nduring interims disposes of one or a few widgets.</p>","!type":"fn(widget: +qx.ui.core.Widget)"}},"Dispose":{"!doc":"<p>The DisposeQueue registers all widgets which are should be disposed.\nThis queue makes it possible to remove widgets from the <span class=\"caps\">DOM</span> using\nthe layout and element queues and dispose them afterwards.</p>","add":{"!doc":"<p>Adds a widget to the queue.</p>\n\n<p>Should only be used by {@link qx.ui.core.Widget}.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"flush":{"!doc":"<p>Flushes the dispose queue.</p>\n\n<p>This is used exclusively by the {@link qx.ui.core.queue.Manager}.</p>","!type":"fn()"},"isEmpty":{"!doc":"<p>Whether the dispose queue is empty</p>","!type":"fn() -> bool"}},"Layout":{"!doc":"<p>The layout queue manages all widgets, which need a recalculation of their\nlayout. The {@link #flush} method computes the layout of all queued widgets\nand their dependent widgets.</p>","__getLevelGroupedWidgets":{"!doc":"<p>Group widget by their nesting level.</p>","!type":"fn() -> +Map"},"__getSortedQueue":{"!doc":"<p>Compute all layout roots of the given widgets. Layout roots are either\nroot widgets or widgets, which preferred size has not changed by the\nlayout changes of its children.</p>\n\n<p>This function returns the roots ordered by their nesting factors. The\nlayout with the largest nesting level comes first.</p>","!type":"fn() -> +qx.ui.core.Widget"},"add":{"!doc":"<p>Mark a widget&#8217;s layout as invalid and add its layout root to\nthe queue.</p>\n\n<p>Should only be used by {@link qx.ui.core.Widget}.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"flush":{"!doc":"<p>Update the layout of all widgets, which layout is marked as invalid.</p>\n\n<p>This is used exclusively by the {@link qx.ui.core.queue.Manager}.</p>","!type":"fn()"},"getNestingLevel":{"!doc":"<p>Get the widget&#8217;s nesting level. Top level widgets have a nesting level\nof <code>0</code>.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +Integer"},"isScheduled":{"!doc":"<p>Check whether the queue has scheduled changes for a widget.\nNote that the layout parent can have changes scheduled that\naffect the children widgets.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"remove":{"!doc":"<p>Clears the widget from the internal queue. Normally only used\nduring interims disposes of one or a few widgets.</p>","!type":"fn(widget: +qx.ui.core.Widget)"}},"Manager":{"!doc":"<p>This class performs the auto flush of all layout relevant queues.</p>","__executeAndRescheduleOnError":{"!doc":"<p>Executes the callback code. If the callback throws an error the current\nflush is cleaned up and rescheduled. The finally code is called after the\ncallback even if it has thrown an exception.</p>","!type":"fn(callback: fn(), finallyCode: fn())"},"__onUserAction":{"!doc":"<p>Handler used on touch devices to prevent the queue from manipulating\nthe dom during the touch &#8211; mouse &#8211; ... event sequence. Usually, iOS\ndevices fire a click event 300ms after the touchend event. So using\n500ms should be a good value to be on the save side. This is necessary\ndue to the fact that the event chain is stopped if a manipulation in\nthe <span class=\"caps\">DOM</span> is done.</p>","!type":"fn(e: +qx.event.type.Data)"},"flush":{"!doc":"<p>Flush all layout queues in the correct order. This function is called\ndeferred if {@link #scheduleFlush} is called.</p>","!type":"fn()"},"scheduleFlush":{"!doc":"<p>Schedule a deferred flush of all queues.</p>","!type":"fn(job: string)"}},"Visibility":{"!doc":"<p>Keeps data about the visibility of all widgets. Updates the internal\ntree when widgets are added, removed or modify their visibility.</p>","__computeVisible":{"!doc":"<p>Computes the visibility for the given widget</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"add":{"!doc":"<p>Adds a widget to the queue.</p>\n\n<p>Should only be used by {@link qx.ui.core.Widget}.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"flush":{"!doc":"<p>Flushes the visibility queue.</p>\n\n<p>This is used exclusively by the {@link qx.ui.core.queue.Manager}.</p>","!type":"fn()"},"isVisible":{"!doc":"<p>Whether the given widget is visible.</p>\n\n<p>Please note that the information given by this method is queued and may not be accurate\nuntil the next queue flush happens.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"remove":{"!doc":"<p>Clears the cached data of the given widget. Normally only used\nduring interims disposes of one or a few widgets.</p>","!type":"fn(widget: +qx.ui.core.Widget)"}},"Widget":{"!doc":"<p>The widget queue handles the deferred computation of certain widget properties.\nIt is used e.g. for the tree to update the indentation of tree nodes.</p>\n\n<p>This queue calls the method {@link qx.ui.core.Widget#syncWidget} of each\nqueued widget before the layout queues are processed.</p>","add":{"!doc":"<p>Adds a widget to the queue. The second param can be used to identify\nseveral jobs. You can add one job at once, which will be returned as\nan map at flushing on method {@link qx.ui.core.Widget#syncWidget}.</p>","!type":"fn(widget: +qx.ui.core.Widget, job?: string)"},"flush":{"!doc":"<p>Flushes the widget queue.</p>\n\n<p>This is used exclusively by the {@link qx.ui.core.queue.Manager}.</p>","!type":"fn()"},"remove":{"!doc":"<p>Clears given job of a widget from the internal queue. If no jobs left, the\nwidget will be removed completely from queue. If job param is <code>null</code>\nor <code>undefined</code> widget will be removed completely from queue.\nNormally only used during interims disposes of one or a few widgets.</p>","!type":"fn(widget: +qx.ui.core.Widget, job?: string)"}}},"scroll":{"AbstractScrollArea":{"!proto":"qx.ui.core.Widget","!doc":"<p>The ScrollArea provides a container widget with on demand scroll bars\nif the content size exceeds the size of the container.</p>","!type":"fn()","prototype":{"_computeScrollbars":{"!doc":"<p>Computes the visibility state for scrollbars.</p>","!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onChangeScrollbarXVisibility":{"!doc":"<p>Event handler for visibility changes of horizontal scrollbar.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onChangeScrollbarYVisibility":{"!doc":"<p>Event handler for visibility changes of horizontal scrollbar.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onScrollAnimationEnd":{"!doc":"<p>Event handler for the scroll animation end event for both scroll bars.</p>","!type":"fn(direction: string)"},"_onScrollBarX":{"!doc":"<p>Event handler for the scroll event of the horizontal scrollbar</p>","!type":"fn(e: +qx.event.type.Data)"},"_onScrollBarY":{"!doc":"<p>Event handler for the scroll event of the vertical scrollbar</p>","!type":"fn(e: +qx.event.type.Data)"},"_onScrollPaneX":{"!doc":"<p>Event handler for the horizontal scroll event of the pane</p>","!type":"fn(e: +qx.event.type.Data)"},"_onScrollPaneY":{"!doc":"<p>Event handler for the vertical scroll event of the pane</p>","!type":"fn(e: +qx.event.type.Data)"},"getItemBottom":{"!doc":"<p>Returns the top offset of the end of the given item in relation to the\ninner height of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemLeft":{"!doc":"<p>Returns the left offset of the given item in relation to the\ninner width of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemRight":{"!doc":"<p>Returns the left offset of the end of the given item in relation to the\ninner width of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemTop":{"!doc":"<p>Returns the top offset of the given item in relation to the\ninner height of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getPaneSize":{"!doc":"<p>Returns the boundaries of the pane.</p>","!type":"fn() -> +Map"},"getScrollbarX":{"!doc":"<p>Returns the (computed) value of the property <code>scrollbarX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn() -> Object"},"getScrollbarY":{"!doc":"<p>Returns the (computed) value of the property <code>scrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn() -> Object"},"getScrollX":{"!doc":"<p>Returns the scroll left position of the content</p>","!type":"fn() -> +Integer"},"getScrollY":{"!doc":"<p>Returns the scroll top position of the content</p>","!type":"fn() -> +Integer"},"initScrollbarX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollbarX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn(value: Object) -> Object"},"initScrollbarY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollbarY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn(value: Object) -> Object"},"resetScrollbar":{"!doc":"<p>Resets the user value of the property <code>scrollbar</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn()"},"resetScrollbarX":{"!doc":"<p>Resets the user value of the property <code>scrollbarX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn()"},"resetScrollbarY":{"!doc":"<p>Resets the user value of the property <code>scrollbarY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn()"},"scrollByX":{"!doc":"<p>Scrolls the element&#8217;s content by the given left offset</p>","!type":"fn(value: +Integer, duration?: number)"},"scrollByY":{"!doc":"<p>Scrolls the element&#8217;s content by the given top offset</p>","!type":"fn(value: +Integer, duration?: number)"},"scrollToX":{"!doc":"<p>Scrolls the element&#8217;s content to the given left coordinate</p>","!type":"fn(value: +Integer, duration?: number)"},"scrollToY":{"!doc":"<p>Scrolls the element&#8217;s content to the given top coordinate</p>","!type":"fn(value: +Integer, duration?: number)"},"setScrollbar":{"!doc":"<p>Sets the values of the property group <code>scrollbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn(scrollbarX: Object, scrollbarY: Object)"},"setScrollbarX":{"!doc":"<p>Sets the user value of the property <code>scrollbarX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn(value: Object) -> Object"},"setScrollbarY":{"!doc":"<p>Sets the user value of the property <code>scrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn(value: Object) -> Object"},"stopScrollAnimationX":{"!doc":"<p>In case a scroll animation is currently running in X direction,\nit will be stopped. If not, the method does nothing.</p>","!type":"fn()"},"stopScrollAnimationY":{"!doc":"<p>In case a scroll animation is currently running in X direction,\nit will be stopped. If not, the method does nothing.</p>","!type":"fn()"}}},"IScrollBar":{"!doc":"<p>All widget used as scrollbars must implement this interface.</p>","prototype":{"getKnobFactor":{"!doc":"<p>Returns the (computed) value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn() -> Object"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getPosition":{"!doc":"<p>Returns the (computed) value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn() -> Object"},"initKnobFactor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>knobFactor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>position</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"resetKnobFactor":{"!doc":"<p>Resets the user value of the property <code>knobFactor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn()"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetPosition":{"!doc":"<p>Resets the user value of the property <code>position</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn()"},"scrollBy":{"!doc":"<p>Scrolls by the given offset.</p>\n\n<p>This method automatically corrects the given position to respect\nthe {@link #maximum}.</p>","!type":"fn(offset: +Integer, duration: number)"},"scrollBySteps":{"!doc":"<p>Scrolls by the given number of steps.</p>\n\n<p>This method automatically corrects the given position to respect\nthe {@link #maximum}.</p>","!type":"fn(steps: +Integer, duration: number)"},"scrollTo":{"!doc":"<p>Scrolls to the given position.</p>\n\n<p>This method automatically corrects the given position to respect\nthe {@link #maximum}.</p>","!type":"fn(position: +Integer, duration: number)"},"setKnobFactor":{"!doc":"<p>Sets the user value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setPosition":{"!doc":"<p>Sets the user value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"}}},"MRoll":{"!doc":"<p>Mixin holding the handler for roll event. Please\nkeep in mind that the including widget has to have the scroll bars\nimplemented as child controls named <code>scrollbar-x</code> and\n<code>scrollbar-y</code> to get the handler working. Also, you have to\nattach the listener yourself.</p>","prototype":{"_addRollHandling":{"!doc":"<p>Responsible for adding the event listener needed for scroll handling.</p>","!type":"fn()"},"_onPointerDownForRoll":{"!doc":"<p>Handler for the pointerdown event which simply stops the momentum scrolling.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onRoll":{"!doc":"<p>Roll event handler</p>","!type":"fn(e: +qx.event.type.Roll)"},"_removeRollHandling":{"!doc":"<p>Responsible for removing the event listener needed for scroll handling.</p>","!type":"fn()"}}},"MScrollBarFactory":{"!doc":"<p>Include this widget if you want to create scrollbars depending on the global\n&#8220;qx.nativeScrollBars&#8221; setting.</p>","prototype":{"_createScrollBar":{"!doc":"<p>Creates a new scrollbar. This can either be a styled qooxdoo scrollbar\nor a native browser scrollbar.</p>","!type":"fn(orientation?: string) -> +qx.ui.core.scroll.IScrollBar"}}},"MWheelHandling":{"!doc":"<p>Mixin holding the handler for the two axis mouse wheel scrolling. Please\nkeep in mind that the including widget has to have the scroll bars\nimplemented as child controls named <code>scrollbar-x</code> and\n<code>scrollbar-y</code> to get the handler working. Also, you have to\nattach the listener yourself.</p>","prototype":{"_onMouseWheel":{"!doc":"<p>Mouse wheel event handler</p>","!type":"fn(e: +qx.event.type.Mouse)"}}},"NativeScrollBar":{"!proto":"qx.ui.core.Widget","!doc":"<p>The scroll bar widget wraps the native browser scroll bars as a qooxdoo widget.\nIt can be uses instead of the styled qooxdoo scroll bars.</p>\n\n<p>Scroll bars are used by the {@link qx.ui.container.Scroll} container. Usually\na scroll bar is not used directly.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var scrollBar = new qx.ui.core.scroll.NativeScrollBar(\"horizontal\");\n  scrollBar.set({\n    maximum: 500\n  })\n  this.getRoot().add(scrollBar);\n</pre>\n\n<p>This example creates a horizontal scroll bar with a maximum value of 500.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/scrollbar.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyMaximum":{"!doc":"<p>Applies changes of the property value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: +PositiveInteger, old: +PositiveInteger)"},"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object, old: Object)"},"_applyPosition":{"!doc":"<p>Applies changes of the property value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: number, old: number)"},"_getContentHint":{"!type":"fn()"},"_getScrollPaneElement":{"!doc":"<p>Get the scroll pane html element.</p>","!type":"fn() -> +qx.html.Element"},"_onAppear":{"!doc":"<p>Listener for appear which ensured the scroll bar is positioned right\non appear.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onScroll":{"!doc":"<p>Scroll event handler</p>","!type":"fn(e: +qx.event.type.Event)"},"_stopPropagation":{"!doc":"<p>Stops propagation on the given even</p>","!type":"fn(e: +qx.event.type.Event)"},"_updateScrollBar":{"!doc":"<p>Update the scroll bar according to its current size, max value and\nenabled state.</p>","!type":"fn()"},"getKnobFactor":{"!doc":"<p>Returns the (computed) value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn() -> Object"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getPosition":{"!doc":"<p>Returns the (computed) value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn() -> Object"},"getSingleStep":{"!doc":"<p>Returns the (computed) value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn() -> Object"},"initKnobFactor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>knobFactor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>position</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"initSingleStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>singleStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"resetKnobFactor":{"!doc":"<p>Resets the user value of the property <code>knobFactor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn()"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetPosition":{"!doc":"<p>Resets the user value of the property <code>position</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn()"},"resetSingleStep":{"!doc":"<p>Resets the user value of the property <code>singleStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn()"},"scrollBy":{"!type":"fn(offset: +undefined, duration: +undefined)"},"scrollBySteps":{"!type":"fn(steps: +undefined, duration: +undefined)"},"scrollTo":{"!type":"fn(position: +undefined, duration: +undefined)"},"setKnobFactor":{"!doc":"<p>Sets the user value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setPosition":{"!doc":"<p>Sets the user value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"setSingleStep":{"!doc":"<p>Sets the user value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"stopScrollAnimation":{"!doc":"<p>If a scroll animation is running, it will be stopped.</p>","!type":"fn()"},"updatePosition":{"!doc":"<p>Helper to set the new position taking care of min and max values.</p>","!type":"fn(position: number)"}}},"ScrollBar":{"!proto":"qx.ui.core.Widget","!doc":"<p>The scroll bar widget, is a special slider, which is used in qooxdoo instead\nof the native browser scroll bars.</p>\n\n<p>Scroll bars are used by the {@link qx.ui.container.Scroll} container. Usually\na scroll bar is not used directly.</p>","!type":"fn()","prototype":{"_applyKnobFactor":{"!doc":"<p>Applies changes of the property value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: +PositiveNumber, old: +PositiveNumber)"},"_applyMaximum":{"!doc":"<p>Applies changes of the property value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: +PositiveInteger, old: +PositiveInteger)"},"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object, old: Object)"},"_applyPageStep":{"!doc":"<p>Applies changes of the property value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyPosition":{"!doc":"<p>Applies changes of the property value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object, old: Object)"},"_computeSizeHint":{"!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onChangeSliderValue":{"!doc":"<p>Change listener for slider value changes.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onExecuteBegin":{"!doc":"<p>Executed when the up/left button is executed (pressed)</p>","!type":"fn(e: +qx.event.type.Event)"},"_onExecuteEnd":{"!doc":"<p>Executed when the down/right button is executed (pressed)</p>","!type":"fn(e: +qx.event.type.Event)"},"_onResizeSlider":{"!doc":"<p>Hide the knob of the slider if the slidebar is too small or show it\notherwise.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onSlideAnimationEnd":{"!doc":"<p>Change listener for slider animation end.</p>","!type":"fn()"},"getKnobFactor":{"!doc":"<p>Returns the (computed) value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn() -> Object"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getPageStep":{"!doc":"<p>Returns the (computed) value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn() -> Object"},"getPosition":{"!doc":"<p>Returns the (computed) value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn() -> Object"},"getSingleStep":{"!doc":"<p>Returns the (computed) value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn() -> Object"},"initKnobFactor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>knobFactor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initPageStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>pageStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: Object) -> Object"},"initPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>position</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"initSingleStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>singleStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"resetKnobFactor":{"!doc":"<p>Resets the user value of the property <code>knobFactor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn()"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetPageStep":{"!doc":"<p>Resets the user value of the property <code>pageStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn()"},"resetPosition":{"!doc":"<p>Resets the user value of the property <code>position</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn()"},"resetSingleStep":{"!doc":"<p>Resets the user value of the property <code>singleStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn()"},"scrollBy":{"!doc":"<p>Scrolls by the given offset.</p>\n\n<p>This method automatically corrects the given position to respect\nthe {@link #maximum}.</p>","!type":"fn(offset: +Integer, duration: number)"},"scrollBySteps":{"!doc":"<p>Scrolls by the given number of steps.</p>\n\n<p>This method automatically corrects the given position to respect\nthe {@link #maximum}.</p>","!type":"fn(steps: +Integer, duration: number)"},"scrollTo":{"!doc":"<p>Scrolls to the given position.</p>\n\n<p>This method automatically corrects the given position to respect\nthe {@link #maximum}.</p>","!type":"fn(position: +Integer, duration: number)"},"setKnobFactor":{"!doc":"<p>Sets the user value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setPageStep":{"!doc":"<p>Sets the user value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: Object) -> Object"},"setPosition":{"!doc":"<p>Sets the user value of the property <code>position</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #position}.</p>","!type":"fn(value: Object) -> Object"},"setSingleStep":{"!doc":"<p>Sets the user value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"stopScrollAnimation":{"!doc":"<p>If a scroll animation is running, it will be stopped.</p>","!type":"fn()"},"updatePosition":{"!doc":"<p>Updates the position property considering the minimum and maximum values.</p>","!type":"fn(position: number)"}}},"ScrollPane":{"!proto":"qx.ui.core.Widget","!doc":"<p>This class represents a scroll able pane. This means that this widget\nmay contain content which is bigger than the available (inner)\ndimensions of this widget. The widget also offer methods to control\nthe scrolling position. It can only have exactly one child.</p>","!type":"fn()","prototype":{"_applyScrollX":{"!doc":"<p>Applies changes of the property value of the property <code>scrollX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollX}.</p>","!type":"fn(value: Object, old: Object)"},"_applyScrollY":{"!doc":"<p>Applies changes of the property value of the property <code>scrollY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollY}.</p>","!type":"fn(value: Object, old: Object)"},"_onAppear":{"!doc":"<p>Event listener for appear event of content</p>","!type":"fn(e: +qx.event.type.Event)"},"_onScroll":{"!doc":"<p>Event listener for scroll event of content</p>","!type":"fn(e: +qx.event.type.Event)"},"_onUpdate":{"!doc":"<p>Event listener for resize event of content and container</p>","!type":"fn(e: +Event)"},"add":{"!doc":"<p>Configures the content of the scroll pane. Replaces any existing child\nwith the newly given one.</p>","!type":"fn(widget?: +qx.ui.core.Widget)"},"getChildren":{"!doc":"<p>Returns an array containing the current content.</p>","!type":"fn() -> Object"},"getItemBottom":{"!doc":"<p>Returns the top offset of the end of the given item in relation to the\ninner height of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemLeft":{"!doc":"<p>Returns the left offset of the given item in relation to the\ninner width of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemRight":{"!doc":"<p>Returns the left offset of the end of the given item in relation to the\ninner width of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemTop":{"!doc":"<p>Returns the top offset of the given item in relation to the\ninner height of this widget.</p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getScrollMaxX":{"!doc":"<p>The maximum horizontal scroll position.</p>","!type":"fn() -> +Integer"},"getScrollMaxY":{"!doc":"<p>The maximum vertical scroll position.</p>","!type":"fn() -> +Integer"},"getScrollSize":{"!doc":"<p>The size (identical with the preferred size) of the content.</p>","!type":"fn() -> +Map"},"getScrollX":{"!doc":"<p>Returns the (computed) value of the property <code>scrollX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollX}.</p>","!type":"fn() -> Object"},"getScrollY":{"!doc":"<p>Returns the (computed) value of the property <code>scrollY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollY}.</p>","!type":"fn() -> Object"},"initScrollX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollX}.</p>","!type":"fn(value: Object) -> Object"},"initScrollY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollY}.</p>","!type":"fn(value: Object) -> Object"},"remove":{"!doc":"<p>Removes the given widget from the content. The pane is empty\nafterwards as only one child is supported by the pane.</p>","!type":"fn(widget?: +qx.ui.core.Widget)"},"resetScrollX":{"!doc":"<p>Resets the user value of the property <code>scrollX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollX}.</p>","!type":"fn()"},"resetScrollY":{"!doc":"<p>Resets the user value of the property <code>scrollY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollY}.</p>","!type":"fn()"},"scrollByX":{"!doc":"<p>Scrolls the element&#8217;s content horizontally by the given amount.</p>","!type":"fn(x?: +Integer, duration?: number)"},"scrollByY":{"!doc":"<p>Scrolls the element&#8217;s content vertically by the given amount.</p>","!type":"fn(y?: +Integer, duration?: number)"},"scrollToX":{"!doc":"<p>Scrolls the element&#8217;s content to the given left coordinate</p>","!type":"fn(value: +Integer, duration?: number)"},"scrollToY":{"!doc":"<p>Scrolls the element&#8217;s content to the given top coordinate</p>","!type":"fn(value: +Integer, duration?: number)"},"setScrollX":{"!doc":"<p>Sets the user value of the property <code>scrollX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollX}.</p>","!type":"fn(value: Object) -> Object"},"setScrollY":{"!doc":"<p>Sets the user value of the property <code>scrollY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollY}.</p>","!type":"fn(value: Object) -> Object"},"stopScrollAnimation":{"!doc":"<p>If an scroll animation is running, it will be stopped with that method.</p>","!type":"fn()"}}},"ScrollSlider":{"!proto":"qx.ui.form.Slider","!doc":"<p>Minimal modified version of the {@link qx.ui.form.Slider} to be\nused by {@link qx.ui.core.scroll.ScrollBar}.</p>","!type":"fn()","prototype":{"getSizeHint":{"!type":"fn(compute: +undefined)"}}}},"selection":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Generic selection manager to bring rich desktop like selection behavior\nto widgets and low-level interactive controls.</p>\n\n<p>The selection handling supports both Shift and Ctrl/Meta modifies like\nknown from native applications.</p>","!type":"fn()","prototype":{"__rangeToMap":{"!doc":"<p>Internal method to convert a range to a map of hash\ncodes for faster lookup during selection compare routines.</p>","!type":"fn(range: +Array)"},"_addToSelection":{"!doc":"<p>Adds an item to the current selection.</p>","!type":"fn(item: Object)"},"_applyDefaultSelection":{"!doc":"<p>Applies the default selection. The default item is the first item.</p>","!type":"fn(force: bool) -> Object"},"_applyMode":{"!doc":"<p>Applies changes of the property value of the property <code>mode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mode}.</p>","!type":"fn(value: Object, old: Object)"},"_autoSelect":{"!doc":"<p>Automatically selects items based on the pointer movement during a drag selection</p>","!type":"fn()"},"_capture":{"!doc":"<p>Enables capturing of the container.</p>","!type":"fn()"},"_cleanup":{"!doc":"<p>Stops all timers, release capture etc. to cleanup drag selection</p>","!type":"fn()"},"_clearSelection":{"!doc":"<p>Clears current selection</p>","!type":"fn()"},"_deselectItemRange":{"!doc":"<p>Deselect all items between <code>item1</code> and <code>item2</code>.</p>","!type":"fn(item1: Object, item2: Object)"},"_fireChange":{"!doc":"<p>Fires the selection change event if the selection has\nbeen modified.</p>","!type":"fn(context: string)"},"_getAnchorItem":{"!doc":"<p>Returns the current anchor item. This is the item which is the starting\npoint for all range selections. Normally this is the item which was\ntapped on the last time without any modifier keys pressed.</p>","!type":"fn() -> Object"},"_getDimension":{"!doc":"<p>Returns the dimension of the container (available scrolling space).</p>","!type":"fn() -> +Map"},"_getFirstSelectable":{"!doc":"<p>Returns the first selectable item.</p>","!type":"fn() -> Object"},"_getLastSelectable":{"!doc":"<p>Returns the last selectable item.</p>","!type":"fn() -> Object"},"_getLocation":{"!doc":"<p>Returns the location of the container</p>","!type":"fn() -> +Map"},"_getPage":{"!doc":"<p>Returns the item which should be selected on pageUp/pageDown.</p>\n\n<p>May also scroll to the needed position.</p>","!type":"fn(lead: Object, up?: bool)"},"_getRelatedSelectable":{"!doc":"<p>Returns a selectable item which is related to the given\n<code>item</code> through the value of <code>relation</code>.</p>","!type":"fn(item: Object, relation: string) -> Object"},"_getScroll":{"!doc":"<p>Returns the scroll position of the container.</p>","!type":"fn() -> +Map"},"_getSelectableFromPointerEvent":{"!doc":"<p>Finds the selectable instance from a pointer event</p>","!type":"fn(event: +qx.event.type.Pointer) -> Object"},"_getSelectableLocationX":{"!doc":"<p>Returns the relative (to the container) horizontal location of the given item.</p>","!type":"fn(item: Object) -> +Map"},"_getSelectableLocationY":{"!doc":"<p>Returns the relative (to the container) horizontal location of the given item.</p>","!type":"fn(item: Object) -> +Map"},"_getSelectableRange":{"!doc":"<p>Returns all selectable items between the two given items.</p>\n\n<p>The items could be given in any order.</p>","!type":"fn(item1: Object, item2: Object) -> +Array"},"_getSelectedItem":{"!doc":"<p>Returns the first selected item. Only makes sense\nwhen using manager in single selection mode.</p>","!type":"fn() -> Object"},"_isSelectable":{"!doc":"<p>Whether the given item is selectable.</p>","!type":"fn(item: Object) -> bool"},"_onInterval":{"!doc":"<p>Event listener for timer used by drag selection</p>","!type":"fn(e: +qx.event.type.Event)"},"_releaseCapture":{"!doc":"<p>Releases capturing of the container</p>","!type":"fn()"},"_removeFromSelection":{"!doc":"<p>Removes the given item from the current selection.</p>","!type":"fn(item: Object)"},"_replaceMultiSelection":{"!doc":"<p>Replaces current selection with items from given array.</p>","!type":"fn(items: +Array)"},"_scrollBy":{"!doc":"<p>Scrolls by the given offset</p>","!type":"fn(xoff: +Integer, yoff: +Integer)"},"_scrollItemIntoView":{"!doc":"<p>Scrolls the given item into the view (make it visible)</p>","!type":"fn(item: Object)"},"_selectableToHashCode":{"!doc":"<p>Returns an unique hashcode for the given item.</p>","!type":"fn(item: Object) -> string"},"_selectAllItems":{"!doc":"<p>Adds all items to the selection</p>","!type":"fn()"},"_selectItemRange":{"!doc":"<p>Select a range from <code>item1</code> to <code>item2</code>.</p>","!type":"fn(item1: Object, item2: Object, extend?: bool)"},"_setAnchorItem":{"!doc":"<p>Sets the anchor item. This is the item which is the starting\npoint for all range selections. Normally this is the item which was\ntapped on the last time without any modifier keys pressed.</p>","!type":"fn(value: Object)"},"_setLeadItem":{"!doc":"<p>Sets the lead item. Generally the item which was last modified\nby the user (tapped on etc.)</p>","!type":"fn(value: Object)"},"_setSelectedItem":{"!doc":"<p>Replace current selection with given item.</p>","!type":"fn(item: Object)"},"_styleSelectable":{"!doc":"<p>Updates the style (appearance) of the given item.</p>","!type":"fn(item: Object, type: string, enabled: bool)"},"_toggleInSelection":{"!doc":"<p>Toggles the item e.g. remove it when already selected\nor select it when currently not.</p>","!type":"fn(item: Object)"},"addItem":{"!doc":"<p>Adds the given item to the existing selection.</p>\n\n<p>Use {@link #selectItem} instead if you want to replace\nthe current selection.</p>","!type":"fn(item: Object)"},"clearSelection":{"!doc":"<p>Clears the whole selection at once. Also\nresets the lead and anchor items and their\nstyles.</p>","!type":"fn()"},"getDrag":{"!doc":"<p>Returns the (computed) value of the property <code>drag</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #drag}.</p>","!type":"fn() -> Object"},"getLeadItem":{"!doc":"<p>Returns the current lead item. Generally the item which was last modified\nby the user (tapped on etc.)</p>","!type":"fn() -> Object"},"getMode":{"!doc":"<p>Returns the (computed) value of the property <code>mode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mode}.</p>","!type":"fn() -> Object"},"getQuick":{"!doc":"<p>Returns the (computed) value of the property <code>quick</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quick}.</p>","!type":"fn() -> Object"},"getSelectables":{"!doc":"<p>Returns all selectable items of the container.</p>","!type":"fn(all: bool) -> +Array"},"getSelectedItem":{"!doc":"<p>Get the selected item. This method does only work in <code>single</code>\nselection mode.</p>","!type":"fn() -> Object"},"getSelection":{"!doc":"<p>Returns an array of currently selected items.</p>\n\n<p>Note: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added.</p>","!type":"fn() -> Object"},"getSelectionContext":{"!doc":"<p>Returns the selection context. One of <code>tap</code>,\n<code>quick</code>, <code>drag</code> or <code>key</code> or\n<code>null</code>.</p>","!type":"fn() -> string"},"getSortedSelection":{"!doc":"<p>Returns the selection sorted by the index in the\ncontainer of the selection (the assigned widget)</p>","!type":"fn() -> Object"},"handleAddItem":{"!doc":"<p>This method should be connected to the <code>addItem</code> event\nof the managed object.</p>","!type":"fn(e: +qx.event.type.Data)"},"handleKeyPress":{"!doc":"<p>This method should be connected to the <code>keypress</code> event\nof the managed object.</p>","!type":"fn(event: +qx.event.type.KeySequence)"},"handleLoseCapture":{"!doc":"<p>This method should be connected to the <code>losecapture</code> event\nof the managed object.</p>","!type":"fn(event: +qx.event.type.Pointer)"},"handlePointerDown":{"!doc":"<p>This method should be connected to the <code>pointerdown</code> event\nof the managed object.</p>","!type":"fn(event: +qx.event.type.Pointer)"},"handlePointerMove":{"!doc":"<p>This method should be connected to the <code>pointermove</code> event\nof the managed object.</p>","!type":"fn(event: +qx.event.type.Pointer)"},"handlePointerOver":{"!doc":"<p>This method should be connected to the <code>pointerover</code> event\nof the managed object.</p>","!type":"fn(event: +qx.event.type.Pointer)"},"handleRemoveItem":{"!doc":"<p>This method should be connected to the <code>removeItem</code> event\nof the managed object.</p>","!type":"fn(e: +qx.event.type.Data)"},"handleTap":{"!doc":"<p>This method should be connected to the <code>tap</code> event\nof the managed object.</p>","!type":"fn(event: +qx.event.type.Tap)"},"initDrag":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>drag</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #drag}.</p>","!type":"fn(value: Object) -> Object"},"initMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>mode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #mode}.</p>","!type":"fn(value: Object) -> Object"},"initQuick":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>quick</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #quick}.</p>","!type":"fn(value: Object) -> Object"},"invertSelection":{"!doc":"<p>Invert the selection. Select the non selected and deselect the selected.</p>","!type":"fn()"},"isDrag":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>drag</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #drag}.</p>","!type":"fn() -> bool"},"isItemSelected":{"!doc":"<p>Detects whether the given item is currently selected.</p>","!type":"fn(item: Object) -> bool"},"isQuick":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>quick</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quick}.</p>","!type":"fn() -> bool"},"isSelectionEmpty":{"!doc":"<p>Whether the selection is empty</p>","!type":"fn() -> bool"},"removeItem":{"!doc":"<p>Removes the given item from the selection.</p>\n\n<p>Use {@link #clearSelection} when you want to clear\nthe whole selection at once.</p>","!type":"fn(item: Object)"},"replaceSelection":{"!doc":"<p>Replaces current selection with given array of items.</p>\n\n<p>Please note that in single selection scenarios it is more\nefficient to directly use {@link #selectItem}.</p>","!type":"fn(items: +Array)"},"resetDrag":{"!doc":"<p>Resets the user value of the property <code>drag</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #drag}.</p>","!type":"fn()"},"resetMode":{"!doc":"<p>Resets the user value of the property <code>mode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #mode}.</p>","!type":"fn()"},"resetQuick":{"!doc":"<p>Resets the user value of the property <code>quick</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #quick}.</p>","!type":"fn()"},"selectAll":{"!doc":"<p>Selects all items of the managed object.</p>","!type":"fn()"},"selectItem":{"!doc":"<p>Selects the given item. Replaces current selection\ncompletely with the new item.</p>\n\n<p>Use {@link #addItem} instead if you want to add new\nitems to an existing selection.</p>","!type":"fn(item: Object)"},"selectItemRange":{"!doc":"<p>Selects an item range between two given items.</p>","!type":"fn(begin: Object, end: Object)"},"setDrag":{"!doc":"<p>Sets the user value of the property <code>drag</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #drag}.</p>","!type":"fn(value: Object) -> Object"},"setMode":{"!doc":"<p>Sets the user value of the property <code>mode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mode}.</p>","!type":"fn(value: Object) -> Object"},"setQuick":{"!doc":"<p>Sets the user value of the property <code>quick</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quick}.</p>","!type":"fn(value: Object) -> Object"},"toggleDrag":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>drag</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #drag}.</p>","!type":"fn() -> bool"},"toggleQuick":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>quick</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quick}.</p>","!type":"fn() -> bool"}}},"ScrollArea":{"!proto":"qx.ui.core.selection.Widget","!doc":"<p>A selection manager, which handles the selection in widgets extending\n{@link qx.ui.core.scroll.AbstractScrollArea}.</p>","prototype":{"_getDimension":{"!type":"fn()"},"_getPage":{"!type":"fn(lead: +undefined, up: +undefined)"},"_getScroll":{"!type":"fn()"},"_isSelectable":{"!type":"fn(item: +undefined)"},"_scrollBy":{"!type":"fn(xoff: +undefined, yoff: +undefined)"}}},"Widget":{"!proto":"qx.ui.core.selection.Abstract","!doc":"<p>A selection manager, which handles the selection in widgets.</p>","!type":"fn()","prototype":{"_capture":{"!type":"fn()"},"_getDimension":{"!type":"fn()"},"_getFirstSelectable":{"!type":"fn()"},"_getLastSelectable":{"!type":"fn()"},"_getLocation":{"!type":"fn()"},"_getPage":{"!type":"fn(lead: +undefined, up: +undefined)"},"_getRelatedSelectable":{"!type":"fn(item: +undefined, relation: +undefined)"},"_getScroll":{"!type":"fn()"},"_getSelectableLocationX":{"!type":"fn(item: +undefined)"},"_getSelectableLocationY":{"!type":"fn(item: +undefined)"},"_getSelectableRange":{"!type":"fn(item1: +undefined, item2: +undefined)"},"_getWidget":{"!doc":"<p>Returns the connected widget.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_isItemSelectable":{"!doc":"<p>Helper to return the selectability of the item concerning the\nuser interaaction.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"_isSelectable":{"!type":"fn(item: +undefined)"},"_releaseCapture":{"!type":"fn()"},"_scrollBy":{"!type":"fn(xoff: +undefined, yoff: +undefined)"},"_scrollItemIntoView":{"!type":"fn(item: +undefined)"},"_selectableToHashCode":{"!type":"fn(item: +undefined)"},"_styleSelectable":{"!type":"fn(item: +undefined, type: +undefined, enabled: +undefined)"},"getSelectables":{"!type":"fn(all: +undefined)"}}}},"SingleSelectionManager":{"!proto":"qx.core.Object","!doc":"<p>Responsible for the single selection management.</p>\n\n<p>The class manage a list of {@link qx.ui.core.Widget} which are returned from\n{@link qx.ui.core.ISingleSelectionProvider#getItems}.</p>","!type":"fn()","prototype":{"__applyAllowEmptySelection":{"!doc":"<p>Applies changes of the property value of the property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn(value: bool, old: bool)"},"__isChildElement":{"!doc":"<p>Checks if passed element is a child element.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"__setSelected":{"!doc":"<p>Set selected element.</p>\n\n<p>If passes value is <code>null</code>, the selection will be reseted.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"getAllowEmptySelection":{"!doc":"<p>Returns the (computed) value of the property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn() -> Object"},"getSelectables":{"!doc":"<p>Returns all elements which are selectable.</p>","!type":"fn(all: bool) -> +qx.ui.core.Widget"},"getSelected":{"!doc":"<p>Returns the current selected element.</p>","!type":"fn() -> +qx.ui.core.Widget"},"initAllowEmptySelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowEmptySelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn(value: Object) -> Object"},"isAllowEmptySelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowEmptySelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn() -> bool"},"isSelected":{"!doc":"<p>Return <code>true</code> if the passed element is selected.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"isSelectionEmpty":{"!doc":"<p>Returns <code>true</code> if selection is empty.</p>","!type":"fn() -> bool"},"resetAllowEmptySelection":{"!doc":"<p>Resets the user value of the property <code>allowEmptySelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn()"},"resetSelected":{"!doc":"<p>Reset the current selection. If {@link #allowEmptySelection} is set to\n<code>true</code> the first element will be selected.</p>","!type":"fn()"},"setAllowEmptySelection":{"!doc":"<p>Sets the user value of the property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn(value: Object) -> Object"},"setSelected":{"!doc":"<p>Selects the passed element.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"toggleAllowEmptySelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn() -> bool"}}},"Spacer":{"!proto":"qx.ui.core.LayoutItem","!doc":"<p>A Spacer is a &#8220;virtual&#8221; widget, which can be placed into any layout and takes\nthe space a normal widget of the same size would take.</p>\n\n<p>Spacers are invisible and very light weight because they don&#8217;t require any\n<span class=\"caps\">DOM</span> modifications.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var container = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n  container.add(new qx.ui.core.Widget());\n  container.add(new qx.ui.core.Spacer(50));\n  container.add(new qx.ui.core.Widget());\n</pre>\n\n<p>This example places two widgets and a spacer into a container with a\nhorizontal box layout. In this scenario the spacer creates an empty area of\n50 pixel width between the two widgets.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/spacer.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"addChildrenToQueue":{"!doc":"<p>Recursively adds all children to the given queue</p>","!type":"fn(queue: +Map)"},"checkAppearanceNeeds":{"!doc":"<p>Helper method called from the visibility queue to detect outstanding changes\nto the appearance.</p>","!type":"fn()"},"destroy":{"!doc":"<p>Removes this widget from its parent and dispose it.</p>\n\n<p>Please note that the widget is not disposed synchronously. The\nreal dispose happens after the next queue flush.</p>","!type":"fn()"}}},"Widget":{"!proto":"qx.ui.core.LayoutItem","!doc":"<p>This is the base class for all widgets.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"__addHelper":{"!doc":"<p>Convenience function to add a child widget. It will insert the child to\nthe parent widget and schedule a layout update.</p>","!type":"fn(child: +LayoutItem, options: +Map)"},"__createContentElement":{"!doc":"<p>Create the widget&#8217;s content <span class=\"caps\">HTML</span> element.</p>","!type":"fn() -> +qx.html.Element"},"__removeHelper":{"!doc":"<p>Convenience function to remove a child widget. It will remove it\nfrom the parent widget and schedule a layout update.</p>","!type":"fn(child: +LayoutItem)"},"__updateContentPadding":{"!doc":"<p>Helper to updated the css padding of the content element considering the\npadding of the decorator.</p>","!type":"fn(style: string, value: number)"},"_add":{"!doc":"<p>Adds a new child widget.</p>\n\n<p>The supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}.</p>","!type":"fn(child: +LayoutItem, options?: +Map)"},"_addAfter":{"!doc":"<p>Add a widget after another already inserted widget</p>","!type":"fn(child: +LayoutItem, after: +LayoutItem, options?: +Map)"},"_addAt":{"!doc":"<p>Add a child widget at the specified index</p>","!type":"fn(child: +LayoutItem, index: +Integer, options?: +Map)"},"_addBefore":{"!doc":"<p>Add a widget before another already inserted widget</p>","!type":"fn(child: +LayoutItem, before: +LayoutItem, options?: +Map)"},"_afterAddChild":{"!doc":"<p>This method gets called each time after a child widget was added and can\nbe overridden to get notified about child adds.</p>","!type":"fn(child: +qx.ui.core.LayoutItem)"},"_afterRemoveChild":{"!doc":"<p>This method gets called each time after a child widget was removed and\ncan be overridden to get notified about child removes.</p>","!type":"fn(child: +qx.ui.core.LayoutItem)"},"_applyAppearance":{"!doc":"<p>Applies changes of the property value of the property <code>appearance</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn(value: string, old: string)"},"_applyBackgroundColor":{"!doc":"<p>Applies changes of the property value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyContextMenu":{"!doc":"<p>Applies changes of the property value of the property <code>contextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenu}.</p>","!type":"fn(value: +qx.ui.menu.Menu, old: +qx.ui.menu.Menu)"},"_applyCursor":{"!doc":"<p>Applies changes of the property value of the property <code>cursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn(value: string, old: string)"},"_applyDecorator":{"!doc":"<p>Applies changes of the property value of the property <code>decorator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decorator}.</p>","!type":"fn(value: +Decorator, old: +Decorator)"},"_applyDraggable":{"!doc":"<p>Applies changes of the property value of the property <code>draggable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyDroppable":{"!doc":"<p>Applies changes of the property value of the property <code>droppable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyFocusable":{"!doc":"<p>Applies changes of the property value of the property <code>focusable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyFont":{"!doc":"<p>Applies changes of the property value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: +Font, old: +Font)"},"_applyKeepActive":{"!doc":"<p>Applies changes of the property value of the property <code>keepActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn(value: bool, old: bool)"},"_applyKeepFocus":{"!doc":"<p>Applies changes of the property value of the property <code>keepFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn(value: bool, old: bool)"},"_applyNativeContextMenu":{"!doc":"<p>Applies changes of the property value of the property <code>nativeContextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn(value: bool, old: bool)"},"_applyOpacity":{"!doc":"<p>Applies changes of the property value of the property <code>opacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn(value: number, old: number)"},"_applyPadding":{"!doc":"<p>Applies changes of the property value of the properties <code>paddingBottom</code>, <code>paddingLeft</code>, <code>paddingRight</code> and <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #paddingBottom}, {@link #paddingLeft}, {@link #paddingRight} and {@link #paddingTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applySelectable":{"!doc":"<p>Applies changes of the property value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTabIndex":{"!doc":"<p>Applies changes of the property value of the property <code>tabIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tabIndex}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyTextColor":{"!doc":"<p>Applies changes of the property value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyToolTipText":{"!doc":"<p>Applies changes of the property value of the property <code>toolTipText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn(value: string, old: string)"},"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"},"_applyZIndex":{"!doc":"<p>Applies changes of the property value of the property <code>zIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #zIndex}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_computeSizeHint":{"!type":"fn()"},"_createChildControl":{"!doc":"<p>Force the creation of the given child control by ID.</p>\n\n<p>Do not override this method! Override {@link #_createChildControlImpl}\ninstead if you need to support new controls.</p>","!type":"fn(id: string) -> +qx.ui.core.Widget"},"_createChildControlImpl":{"!doc":"<p>Internal method to create child controls. This method\nshould be overwritten by classes which extends this one\nto support new child control types.</p>","!type":"fn(id: string, hash?: string) -> +qx.ui.core.Widget"},"_createContentElement":{"!doc":"<p>Creates the content element. The style properties\nposition and zIndex are modified from the Widget\ncore.</p>\n\n<p>This function may be overridden to customize a class\ncontent.</p>","!type":"fn() -> +qx.html.Element"},"_disposeChildControls":{"!doc":"<p>Dispose all registered controls. This is automatically\nexecuted by the widget.</p>","!type":"fn()"},"_excludeChildControl":{"!doc":"<p>Excludes the given child control by ID</p>","!type":"fn(id: string)"},"_findTopControl":{"!doc":"<p>Finds and returns the top level control. This is the first\nwidget which is not a child control of any other widget.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_getChildren":{"!doc":"<p>Returns the children list</p>","!type":"fn() -> +LayoutItem"},"_getContentHeightForWidth":{"!doc":"<p>Returns the computed height for the given width.</p>","!type":"fn(width: +Integer) -> +Integer"},"_getContentHint":{"!doc":"<p>Returns the recommended/natural dimensions of the widget&#8217;s content.</p>\n\n<p>For labels and images this may be their natural size when defined without\nany dimensions. For containers this may be the recommended size of the\nunderlying layout manager.</p>\n\n<p>Developer note: This can be overwritten by the derived classes to allow\na custom handling here.</p>","!type":"fn() -> +Map"},"_getCreatedChildControls":{"!doc":"<p>Returns a map of all already created child controls</p>","!type":"fn() -> +Map"},"_getDragDropCursor":{"!doc":"<p>Helper to return a instance of a {@link qx.ui.core.DragDropCursor}.\nIf you want to use your own DragDropCursor, override this method\nand return your custom instance.</p>","!type":"fn() -> +qx.ui.core.DragDropCursor"},"_getHeightForWidth":{"!type":"fn(width: +undefined)"},"_getLayout":{"!type":"fn()"},"_hasChildren":{"!doc":"<p>Whether the widget contains children.</p>","!type":"fn() -> bool"},"_indexOf":{"!doc":"<p>Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>.</p>","!type":"fn(child: +Widget) -> +Integer"},"_isChildControlVisible":{"!doc":"<p>Whether the given child control is visible.</p>","!type":"fn(id: string) -> bool"},"_onBeforeContextMenuOpen":{"!doc":"<p>Event listener for <code>beforeContextmenuOpen</code> event</p>","!type":"fn(e: +qx.event.type.Data)"},"_onChangeTheme":{"!type":"fn()"},"_onContextMenuOpen":{"!doc":"<p>Event listener for <code>contextmenu</code> event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onDrag":{"!doc":"<p>Event listener for own <code>drag</code> event.</p>","!type":"fn(e: +qx.event.type.Drag)"},"_onDragChange":{"!doc":"<p>Event listener for own <code>dragchange</code> event.</p>","!type":"fn(e: +qx.event.type.Drag)"},"_onDragEnd":{"!doc":"<p>Event listener for own <code>dragend</code> event.</p>","!type":"fn(e: +qx.event.type.Drag)"},"_onDragStart":{"!doc":"<p>Event listener for own <code>dragstart</code> event.</p>","!type":"fn(e: +qx.event.type.Drag)"},"_onStopEvent":{"!doc":"<p>Event listener which stops a bubbling event from\npropagates further.</p>","!type":"fn(e: +qx.event.type.Event)"},"_releaseChildControl":{"!doc":"<p>Release the child control by ID and decouple the\nchild from the parent. This method does not dispose the child control.</p>","!type":"fn(id: string) -> +qx.ui.core.Widget"},"_remove":{"!doc":"<p>Remove the given child widget.</p>","!type":"fn(child: +LayoutItem)"},"_removeAll":{"!doc":"<p>Remove all children.</p>","!type":"fn() -> +Array"},"_removeAt":{"!doc":"<p>Remove the widget at the specified index.</p>","!type":"fn(index: +Integer) -> +qx.ui.core.LayoutItem"},"_setLayout":{"!doc":"<p>Set a layout manager for the widget. A a layout manager can only be connected\nwith one widget. Reset the connection with a previous widget first, if you\nlike to use it in another widget instead.</p>","!type":"fn(layout: +qx.ui.layout.Abstract)"},"_showChildControl":{"!doc":"<p>Shows the given child control by ID</p>","!type":"fn(id: string) -> +qx.ui.core.Widget"},"activate":{"!doc":"<p>Activate this widget e.g. for keyboard events.</p>","!type":"fn()"},"addChildrenToQueue":{"!doc":"<p>Recursively adds all children to the given queue</p>","!type":"fn(queue: +Array)"},"addState":{"!doc":"<p>Sets a state.</p>","!type":"fn(state: string)"},"blur":{"!doc":"<p>Remove focus from this widget.</p>","!type":"fn()"},"capture":{"!doc":"<p>Enables pointer event capturing. All pointer events will dispatched on this\nwidget until capturing is disabled using {@link #releaseCapture} or a\npointer button is clicked. If the widgets becomes the capturing widget the\n{@link #capture} event is fired. Once it loses capture mode the\n{@link #losecapture} event is fired.</p>","!type":"fn(capture?: bool)"},"checkAppearanceNeeds":{"!doc":"<p>Helper method called from the visibility queue to detect outstanding changes\nto the appearance.</p>","!type":"fn()"},"clearSeparators":{"!type":"fn()"},"clone":{"!type":"fn()"},"deactivate":{"!doc":"<p>Deactivate this widget e.g. for keyboard events.</p>","!type":"fn()"},"destroy":{"!doc":"<p>Removes this widget from its parent and disposes it.</p>\n\n<p>Please note that the widget is not disposed synchronously. The\nreal dispose happens after the next queue flush.</p>","!type":"fn()"},"exclude":{"!doc":"<p>Hide this widget and exclude it from the underlying layout.</p>","!type":"fn()"},"fadeIn":{"!doc":"<p>Fade in the widget.</p>","!type":"fn(duration: number) -> +qx.bom.element.AnimationHandle"},"fadeOut":{"!doc":"<p>Fade out this widget.</p>","!type":"fn(duration: number) -> +qx.bom.element.AnimationHandle"},"focus":{"!doc":"<p>Focus this widget.</p>","!type":"fn()"},"getAnonymous":{"!doc":"<p>Returns the (computed) value of the property <code>anonymous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn() -> Object"},"getAppearance":{"!doc":"<p>Returns the (computed) value of the property <code>appearance</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn() -> Object"},"getBackgroundColor":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn() -> Object"},"getBlockToolTip":{"!doc":"<p>Returns the (computed) value of the property <code>blockToolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockToolTip}.</p>","!type":"fn() -> Object"},"getChildControl":{"!doc":"<p>Returns the child control from the given ID. Returns\n<code>null</code> when the child control is unknown.</p>\n\n<p>It is designed for widget authors, who want to access child controls,\nwhich are created by the widget itself.</p>\n\n<b>Warning</b>: This method exposes widget internals and modifying the\nreturned sub widget may bring the widget into an inconsistent state.\nAccessing child controls defined in a super class or in an foreign class\nis not supported. Do not use it if the result can be achieved using public\nAPI or theming.","!type":"fn(id: string, notcreate?: bool) -> +qx.ui.core.Widget"},"getChildrenContainer":{"!doc":"<p>Returns the widget which contains the children and\nis relevant for laying them out. This is from the user point of\nview and may not be identical to the technical structure.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getContentElement":{"!doc":"<p>Returns the element wrapper of the widget&#8217;s content element.\nThis method exposes widget internal and must be used with caution!</p>","!type":"fn() -> +qx.html.Element"},"getContentLocation":{"!doc":"<p>Computes the location of the content element in context of the document\ndimensions.</p>\n\n<p>Supported modes:</p>\n\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element<br />\n  (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default,<br />\n  uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to<br />\n  border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute<br />\n  positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for<br />\n  static/relative positioned content).</li>\n</ul>","!type":"fn(mode?: string) -> +Map"},"getContextMenu":{"!doc":"<p>Returns the (computed) value of the property <code>contextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenu}.</p>","!type":"fn() -> Object"},"getCursor":{"!doc":"<p>Returns the (computed) value of the property <code>cursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn() -> Object"},"getDecorator":{"!doc":"<p>Returns the (computed) value of the property <code>decorator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decorator}.</p>","!type":"fn() -> Object"},"getDraggable":{"!doc":"<p>Returns the (computed) value of the property <code>draggable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn() -> Object"},"getDroppable":{"!doc":"<p>Returns the (computed) value of the property <code>droppable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn() -> Object"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getEventTarget":{"!doc":"<p>Returns the next event target in the parent chain. May\nalso return the widget itself if it is not anonymous.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getFocusable":{"!doc":"<p>Returns the (computed) value of the property <code>focusable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn() -> Object"},"getFocusElement":{"!doc":"<p>Returns the element which should be focused.</p>","!type":"fn() -> +qx.html.Element"},"getFocusTarget":{"!doc":"<p>Returns the next focus target in the parent chain. May\nalso return the widget itself if it is not anonymous and focusable.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getFont":{"!doc":"<p>Returns the (computed) value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn() -> Object"},"getInnerSize":{"!doc":"<p>Returns the widget&#8217;s computed inner size as available\nthrough the layout process.</p>\n\n<p>This function is guaranteed to return a correct value\nduring a {@link #resize} or {@link #move} event dispatch.</p>","!type":"fn() -> +Map"},"getInsets":{"!doc":"<p>Returns the sum of the widget&#8217;s padding and border width.</p>","!type":"fn() -> +Map"},"getKeepActive":{"!doc":"<p>Returns the (computed) value of the property <code>keepActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn() -> Object"},"getKeepFocus":{"!doc":"<p>Returns the (computed) value of the property <code>keepFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn() -> Object"},"getLayoutChildren":{"!doc":"<p>Returns all children, which are layout relevant. This excludes all widgets,\nwhich have a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getNativeContextMenu":{"!doc":"<p>Returns the (computed) value of the property <code>nativeContextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn() -> Object"},"getOpacity":{"!doc":"<p>Returns the (computed) value of the property <code>opacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn() -> Object"},"getPaddingBottom":{"!doc":"<p>Returns the (computed) value of the property <code>paddingBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn() -> Object"},"getPaddingLeft":{"!doc":"<p>Returns the (computed) value of the property <code>paddingLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn() -> Object"},"getPaddingRight":{"!doc":"<p>Returns the (computed) value of the property <code>paddingRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn() -> Object"},"getPaddingTop":{"!doc":"<p>Returns the (computed) value of the property <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn() -> Object"},"getSelectable":{"!doc":"<p>Returns the (computed) value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> Object"},"getTabIndex":{"!doc":"<p>Returns the (computed) value of the property <code>tabIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tabIndex}.</p>","!type":"fn() -> Object"},"getTextColor":{"!doc":"<p>Returns the (computed) value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn() -> Object"},"getToolTip":{"!doc":"<p>Returns the (computed) value of the property <code>toolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn() -> Object"},"getToolTipIcon":{"!doc":"<p>Returns the (computed) value of the property <code>toolTipIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipIcon}.</p>","!type":"fn() -> Object"},"getToolTipText":{"!doc":"<p>Returns the (computed) value of the property <code>toolTipText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn() -> Object"},"getVisibility":{"!doc":"<p>Returns the (computed) value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn() -> Object"},"getZIndex":{"!doc":"<p>Returns the (computed) value of the property <code>zIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #zIndex}.</p>","!type":"fn() -> Object"},"hasChildControl":{"!doc":"<p>Whether the given ID is assigned to a child control.</p>","!type":"fn(id: string) -> bool"},"hasLayoutChildren":{"!doc":"<p>Returns whether the layout has children, which are layout relevant. This\nexcludes all widgets, which have a {@link qx.ui.core.Widget#visibility}\nvalue of <code>exclude</code>.</p>","!type":"fn() -> bool"},"hasState":{"!doc":"<p>Returns whether a state is set.</p>","!type":"fn(state: string) -> bool"},"hide":{"!doc":"<p>Hide this widget.</p>","!type":"fn()"},"initAnonymous":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>anonymous</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn(value: Object) -> Object"},"initAppearance":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>appearance</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn(value: Object) -> Object"},"initBackgroundColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: Object) -> Object"},"initBlockToolTip":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockToolTip</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockToolTip}.</p>","!type":"fn(value: Object) -> Object"},"initContextMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contextMenu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenu}.</p>","!type":"fn(value: Object) -> Object"},"initCursor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cursor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn(value: Object) -> Object"},"initDecorator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>decorator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #decorator}.</p>","!type":"fn(value: Object) -> Object"},"initDraggable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>draggable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn(value: Object) -> Object"},"initDroppable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>droppable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn(value: Object) -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initFocusable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>focusable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn(value: Object) -> Object"},"initFont":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>font</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: Object) -> Object"},"initKeepActive":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>keepActive</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn(value: Object) -> Object"},"initKeepFocus":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>keepFocus</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn(value: Object) -> Object"},"initNativeContextMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nativeContextMenu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn(value: Object) -> Object"},"initOpacity":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>opacity</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn(value: Object) -> Object"},"initSelectable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"initTabIndex":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>tabIndex</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #tabIndex}.</p>","!type":"fn(value: Object) -> Object"},"initTextColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>textColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: Object) -> Object"},"initToolTip":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>toolTip</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn(value: Object) -> Object"},"initToolTipIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>toolTipIcon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipIcon}.</p>","!type":"fn(value: Object) -> Object"},"initToolTipText":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>toolTipText</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn(value: Object) -> Object"},"initVisibility":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>visibility</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object) -> Object"},"initZIndex":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>zIndex</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #zIndex}.</p>","!type":"fn(value: Object) -> Object"},"invalidateLayoutCache":{"!type":"fn()"},"invalidateLayoutChildren":{"!doc":"<p>Resets the cache for children which should be laid out.</p>","!type":"fn()"},"isAnonymous":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>anonymous</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn() -> bool"},"isBlockToolTip":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>blockToolTip</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockToolTip}.</p>","!type":"fn() -> bool"},"isCapturing":{"!doc":"<p>Checks if pointer event capturing is enabled for this widget.</p>","!type":"fn() -> bool"},"isDraggable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>draggable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn() -> bool"},"isDroppable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>droppable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn() -> bool"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"isExcluded":{"!doc":"<p>Whether the widget is locally excluded.</p>\n\n<p>Note: This method does not respect the hierarchy.</p>","!type":"fn() -> bool"},"isFocusable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>focusable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn() -> bool"},"isHidden":{"!doc":"<p>Whether the widget is locally hidden.</p>\n\n<p>Note: This method does not respect the hierarchy.</p>","!type":"fn() -> bool"},"isKeepActive":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>keepActive</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn() -> bool"},"isKeepFocus":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>keepFocus</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn() -> bool"},"isNativeContextMenu":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>nativeContextMenu</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn() -> bool"},"isSeeable":{"!doc":"<p>Detects if the widget and all its parents are visible.</p>\n\n<p><span class=\"caps\">WARNING</span>: Please use this method with caution becuase it flushes the\ninternal queues which might be an expensive operation.</p>","!type":"fn() -> bool"},"isSelectable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>selectable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"},"isTabable":{"!doc":"<p>Whether the widget is reachable by pressing the <span class=\"caps\">TAB</span> key.</p>\n\n<p>Normally tests for both, the focusable property and a positive or\nundefined tabIndex property. The widget must have a <span class=\"caps\">DOM</span> element\nsince only visible widgets are tabable.</p>","!type":"fn() -> bool"},"isVisible":{"!doc":"<p>Whether the widget is locally visible.</p>\n\n<p>Note: This method does not respect the hierarchy.</p>","!type":"fn() -> bool"},"releaseCapture":{"!doc":"<p>Disables pointer capture mode enabled by {@link #capture}.</p>","!type":"fn()"},"removeState":{"!doc":"<p>Clears a state.</p>","!type":"fn(state: string)"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"renderSeparator":{"!type":"fn(separator: +undefined, bounds: +undefined)"},"replaceState":{"!doc":"<p>Replaces the first state with the second one.</p>\n\n<p>This method is ideal for state transitions e.g. normal => selected.</p>","!type":"fn(old: string, value: string)"},"resetAnonymous":{"!doc":"<p>Resets the user value of the property <code>anonymous</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn()"},"resetAppearance":{"!doc":"<p>Resets the user value of the property <code>appearance</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn()"},"resetBackgroundColor":{"!doc":"<p>Resets the user value of the property <code>backgroundColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn()"},"resetBlockToolTip":{"!doc":"<p>Resets the user value of the property <code>blockToolTip</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockToolTip}.</p>","!type":"fn()"},"resetContextMenu":{"!doc":"<p>Resets the user value of the property <code>contextMenu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenu}.</p>","!type":"fn()"},"resetCursor":{"!doc":"<p>Resets the user value of the property <code>cursor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn()"},"resetDecorator":{"!doc":"<p>Resets the user value of the property <code>decorator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #decorator}.</p>","!type":"fn()"},"resetDraggable":{"!doc":"<p>Resets the user value of the property <code>draggable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn()"},"resetDroppable":{"!doc":"<p>Resets the user value of the property <code>droppable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn()"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetFocusable":{"!doc":"<p>Resets the user value of the property <code>focusable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn()"},"resetFont":{"!doc":"<p>Resets the user value of the property <code>font</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn()"},"resetKeepActive":{"!doc":"<p>Resets the user value of the property <code>keepActive</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn()"},"resetKeepFocus":{"!doc":"<p>Resets the user value of the property <code>keepFocus</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn()"},"resetNativeContextMenu":{"!doc":"<p>Resets the user value of the property <code>nativeContextMenu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn()"},"resetOpacity":{"!doc":"<p>Resets the user value of the property <code>opacity</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn()"},"resetPadding":{"!doc":"<p>Resets the user value of the property <code>padding</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #padding}.</p>","!type":"fn()"},"resetPaddingBottom":{"!doc":"<p>Resets the user value of the property <code>paddingBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn()"},"resetPaddingLeft":{"!doc":"<p>Resets the user value of the property <code>paddingLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn()"},"resetPaddingRight":{"!doc":"<p>Resets the user value of the property <code>paddingRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn()"},"resetPaddingTop":{"!doc":"<p>Resets the user value of the property <code>paddingTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn()"},"resetSelectable":{"!doc":"<p>Resets the user value of the property <code>selectable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn()"},"resetTabIndex":{"!doc":"<p>Resets the user value of the property <code>tabIndex</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #tabIndex}.</p>","!type":"fn()"},"resetTextColor":{"!doc":"<p>Resets the user value of the property <code>textColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn()"},"resetToolTip":{"!doc":"<p>Resets the user value of the property <code>toolTip</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn()"},"resetToolTipIcon":{"!doc":"<p>Resets the user value of the property <code>toolTipIcon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipIcon}.</p>","!type":"fn()"},"resetToolTipText":{"!doc":"<p>Resets the user value of the property <code>toolTipText</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn()"},"resetVisibility":{"!doc":"<p>Resets the user value of the property <code>visibility</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn()"},"resetZIndex":{"!doc":"<p>Resets the user value of the property <code>zIndex</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #zIndex}.</p>","!type":"fn()"},"scheduleLayoutUpdate":{"!doc":"<p>Marks the layout of this widget as invalid and triggers a layout update.\nThis is a shortcut for <code>qx.ui.core.queue.Layout.add(this);</code>.</p>","!type":"fn()"},"scrollChildIntoView":{"!doc":"<p>The method scrolls the given item into view.</p>","!type":"fn(child: +qx.ui.core.Widget, alignX?: string, alignY?: string, direct?: bool)"},"scrollChildIntoViewX":{"!doc":"<p>The method scrolls the given item into view (x-axis only).</p>","!type":"fn(child: +qx.ui.core.Widget, align?: string, direct?: bool)"},"scrollChildIntoViewY":{"!doc":"<p>The method scrolls the given item into view (y-axis only).</p>","!type":"fn(child: +qx.ui.core.Widget, align?: string, direct?: bool)"},"setAnonymous":{"!doc":"<p>Sets the user value of the property <code>anonymous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn(value: Object) -> Object"},"setAppearance":{"!doc":"<p>Sets the user value of the property <code>appearance</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn(value: Object) -> Object"},"setBackgroundColor":{"!doc":"<p>Sets the user value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: Object) -> Object"},"setBlockToolTip":{"!doc":"<p>Sets the user value of the property <code>blockToolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockToolTip}.</p>","!type":"fn(value: Object) -> Object"},"setContextMenu":{"!doc":"<p>Sets the user value of the property <code>contextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenu}.</p>","!type":"fn(value: Object) -> Object"},"setCursor":{"!doc":"<p>Sets the user value of the property <code>cursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cursor}.</p>","!type":"fn(value: Object) -> Object"},"setDecorator":{"!doc":"<p>Sets the user value of the property <code>decorator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #decorator}.</p>","!type":"fn(value: Object) -> Object"},"setDomLeft":{"!doc":"<p>Directly modifies the relative left position in relation\nto the parent element.</p>\n\n<p>Use with caution! This may be used for animations, drag&amp;drop\nor other cases where high performance location manipulation\nis important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead.</p>","!type":"fn(value: +Integer)"},"setDomPosition":{"!doc":"<p>Directly modifies the relative left and top position in relation\nto the parent element.</p>\n\n<p>Use with caution! This may be used for animations, drag&amp;drop\nor other cases where high performance location manipulation\nis important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead.</p>","!type":"fn(left: +Integer, top: +Integer)"},"setDomTop":{"!doc":"<p>Directly modifies the relative top position in relation\nto the parent element.</p>\n\n<p>Use with caution! This may be used for animations, drag&amp;drop\nor other cases where high performance location manipulation\nis important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead.</p>","!type":"fn(value: +Integer)"},"setDraggable":{"!doc":"<p>Sets the user value of the property <code>draggable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn(value: Object) -> Object"},"setDroppable":{"!doc":"<p>Sets the user value of the property <code>droppable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn(value: Object) -> Object"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setFocusable":{"!doc":"<p>Sets the user value of the property <code>focusable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn(value: Object) -> Object"},"setFont":{"!doc":"<p>Sets the user value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: Object) -> Object"},"setKeepActive":{"!doc":"<p>Sets the user value of the property <code>keepActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn(value: Object) -> Object"},"setKeepFocus":{"!doc":"<p>Sets the user value of the property <code>keepFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn(value: Object) -> Object"},"setLayoutParent":{"!type":"fn(parent: +undefined)"},"setNativeContextMenu":{"!doc":"<p>Sets the user value of the property <code>nativeContextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn(value: Object) -> Object"},"setOpacity":{"!doc":"<p>Sets the user value of the property <code>opacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opacity}.</p>","!type":"fn(value: Object) -> Object"},"setPadding":{"!doc":"<p>Sets the values of the property group <code>padding</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #padding}.</p>","!type":"fn(paddingTop: Object, paddingRight: Object, paddingBottom: Object, paddingLeft: Object)"},"setPaddingBottom":{"!doc":"<p>Sets the user value of the property <code>paddingBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn(value: Object) -> Object"},"setPaddingLeft":{"!doc":"<p>Sets the user value of the property <code>paddingLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn(value: Object) -> Object"},"setPaddingRight":{"!doc":"<p>Sets the user value of the property <code>paddingRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn(value: Object) -> Object"},"setPaddingTop":{"!doc":"<p>Sets the user value of the property <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn(value: Object) -> Object"},"setSelectable":{"!doc":"<p>Sets the user value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"setTabIndex":{"!doc":"<p>Sets the user value of the property <code>tabIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tabIndex}.</p>","!type":"fn(value: Object) -> Object"},"setTextColor":{"!doc":"<p>Sets the user value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: Object) -> Object"},"setToolTip":{"!doc":"<p>Sets the user value of the property <code>toolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn(value: Object) -> Object"},"setToolTipIcon":{"!doc":"<p>Sets the user value of the property <code>toolTipIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipIcon}.</p>","!type":"fn(value: Object) -> Object"},"setToolTipText":{"!doc":"<p>Sets the user value of the property <code>toolTipText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTipText}.</p>","!type":"fn(value: Object) -> Object"},"setVisibility":{"!doc":"<p>Sets the user value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object) -> Object"},"setZIndex":{"!doc":"<p>Sets the user value of the property <code>zIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #zIndex}.</p>","!type":"fn(value: Object) -> Object"},"show":{"!doc":"<p>Make this widget visible.</p>","!type":"fn()"},"syncAppearance":{"!doc":"<p>Renders the appearance using the current widget states.</p>\n\n<p>Used exclusively by {qx.ui.core.queue.Appearance}.</p>","!type":"fn()"},"syncWidget":{"!doc":"<p>This method is called during the flush of the\n{@link qx.ui.core.queue.Widget widget queue}.</p>","!type":"fn(jobs: +Map)"},"tabFocus":{"!doc":"<p>Focus this widget when using the keyboard. This is\nmainly thought for the advanced qooxdoo keyboard handling\nand should not be used by the application developer.</p>","!type":"fn()"},"toggleAnonymous":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>anonymous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn() -> bool"},"toggleBlockToolTip":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>blockToolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockToolTip}.</p>","!type":"fn() -> bool"},"toggleDraggable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>draggable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #draggable}.</p>","!type":"fn() -> bool"},"toggleDroppable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>droppable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #droppable}.</p>","!type":"fn() -> bool"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"toggleFocusable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>focusable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn() -> bool"},"toggleKeepActive":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>keepActive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepActive}.</p>","!type":"fn() -> bool"},"toggleKeepFocus":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>keepFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFocus}.</p>","!type":"fn() -> bool"},"toggleNativeContextMenu":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>nativeContextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn() -> bool"},"toggleSelectable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"},"updateAppearance":{"!doc":"<p>Refreshes the appearance of this widget and all\nregistered child controls.</p>","!type":"fn()"},"visualizeBlur":{"!doc":"<p>Event handler which is executed when the widget lost the focus.</p>\n\n<p>This method is used by the {@link qx.ui.core.FocusHandler} to\nremove states etc. from a previously focused widget.</p>","!type":"fn()"},"visualizeFocus":{"!doc":"<p>Event handler which is executed when the widget receives the focus.</p>\n\n<p>This method is used by the {@link qx.ui.core.FocusHandler} to\napply states etc. to a focused widget.</p>","!type":"fn()"}},"contains":{"!doc":"<p>Whether the &#8220;parent&#8221; widget contains the &#8220;child&#8221; widget.</p>","!type":"fn(parent: +qx.ui.core.Widget, child: +qx.ui.core.Widget) -> bool"},"getWidgetByElement":{"!doc":"<p>Returns the widget, which contains the given <span class=\"caps\">DOM</span> element.</p>","!type":"fn(element: +Element, considerAnonymousState?: bool) -> +qx.ui.core.Widget"}}},"decoration":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>This class acts as abstract class for all decorators. It offers the\nproperties for the insets handling. Each decorator has to define its own\ndefault insets by implementing the template method\n(<a href=\"http://en.wikipedia.org/wiki/Template_Method\">http://en.wikipedia.org/wiki/Template_Method</a>) <code>_getDefaultInsets</code></p>","prototype":{"_getDefaultInsets":{"!doc":"<p>Abstract method. Should return a map containing the default insets of\nthe decorator. This could look like this:</p>\n\n<pre>\nreturn {\n  top : 0,\n  right : 0,\n  bottom : 0,\n  left : 0\n};\n</pre>","!type":"fn() -> +Map"},"_isInitialized":{"!doc":"<p>Abstract method. Should return an boolean value if the decorator is\nalready initialized or not.</p>","!type":"fn() -> bool"},"_resetInsets":{"!doc":"<p>Resets the insets.</p>","!type":"fn()"},"getInsets":{"!type":"fn()"}}},"Decorator":{"!proto":"qx.ui.decoration.Abstract","!doc":"<p>Decorator including all decoration possibilities from mixins:</p>\n\n<ul>\n<li>Background color</li>\n<li>Background image</li>\n<li>Background gradient</li>\n<li>Single and double borders</li>\n<li>Border radius</li>\n<li>Box shadow</li>\n</ul>","prototype":{"_getDefaultInsets":{"!type":"fn()"},"_getStyles":{"!doc":"<p>Collects all the style information from the decorators.</p>","!type":"fn() -> +Map"},"_isInitialized":{"!type":"fn()"},"getPadding":{"!doc":"<p>Returns the configured padding minus the border width.</p>","!type":"fn() -> +Map"},"getStyles":{"!doc":"<p>Returns the styles of the decorator as a map with property names written\nin javascript style (e.g. <code>fontWeight</code> instead of <code>font-weight</code>).</p>","!type":"fn(css?: bool) -> +Map"}}},"IDecorator":{"!doc":"<p>A decorator is responsible for computing a widget&#8217;s decoration styles.</p>","prototype":{"getInsets":{"!doc":"<p>Get the amount of space the decoration needs for its border and padding\non each side.</p>","!type":"fn() -> +Map"},"getPadding":{"!doc":"<p>Returns the configured padding minus the border width.</p>","!type":"fn() -> +Map"},"getStyles":{"!doc":"<p>Returns the decorator&#8217;s styles.</p>","!type":"fn() -> +Map"}}},"MBackgroundColor":{"!doc":"<p>Mixin responsible for setting the background color of a widget.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>","prototype":{"_applyBackgroundColor":{"!doc":"<p>Applies changes of the property value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_styleBackgroundColor":{"!doc":"<p>Adds the background-color styles to the given map</p>","!type":"fn(styles: +Map)"},"getBackgroundColor":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn() -> Object"},"initBackgroundColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: Object) -> Object"},"resetBackgroundColor":{"!doc":"<p>Resets the user value of the property <code>backgroundColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn()"},"setBackgroundColor":{"!doc":"<p>Sets the user value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: Object) -> Object"}}},"MBackgroundImage":{"!doc":"<p>Mixin for supporting the background images on decorators.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>","prototype":{"_applyBackgroundImage":{"!doc":"<p>Applies changes of the property value of the properties <code>backgroundImage</code> and <code>backgroundRepeat</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #backgroundImage} and {@link #backgroundRepeat}.</p>","!type":"fn(value: Object, old: Object)"},"_applyBackgroundPosition":{"!doc":"<p>Applies changes of the property value of the properties <code>backgroundPositionX</code> and <code>backgroundPositionY</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #backgroundPositionX} and {@link #backgroundPositionY}.</p>","!type":"fn(value: Object, old: Object)"},"_styleBackgroundImage":{"!doc":"<p>Adds the background-image styles to the given map</p>","!type":"fn(styles: +Map)"},"getBackgroundImage":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundImage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundImage}.</p>","!type":"fn() -> Object"},"getBackgroundPositionX":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundPositionX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionX}.</p>","!type":"fn() -> Object"},"getBackgroundPositionY":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundPositionY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionY}.</p>","!type":"fn() -> Object"},"getBackgroundRepeat":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundRepeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundRepeat}.</p>","!type":"fn() -> Object"},"initBackgroundImage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundImage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundImage}.</p>","!type":"fn(value: Object) -> Object"},"initBackgroundPositionX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundPositionX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionX}.</p>","!type":"fn(value: Object) -> Object"},"initBackgroundPositionY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundPositionY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionY}.</p>","!type":"fn(value: Object) -> Object"},"initBackgroundRepeat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundRepeat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundRepeat}.</p>","!type":"fn(value: Object) -> Object"},"resetBackgroundImage":{"!doc":"<p>Resets the user value of the property <code>backgroundImage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundImage}.</p>","!type":"fn()"},"resetBackgroundPosition":{"!doc":"<p>Resets the user value of the property <code>backgroundPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPosition}.</p>","!type":"fn()"},"resetBackgroundPositionX":{"!doc":"<p>Resets the user value of the property <code>backgroundPositionX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionX}.</p>","!type":"fn()"},"resetBackgroundPositionY":{"!doc":"<p>Resets the user value of the property <code>backgroundPositionY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionY}.</p>","!type":"fn()"},"resetBackgroundRepeat":{"!doc":"<p>Resets the user value of the property <code>backgroundRepeat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundRepeat}.</p>","!type":"fn()"},"setBackgroundImage":{"!doc":"<p>Sets the user value of the property <code>backgroundImage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundImage}.</p>","!type":"fn(value: Object) -> Object"},"setBackgroundPosition":{"!doc":"<p>Sets the values of the property group <code>backgroundPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPosition}.</p>","!type":"fn(backgroundPositionY: Object, backgroundPositionX: Object)"},"setBackgroundPositionX":{"!doc":"<p>Sets the user value of the property <code>backgroundPositionX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionX}.</p>","!type":"fn(value: Object) -> Object"},"setBackgroundPositionY":{"!doc":"<p>Sets the user value of the property <code>backgroundPositionY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundPositionY}.</p>","!type":"fn(value: Object) -> Object"},"setBackgroundRepeat":{"!doc":"<p>Sets the user value of the property <code>backgroundRepeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundRepeat}.</p>","!type":"fn(value: Object) -> Object"}}},"MBorderImage":{"!doc":"<p>Decorator which uses the CSS3 border image properties.</p>","prototype":{"__getSlices":{"!doc":"<p>Gets the slice sizes from the fallback border images.</p>","!type":"fn(baseImage: string) -> +Integer"},"_applyBorderImage":{"!doc":"<p>Applies changes of the property value of the properties <code>borderImage</code>, <code>fill</code>, <code>repeatX</code>, <code>repeatY</code>, <code>sliceBottom</code>, <code>sliceLeft</code>, <code>sliceRight</code> and <code>sliceTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #borderImage}, {@link #fill}, {@link #repeatX}, {@link #repeatY}, {@link #sliceBottom}, {@link #sliceLeft}, {@link #sliceRight} and {@link #sliceTop}.</p>","!type":"fn(value: Object, old: Object)"},"_getDefaultInsetsForBorderImage":{"!doc":"<p>Computes the inset values based on the border image slices (defined in the\ndecoration theme or computed from the fallback image sizes).</p>","!type":"fn() -> +Map"},"_styleBorderImage":{"!doc":"<p>Adds the border-image styles to the given map</p>","!type":"fn(styles: +Map)"},"getBorderImage":{"!doc":"<p>Returns the (computed) value of the property <code>borderImage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImage}.</p>","!type":"fn() -> Object"},"getBorderImageMode":{"!doc":"<p>Returns the (computed) value of the property <code>borderImageMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImageMode}.</p>","!type":"fn() -> Object"},"getFill":{"!doc":"<p>Returns the (computed) value of the property <code>fill</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fill}.</p>","!type":"fn() -> Object"},"getRepeatX":{"!doc":"<p>Returns the (computed) value of the property <code>repeatX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatX}.</p>","!type":"fn() -> Object"},"getRepeatY":{"!doc":"<p>Returns the (computed) value of the property <code>repeatY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatY}.</p>","!type":"fn() -> Object"},"getSliceBottom":{"!doc":"<p>Returns the (computed) value of the property <code>sliceBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceBottom}.</p>","!type":"fn() -> Object"},"getSliceLeft":{"!doc":"<p>Returns the (computed) value of the property <code>sliceLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceLeft}.</p>","!type":"fn() -> Object"},"getSliceRight":{"!doc":"<p>Returns the (computed) value of the property <code>sliceRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceRight}.</p>","!type":"fn() -> Object"},"getSliceTop":{"!doc":"<p>Returns the (computed) value of the property <code>sliceTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceTop}.</p>","!type":"fn() -> Object"},"initBorderImage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>borderImage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImage}.</p>","!type":"fn(value: Object) -> Object"},"initBorderImageMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>borderImageMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImageMode}.</p>","!type":"fn(value: Object) -> Object"},"initFill":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>fill</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #fill}.</p>","!type":"fn(value: Object) -> Object"},"initRepeatX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>repeatX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatX}.</p>","!type":"fn(value: Object) -> Object"},"initRepeatY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>repeatY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatY}.</p>","!type":"fn(value: Object) -> Object"},"initSliceBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sliceBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceBottom}.</p>","!type":"fn(value: Object) -> Object"},"initSliceLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sliceLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceLeft}.</p>","!type":"fn(value: Object) -> Object"},"initSliceRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sliceRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceRight}.</p>","!type":"fn(value: Object) -> Object"},"initSliceTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sliceTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceTop}.</p>","!type":"fn(value: Object) -> Object"},"isFill":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>fill</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fill}.</p>","!type":"fn() -> bool"},"resetBorderImage":{"!doc":"<p>Resets the user value of the property <code>borderImage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImage}.</p>","!type":"fn()"},"resetBorderImageMode":{"!doc":"<p>Resets the user value of the property <code>borderImageMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImageMode}.</p>","!type":"fn()"},"resetFill":{"!doc":"<p>Resets the user value of the property <code>fill</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #fill}.</p>","!type":"fn()"},"resetRepeat":{"!doc":"<p>Resets the user value of the property <code>repeat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #repeat}.</p>","!type":"fn()"},"resetRepeatX":{"!doc":"<p>Resets the user value of the property <code>repeatX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatX}.</p>","!type":"fn()"},"resetRepeatY":{"!doc":"<p>Resets the user value of the property <code>repeatY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatY}.</p>","!type":"fn()"},"resetSlice":{"!doc":"<p>Resets the user value of the property <code>slice</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #slice}.</p>","!type":"fn()"},"resetSliceBottom":{"!doc":"<p>Resets the user value of the property <code>sliceBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceBottom}.</p>","!type":"fn()"},"resetSliceLeft":{"!doc":"<p>Resets the user value of the property <code>sliceLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceLeft}.</p>","!type":"fn()"},"resetSliceRight":{"!doc":"<p>Resets the user value of the property <code>sliceRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceRight}.</p>","!type":"fn()"},"resetSliceTop":{"!doc":"<p>Resets the user value of the property <code>sliceTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceTop}.</p>","!type":"fn()"},"setBorderImage":{"!doc":"<p>Sets the user value of the property <code>borderImage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImage}.</p>","!type":"fn(value: Object) -> Object"},"setBorderImageMode":{"!doc":"<p>Sets the user value of the property <code>borderImageMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #borderImageMode}.</p>","!type":"fn(value: Object) -> Object"},"setFill":{"!doc":"<p>Sets the user value of the property <code>fill</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fill}.</p>","!type":"fn(value: Object) -> Object"},"setRepeat":{"!doc":"<p>Sets the values of the property group <code>repeat</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeat}.</p>","!type":"fn(repeatX: Object, repeatY: Object)"},"setRepeatX":{"!doc":"<p>Sets the user value of the property <code>repeatX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatX}.</p>","!type":"fn(value: Object) -> Object"},"setRepeatY":{"!doc":"<p>Sets the user value of the property <code>repeatY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeatY}.</p>","!type":"fn(value: Object) -> Object"},"setSlice":{"!doc":"<p>Sets the values of the property group <code>slice</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #slice}.</p>","!type":"fn(sliceTop: Object, sliceRight: Object, sliceBottom: Object, sliceLeft: Object)"},"setSliceBottom":{"!doc":"<p>Sets the user value of the property <code>sliceBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceBottom}.</p>","!type":"fn(value: Object) -> Object"},"setSliceLeft":{"!doc":"<p>Sets the user value of the property <code>sliceLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceLeft}.</p>","!type":"fn(value: Object) -> Object"},"setSliceRight":{"!doc":"<p>Sets the user value of the property <code>sliceRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceRight}.</p>","!type":"fn(value: Object) -> Object"},"setSliceTop":{"!doc":"<p>Sets the user value of the property <code>sliceTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sliceTop}.</p>","!type":"fn(value: Object) -> Object"},"toggleFill":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>fill</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fill}.</p>","!type":"fn() -> bool"}}},"MBorderRadius":{"!doc":"<p>Mixin for the border radius <span class=\"caps\">CSS</span> property.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>\n\n<p>Keep in mind that this is not supported by all browsers:</p>\n\n<ul>\n<li>Firefox 3,5+</li>\n<li>IE9+</li>\n<li>Safari 3.0+</li>\n<li>Opera 10.5+</li>\n<li>Chrome 4.0+</li>\n</ul>","prototype":{"_applyBorderRadius":{"!doc":"<p>Applies changes of the property value of the properties <code>radiusBottomLeft</code>, <code>radiusBottomRight</code>, <code>radiusTopLeft</code> and <code>radiusTopRight</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #radiusBottomLeft}, {@link #radiusBottomRight}, {@link #radiusTopLeft} and {@link #radiusTopRight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_styleBorderRadius":{"!doc":"<p>Takes a styles map and adds the border radius styles in place to the\ngiven map. This is the needed behavior for\n{@link qx.ui.decoration.Decorator}.</p>","!type":"fn(styles: +Map)"},"getRadiusBottomLeft":{"!doc":"<p>Returns the (computed) value of the property <code>radiusBottomLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomLeft}.</p>","!type":"fn() -> Object"},"getRadiusBottomRight":{"!doc":"<p>Returns the (computed) value of the property <code>radiusBottomRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomRight}.</p>","!type":"fn() -> Object"},"getRadiusTopLeft":{"!doc":"<p>Returns the (computed) value of the property <code>radiusTopLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopLeft}.</p>","!type":"fn() -> Object"},"getRadiusTopRight":{"!doc":"<p>Returns the (computed) value of the property <code>radiusTopRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopRight}.</p>","!type":"fn() -> Object"},"initRadiusBottomLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>radiusBottomLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomLeft}.</p>","!type":"fn(value: Object) -> Object"},"initRadiusBottomRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>radiusBottomRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomRight}.</p>","!type":"fn(value: Object) -> Object"},"initRadiusTopLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>radiusTopLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopLeft}.</p>","!type":"fn(value: Object) -> Object"},"initRadiusTopRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>radiusTopRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopRight}.</p>","!type":"fn(value: Object) -> Object"},"resetRadius":{"!doc":"<p>Resets the user value of the property <code>radius</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #radius}.</p>","!type":"fn()"},"resetRadiusBottomLeft":{"!doc":"<p>Resets the user value of the property <code>radiusBottomLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomLeft}.</p>","!type":"fn()"},"resetRadiusBottomRight":{"!doc":"<p>Resets the user value of the property <code>radiusBottomRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomRight}.</p>","!type":"fn()"},"resetRadiusTopLeft":{"!doc":"<p>Resets the user value of the property <code>radiusTopLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopLeft}.</p>","!type":"fn()"},"resetRadiusTopRight":{"!doc":"<p>Resets the user value of the property <code>radiusTopRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopRight}.</p>","!type":"fn()"},"setRadius":{"!doc":"<p>Sets the values of the property group <code>radius</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #radius}.</p>","!type":"fn(radiusTopLeft: Object, radiusTopRight: Object, radiusBottomRight: Object, radiusBottomLeft: Object)"},"setRadiusBottomLeft":{"!doc":"<p>Sets the user value of the property <code>radiusBottomLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomLeft}.</p>","!type":"fn(value: Object) -> Object"},"setRadiusBottomRight":{"!doc":"<p>Sets the user value of the property <code>radiusBottomRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusBottomRight}.</p>","!type":"fn(value: Object) -> Object"},"setRadiusTopLeft":{"!doc":"<p>Sets the user value of the property <code>radiusTopLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopLeft}.</p>","!type":"fn(value: Object) -> Object"},"setRadiusTopRight":{"!doc":"<p>Sets the user value of the property <code>radiusTopRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #radiusTopRight}.</p>","!type":"fn(value: Object) -> Object"}}},"MBoxShadow":{"!doc":"<p>Mixin for the box shadow <span class=\"caps\">CSS</span> property.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>\n\n<p>Keep in mind that this is not supported by all browsers:</p>\n\n<ul>\n<li>Firefox 3,5+</li>\n<li>IE9+</li>\n<li>Safari 3.0+</li>\n<li>Opera 10.5+</li>\n<li>Chrome 4.0+</li>\n</ul>","prototype":{"_applyBoxShadow":{"!doc":"<p>Applies changes of the property value of the properties <code>inset</code>, <code>shadowBlurRadius</code>, <code>shadowColor</code>, <code>shadowHorizontalLength</code>, <code>shadowSpreadRadius</code> and <code>shadowVerticalLength</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #inset}, {@link #shadowBlurRadius}, {@link #shadowColor}, {@link #shadowHorizontalLength}, {@link #shadowSpreadRadius} and {@link #shadowVerticalLength}.</p>","!type":"fn(value: Object, old: Object)"},"_styleBoxShadow":{"!doc":"<p>Takes a styles map and adds the box shadow styles in place to the\ngiven map. This is the needed behavior for\n{@link qx.ui.decoration.Decorator}.</p>","!type":"fn(styles: +Map)"},"getInset":{"!doc":"<p>Returns the (computed) value of the property <code>inset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #inset}.</p>","!type":"fn() -> Object"},"getShadowBlurRadius":{"!doc":"<p>Returns the (computed) value of the property <code>shadowBlurRadius</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowBlurRadius}.</p>","!type":"fn() -> Object"},"getShadowColor":{"!doc":"<p>Returns the (computed) value of the property <code>shadowColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowColor}.</p>","!type":"fn() -> Object"},"getShadowHorizontalLength":{"!doc":"<p>Returns the (computed) value of the property <code>shadowHorizontalLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowHorizontalLength}.</p>","!type":"fn() -> Object"},"getShadowSpreadRadius":{"!doc":"<p>Returns the (computed) value of the property <code>shadowSpreadRadius</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowSpreadRadius}.</p>","!type":"fn() -> Object"},"getShadowVerticalLength":{"!doc":"<p>Returns the (computed) value of the property <code>shadowVerticalLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowVerticalLength}.</p>","!type":"fn() -> Object"},"initInset":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>inset</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #inset}.</p>","!type":"fn(value: Object) -> Object"},"initShadowBlurRadius":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shadowBlurRadius</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowBlurRadius}.</p>","!type":"fn(value: Object) -> Object"},"initShadowColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shadowColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowColor}.</p>","!type":"fn(value: Object) -> Object"},"initShadowHorizontalLength":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shadowHorizontalLength</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowHorizontalLength}.</p>","!type":"fn(value: Object) -> Object"},"initShadowSpreadRadius":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shadowSpreadRadius</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowSpreadRadius}.</p>","!type":"fn(value: Object) -> Object"},"initShadowVerticalLength":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>shadowVerticalLength</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowVerticalLength}.</p>","!type":"fn(value: Object) -> Object"},"isInset":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>inset</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #inset}.</p>","!type":"fn() -> bool"},"resetInset":{"!doc":"<p>Resets the user value of the property <code>inset</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #inset}.</p>","!type":"fn()"},"resetShadowBlurRadius":{"!doc":"<p>Resets the user value of the property <code>shadowBlurRadius</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowBlurRadius}.</p>","!type":"fn()"},"resetShadowColor":{"!doc":"<p>Resets the user value of the property <code>shadowColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowColor}.</p>","!type":"fn()"},"resetShadowHorizontalLength":{"!doc":"<p>Resets the user value of the property <code>shadowHorizontalLength</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowHorizontalLength}.</p>","!type":"fn()"},"resetShadowLength":{"!doc":"<p>Resets the user value of the property <code>shadowLength</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowLength}.</p>","!type":"fn()"},"resetShadowSpreadRadius":{"!doc":"<p>Resets the user value of the property <code>shadowSpreadRadius</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowSpreadRadius}.</p>","!type":"fn()"},"resetShadowVerticalLength":{"!doc":"<p>Resets the user value of the property <code>shadowVerticalLength</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowVerticalLength}.</p>","!type":"fn()"},"setInset":{"!doc":"<p>Sets the user value of the property <code>inset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #inset}.</p>","!type":"fn(value: Object) -> Object"},"setShadowBlurRadius":{"!doc":"<p>Sets the user value of the property <code>shadowBlurRadius</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowBlurRadius}.</p>","!type":"fn(value: Object) -> Object"},"setShadowColor":{"!doc":"<p>Sets the user value of the property <code>shadowColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowColor}.</p>","!type":"fn(value: Object) -> Object"},"setShadowHorizontalLength":{"!doc":"<p>Sets the user value of the property <code>shadowHorizontalLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowHorizontalLength}.</p>","!type":"fn(value: Object) -> Object"},"setShadowLength":{"!doc":"<p>Sets the values of the property group <code>shadowLength</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowLength}.</p>","!type":"fn(shadowHorizontalLength: Object, shadowVerticalLength: Object)"},"setShadowSpreadRadius":{"!doc":"<p>Sets the user value of the property <code>shadowSpreadRadius</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowSpreadRadius}.</p>","!type":"fn(value: Object) -> Object"},"setShadowVerticalLength":{"!doc":"<p>Sets the user value of the property <code>shadowVerticalLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #shadowVerticalLength}.</p>","!type":"fn(value: Object) -> Object"},"toggleInset":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>inset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #inset}.</p>","!type":"fn() -> bool"}}},"MDoubleBorder":{"!doc":"<p>Border implementation with two <span class=\"caps\">CSS</span> borders. Both borders can be styled\nindependent of each other.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>","!type":"fn()","prototype":{"__getDefaultInsetsForDoubleBorder":{"!doc":"<p>Implementation of the interface for the double border.</p>","!type":"fn() -> +Map"},"__processInnerOpacity":{"!doc":"<p>Converts the inner border&#8217;s colors to rgba.</p>","!type":"fn(innerColor: +Map, innerOpacity: number)"},"__styleDoubleBorder":{"!doc":"<p>Takes a styles map and adds the outer border styles in place\nto the given map. This is the needed behavior for\n{@link qx.ui.decoration.Decorator}.</p>","!type":"fn(styles: +Map)"},"_applyDoubleBorder":{"!doc":"<p>Applies changes of the property value of the properties <code>innerColorBottom</code>, <code>innerColorLeft</code>, <code>innerColorRight</code>, <code>innerColorTop</code>, <code>innerOpacity</code>, <code>innerWidthBottom</code>, <code>innerWidthLeft</code>, <code>innerWidthRight</code> and <code>innerWidthTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #innerColorBottom}, {@link #innerColorLeft}, {@link #innerColorRight}, {@link #innerColorTop}, {@link #innerOpacity}, {@link #innerWidthBottom}, {@link #innerWidthLeft}, {@link #innerWidthRight} and {@link #innerWidthTop}.</p>","!type":"fn(value: Object, old: Object)"},"getInnerColorBottom":{"!doc":"<p>Returns the (computed) value of the property <code>innerColorBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorBottom}.</p>","!type":"fn() -> Object"},"getInnerColorLeft":{"!doc":"<p>Returns the (computed) value of the property <code>innerColorLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorLeft}.</p>","!type":"fn() -> Object"},"getInnerColorRight":{"!doc":"<p>Returns the (computed) value of the property <code>innerColorRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorRight}.</p>","!type":"fn() -> Object"},"getInnerColorTop":{"!doc":"<p>Returns the (computed) value of the property <code>innerColorTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorTop}.</p>","!type":"fn() -> Object"},"getInnerOpacity":{"!doc":"<p>Returns the (computed) value of the property <code>innerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerOpacity}.</p>","!type":"fn() -> Object"},"getInnerWidthBottom":{"!doc":"<p>Returns the (computed) value of the property <code>innerWidthBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthBottom}.</p>","!type":"fn() -> Object"},"getInnerWidthLeft":{"!doc":"<p>Returns the (computed) value of the property <code>innerWidthLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthLeft}.</p>","!type":"fn() -> Object"},"getInnerWidthRight":{"!doc":"<p>Returns the (computed) value of the property <code>innerWidthRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthRight}.</p>","!type":"fn() -> Object"},"getInnerWidthTop":{"!doc":"<p>Returns the (computed) value of the property <code>innerWidthTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthTop}.</p>","!type":"fn() -> Object"},"initInnerColorBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerColorBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorBottom}.</p>","!type":"fn(value: Object) -> Object"},"initInnerColorLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerColorLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorLeft}.</p>","!type":"fn(value: Object) -> Object"},"initInnerColorRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerColorRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorRight}.</p>","!type":"fn(value: Object) -> Object"},"initInnerColorTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerColorTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorTop}.</p>","!type":"fn(value: Object) -> Object"},"initInnerOpacity":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerOpacity</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerOpacity}.</p>","!type":"fn(value: Object) -> Object"},"initInnerWidthBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerWidthBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthBottom}.</p>","!type":"fn(value: Object) -> Object"},"initInnerWidthLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerWidthLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthLeft}.</p>","!type":"fn(value: Object) -> Object"},"initInnerWidthRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerWidthRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthRight}.</p>","!type":"fn(value: Object) -> Object"},"initInnerWidthTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>innerWidthTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthTop}.</p>","!type":"fn(value: Object) -> Object"},"resetInnerColor":{"!doc":"<p>Resets the user value of the property <code>innerColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColor}.</p>","!type":"fn()"},"resetInnerColorBottom":{"!doc":"<p>Resets the user value of the property <code>innerColorBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorBottom}.</p>","!type":"fn()"},"resetInnerColorLeft":{"!doc":"<p>Resets the user value of the property <code>innerColorLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorLeft}.</p>","!type":"fn()"},"resetInnerColorRight":{"!doc":"<p>Resets the user value of the property <code>innerColorRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorRight}.</p>","!type":"fn()"},"resetInnerColorTop":{"!doc":"<p>Resets the user value of the property <code>innerColorTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorTop}.</p>","!type":"fn()"},"resetInnerOpacity":{"!doc":"<p>Resets the user value of the property <code>innerOpacity</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerOpacity}.</p>","!type":"fn()"},"resetInnerWidth":{"!doc":"<p>Resets the user value of the property <code>innerWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidth}.</p>","!type":"fn()"},"resetInnerWidthBottom":{"!doc":"<p>Resets the user value of the property <code>innerWidthBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthBottom}.</p>","!type":"fn()"},"resetInnerWidthLeft":{"!doc":"<p>Resets the user value of the property <code>innerWidthLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthLeft}.</p>","!type":"fn()"},"resetInnerWidthRight":{"!doc":"<p>Resets the user value of the property <code>innerWidthRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthRight}.</p>","!type":"fn()"},"resetInnerWidthTop":{"!doc":"<p>Resets the user value of the property <code>innerWidthTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthTop}.</p>","!type":"fn()"},"setInnerColor":{"!doc":"<p>Sets the values of the property group <code>innerColor</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColor}.</p>","!type":"fn(innerColorTop: Object, innerColorRight: Object, innerColorBottom: Object, innerColorLeft: Object)"},"setInnerColorBottom":{"!doc":"<p>Sets the user value of the property <code>innerColorBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorBottom}.</p>","!type":"fn(value: Object) -> Object"},"setInnerColorLeft":{"!doc":"<p>Sets the user value of the property <code>innerColorLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorLeft}.</p>","!type":"fn(value: Object) -> Object"},"setInnerColorRight":{"!doc":"<p>Sets the user value of the property <code>innerColorRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorRight}.</p>","!type":"fn(value: Object) -> Object"},"setInnerColorTop":{"!doc":"<p>Sets the user value of the property <code>innerColorTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerColorTop}.</p>","!type":"fn(value: Object) -> Object"},"setInnerOpacity":{"!doc":"<p>Sets the user value of the property <code>innerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerOpacity}.</p>","!type":"fn(value: Object) -> Object"},"setInnerWidth":{"!doc":"<p>Sets the values of the property group <code>innerWidth</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidth}.</p>","!type":"fn(innerWidthTop: Object, innerWidthRight: Object, innerWidthBottom: Object, innerWidthLeft: Object)"},"setInnerWidthBottom":{"!doc":"<p>Sets the user value of the property <code>innerWidthBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthBottom}.</p>","!type":"fn(value: Object) -> Object"},"setInnerWidthLeft":{"!doc":"<p>Sets the user value of the property <code>innerWidthLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthLeft}.</p>","!type":"fn(value: Object) -> Object"},"setInnerWidthRight":{"!doc":"<p>Sets the user value of the property <code>innerWidthRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthRight}.</p>","!type":"fn(value: Object) -> Object"},"setInnerWidthTop":{"!doc":"<p>Sets the user value of the property <code>innerWidthTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #innerWidthTop}.</p>","!type":"fn(value: Object) -> Object"}}},"MLinearBackgroundGradient":{"!doc":"<p>Mixin for the linear background gradient <span class=\"caps\">CSS</span> property.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>\n\n<p>Keep in mind that this is not supported by all browsers:</p>\n\n<ul>\n<li>Safari 4.0+</li>\n<li>Chrome 4.0+</li>\n<li>Firefox 3.6+</li>\n<li>Opera 11.1+</li>\n<li>IE 10+</li>\n<li>IE 5.5+ (with limitations)</li>\n</ul>\n\n<p>For IE 5.5 to IE 8,this class uses the filter rules to create the gradient. This\nhas some limitations: The start and end position property can not be used. For\nmore details, see the original documentation:\n<a href=\"http://msdn.microsoft.com/en-us/library/ms532997\">http://msdn.microsoft.com/en-us/library/ms532997</a>(v=vs.85).aspx</p>\n\n<p>For IE9, we create a gradient in a canvas element and render this gradient\nas background image. Due to restrictions in the <code>background-image</code>\ncss property, we can not allow negative start values in that case.</p>","prototype":{"__getColors":{"!doc":"<p>Helper to get start and end color.</p>","!type":"fn() -> +Map"},"_applyLinearBackgroundGradient":{"!doc":"<p>Applies changes of the property value of the properties <code>colorPositionUnit</code>, <code>endColor</code>, <code>endColorPosition</code>, <code>orientation</code>, <code>startColor</code> and <code>startColorPosition</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #colorPositionUnit}, {@link #endColor}, {@link #endColorPosition}, {@link #orientation}, {@link #startColor} and {@link #startColorPosition}.</p>","!type":"fn(value: Object, old: Object)"},"_getContent":{"!doc":"<p>Helper for IE which applies the filter used for the gradient to a separate\n<span class=\"caps\">DIV</span> element which will be put into the decorator. This is necessary in case\nthe decorator has rounded corners.</p>","!type":"fn() -> string"},"_styleLinearBackgroundGradient":{"!doc":"<p>Takes a styles map and adds the linear background styles in place to the\ngiven map. This is the needed behavior for\n{@link qx.ui.decoration.Decorator}.</p>","!type":"fn(styles: +Map)"},"getColorPositionUnit":{"!doc":"<p>Returns the (computed) value of the property <code>colorPositionUnit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorPositionUnit}.</p>","!type":"fn() -> Object"},"getEndColor":{"!doc":"<p>Returns the (computed) value of the property <code>endColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #endColor}.</p>","!type":"fn() -> Object"},"getEndColorPosition":{"!doc":"<p>Returns the (computed) value of the property <code>endColorPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #endColorPosition}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getStartColor":{"!doc":"<p>Returns the (computed) value of the property <code>startColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #startColor}.</p>","!type":"fn() -> Object"},"getStartColorPosition":{"!doc":"<p>Returns the (computed) value of the property <code>startColorPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #startColorPosition}.</p>","!type":"fn() -> Object"},"initColorPositionUnit":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorPositionUnit</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorPositionUnit}.</p>","!type":"fn(value: Object) -> Object"},"initEndColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>endColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #endColor}.</p>","!type":"fn(value: Object) -> Object"},"initEndColorPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>endColorPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #endColorPosition}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initStartColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>startColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #startColor}.</p>","!type":"fn(value: Object) -> Object"},"initStartColorPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>startColorPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #startColorPosition}.</p>","!type":"fn(value: Object) -> Object"},"resetColorPositionUnit":{"!doc":"<p>Resets the user value of the property <code>colorPositionUnit</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorPositionUnit}.</p>","!type":"fn()"},"resetEndColor":{"!doc":"<p>Resets the user value of the property <code>endColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #endColor}.</p>","!type":"fn()"},"resetEndColorPosition":{"!doc":"<p>Resets the user value of the property <code>endColorPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #endColorPosition}.</p>","!type":"fn()"},"resetGradientEnd":{"!doc":"<p>Resets the user value of the property <code>gradientEnd</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #gradientEnd}.</p>","!type":"fn()"},"resetGradientStart":{"!doc":"<p>Resets the user value of the property <code>gradientStart</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #gradientStart}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetStartColor":{"!doc":"<p>Resets the user value of the property <code>startColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #startColor}.</p>","!type":"fn()"},"resetStartColorPosition":{"!doc":"<p>Resets the user value of the property <code>startColorPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #startColorPosition}.</p>","!type":"fn()"},"setColorPositionUnit":{"!doc":"<p>Sets the user value of the property <code>colorPositionUnit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorPositionUnit}.</p>","!type":"fn(value: Object) -> Object"},"setEndColor":{"!doc":"<p>Sets the user value of the property <code>endColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #endColor}.</p>","!type":"fn(value: Object) -> Object"},"setEndColorPosition":{"!doc":"<p>Sets the user value of the property <code>endColorPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #endColorPosition}.</p>","!type":"fn(value: Object) -> Object"},"setGradientEnd":{"!doc":"<p>Sets the values of the property group <code>gradientEnd</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #gradientEnd}.</p>","!type":"fn(endColor: Object, endColorPosition: Object)"},"setGradientStart":{"!doc":"<p>Sets the values of the property group <code>gradientStart</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #gradientStart}.</p>","!type":"fn(startColor: Object, startColorPosition: Object)"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setStartColor":{"!doc":"<p>Sets the user value of the property <code>startColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #startColor}.</p>","!type":"fn(value: Object) -> Object"},"setStartColorPosition":{"!doc":"<p>Sets the user value of the property <code>startColorPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #startColorPosition}.</p>","!type":"fn(value: Object) -> Object"}}},"MSingleBorder":{"!doc":"<p>A basic decorator featuring simple borders based on <span class=\"caps\">CSS</span> styles.\nThis mixin is usually used by {@link qx.ui.decoration.Decorator}.</p>","prototype":{"_applyStyle":{"!doc":"<p>Applies changes of the property value of the properties <code>colorBottom</code>, <code>colorLeft</code>, <code>colorRight</code>, <code>colorTop</code>, <code>styleBottom</code>, <code>styleLeft</code>, <code>styleRight</code> and <code>styleTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #colorBottom}, {@link #colorLeft}, {@link #colorRight}, {@link #colorTop}, {@link #styleBottom}, {@link #styleLeft}, {@link #styleRight} and {@link #styleTop}.</p>","!type":"fn(value: Object, old: Object)"},"_applyWidth":{"!doc":"<p>Applies changes of the property value of the properties <code>widthBottom</code>, <code>widthLeft</code>, <code>widthRight</code> and <code>widthTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #widthBottom}, {@link #widthLeft}, {@link #widthRight} and {@link #widthTop}.</p>","!type":"fn(value: number, old: number)"},"_getDefaultInsetsForBorder":{"!doc":"<p>Implementation of the interface for the single border.</p>","!type":"fn() -> +Map"},"_styleBorder":{"!doc":"<p>Takes a styles map and adds the border styles styles in place\nto the given map. This is the needed behavior for\n{@link qx.ui.decoration.Decorator}.</p>","!type":"fn(styles: +Map)"},"getColorBottom":{"!doc":"<p>Returns the (computed) value of the property <code>colorBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorBottom}.</p>","!type":"fn() -> Object"},"getColorLeft":{"!doc":"<p>Returns the (computed) value of the property <code>colorLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorLeft}.</p>","!type":"fn() -> Object"},"getColorRight":{"!doc":"<p>Returns the (computed) value of the property <code>colorRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorRight}.</p>","!type":"fn() -> Object"},"getColorTop":{"!doc":"<p>Returns the (computed) value of the property <code>colorTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorTop}.</p>","!type":"fn() -> Object"},"getStyleBottom":{"!doc":"<p>Returns the (computed) value of the property <code>styleBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleBottom}.</p>","!type":"fn() -> Object"},"getStyleLeft":{"!doc":"<p>Returns the (computed) value of the property <code>styleLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleLeft}.</p>","!type":"fn() -> Object"},"getStyleRight":{"!doc":"<p>Returns the (computed) value of the property <code>styleRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleRight}.</p>","!type":"fn() -> Object"},"getStyleTop":{"!doc":"<p>Returns the (computed) value of the property <code>styleTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleTop}.</p>","!type":"fn() -> Object"},"getWidthBottom":{"!doc":"<p>Returns the (computed) value of the property <code>widthBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthBottom}.</p>","!type":"fn() -> Object"},"getWidthLeft":{"!doc":"<p>Returns the (computed) value of the property <code>widthLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthLeft}.</p>","!type":"fn() -> Object"},"getWidthRight":{"!doc":"<p>Returns the (computed) value of the property <code>widthRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthRight}.</p>","!type":"fn() -> Object"},"getWidthTop":{"!doc":"<p>Returns the (computed) value of the property <code>widthTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthTop}.</p>","!type":"fn() -> Object"},"initColorBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorBottom}.</p>","!type":"fn(value: Object) -> Object"},"initColorLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorLeft}.</p>","!type":"fn(value: Object) -> Object"},"initColorRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorRight}.</p>","!type":"fn(value: Object) -> Object"},"initColorTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorTop}.</p>","!type":"fn(value: Object) -> Object"},"initStyleBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>styleBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #styleBottom}.</p>","!type":"fn(value: Object) -> Object"},"initStyleLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>styleLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #styleLeft}.</p>","!type":"fn(value: Object) -> Object"},"initStyleRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>styleRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #styleRight}.</p>","!type":"fn(value: Object) -> Object"},"initStyleTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>styleTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #styleTop}.</p>","!type":"fn(value: Object) -> Object"},"initWidthBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>widthBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #widthBottom}.</p>","!type":"fn(value: Object) -> Object"},"initWidthLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>widthLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #widthLeft}.</p>","!type":"fn(value: Object) -> Object"},"initWidthRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>widthRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #widthRight}.</p>","!type":"fn(value: Object) -> Object"},"initWidthTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>widthTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #widthTop}.</p>","!type":"fn(value: Object) -> Object"},"resetBottom":{"!doc":"<p>Resets the user value of the property <code>bottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #bottom}.</p>","!type":"fn()"},"resetColor":{"!doc":"<p>Resets the user value of the property <code>color</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn()"},"resetColorBottom":{"!doc":"<p>Resets the user value of the property <code>colorBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorBottom}.</p>","!type":"fn()"},"resetColorLeft":{"!doc":"<p>Resets the user value of the property <code>colorLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorLeft}.</p>","!type":"fn()"},"resetColorRight":{"!doc":"<p>Resets the user value of the property <code>colorRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorRight}.</p>","!type":"fn()"},"resetColorTop":{"!doc":"<p>Resets the user value of the property <code>colorTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorTop}.</p>","!type":"fn()"},"resetLeft":{"!doc":"<p>Resets the user value of the property <code>left</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #left}.</p>","!type":"fn()"},"resetRight":{"!doc":"<p>Resets the user value of the property <code>right</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #right}.</p>","!type":"fn()"},"resetStyle":{"!doc":"<p>Resets the user value of the property <code>style</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #style}.</p>","!type":"fn()"},"resetStyleBottom":{"!doc":"<p>Resets the user value of the property <code>styleBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #styleBottom}.</p>","!type":"fn()"},"resetStyleLeft":{"!doc":"<p>Resets the user value of the property <code>styleLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #styleLeft}.</p>","!type":"fn()"},"resetStyleRight":{"!doc":"<p>Resets the user value of the property <code>styleRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #styleRight}.</p>","!type":"fn()"},"resetStyleTop":{"!doc":"<p>Resets the user value of the property <code>styleTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #styleTop}.</p>","!type":"fn()"},"resetTop":{"!doc":"<p>Resets the user value of the property <code>top</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #top}.</p>","!type":"fn()"},"resetWidth":{"!doc":"<p>Resets the user value of the property <code>width</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #width}.</p>","!type":"fn()"},"resetWidthBottom":{"!doc":"<p>Resets the user value of the property <code>widthBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #widthBottom}.</p>","!type":"fn()"},"resetWidthLeft":{"!doc":"<p>Resets the user value of the property <code>widthLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #widthLeft}.</p>","!type":"fn()"},"resetWidthRight":{"!doc":"<p>Resets the user value of the property <code>widthRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #widthRight}.</p>","!type":"fn()"},"resetWidthTop":{"!doc":"<p>Resets the user value of the property <code>widthTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #widthTop}.</p>","!type":"fn()"},"setBottom":{"!doc":"<p>Sets the values of the property group <code>bottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #bottom}.</p>","!type":"fn(widthBottom: Object, styleBottom: Object, colorBottom: Object)"},"setColor":{"!doc":"<p>Sets the values of the property group <code>color</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #color}.</p>","!type":"fn(colorTop: Object, colorRight: Object, colorBottom: Object, colorLeft: Object)"},"setColorBottom":{"!doc":"<p>Sets the user value of the property <code>colorBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorBottom}.</p>","!type":"fn(value: Object) -> Object"},"setColorLeft":{"!doc":"<p>Sets the user value of the property <code>colorLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorLeft}.</p>","!type":"fn(value: Object) -> Object"},"setColorRight":{"!doc":"<p>Sets the user value of the property <code>colorRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorRight}.</p>","!type":"fn(value: Object) -> Object"},"setColorTop":{"!doc":"<p>Sets the user value of the property <code>colorTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorTop}.</p>","!type":"fn(value: Object) -> Object"},"setLeft":{"!doc":"<p>Sets the values of the property group <code>left</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #left}.</p>","!type":"fn(widthLeft: Object, styleLeft: Object, colorLeft: Object)"},"setRight":{"!doc":"<p>Sets the values of the property group <code>right</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #right}.</p>","!type":"fn(widthRight: Object, styleRight: Object, colorRight: Object)"},"setStyle":{"!doc":"<p>Sets the values of the property group <code>style</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #style}.</p>","!type":"fn(styleTop: Object, styleRight: Object, styleBottom: Object, styleLeft: Object)"},"setStyleBottom":{"!doc":"<p>Sets the user value of the property <code>styleBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleBottom}.</p>","!type":"fn(value: Object) -> Object"},"setStyleLeft":{"!doc":"<p>Sets the user value of the property <code>styleLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleLeft}.</p>","!type":"fn(value: Object) -> Object"},"setStyleRight":{"!doc":"<p>Sets the user value of the property <code>styleRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleRight}.</p>","!type":"fn(value: Object) -> Object"},"setStyleTop":{"!doc":"<p>Sets the user value of the property <code>styleTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #styleTop}.</p>","!type":"fn(value: Object) -> Object"},"setTop":{"!doc":"<p>Sets the values of the property group <code>top</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #top}.</p>","!type":"fn(widthTop: Object, styleTop: Object, colorTop: Object)"},"setWidth":{"!doc":"<p>Sets the values of the property group <code>width</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #width}.</p>","!type":"fn(widthTop: Object, widthRight: Object, widthBottom: Object, widthLeft: Object)"},"setWidthBottom":{"!doc":"<p>Sets the user value of the property <code>widthBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthBottom}.</p>","!type":"fn(value: Object) -> Object"},"setWidthLeft":{"!doc":"<p>Sets the user value of the property <code>widthLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthLeft}.</p>","!type":"fn(value: Object) -> Object"},"setWidthRight":{"!doc":"<p>Sets the user value of the property <code>widthRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthRight}.</p>","!type":"fn(value: Object) -> Object"},"setWidthTop":{"!doc":"<p>Sets the user value of the property <code>widthTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #widthTop}.</p>","!type":"fn(value: Object) -> Object"}}}},"embed":{"AbstractIframe":{"!proto":"qx.ui.core.Widget","!doc":"<p>Abstract base class for iframe widgets.</p>","!type":"fn()","prototype":{"__onNavigate":{"!doc":"<p>Handle user navigation. Sync actual <span class=\"caps\">URL</span> of iframe with source property.</p>","!type":"fn(e: +qx.event.type.Data)"},"_applyFrameName":{"!doc":"<p>Applies changes of the property value of the property <code>frameName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #frameName}.</p>","!type":"fn(value: string, old: string)"},"_applySource":{"!doc":"<p>Applies changes of the property value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: string, old: string)"},"_getIframeElement":{"!doc":"<p>Get the Element wrapper for the iframe</p>","!type":"fn() -> +qx.html.Iframe"},"getBody":{"!doc":"<p>Get the <span class=\"caps\">HTML</span> body element of the iframe.</p>","!type":"fn() -> +Element"},"getDocument":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> document object of an iframe.</p>","!type":"fn() -> +Document"},"getFrameName":{"!doc":"<p>Returns the (computed) value of the property <code>frameName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #frameName}.</p>","!type":"fn() -> Object"},"getName":{"!doc":"<p>Get the current name.</p>","!type":"fn() -> string"},"getSource":{"!doc":"<p>Returns the (computed) value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn() -> Object"},"getWindow":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> window object of an iframe.</p>","!type":"fn() -> +Window"},"initFrameName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>frameName</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #frameName}.</p>","!type":"fn(value: Object) -> Object"},"initSource":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>source</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"},"reload":{"!doc":"<p>Reload the contents of the iframe.</p>","!type":"fn()"},"resetFrameName":{"!doc":"<p>Resets the user value of the property <code>frameName</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #frameName}.</p>","!type":"fn()"},"resetSource":{"!doc":"<p>Resets the user value of the property <code>source</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn()"},"setFrameName":{"!doc":"<p>Sets the user value of the property <code>frameName</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #frameName}.</p>","!type":"fn(value: Object) -> Object"},"setSource":{"!doc":"<p>Sets the user value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"}}},"Canvas":{"!proto":"qx.ui.core.Widget","!doc":"<p>The Canvas widget embeds the <span class=\"caps\">HMTL</span> canvas element\n[<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#the-canvas\">W3C-HTML5</a>]</p>\n\n<p>Note: This widget does not work in Internet Explorer < 9!\nCheck for browser support with qx.core.Environment.get(&#8220;html.canvas&#8221;).</p>\n\n<p>To paint something on the canvas and keep the content updated on resizes you\neither have to override the {@link #_draw} method or redraw the content on\nthe {@link #redraw} event. The drawing context can be obtained by {@link #getContext2d}.</p>\n\n<p>Note that this widget operates on two different coordinate systems. The canvas\nhas its own coordinate system for drawing operations. This canvas coordinate\nsystem is scaled to fit actual size of the <span class=\"caps\">DOM</span> element. Each time the size of\nthe canvas dimensions is changed a redraw is required. In this case the\nprotected method {@link #_draw} is called and the event {@link #redraw}\nis fired. You can synchronize the internal canvas dimension with the\n<span class=\"caps\">CSS</span> dimension of the canvas element by setting {@link #syncDimension} to\n<code>true</code>.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the canvas widget.</p>\n\n<pre class=\"javascript\">\nvar canvas = new qx.ui.embed.Canvas().set({\n  canvasWidth: 200,\n  canvasHeight: 200,\n  syncDimension: true\n});\ncanvas.addListener(\"redraw\", function(e)\n{\n  var data = e.getData();\n  var width = data.width;\n  var height = data.height;\n  var ctx = data.context;\n\n  ctx.fillStyle = \"rgb(200,0,0)\";\n  ctx.fillRect (20, 20, width-5, height-5);\n\n  ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n  ctx.fillRect (70, 70, 105, 100);\n}, this);\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/canvas.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"__redraw":{"!doc":"<p>This methods triggers the redraw of the canvas&#8217; content</p>","!type":"fn()"},"_applyCanvasHeight":{"!doc":"<p>Applies changes of the property value of the property <code>canvasHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasHeight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyCanvasWidth":{"!doc":"<p>Applies changes of the property value of the property <code>canvasWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasWidth}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_createContentElement":{"!type":"fn()"},"_draw":{"!doc":"<p>Template method, which can be used by derived classes to redraw the\ncontent. It is called each time the canvas dimension change and the\ncanvas needs to be updated.</p>","!type":"fn(width: +Integer, height: +Integer, context: +CanvasRenderingContext2D)"},"_onResize":{"!doc":"<p>Widget resize event handler. Updates the canvas dimension if needed.</p>","!type":"fn(e: +qx.event.type.Data)"},"getCanvasHeight":{"!doc":"<p>Returns the (computed) value of the property <code>canvasHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasHeight}.</p>","!type":"fn() -> Object"},"getCanvasWidth":{"!doc":"<p>Returns the (computed) value of the property <code>canvasWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasWidth}.</p>","!type":"fn() -> Object"},"getContext2d":{"!doc":"<p>Get the native canvas 2D rendering context\n[<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].\nAll drawing operations are performed on this context.</p>","!type":"fn() -> +CanvasRenderingContext2D"},"getSyncDimension":{"!doc":"<p>Returns the (computed) value of the property <code>syncDimension</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #syncDimension}.</p>","!type":"fn() -> Object"},"initCanvasHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>canvasHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasHeight}.</p>","!type":"fn(value: Object) -> Object"},"initCanvasWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>canvasWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasWidth}.</p>","!type":"fn(value: Object) -> Object"},"initSyncDimension":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>syncDimension</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #syncDimension}.</p>","!type":"fn(value: Object) -> Object"},"isSyncDimension":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>syncDimension</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #syncDimension}.</p>","!type":"fn() -> bool"},"resetCanvasHeight":{"!doc":"<p>Resets the user value of the property <code>canvasHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasHeight}.</p>","!type":"fn()"},"resetCanvasWidth":{"!doc":"<p>Resets the user value of the property <code>canvasWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasWidth}.</p>","!type":"fn()"},"resetSyncDimension":{"!doc":"<p>Resets the user value of the property <code>syncDimension</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #syncDimension}.</p>","!type":"fn()"},"setCanvasHeight":{"!doc":"<p>Sets the user value of the property <code>canvasHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasHeight}.</p>","!type":"fn(value: Object) -> Object"},"setCanvasWidth":{"!doc":"<p>Sets the user value of the property <code>canvasWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #canvasWidth}.</p>","!type":"fn(value: Object) -> Object"},"setSyncDimension":{"!doc":"<p>Sets the user value of the property <code>syncDimension</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #syncDimension}.</p>","!type":"fn(value: Object) -> Object"},"toggleSyncDimension":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>syncDimension</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #syncDimension}.</p>","!type":"fn() -> bool"},"update":{"!doc":"<p>Redraw the canvas</p>","!type":"fn()"}}},"Flash":{"!proto":"qx.ui.core.Widget","!doc":"<p>The Flash widget embeds the <span class=\"caps\">HMTL</span> Flash element</p>","!type":"fn()","prototype":{"__flashParamHelper":{"!doc":"<p>Set the attribute for the Flash <span class=\"caps\">DOM</span> element.</p>","!type":"fn(key: string, value?: string)"},"_applyAllowScriptAccess":{"!doc":"<p>Applies changes of the property value of the property <code>allowScriptAccess</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowScriptAccess}.</p>","!type":"fn(value: Object, old: Object)"},"_applyId":{"!doc":"<p>Applies changes of the property value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: string, old: string)"},"_applyLiveConnect":{"!doc":"<p>Applies changes of the property value of the property <code>liveConnect</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn(value: bool, old: bool)"},"_applyLoop":{"!doc":"<p>Applies changes of the property value of the property <code>loop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn(value: bool, old: bool)"},"_applyMayScript":{"!doc":"<p>Applies changes of the property value of the property <code>mayScript</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn(value: bool, old: bool)"},"_applyMenu":{"!doc":"<p>Applies changes of the property value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: bool, old: bool)"},"_applyPlay":{"!doc":"<p>Applies changes of the property value of the property <code>play</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn(value: bool, old: bool)"},"_applyQuality":{"!doc":"<p>Applies changes of the property value of the property <code>quality</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quality}.</p>","!type":"fn(value: Object, old: Object)"},"_applyScale":{"!doc":"<p>Applies changes of the property value of the property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn(value: Object, old: Object)"},"_applySource":{"!doc":"<p>Applies changes of the property value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: string, old: string)"},"_applyVariables":{"!doc":"<p>Applies changes of the property value of the property <code>variables</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #variables}.</p>","!type":"fn(value: +Map, old: +Map)"},"_applyWmode":{"!doc":"<p>Applies changes of the property value of the property <code>wmode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wmode}.</p>","!type":"fn(value: Object, old: Object)"},"_checkLoading":{"!doc":"<p>Checks the current loaded state and fires one of the defined events:\n{@link #loading}, {@link #loaded} or {@link #timeout}.</p>\n\n<p>Note the {@link #timeout} event is fired when the check reached the\ndefined {@link #loadTimeout}.</p>","!type":"fn()"},"_createContentElement":{"!type":"fn()"},"getAllowScriptAccess":{"!doc":"<p>Returns the (computed) value of the property <code>allowScriptAccess</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowScriptAccess}.</p>","!type":"fn() -> Object"},"getFlashElement":{"!doc":"<p>Returns the <span class=\"caps\">DOM</span> element of the Flash movie.</p>\n\n<p>Note: If you call the method before the widget is rendered, it will\nalways return <code>null</code>. Therefore call the method after\nthe {@link #appear} event is fired.</p>","!type":"fn() -> +Element"},"getId":{"!doc":"<p>Returns the (computed) value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn() -> Object"},"getLiveConnect":{"!doc":"<p>Returns the (computed) value of the property <code>liveConnect</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn() -> Object"},"getLoadTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>loadTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loadTimeout}.</p>","!type":"fn() -> Object"},"getLoop":{"!doc":"<p>Returns the (computed) value of the property <code>loop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn() -> Object"},"getMayScript":{"!doc":"<p>Returns the (computed) value of the property <code>mayScript</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn() -> Object"},"getMenu":{"!doc":"<p>Returns the (computed) value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> Object"},"getPercentLoaded":{"!doc":"<p>Returns the current loaded state from the Flash movie.</p>","!type":"fn() -> +Integer"},"getPlay":{"!doc":"<p>Returns the (computed) value of the property <code>play</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn() -> Object"},"getQuality":{"!doc":"<p>Returns the (computed) value of the property <code>quality</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quality}.</p>","!type":"fn() -> Object"},"getScale":{"!doc":"<p>Returns the (computed) value of the property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn() -> Object"},"getSource":{"!doc":"<p>Returns the (computed) value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn() -> Object"},"getVariables":{"!doc":"<p>Returns the (computed) value of the property <code>variables</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #variables}.</p>","!type":"fn() -> Object"},"getWmode":{"!doc":"<p>Returns the (computed) value of the property <code>wmode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wmode}.</p>","!type":"fn() -> Object"},"initAllowScriptAccess":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowScriptAccess</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowScriptAccess}.</p>","!type":"fn(value: Object) -> Object"},"initId":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>id</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: Object) -> Object"},"initLiveConnect":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>liveConnect</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn(value: Object) -> Object"},"initLoadTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>loadTimeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #loadTimeout}.</p>","!type":"fn(value: Object) -> Object"},"initLoop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>loop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn(value: Object) -> Object"},"initMayScript":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>mayScript</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn(value: Object) -> Object"},"initMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>menu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"initPlay":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>play</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn(value: Object) -> Object"},"initQuality":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>quality</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #quality}.</p>","!type":"fn(value: Object) -> Object"},"initScale":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scale</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn(value: Object) -> Object"},"initSource":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>source</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"},"initVariables":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>variables</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #variables}.</p>","!type":"fn(value: Object) -> Object"},"initWmode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wmode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wmode}.</p>","!type":"fn(value: Object) -> Object"},"isLiveConnect":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>liveConnect</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn() -> bool"},"isLoaded":{"!doc":"<p>Checks if the movie is loaded.</p>","!type":"fn() -> bool"},"isLoop":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>loop</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn() -> bool"},"isMayScript":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>mayScript</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn() -> bool"},"isMenu":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>menu</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> bool"},"isPlay":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>play</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn() -> bool"},"resetAllowScriptAccess":{"!doc":"<p>Resets the user value of the property <code>allowScriptAccess</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowScriptAccess}.</p>","!type":"fn()"},"resetId":{"!doc":"<p>Resets the user value of the property <code>id</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn()"},"resetLiveConnect":{"!doc":"<p>Resets the user value of the property <code>liveConnect</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn()"},"resetLoadTimeout":{"!doc":"<p>Resets the user value of the property <code>loadTimeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #loadTimeout}.</p>","!type":"fn()"},"resetLoop":{"!doc":"<p>Resets the user value of the property <code>loop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn()"},"resetMayScript":{"!doc":"<p>Resets the user value of the property <code>mayScript</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn()"},"resetMenu":{"!doc":"<p>Resets the user value of the property <code>menu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn()"},"resetPlay":{"!doc":"<p>Resets the user value of the property <code>play</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn()"},"resetQuality":{"!doc":"<p>Resets the user value of the property <code>quality</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #quality}.</p>","!type":"fn()"},"resetScale":{"!doc":"<p>Resets the user value of the property <code>scale</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn()"},"resetSource":{"!doc":"<p>Resets the user value of the property <code>source</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn()"},"resetVariables":{"!doc":"<p>Resets the user value of the property <code>variables</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #variables}.</p>","!type":"fn()"},"resetWmode":{"!doc":"<p>Resets the user value of the property <code>wmode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wmode}.</p>","!type":"fn()"},"setAllowScriptAccess":{"!doc":"<p>Sets the user value of the property <code>allowScriptAccess</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowScriptAccess}.</p>","!type":"fn(value: Object) -> Object"},"setId":{"!doc":"<p>Sets the user value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: Object) -> Object"},"setLiveConnect":{"!doc":"<p>Sets the user value of the property <code>liveConnect</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn(value: Object) -> Object"},"setLoadTimeout":{"!doc":"<p>Sets the user value of the property <code>loadTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loadTimeout}.</p>","!type":"fn(value: Object) -> Object"},"setLoop":{"!doc":"<p>Sets the user value of the property <code>loop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn(value: Object) -> Object"},"setMayScript":{"!doc":"<p>Sets the user value of the property <code>mayScript</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn(value: Object) -> Object"},"setMenu":{"!doc":"<p>Sets the user value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"setPlay":{"!doc":"<p>Sets the user value of the property <code>play</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn(value: Object) -> Object"},"setQuality":{"!doc":"<p>Sets the user value of the property <code>quality</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quality}.</p>","!type":"fn(value: Object) -> Object"},"setScale":{"!doc":"<p>Sets the user value of the property <code>scale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scale}.</p>","!type":"fn(value: Object) -> Object"},"setSource":{"!doc":"<p>Sets the user value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"},"setVariables":{"!doc":"<p>Sets the user value of the property <code>variables</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #variables}.</p>","!type":"fn(value: Object) -> Object"},"setWmode":{"!doc":"<p>Sets the user value of the property <code>wmode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wmode}.</p>","!type":"fn(value: Object) -> Object"},"toggleLiveConnect":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>liveConnect</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveConnect}.</p>","!type":"fn() -> bool"},"toggleLoop":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>loop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #loop}.</p>","!type":"fn() -> bool"},"toggleMayScript":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>mayScript</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #mayScript}.</p>","!type":"fn() -> bool"},"toggleMenu":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> bool"},"togglePlay":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>play</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #play}.</p>","!type":"fn() -> bool"}}},"Html":{"!proto":"qx.ui.core.Widget","!doc":"<p>The Html widget embeds plain <span class=\"caps\">HTML</span> code into the application</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the canvas widget.</p>\n\n<pre class=\"javascript\">\nvar html = new qx.ui.embed.Html();\nhtml.setHtml(\"<h1>Hello World</h1>\");\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/html.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_applyCssClass":{"!doc":"<p>Applies changes of the property value of the property <code>cssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cssClass}.</p>","!type":"fn(value: string, old: string)"},"_applyFont":{"!doc":"<p>Applies changes of the property value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: +Font, old: +Font)"},"_applyHtml":{"!doc":"<p>Applies changes of the property value of the property <code>html</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn(value: string, old: string)"},"_applySelectable":{"!doc":"<p>Applies changes of the property value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTextColor":{"!doc":"<p>Applies changes of the property value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"getCssClass":{"!doc":"<p>Returns the (computed) value of the property <code>cssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cssClass}.</p>","!type":"fn() -> Object"},"getFocusElement":{"!type":"fn()"},"getHtml":{"!doc":"<p>Returns the (computed) value of the property <code>html</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn() -> Object"},"initCssClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cssClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cssClass}.</p>","!type":"fn(value: Object) -> Object"},"initHtml":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>html</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn(value: Object) -> Object"},"resetCssClass":{"!doc":"<p>Resets the user value of the property <code>cssClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cssClass}.</p>","!type":"fn()"},"resetHtml":{"!doc":"<p>Resets the user value of the property <code>html</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn()"},"setCssClass":{"!doc":"<p>Sets the user value of the property <code>cssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cssClass}.</p>","!type":"fn(value: Object) -> Object"},"setHtml":{"!doc":"<p>Sets the user value of the property <code>html</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn(value: Object) -> Object"}}},"Iframe":{"!proto":"qx.ui.embed.AbstractIframe","!doc":"<p>Container widget for internal frames (iframes).\nAn iframe can display any <span class=\"caps\">HTML</span> page inside the widget.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\nvar document = this.getRoot();\nvar iframe = new qx.ui.embed.Iframe(\"http://www.qooxdoo.org\");\ndocument.add(iframe);\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/iframe.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_applyNativeContextMenu":{"!doc":"<p>Applies changes of the property value of the property <code>nativeContextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn(value: bool, old: bool)"},"_applyNativeHelp":{"!doc":"<p>Applies changes of the property value of the property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn(value: bool, old: bool)"},"_applyScrollbar":{"!doc":"<p>Applies changes of the property value of the property <code>scrollbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn(value: Object, old: Object)"},"_createBlockerElement":{"!doc":"<p>Creates <div> element which is aligned over iframe node to avoid losing pointer events.</p>","!type":"fn() -> Object"},"_createContentElement":{"!type":"fn()"},"_getIframeElement":{"!type":"fn()"},"_onIframeLoad":{"!doc":"<p>Reacts on native load event and redirects it to the widget.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onNativeContextMenu":{"!doc":"<p>Stops the <code>contextmenu</code> event from showing the native context menu</p>","!type":"fn(e: +qx.event.type.Mouse)"},"_syncSourceAfterDOMMove":{"!doc":"<p>Checks if the iframe element is out of sync. This can happen in Firefox\nif the iframe is moved around and the source is changed right after.\nThe root cause is that Firefox is reloading the iframe when its position\nin <span class=\"caps\">DOM</span> has changed.</p>","!type":"fn()"},"block":{"!doc":"<p>Cover the iframe with a transparent blocker div element. This prevents\npointer or key events to be handled by the iframe. To release the blocker\nuse {@link #release}.</p>","!type":"fn()"},"getNativeHelp":{"!doc":"<p>Returns the (computed) value of the property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn() -> Object"},"getScrollbar":{"!doc":"<p>Returns the (computed) value of the property <code>scrollbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn() -> Object"},"initNativeHelp":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nativeHelp</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn(value: Object) -> Object"},"initScrollbar":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollbar</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn(value: Object) -> Object"},"isNativeHelp":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>nativeHelp</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn() -> bool"},"release":{"!doc":"<p>Release the blocker set by {@link #block}.</p>","!type":"fn()"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"resetNativeHelp":{"!doc":"<p>Resets the user value of the property <code>nativeHelp</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn()"},"resetScrollbar":{"!doc":"<p>Resets the user value of the property <code>scrollbar</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn()"},"setLayoutParent":{"!type":"fn(parent: +undefined)"},"setNativeHelp":{"!doc":"<p>Sets the user value of the property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn(value: Object) -> Object"},"setScrollbar":{"!doc":"<p>Sets the user value of the property <code>scrollbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn(value: Object) -> Object"},"toggleNativeHelp":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn() -> bool"}}},"ThemedIframe":{"!proto":"qx.ui.embed.AbstractIframe","!doc":"<p>Container widget for internal frames (iframes) with qooxdoo scroll bar and\nsize hint support.</p>\n\n<p>An iframe can display any <span class=\"caps\">HTML</span> page inside the widget. Note that custom\nscroll bars do only work if the iframe&#8217;s source points to the same domain\nas the application.</p>","!type":"fn()","prototype":{"_addRollListener":{"!doc":"<p>Attach roll listener to the iframe</p>","!type":"fn()"},"_configureScrollbar":{"!doc":"<p>Configures the given scollbar</p>","!type":"fn(scrollbarId: string, show: bool, containerSize: +Integer, contentSize: +Integer)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_disableScollbars":{"!doc":"<p>Hide all scrollbars and stop observing the iframe document</p>","!type":"fn()"},"_getIframeElement":{"!type":"fn()"},"_getIframeSize":{"!doc":"<p>Compute the size of the iframe body</p>","!type":"fn() -> Object"},"_onIframeLoad":{"!doc":"<p>Event handler for the iframe&#8217;s load event</p>","!type":"fn()"},"_onIframeObserverInterval":{"!doc":"<p>Event handler, which is called periodically to update the scroll bars</p>","!type":"fn()"},"_onIframeResize":{"!doc":"<p>Event handler for resize event of the iframe widget.</p>","!type":"fn()"},"_onScrollBarX":{"!doc":"<p>Event handler for the scroll event of the horizontal scrollbar</p>","!type":"fn(e: +qx.event.type.Data)"},"_onScrollBarY":{"!doc":"<p>Event handler for the scroll event of the vertical scrollbar</p>","!type":"fn(e: +qx.event.type.Data)"},"_preventIframeScrolling":{"!doc":"<p>Try to hide native scrollbars in the iframe</p>","!type":"fn()"},"_startIframeObserver":{"!doc":"<p>Start observing size changes of the iframe document</p>","!type":"fn()"},"_stopIframeObserver":{"!doc":"<p>Stop observing size changes of the iframe document</p>","!type":"fn()"},"_updateCornerWidget":{"!doc":"<p>Update visibility of the corner widget based on the visibility of the\nscrollbars</p>","!type":"fn()"},"_updateScrollbars":{"!doc":"<p>Recompute scrollbar visibility and positions based on the iframe&#8217;s\ndocument size</p>","!type":"fn()"},"getScrollbarX":{"!doc":"<p>Returns the (computed) value of the property <code>scrollbarX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn() -> Object"},"getScrollbarY":{"!doc":"<p>Returns the (computed) value of the property <code>scrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn() -> Object"},"initScrollbarX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollbarX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn(value: Object) -> Object"},"initScrollbarY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollbarY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn(value: Object) -> Object"},"resetScrollbar":{"!doc":"<p>Resets the user value of the property <code>scrollbar</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn()"},"resetScrollbarX":{"!doc":"<p>Resets the user value of the property <code>scrollbarX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn()"},"resetScrollbarY":{"!doc":"<p>Resets the user value of the property <code>scrollbarY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn()"},"scrollToX":{"!doc":"<p>Scrolls the iframe&#8217;s content to the given left coordinate</p>","!type":"fn(x: +Integer)"},"scrollToY":{"!doc":"<p>Scrolls the iframe&#8217;s content to the given top coordinate</p>","!type":"fn(y: +Integer)"},"setScrollbar":{"!doc":"<p>Sets the values of the property group <code>scrollbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbar}.</p>","!type":"fn(scrollbarX: Object, scrollbarY: Object)"},"setScrollbarX":{"!doc":"<p>Sets the user value of the property <code>scrollbarX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarX}.</p>","!type":"fn(value: Object) -> Object"},"setScrollbarY":{"!doc":"<p>Sets the user value of the property <code>scrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollbarY}.</p>","!type":"fn(value: Object) -> Object"}}}},"form":{"AbstractField":{"!proto":"qx.ui.core.Widget","!doc":"<p>This is a basic form field with common functionality for\n{@link TextArea} and {@link TextField}.</p>\n\n<p>On every keystroke the value is synchronized with the\nvalue of the textfield. Value changes can be monitored by listening to the\n{@link #input} or {@link #changeValue} events, respectively.</p>","__addPlaceholderRules":{"!doc":"<p>Adds the <span class=\"caps\">CSS</span> rules needed to style the native placeholder element.</p>","!type":"fn()"},"!type":"fn()","prototype":{"__fireChangeValueEvent":{"!doc":"<p>Handles the firing of the changeValue event including the local cache\nfor sending the old value in the event.</p>","!type":"fn(value: string)"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyFont":{"!doc":"<p>Applies changes of the property value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: +Font, old: +Font)"},"_applyMaxLength":{"!doc":"<p>Applies changes of the property value of the property <code>maxLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn(value: +PositiveInteger, old: +PositiveInteger)"},"_applyPlaceholder":{"!doc":"<p>Applies changes of the property value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: string, old: string)"},"_applyReadOnly":{"!doc":"<p>Applies changes of the property value of the property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTextAlign":{"!doc":"<p>Applies changes of the property value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object, old: Object)"},"_applyTextColor":{"!doc":"<p>Applies changes of the property value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_createContentElement":{"!type":"fn()"},"_createInputElement":{"!doc":"<p>Creates the input element. Derived classes may override this\nmethod, to create different input elements.</p>","!type":"fn() -> +qx.html.Input"},"_getContentHint":{"!type":"fn()"},"_getPlaceholderElement":{"!doc":"<p>Returns the placeholder label and creates it if necessary.</p>","!type":"fn()"},"_getTextSize":{"!doc":"<p>Returns the text size.</p>","!type":"fn() -> +Map"},"_onChangeContent":{"!doc":"<p>Event listener for change event of content element</p>","!type":"fn(e: +qx.event.type.Data)"},"_onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"_onChangeTheme":{"!type":"fn()"},"_onHtmlInput":{"!doc":"<p>Event listener for native input events. Redirects the event\nto the widget. Also checks for the filter and max length.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onPointerDownPlaceholder":{"!doc":"<p>Remove the fake placeholder</p>","!type":"fn()"},"_onWebFontStatusChange":{"!doc":"<p>Triggers text size recalculation after a web font was loaded</p>","!type":"fn(ev: +qx.event.type.Data)"},"_removePlaceholder":{"!doc":"<p>Helper to remove the placeholder. Deletes the placeholder text from the\nfield and removes the state.</p>","!type":"fn()"},"_renderContentElement":{"!doc":"<p>Hook into {@link qx.ui.form.AbstractField#renderLayout} method.\nCalled after the contentElement has a width and an innerWidth.</p>\n\n<p>Note: This was introduced to fix <span class=\"caps\">BUG</span>#1585</p>","!type":"fn(innerHeight: +Integer, element: +Element)"},"_showPlaceholder":{"!doc":"<p>Helper to show the placeholder text in the field. It checks for all\nstates and possible conditions and shows the placeholder only if allowed.</p>","!type":"fn()"},"_syncPlaceholder":{"!doc":"<p>Updates the placeholder text with the <span class=\"caps\">DOM</span></p>","!type":"fn()"},"clearTextSelection":{"!doc":"<p>Clears the current selection.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn()"},"getFilter":{"!doc":"<p>Returns the (computed) value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn() -> Object"},"getFocusElement":{"!type":"fn()"},"getLiveUpdate":{"!doc":"<p>Returns the (computed) value of the property <code>liveUpdate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn() -> Object"},"getMaxLength":{"!doc":"<p>Returns the (computed) value of the property <code>maxLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn() -> Object"},"getPlaceholder":{"!doc":"<p>Returns the (computed) value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn() -> Object"},"getReadOnly":{"!doc":"<p>Returns the (computed) value of the property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn() -> Object"},"getTextAlign":{"!doc":"<p>Returns the (computed) value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn() -> Object"},"getTextSelection":{"!doc":"<p>Returns the current selection.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn() -> string"},"getTextSelectionEnd":{"!doc":"<p>Returns the end of the text selection</p>","!type":"fn() -> +Integer"},"getTextSelectionLength":{"!doc":"<p>Returns the current selection length.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn() -> +Integer"},"getTextSelectionStart":{"!doc":"<p>Returns the start of the text selection</p>","!type":"fn() -> +Integer"},"getValue":{"!doc":"<p>Returns the current value of the textfield.</p>","!type":"fn() -> string"},"initFilter":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>filter</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn(value: Object) -> Object"},"initLiveUpdate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>liveUpdate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn(value: Object) -> Object"},"initMaxLength":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxLength</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn(value: Object) -> Object"},"initPlaceholder":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placeholder</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"initReadOnly":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>readOnly</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn(value: Object) -> Object"},"initTextAlign":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>textAlign</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object) -> Object"},"isLiveUpdate":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>liveUpdate</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn() -> bool"},"isReadOnly":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>readOnly</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"resetFilter":{"!doc":"<p>Resets the user value of the property <code>filter</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn()"},"resetLiveUpdate":{"!doc":"<p>Resets the user value of the property <code>liveUpdate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn()"},"resetMaxLength":{"!doc":"<p>Resets the user value of the property <code>maxLength</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn()"},"resetPlaceholder":{"!doc":"<p>Resets the user value of the property <code>placeholder</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn()"},"resetReadOnly":{"!doc":"<p>Resets the user value of the property <code>readOnly</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn()"},"resetTextAlign":{"!doc":"<p>Resets the user value of the property <code>textAlign</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the value to the default</p>","!type":"fn()"},"selectAllText":{"!doc":"<p>Selects the whole content</p>","!type":"fn()"},"setFilter":{"!doc":"<p>Sets the user value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn(value: Object) -> Object"},"setLayoutParent":{"!type":"fn(parent: +undefined)"},"setLiveUpdate":{"!doc":"<p>Sets the user value of the property <code>liveUpdate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn(value: Object) -> Object"},"setMaxLength":{"!doc":"<p>Sets the user value of the property <code>maxLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn(value: Object) -> Object"},"setPlaceholder":{"!doc":"<p>Sets the user value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"setReadOnly":{"!doc":"<p>Sets the user value of the property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn(value: Object) -> Object"},"setTextAlign":{"!doc":"<p>Sets the user value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object) -> Object"},"setTextSelection":{"!doc":"<p>Set the selection to the given start and end (zero-based).\nIf no end value is given the selection will extend to the\nend of the textfield&#8217;s content.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn(start: +Integer, end: +Integer)"},"setValue":{"!doc":"<p>Sets the value of the textfield to the given value.</p>","!type":"fn(value: string)"},"tabFocus":{"!type":"fn()"},"toggleLiveUpdate":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>liveUpdate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn() -> bool"},"toggleReadOnly":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn() -> bool"}}},"AbstractSelectBox":{"!proto":"qx.ui.core.Widget","!doc":"<p>Basic class for a selectbox like lists. Basically supports a popup\nwith a list and the whole children management.</p>","!type":"fn()","prototype":{"_applyMaxListHeight":{"!doc":"<p>Applies changes of the property value of the property <code>maxListHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn(value: number, old: number)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_defaultFormat":{"!doc":"<p>Return the formatted label text from the <code>ListItem</code>.\nThe formatter removes all <span class=\"caps\">HTML</span> tags and converts all <span class=\"caps\">HTML</span> entities\nto string characters when the rich property is <code>true</code>.</p>","!type":"fn(item: +ListItem) -> string"},"_onBlur":{"!doc":"<p>Handler for the blur event of the current widget.</p>","!type":"fn(e: +qx.event.type.Focus)"},"_onKeyPress":{"!doc":"<p>Reacts on special keys and forwards other key events to the list widget.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onListChangeSelection":{"!doc":"<p>Syncs the own property from the list change</p>","!type":"fn(e: +qx.event.type.Data)"},"_onListPointerDown":{"!doc":"<p>Redirects pointerdown event from the list to this widget.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPopupChangeVisibility":{"!doc":"<p>Redirects changeVisibility event from the list to this widget.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onResize":{"!doc":"<p>Updates list minimum size.</p>","!type":"fn(e: +qx.event.type.Data)"},"close":{"!doc":"<p>Hides the list popup.</p>","!type":"fn()"},"getChildrenContainer":{"!doc":"<p>Returns the list widget.</p>","!type":"fn() -> +qx.ui.form.List"},"getFormat":{"!doc":"<p>Returns the (computed) value of the property <code>format</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #format}.</p>","!type":"fn() -> Object"},"getMaxListHeight":{"!doc":"<p>Returns the (computed) value of the property <code>maxListHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn() -> Object"},"initFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>format</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #format}.</p>","!type":"fn(value: Object) -> Object"},"initMaxListHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxListHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn(value: Object) -> Object"},"open":{"!doc":"<p>Shows the list popup.</p>","!type":"fn()"},"resetFormat":{"!doc":"<p>Resets the user value of the property <code>format</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #format}.</p>","!type":"fn()"},"resetMaxListHeight":{"!doc":"<p>Resets the user value of the property <code>maxListHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn()"},"setFormat":{"!doc":"<p>Sets the user value of the property <code>format</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #format}.</p>","!type":"fn(value: Object) -> Object"},"setMaxListHeight":{"!doc":"<p>Sets the user value of the property <code>maxListHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn(value: Object) -> Object"},"toggle":{"!doc":"<p>Toggles the popup&#8217;s visibility.</p>","!type":"fn()"}}},"Button":{"!proto":"qx.ui.basic.Atom","!doc":"<p>A Button widget which supports various states and allows it to be used\nvia the mouse, touch, pen and the keyboard.</p>\n\n<p>If the user presses the button by clicking on it, or the <code>Enter</code> or\n<code>Space</code> keys, the button fires an {@link qx.ui.core.MExecutable#execute} event.</p>\n\n<p>If the {@link qx.ui.core.MExecutable#command} property is set, the\ncommand is executed as well.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var button = new qx.ui.form.Button(\"Hello World\");\n\n  button.addListener(\"execute\", function(e) {\n    alert(\"Button was clicked\");\n  }, this);\n\n  this.getRoot().add(button);\n</pre>\n\n<p>This example creates a button with the label &#8220;Hello World&#8221; and attaches an\nevent listener to the {@link #execute} event.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/button.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_onKeyDown":{"!doc":"<p>Listener method for &#8220;keydown&#8221; event.</p>\n\n<p>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state\nfor the keys &#8220;Enter&#8221; or &#8220;Space&#8221;</p>","!type":"fn(e: +Event)"},"_onKeyUp":{"!doc":"<p>Listener method for &#8220;keyup&#8221; event.</p>\n\n<p>Removes &#8220;abandoned&#8221; and &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set)\nfor the keys &#8220;Enter&#8221; or &#8220;Space&#8221;</p>","!type":"fn(e: +Event)"},"_onPointerDown":{"!doc":"<p>Listener method for &#8220;pointerdown&#8221; event\n<ul>\n<li>Removes &#8220;abandoned&#8221; state</li>\n<li>Adds &#8220;pressed&#8221; state</li>\n</ul></p>","!type":"fn(e: +Event)"},"_onPointerOut":{"!doc":"<p>Listener method for &#8220;pointerout&#8221; event\n<ul>\n<li>Removes &#8220;hovered&#8221; state</li>\n<li>Adds &#8220;abandoned&#8221; and removes &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +Event)"},"_onPointerOver":{"!doc":"<p>Listener method for &#8220;pointerover&#8221; event\n<ul>\n<li>Adds state &#8220;hovered&#8221;</li>\n<li>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state (if &#8220;abandoned&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +Event)"},"_onPointerUp":{"!doc":"<p>Listener method for &#8220;pointerup&#8221; event\n <ul>\n <li>Removes &#8220;pressed&#8221; state (if set)</li>\n <li>Removes &#8220;abandoned&#8221; state (if set)</li>\n <li>Adds &#8220;hovered&#8221; state (if &#8220;abandoned&#8221; state is not set)</li>\n</ul></p>","!type":"fn(e: +Event)"},"_onTap":{"!doc":"<p>Listener method for &#8220;tap&#8221; event which stops the propagation.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"press":{"!doc":"<p>Manually press the button</p>","!type":"fn()"},"release":{"!doc":"<p>Manually release the button</p>","!type":"fn()"},"reset":{"!doc":"<p>Completely reset the button (remove all states)</p>","!type":"fn()"}}},"CheckBox":{"!proto":"qx.ui.form.ToggleButton","!doc":"<p>A check box widget with an optional label.</p>","!type":"fn()"},"ComboBox":{"!proto":"qx.ui.form.AbstractSelectBox","!doc":"<p>Basically a text fields which allows a selection from a list of\npreconfigured options. Allows custom user input. Public <span class=\"caps\">API</span> is value\noriented.</p>\n\n<p>To work with selections without custom input the ideal candidates are\nthe {@link SelectBox} or the {@link RadioGroup}.</p>","!type":"fn()","prototype":{"_applyPlaceholder":{"!doc":"<p>Applies changes of the property value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: string, old: string)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onKeyPress":{"!type":"fn(e: +undefined)"},"_onListChangeSelection":{"!type":"fn(e: +undefined)"},"_onListPointerDown":{"!type":"fn(e: +undefined)"},"_onPopupChangeVisibility":{"!type":"fn(e: +undefined)"},"_onTap":{"!doc":"<p>Toggles the popup&#8217;s visibility.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onTextFieldChangeValue":{"!doc":"<p>Reacts on value changes of the text field and syncs the\nvalue to the combobox.</p>","!type":"fn(e: +qx.event.type.Data)"},"_setPreselectedItem":{"!doc":"<p>Apply pre-selected item</p>","!type":"fn()"},"clearTextSelection":{"!doc":"<p>Clears the current selection.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn()"},"focus":{"!type":"fn()"},"getPlaceholder":{"!doc":"<p>Returns the (computed) value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn() -> Object"},"getTextSelection":{"!doc":"<p>Returns the current selection.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn() -> string"},"getTextSelectionLength":{"!doc":"<p>Returns the current selection length.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn() -> +Integer"},"getValue":{"!type":"fn()"},"initPlaceholder":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placeholder</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"resetAllTextSelection":{"!doc":"<p>Clear any text selection, then select all text</p>","!type":"fn()"},"resetPlaceholder":{"!doc":"<p>Resets the user value of the property <code>placeholder</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn()"},"resetValue":{"!type":"fn()"},"selectAllText":{"!doc":"<p>Selects the whole content</p>","!type":"fn()"},"setPlaceholder":{"!doc":"<p>Sets the user value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"setTextSelection":{"!doc":"<p>Set the selection to the given start and end (zero-based).\nIf no end value is given the selection will extend to the\nend of the textfield&#8217;s content.\nThis method only works if the widget is already created and\nadded to the document.</p>","!type":"fn(start: +Integer, end: +Integer)"},"setValue":{"!type":"fn(value: +undefined)"},"tabFocus":{"!type":"fn()"}}},"core":{"AbstractVirtualBox":{"!proto":"qx.ui.core.Widget","!doc":"<p>Basic class for widgets which need a virtual list as popup for example a\nSelectBox. It&#8217;s basically supports a drop-down as popup with a virtual list\nand the whole children management.</p>","!type":"fn()","prototype":{"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_applyIconOptions":{"!doc":"<p>Applies changes of the property value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyIconPath":{"!doc":"<p>Applies changes of the property value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: string, old: string)"},"_applyLabelOptions":{"!doc":"<p>Applies changes of the property value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyLabelPath":{"!doc":"<p>Applies changes of the property value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: string, old: string)"},"_applyMaxListHeight":{"!doc":"<p>Applies changes of the property value of the property <code>maxListHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn(value: number, old: number)"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_applyRowHeight":{"!doc":"<p>Applies changes of the property value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_beforeClose":{"!doc":"<p>This method is called before the drop-down is closed.</p>","!type":"fn()"},"_beforeOpen":{"!doc":"<p>This method is called before the drop-down is opened.</p>","!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getAction":{"!doc":"<p>Returns the action dependent on the user interaction: e. q. <code>open</code>,\nor <code>close</code>.</p>","!type":"fn(event: +qx.event.type.KeySequence) -> string"},"_getBindPath":{"!doc":"<p>Helper Method to create bind path depended on the passed path.</p>","!type":"fn(source: string, path?: string) -> string"},"_handleKeyboard":{"!doc":"<p>Handles the complete keyboard events for user interaction. If there is\nno defined user interaction {@link #_getAction}, the event is delegated\nto the {@link qx.ui.form.core.VirtualDropDownList#_handleKeyboard} method.</p>","!type":"fn(event: +qx.event.type.KeySequence)"},"_handlePointer":{"!doc":"<p>Handles all pointer events dispatched on the widget.</p>","!type":"fn(event: +qx.event.type.Pointer)"},"_isModifierPressed":{"!doc":"<p>Helper method to check if one modifier key is pressed. e.q.\n<code>Control</code>, <code>Shift</code>, <code>Meta</code> or\n<code>Alt</code>.</p>","!type":"fn(event: +qx.event.type.KeySequence) -> bool"},"_onBlur":{"!doc":"<p>Handler for the blur event of the current widget.</p>","!type":"fn(event: +qx.event.type.Focus)"},"_onPopupChangeVisibility":{"!doc":"<p>Adds/removes the state &#8216;popupOpen&#8217; depending on the visibility of the popup</p>","!type":"fn(event: +qx.event.type.Data)"},"_onResize":{"!doc":"<p>Updates drop-down minimum size.</p>","!type":"fn(event: +qx.event.type.Data)"},"close":{"!doc":"<p>Hides the drop-down.</p>","!type":"fn()"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getItemHeight":{"!doc":"<p>Returns the (computed) value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"getMaxListHeight":{"!doc":"<p>Returns the (computed) value of the property <code>maxListHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initItemHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>itemHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"initMaxListHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxListHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"open":{"!doc":"<p>Shows the drop-down.</p>","!type":"fn()"},"refresh":{"!doc":"<p>Trigger a rebuild from the internal data structure.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetItemHeight":{"!doc":"<p>Resets the user value of the property <code>itemHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"resetMaxListHeight":{"!doc":"<p>Resets the user value of the property <code>maxListHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setItemHeight":{"!doc":"<p>Sets the user value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"setMaxListHeight":{"!doc":"<p>Sets the user value of the property <code>maxListHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxListHeight}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"toggle":{"!doc":"<p>Toggles the drop-down visibility.</p>","!type":"fn()"}}},"VirtualDropDownList":{"!proto":"qx.ui.popup.Popup","!doc":"<p>A drop-down (popup) widget which contains a virtual list for selection.</p>","!type":"fn()","prototype":{"__adjustHeight":{"!doc":"<p>Adjust the drop-down to the available height. Ensure that the list\nis never bigger that the max list height and the available space\nin the viewport.</p>","!type":"fn()"},"__adjustSize":{"!doc":"<p>Adjust the drop-down to the available width and height, by calling\n{@link #__adjustWidth} and {@link #__adjustHeight}.</p>","!type":"fn()"},"__adjustWidth":{"!doc":"<p>Adjust the drop-down to the available width. The width is limited by\nthe current with from the _target.</p>","!type":"fn()"},"__getAvailableHeigth":{"!doc":"<p>Calculates the available height in the viewport.</p>","!type":"fn() -> +Integer"},"__onChangeSelection":{"!doc":"<p>Handler for the local selection change. The method is responsible for\nthe synchronization between the own selection and the selection\nform the drop-down.</p>","!type":"fn(event: +qx.event.type.Data)"},"__onChangeVisibility":{"!doc":"<p>Handler for the own visibility changes. The method is responsible that\nthe list selects the current selected item.</p>","!type":"fn(event: +qx.event.type.Data)"},"__selectPreselected":{"!doc":"<p>Helper method to select the current preselected item, also closes the\ndrop-down.</p>","!type":"fn()"},"__synchronizeSelection":{"!doc":"<p>Helper method to synchronize both selection. The target selection has\nthe same selection like the source selection after the synchronization.</p>","!type":"fn(source: +qx.data.Array, target: +qx.data.Array)"},"_applySelection":{"!doc":"<p>Applies changes of the property value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_handleKeyboard":{"!doc":"<p>Handles the complete keyboard events dispatched on the widget.</p>","!type":"fn(event: +qx.event.type.KeySequence)"},"_handlePointer":{"!doc":"<p>Handles all mouse events dispatched on the widget.</p>","!type":"fn(event: +qx.event.type.Mouse)"},"_onChangeDelegate":{"!doc":"<p>Handler for the delegate change event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onChangeModel":{"!doc":"<p>Handler for the model change event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onListChangeSelection":{"!doc":"<p>Handler for the selection change on the list. The method is responsible\nfor the synchronization between the list selection and the own selection.</p>","!type":"fn(event: +qx.event.type.Data)"},"close":{"!doc":"<p>Hides the drop-down.</p>","!type":"fn()"},"getSelection":{"!doc":"<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn() -> Object"},"initSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"open":{"!doc":"<p>Shows the drop-down.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn()"},"setPreselected":{"!doc":"<p>Pre-selects the drop-down item corresponding to the given model object.</p>","!type":"fn(modelItem: Object)"},"setSelection":{"!doc":"<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"}}}},"DateField":{"!proto":"qx.ui.core.Widget","!doc":"<p>A <strong>date field</strong> is like a combo box with the date as popup. As button to\nopen the calendar a calendar icon is shown at the right to the textfield.</p>\n\n<p>To be conform with all form widgets, the {@link qx.ui.form.IForm} interface\nis implemented.</p>\n\n<p>The following example creates a date field and sets the current\ndate as selected.</p>\n\n<pre class=\"javascript\">\nvar dateField = new qx.ui.form.DateField();\nthis.getRoot().add(dateField, {top: 20, left: 20});\ndateField.setValue(new Date());\n</pre>","!type":"fn()","prototype":{"_addLocaleChangeListener":{"!doc":"<p>Checks for &#8220;qx.dynlocale&#8221; and adds a listener to the locale changes.\nOn every change, {@link #_setDefaultDateFormat} is called to reinitialize\nthe format. You can easily override that method to prevent that behavior.</p>","!type":"fn()"},"_applyDateFormat":{"!doc":"<p>Applies changes of the property value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: +qx.util.format.DateFormat, old: +qx.util.format.DateFormat)"},"_applyPlaceholder":{"!doc":"<p>Applies changes of the property value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: string, old: string)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onBlur":{"!doc":"<p>Handler for the blur event of the current widget.</p>","!type":"fn(e: +qx.event.type.Focus)"},"_onChangeDate":{"!doc":"<p>Handler method which handles the tap on the calender popup.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onKeyPress":{"!doc":"<p>Handler method which handles the key press. It forwards all key event\nto the opened date chooser except the escape key event. Escape closes\nthe popup.\nIf the list is cloned, all key events will not be processed further.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onPopupChangeVisibility":{"!doc":"<p>Redirects changeVisibility event from the list to this widget.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onTap":{"!doc":"<p>Toggles the popup&#8217;s visibility.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onTextFieldChangeValue":{"!doc":"<p>Reacts on value changes of the text field and syncs the\nvalue to the combobox.</p>","!type":"fn(e: +qx.event.type.Data)"},"_setDefaultDateFormat":{"!doc":"<p>Sets the default date format which is returned by\n{@link #getDefaultDateFormatter}. You can overrride this method to\ndefine your own default format.</p>","!type":"fn()"},"close":{"!doc":"<p>Hides the date chooser popup.</p>","!type":"fn()"},"getDateFormat":{"!doc":"<p>Returns the (computed) value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn() -> Object"},"getPlaceholder":{"!doc":"<p>Returns the (computed) value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the current set date, parsed from the input-field\ncorresponding to the {@link #dateFormat}.\nIf the given text could not be parsed, <code>null</code> will be returned.</p>","!type":"fn() -> +Date"},"initDateFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dateFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: Object) -> Object"},"initPlaceholder":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placeholder</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"isEmpty":{"!doc":"<p>Checks if the textfield of the DateField is empty.</p>","!type":"fn() -> bool"},"open":{"!doc":"<p>Shows the date chooser popup.</p>","!type":"fn()"},"resetDateFormat":{"!doc":"<p>Resets the user value of the property <code>dateFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn()"},"resetPlaceholder":{"!doc":"<p>Resets the user value of the property <code>placeholder</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the DateField. The textfield will be empty and the datechooser\nwill also have no selection.</p>","!type":"fn()"},"setDateFormat":{"!doc":"<p>Sets the user value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: Object) -> Object"},"setPlaceholder":{"!doc":"<p>Sets the user value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>This method sets the date, which will be formatted according to\n#dateFormat to the date field. It will also select the date in the\ncalendar popup.</p>","!type":"fn(value: +Date)"},"toggle":{"!doc":"<p>Toggles the date chooser popup visibility.</p>","!type":"fn()"}},"getDefaultDateFormatter":{"!doc":"<p>Get the shared default date formatter</p>","!type":"fn() -> +qx.util.format.DateFormat"}},"Form":{"!proto":"qx.core.Object","!doc":"<p>The form object is responsible for managing form items. For that, it takes\nadvantage of two existing qooxdoo classes.\nThe {@link qx.ui.form.Resetter} is used for resetting and the\n{@link qx.ui.form.validation.Manager} is used for all validation purposes.</p>\n\n<p>The view code can be found in the used renderer ({@link qx.ui.form.renderer}).</p>","!type":"fn()","prototype":{"__isFirstAdd":{"!doc":"<p>Returns whether something has already been added.</p>","!type":"fn() -> bool"},"_createResetter":{"!doc":"<p>Creates and returns the used resetter.</p>","!type":"fn() -> +qx.ui.form.Resetter"},"_createValidationManager":{"!doc":"<p>Creates and returns the used validation manager.</p>","!type":"fn() -> +qx.ui.form.validation.Manager"},"add":{"!doc":"<p>Adds a form item to the form including its internal\n{@link qx.ui.form.validation.Manager} and {@link qx.ui.form.Resetter}.</p>\n\n<p><strong>Hint:</strong> The order of all add calls represent the order in the layout.</p>","!type":"fn(item: +qx.ui.form.IForm, label: string, validator?: fn(), name?: string, validatorContext?: Object, options?: +Map)"},"addButton":{"!doc":"<p>Adds a button to the form.</p>\n\n<p><strong>Hint:</strong> The order of all add calls represent the order in the layout.</p>","!type":"fn(button: +qx.ui.form.Button, options?: +Map)"},"addGroupHeader":{"!doc":"<p>Adds a group header to the form.</p>\n\n<p><strong>Hint:</strong> The order of all add calls represent the order in the layout.</p>","!type":"fn(title: string, options?: +Map)"},"getButtonOptions":{"!doc":"<p>Accessor method for the renderer which returns all added options for\nthe buttons in an array.</p>","!type":"fn() -> +Array"},"getButtons":{"!doc":"<p>Accessor method for the renderer which returns all added buttons in an\narray.</p>","!type":"fn() -> +Array"},"getGroups":{"!doc":"<p>Accessor method for the renderer which returns all added items in a\narray containing a map of all items:\n{title: title, items: [], labels: [], names: []}</p>","!type":"fn() -> +Array"},"getItems":{"!doc":"<p>Returns all added items as a map.</p>","!type":"fn() -> +Map"},"getValidationManager":{"!doc":"<p>Returns the internally used validation manager. If you want to do some\nenhanced validation tasks, you need to use the validation manager.</p>","!type":"fn() -> +qx.ui.form.validation.Manager"},"redefineResetter":{"!doc":"<p>Redefines the values used for resetting. It calls\n{@link qx.ui.form.Resetter#redefine} to get that.</p>","!type":"fn()"},"redefineResetterItem":{"!doc":"<p>Redefines the value used for resetting of the given item. It calls\n{@link qx.ui.form.Resetter#redefineItem} to get that.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"remove":{"!doc":"<p>Removes the given item from the form.</p>","!type":"fn(item: +qx.ui.form.IForm) -> bool"},"removeButton":{"!doc":"<p>Removes the given button from the form.</p>","!type":"fn(button: +qx.ui.form.Button) -> bool"},"removeGroupHeader":{"!doc":"<p>Removes the given group header from the form. All items in the group will be moved to\nanother group (usually the previous group). If there is more than one group with\nthe same title, only the first group will be removed.</p>","!type":"fn(title: string) -> bool"},"reset":{"!doc":"<p>Resets the form. This means reseting all form items and the validation.</p>","!type":"fn()"},"validate":{"!doc":"<p>Validates the form using the\n{@link qx.ui.form.validation.Manager#validate} method.</p>","!type":"fn() -> bool"}}},"HoverButton":{"!proto":"qx.ui.basic.Atom","!doc":"<p>The HoverButton is an {@link qx.ui.basic.Atom}, which fires repeatedly\nexecute events while the pointer is over the widget.</p>\n\n<p>The rate at which the execute event is fired accelerates is the pointer keeps\ninside of the widget. The initial delay and the interval time can be set using\nthe properties {@link #firstInterval} and {@link #interval}. The\n{@link #execute} events will be fired in a shorter amount of time if the pointer\nremains over the widget, until the min {@link #minTimer} is reached.\nThe {@link #timerDecrease} property sets the amount of milliseconds which will\ndecreased after every firing.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var button = new qx.ui.form.HoverButton(\"Hello World\");\n\n  button.addListener(\"execute\", function(e) {\n    alert(\"Button is hovered\");\n  }, this);\n\n  this.getRoot.add(button);\n</pre>\n\n<p>This example creates a button with the label &#8220;Hello World&#8221; and attaches an\nevent listener to the {@link #execute} event.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/hoverbutton.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"_onInterval":{"!doc":"<p>Fire execute event on timer interval event</p>","!type":"fn()"},"_onPointerOut":{"!doc":"<p>Stop timer on pointer out</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Start timer on pointer over</p>","!type":"fn(e: +qx.event.type.Pointer)"},"getFirstInterval":{"!doc":"<p>Returns the (computed) value of the property <code>firstInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn() -> Object"},"getInterval":{"!doc":"<p>Returns the (computed) value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn() -> Object"},"getMinTimer":{"!doc":"<p>Returns the (computed) value of the property <code>minTimer</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn() -> Object"},"getTimerDecrease":{"!doc":"<p>Returns the (computed) value of the property <code>timerDecrease</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn() -> Object"},"initFirstInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>firstInterval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn(value: Object) -> Object"},"initInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>interval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"initMinTimer":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minTimer</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn(value: Object) -> Object"},"initTimerDecrease":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timerDecrease</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn(value: Object) -> Object"},"resetFirstInterval":{"!doc":"<p>Resets the user value of the property <code>firstInterval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn()"},"resetInterval":{"!doc":"<p>Resets the user value of the property <code>interval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn()"},"resetMinTimer":{"!doc":"<p>Resets the user value of the property <code>minTimer</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn()"},"resetTimerDecrease":{"!doc":"<p>Resets the user value of the property <code>timerDecrease</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn()"},"setFirstInterval":{"!doc":"<p>Sets the user value of the property <code>firstInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn(value: Object) -> Object"},"setInterval":{"!doc":"<p>Sets the user value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"setMinTimer":{"!doc":"<p>Sets the user value of the property <code>minTimer</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn(value: Object) -> Object"},"setTimerDecrease":{"!doc":"<p>Sets the user value of the property <code>timerDecrease</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn(value: Object) -> Object"}}},"IBooleanForm":{"!doc":"<p>Form interface for all form widgets which have boolean as their primary\ndata type like a checkbox.</p>","prototype":{"getValue":{"!doc":"<p>The element&#8217;s user set value.</p>","!type":"fn() -> bool"},"resetValue":{"!doc":"<p>Resets the element&#8217;s value to its initial value.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the element&#8217;s value.</p>","!type":"fn(value: bool)"}}},"IColorForm":{"!doc":"<p>Form interface for all form widgets which have boolean as their primary\ndata type like a colorchooser.</p>","prototype":{"getValue":{"!doc":"<p>The element&#8217;s user set value.</p>","!type":"fn() -> +Color"},"resetValue":{"!doc":"<p>Resets the element&#8217;s value to its initial value.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the element&#8217;s value.</p>","!type":"fn(value: +Color)"}}},"IDateForm":{"!doc":"<p>Form interface for all form widgets which have date as their primary\ndata type like datechooser&#8217;s.</p>","prototype":{"getValue":{"!doc":"<p>The element&#8217;s user set value.</p>","!type":"fn() -> +Date"},"resetValue":{"!doc":"<p>Resets the element&#8217;s value to its initial value.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the element&#8217;s value.</p>","!type":"fn(value: +Date)"}}},"IExecutable":{"!doc":"<p>Form interface for all form widgets which are executable in some way. This\ncould be a button for example.</p>","prototype":{"execute":{"!doc":"<p>Fire the &#8220;execute&#8221; event on the command.</p>","!type":"fn()"},"getCommand":{"!doc":"<p>Return the current set command of this executable.</p>","!type":"fn() -> +qx.ui.core.Command"},"setCommand":{"!doc":"<p>Set the command of this executable.</p>","!type":"fn(command: +qx.ui.core.Command)"}}},"IForm":{"!doc":"<p>Form interface for all form widgets. It includes the <span class=\"caps\">API</span> for enabled,\nrequired and valid states.</p>","prototype":{"getEnabled":{"!doc":"<p>Return the current set enabled state.</p>","!type":"fn() -> bool"},"getInvalidMessage":{"!doc":"<p>Returns the invalid message of the widget.</p>","!type":"fn() -> string"},"getRequired":{"!doc":"<p>Return the current required state of the widget.</p>","!type":"fn() -> bool"},"getRequiredInvalidMessage":{"!doc":"<p>Returns the invalid message if required of the widget.</p>","!type":"fn() -> string"},"getValid":{"!doc":"<p>Returns the valid state of the widget.</p>","!type":"fn() -> bool"},"setEnabled":{"!doc":"<p>Set the enabled state of the widget.</p>","!type":"fn(enabled: bool)"},"setInvalidMessage":{"!doc":"<p>Sets the invalid message of the widget.</p>","!type":"fn(message: string)"},"setRequired":{"!doc":"<p>Sets the required state of a widget.</p>","!type":"fn(required: bool)"},"setRequiredInvalidMessage":{"!doc":"<p>Sets the invalid message if required of the widget.</p>","!type":"fn(message: string)"},"setValid":{"!doc":"<p>Sets the valid state of the widget.</p>","!type":"fn(valid: bool)"}}},"IModel":{"!doc":"<p>Each object which wants to store data representative for the real item\nshould implement this interface.</p>","prototype":{"getModel":{"!doc":"<p>Returns the representative data for the item</p>","!type":"fn() -> Object"},"resetModel":{"!doc":"<p>Sets the representative data to null.</p>","!type":"fn()"},"setModel":{"!doc":"<p>Set the representative data for the item.</p>","!type":"fn(value: Object)"}}},"IModelSelection":{"!doc":"<p>This interface should be used in all objects managing a set of items\nimplementing {@link qx.ui.form.IModel}.</p>","prototype":{"getModelSelection":{"!doc":"<p>Returns an array of the selected models.</p>","!type":"fn() -> +Array"},"setModelSelection":{"!doc":"<p>Tries to set the selection using the given array containing the\nrepresentative models for the selectables.</p>","!type":"fn(value: +Array)"}}},"INumberForm":{"!doc":"<p>Form interface for all form widgets which use a numeric value as their\nprimary data type like a spinner.</p>","prototype":{"getValue":{"!doc":"<p>The element&#8217;s user set value.</p>","!type":"fn() -> number"},"resetValue":{"!doc":"<p>Resets the element&#8217;s value to its initial value.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the element&#8217;s value.</p>","!type":"fn(value: number)"}}},"IRadioItem":{"!doc":"<p>Each object, which should be managed by a {@link RadioGroup} have to\nimplement this interface.</p>","prototype":{"getGroup":{"!doc":"<p>Get the radiogroup, which manages this item</p>","!type":"fn() -> +qx.ui.form.RadioGroup"},"getValue":{"!doc":"<p>Get whether the item is checked</p>","!type":"fn() -> bool"},"setGroup":{"!doc":"<p>Set the radiogroup, which manages this item</p>","!type":"fn(value: +qx.ui.form.RadioGroup)"},"setValue":{"!doc":"<p>Set whether the item is checked</p>","!type":"fn(value: bool)"}}},"IRange":{"!doc":"<p>Form interface for all widgets which deal with ranges. The spinner is a good\nexample for a range using widget.</p>","prototype":{"getMaximum":{"!doc":"<p>Return the current set maximum of the range.</p>","!type":"fn() -> number"},"getMinimum":{"!doc":"<p>Return the current set minimum of the range.</p>","!type":"fn() -> number"},"getPageStep":{"!doc":"<p>Returns the value which will be stepped in a page step in the range.</p>","!type":"fn() -> number"},"getSingleStep":{"!doc":"<p>Returns the value which will be stepped in a single step in the range.</p>","!type":"fn() -> number"},"setMaximum":{"!doc":"<p>Set the maximum value of the range.</p>","!type":"fn(max: number)"},"setMinimum":{"!doc":"<p>Set the minimum value of the range.</p>","!type":"fn(min: number)"},"setPageStep":{"!doc":"<p>Sets the value for page steps in the range.</p>","!type":"fn(step: number)"},"setSingleStep":{"!doc":"<p>Sets the value for single steps in the range.</p>","!type":"fn(step: number)"}}},"IStringForm":{"!doc":"<p>Form interface for all form widgets which have strings as their primary\ndata type like textfield&#8217;s.</p>","prototype":{"getValue":{"!doc":"<p>The element&#8217;s user set value.</p>","!type":"fn() -> string"},"resetValue":{"!doc":"<p>Resets the element&#8217;s value to its initial value.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the element&#8217;s value.</p>","!type":"fn(value: string)"}}},"List":{"!proto":"qx.ui.core.scroll.AbstractScrollArea","!doc":"<p>A list of items. Displays an automatically scrolling list for all\nadded {@link qx.ui.form.ListItem} instances. Supports various\nselection options: single, multi, ...</p>","!type":"fn()","prototype":{"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object, old: Object)"},"_applySpacing":{"!doc":"<p>Applies changes of the property value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_createListItemContainer":{"!doc":"<p>This container holds the list item widgets.</p>","!type":"fn() -> +qx.ui.container.Composite"},"_onAddChild":{"!doc":"<p>Handle child widget adds on the content pane</p>","!type":"fn(e: +qx.event.type.Data)"},"_onKeyInput":{"!doc":"<p>Handles the inline find &#8211; if enabled</p>","!type":"fn(e: +qx.event.type.KeyInput)"},"_onKeyPress":{"!doc":"<p>Event listener for <code>keypress</code> events.</p>","!type":"fn(e: +qx.event.type.KeySequence) -> bool"},"_onRemoveChild":{"!doc":"<p>Handle child widget removes on the content pane</p>","!type":"fn(e: +qx.event.type.Data)"},"findItem":{"!doc":"<p>Find an item by its {@link qx.ui.basic.Atom#getLabel}.</p>","!type":"fn(search: string, ignoreCase?: bool) -> +qx.ui.form.ListItem"},"findItemByLabelFuzzy":{"!doc":"<p>Takes the given string and tries to find a ListItem\nwhich starts with this string. The search is not case sensitive and the\nfirst found ListItem will be returned. If there could not be found any\nqualifying list item, null will be returned.</p>","!type":"fn(search: string) -> +qx.ui.form.ListItem"},"getChildrenContainer":{"!type":"fn()"},"getEnableInlineFind":{"!doc":"<p>Returns the (computed) value of the property <code>enableInlineFind</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enableInlineFind}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getSpacing":{"!doc":"<p>Returns the (computed) value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn() -> Object"},"handleKeyPress":{"!doc":"<p>Used to route external <code>keypress</code> events to the list\nhandling (in fact the manager of the list)</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"initEnableInlineFind":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enableInlineFind</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enableInlineFind}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initSpacing":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"isEnableInlineFind":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enableInlineFind</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enableInlineFind}.</p>","!type":"fn() -> bool"},"resetEnableInlineFind":{"!doc":"<p>Resets the user value of the property <code>enableInlineFind</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enableInlineFind}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetSpacing":{"!doc":"<p>Resets the user value of the property <code>spacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn()"},"setEnableInlineFind":{"!doc":"<p>Sets the user value of the property <code>enableInlineFind</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enableInlineFind}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setSpacing":{"!doc":"<p>Sets the user value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"toggleEnableInlineFind":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enableInlineFind</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enableInlineFind}.</p>","!type":"fn() -> bool"}}},"ListItem":{"!proto":"qx.ui.basic.Atom","!doc":"<p>A item for a list. Could be added to all List like widgets but also\nto the {@link qx.ui.form.SelectBox} and {@link qx.ui.form.ComboBox}.</p>","!type":"fn()","prototype":{"_onPointerOut":{"!doc":"<p>Event handler for the pointer out event.</p>","!type":"fn()"},"_onPointerOver":{"!doc":"<p>Event handler for the pointer over event.</p>","!type":"fn()"}}},"MenuButton":{"!proto":"qx.ui.form.Button","!doc":"<p>A button which opens the connected menu when tapping on it.</p>","!type":"fn()","prototype":{"_applyMenu":{"!doc":"<p>Applies changes of the property value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: +qx.ui.menu.Menu, old: +qx.ui.menu.Menu)"},"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"},"_onKeyDown":{"!type":"fn(e: +undefined)"},"_onKeyUp":{"!type":"fn(e: +undefined)"},"_onMenuChange":{"!doc":"<p>Listener for visibility property changes of the attached menu</p>","!type":"fn(e: +qx.event.type.Data)"},"_onPointerDown":{"!type":"fn(e: +undefined)"},"_onPointerOut":{"!type":"fn(e: +undefined)"},"_onPointerOver":{"!type":"fn(e: +undefined)"},"_onPointerUp":{"!type":"fn(e: +undefined)"},"getMenu":{"!doc":"<p>Returns the (computed) value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> Object"},"initMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>menu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"open":{"!doc":"<p>Positions and shows the attached menu widget.</p>","!type":"fn(selectFirst?: bool)"},"resetMenu":{"!doc":"<p>Resets the user value of the property <code>menu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn()"},"setMenu":{"!doc":"<p>Sets the user value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"}}},"MForm":{"!doc":"<p>Mixin handling the valid and required properties for the form widgets.</p>","!type":"fn()","prototype":{"__onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"_applyValid":{"!doc":"<p>Applies changes of the property value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: bool, old: bool)"},"getInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn() -> Object"},"getRequired":{"!doc":"<p>Returns the (computed) value of the property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> Object"},"getRequiredInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn() -> Object"},"getValid":{"!doc":"<p>Returns the (computed) value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> Object"},"initInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>invalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initRequired":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>required</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn(value: Object) -> Object"},"initRequiredInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>requiredInvalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initValid":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>valid</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: Object) -> Object"},"isRequired":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>required</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> bool"},"isValid":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>valid</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> bool"},"resetInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn()"},"resetRequired":{"!doc":"<p>Resets the user value of the property <code>required</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn()"},"resetRequiredInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn()"},"resetValid":{"!doc":"<p>Resets the user value of the property <code>valid</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn()"},"setInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setRequired":{"!doc":"<p>Sets the user value of the property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn(value: Object) -> Object"},"setRequiredInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setValid":{"!doc":"<p>Sets the user value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: Object) -> Object"},"toggleRequired":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> bool"},"toggleValid":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> bool"}}},"MModelProperty":{"!doc":"<p>Can be included for implementing {@link qx.ui.form.IModel}. It only contains\na nullable property named &#8216;model&#8217; with a &#8216;changeModel&#8217; event.</p>","prototype":{"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object, old: Object)"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"}}},"MModelSelection":{"!doc":"<p>This mixin offers the selection of the model properties.\nIt can only be included if the object including it implements the\n{@link qx.ui.core.ISingleSelection} interface and the selectables implement\nthe {@link qx.ui.form.IModel} interface.</p>","!type":"fn()","prototype":{"__onModelSelectionArrayChange":{"!doc":"<p>Listener for the change of the internal model selection data array.</p>","!type":"fn()"},"__onModelSelectionChange":{"!doc":"<p>Handler for the selection change of the including class e.g. SelectBox,\nList, ...\nIt sets the new modelSelection via {@link #setModelSelection}.</p>","!type":"fn()"},"getModelSelection":{"!doc":"<p>Returns always an array of the models of the selected items. If no\nitem is selected or no model is given, the array will be empty.</p>\n\n<p><strong><span class=\"caps\">CAREFUL</span>!</strong> The model selection can only work if every item item in the\nselection providing widget has a model property!</p>","!type":"fn() -> +qx.data.Array"},"setModelSelection":{"!doc":"<p>Takes the given models in the array and searches for the corresponding\nselectables. If an selectable does have that model attached, it will be\nselected.</p>\n\n<p><strong>Attention:</strong> This method can have a time complexity of O(n^2)!</p>\n\n<p><strong><span class=\"caps\">CAREFUL</span>!</strong> The model selection can only work if every item item in the\nselection providing widget has a model property!</p>","!type":"fn(modelSelection: +Array)"}}},"PasswordField":{"!proto":"qx.ui.form.TextField","!doc":"<p>A password input field, which hides the entered text.</p>","prototype":{"_createInputElement":{"!type":"fn()"}}},"RadioButton":{"!proto":"qx.ui.form.Button","!doc":"<p>Radio buttons can be used in radio groups to allow to the user to select\nexactly one item from a list. Radio groups are established by adding\nradio buttons to a radio manager {@link qx.ui.form.RadioGroup}.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n  var container = new qx.ui.container.Composite(new qx.ui.layout.VBox);\n\n  var female = new qx.ui.form.RadioButton(\"female\");\n  var male = new qx.ui.form.RadioButton(\"male\");\n\n  var mgr = new qx.ui.form.RadioGroup();\n  mgr.add(female, male);\n\n  container.add(male);\n  container.add(female);\n</pre>","!type":"fn()","prototype":{"_applyGroup":{"!doc":"<p>The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons</p>","!type":"fn(value: +undefined, old: +undefined)"},"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: bool, old: bool)"},"_onExecute":{"!doc":"<p>Event listener for the &#8220;execute&#8221; event.</p>\n\n<p>Sets the property &#8220;checked&#8221; to true.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyPress":{"!doc":"<p>Event listener for the &#8220;keyPress&#8221; event.</p>\n\n<p>Selects the previous RadioButton when pressing &#8220;Left&#8221; or &#8220;Up&#8221; and\nSelects the next RadioButton when pressing &#8220;Right&#8221; and &#8220;Down&#8221;</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"getGroup":{"!doc":"<p>Returns the (computed) value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initGroup":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>group</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"isValue":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>value</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"},"resetGroup":{"!doc":"<p>Resets the user value of the property <code>group</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setGroup":{"!doc":"<p>Sets the user value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"toggleValue":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"}}},"RadioButtonGroup":{"!proto":"qx.ui.core.Widget","!doc":"<p>The radio container handles a collection of items from which only one item\ncan be selected. Selection another item will deselect the previously selected\nitem. For that, it uses the {@link qx.ui.form.RadioGroup} object.</p>\n\n<p>This class is used to create radio groups of {@link qx.ui.form.RadioButton}\ninstances.</p>\n\n<p>This widget takes care of the layout of the added items. If you want to\ntake full control of the layout and just use the selection behavior,\ntake a look at the {@link qx.ui.form.RadioGroup} object for a loose coupling.</p>","!type":"fn()","prototype":{"_applyInvalidMessage":{"!doc":"<p>Applies changes of the property value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: string, old: string)"},"_applyValid":{"!doc":"<p>Applies changes of the property value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: bool, old: bool)"},"add":{"!doc":"<p>Adds a new child widget.</p>\n\n<p>The supported keys of the layout options map depend on the layout\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}.</p>","!type":"fn(child: +qx.ui.core.LayoutItem, options?: +Map)"},"getChildren":{"!doc":"<p>Returns the children list</p>","!type":"fn() -> +qx.ui.core.LayoutItem"},"getInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn() -> Object"},"getRadioGroup":{"!doc":"<p>The internaly used radio group instance will be returned.</p>","!type":"fn() -> +qx.ui.form.RadioGroup"},"getRequired":{"!doc":"<p>Returns the (computed) value of the property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> Object"},"getRequiredInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn() -> Object"},"getSelectables":{"!doc":"<p>Returns all elements which are selectable.</p>","!type":"fn(all: bool) -> +qx.ui.core.Widget"},"getSelection":{"!doc":"<p>Returns an array of currently selected items.</p>\n\n<p>Note: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getValid":{"!doc":"<p>Returns the (computed) value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> Object"},"initInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>invalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initRequired":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>required</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn(value: Object) -> Object"},"initRequiredInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>requiredInvalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initValid":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>valid</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: Object) -> Object"},"isRequired":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>required</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> bool"},"isSelected":{"!doc":"<p>Detects whether the given item is currently selected.</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"isSelectionEmpty":{"!doc":"<p>Whether the selection is empty.</p>","!type":"fn() -> bool"},"isValid":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>valid</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> bool"},"remove":{"!doc":"<p>Remove the given child widget.</p>","!type":"fn(child: +qx.ui.core.LayoutItem)"},"removeAll":{"!doc":"<p>Remove all children.</p>","!type":"fn() -> +Array"},"resetInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn()"},"resetRequired":{"!doc":"<p>Resets the user value of the property <code>required</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn()"},"resetRequiredInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Clears the whole selection at once.</p>","!type":"fn()"},"resetValid":{"!doc":"<p>Resets the user value of the property <code>valid</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn()"},"setInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setRequired":{"!doc":"<p>Sets the user value of the property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn(value: Object) -> Object"},"setRequiredInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setSelection":{"!doc":"<p>Replaces current selection with the given items.</p>","!type":"fn(items: +qx.ui.core.Widget)"},"setValid":{"!doc":"<p>Sets the user value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: Object) -> Object"},"toggleRequired":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> bool"},"toggleValid":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> bool"}}},"RadioGroup":{"!proto":"qx.core.Object","!doc":"<p>The radio group handles a collection of items from which only one item\ncan be selected. Selection another item will deselect the previously selected\nitem.</p>\n\n<p>This class is e.g. used to create radio groups or {@link qx.ui.form.RadioButton}\nor {@link qx.ui.toolbar.RadioButton} instances.</p>\n\n<p>We also offer a widget for the same purpose which uses this class. So if\nyou like to act with a widget instead of a pure logic coupling of the\nwidgets, take a look at the {@link qx.ui.form.RadioButtonGroup} widget.</p>","!type":"fn()","prototype":{"__onChangeSelection":{"!doc":"<p>Event handler for <code>changeSelection</code>.</p>","!type":"fn(e: +qx.event.type.Data)"},"_applyAllowEmptySelection":{"!doc":"<p>Applies changes of the property value of the property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn(value: bool, old: bool)"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyInvalidMessage":{"!doc":"<p>Applies changes of the property value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: string, old: string)"},"_applyValid":{"!doc":"<p>Applies changes of the property value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: bool, old: bool)"},"_getItems":{"!doc":"<p>Returns the items for the selection.</p>","!type":"fn() -> +qx.ui.form.IRadioItem"},"_isAllowEmptySelection":{"!doc":"<p>Returns if the selection could be empty or not.</p>","!type":"fn() -> bool"},"_isItemSelectable":{"!doc":"<p>Returns whether the item is selectable. In opposite to the default\nimplementation (which checks for visible items) every radio button\nwhich is part of the group is selected even if it is currently not visible.</p>","!type":"fn(item: +qx.ui.form.IRadioItem) -> bool"},"_onItemChangeChecked":{"!doc":"<p>Event listener for <code>changeValue</code> event of every managed item.</p>","!type":"fn(e: +qx.event.type.Data)"},"add":{"!doc":"<p>Add the passed items to the radio group.</p>","!type":"fn(varargs: +qx.ui.form.IRadioItem)"},"getAllowEmptySelection":{"!doc":"<p>Returns the (computed) value of the property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn() -> Object"},"getChildren":{"!doc":"<p>Returns an array containing the group&#8217;s items.</p>","!type":"fn() -> +qx.ui.form.IRadioItem"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn() -> Object"},"getItems":{"!doc":"<p>Get all managed items</p>","!type":"fn() -> +qx.ui.form.IRadioItem"},"getRequired":{"!doc":"<p>Returns the (computed) value of the property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> Object"},"getRequiredInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn() -> Object"},"getValid":{"!doc":"<p>Returns the (computed) value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> Object"},"getWrap":{"!doc":"<p>Returns the (computed) value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> Object"},"initAllowEmptySelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowEmptySelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn(value: Object) -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>invalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initRequired":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>required</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn(value: Object) -> Object"},"initRequiredInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>requiredInvalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initValid":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>valid</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: Object) -> Object"},"initWrap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wrap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"isAllowEmptySelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowEmptySelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn() -> bool"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"isRequired":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>required</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> bool"},"isValid":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>valid</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> bool"},"isWrap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>wrap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"},"remove":{"!doc":"<p>Remove an item from the radio group.</p>","!type":"fn(item: +qx.ui.form.IRadioItem)"},"resetAllowEmptySelection":{"!doc":"<p>Resets the user value of the property <code>allowEmptySelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn()"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn()"},"resetRequired":{"!doc":"<p>Resets the user value of the property <code>required</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn()"},"resetRequiredInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn()"},"resetValid":{"!doc":"<p>Resets the user value of the property <code>valid</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn()"},"resetWrap":{"!doc":"<p>Resets the user value of the property <code>wrap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn()"},"selectNext":{"!doc":"<p>Select the item following the given item.</p>","!type":"fn()"},"selectPrevious":{"!doc":"<p>Select the item previous the given item.</p>","!type":"fn()"},"setAllowEmptySelection":{"!doc":"<p>Sets the user value of the property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn(value: Object) -> Object"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setRequired":{"!doc":"<p>Sets the user value of the property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn(value: Object) -> Object"},"setRequiredInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>requiredInvalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredInvalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setValid":{"!doc":"<p>Sets the user value of the property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn(value: Object) -> Object"},"setWrap":{"!doc":"<p>Sets the user value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"toggleAllowEmptySelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowEmptySelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowEmptySelection}.</p>","!type":"fn() -> bool"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"toggleRequired":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>required</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #required}.</p>","!type":"fn() -> bool"},"toggleValid":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>valid</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #valid}.</p>","!type":"fn() -> bool"},"toggleWrap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"}}},"renderer":{"AbstractRenderer":{"!proto":"qx.ui.core.Widget","!doc":"<p>Abstract renderer for {@link qx.ui.form.Form}. This abstract renderer should\nbe the superclass of all form renderer. It takes the form, which is\nsupplied as constructor parameter and configures itself. So if you need to\nset some additional information on your renderer before adding the widgets,\nbe sure to do that before calling this.base(arguments, form).</p>","!type":"fn()","prototype":{"_connectVisibility":{"!doc":"<p>Helper to bind the item&#8217;s visibility to the label&#8217;s visibility.</p>","!type":"fn(item: +qx.ui.core.Widget, label: +qx.ui.basic.Label)"},"_createLabelText":{"!doc":"<p>Creates the label text for the given form item.</p>","!type":"fn(name: string, item: +qx.ui.form.IForm) -> string"},"_onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"_onFormChange":{"!doc":"<p>Handler responsible for updating the rendered widget as soon as the\nform changes.</p>","!type":"fn()"},"_render":{"!doc":"<p>Renders the for: add&#8217;s the items and buttons.</p>","!type":"fn()"},"addButton":{"!type":"fn(button: +undefined)"},"addItems":{"!type":"fn(items: +undefined, names: +undefined, title: +undefined)"}}},"Double":{"!proto":"qx.ui.form.renderer.AbstractRenderer","!doc":"<p>Double column renderer for {@link qx.ui.form.Form}.</p>","!type":"fn()","prototype":{"_createHeader":{"!doc":"<p>Creates a header label for the form groups.</p>","!type":"fn(title: string) -> +qx.ui.basic.Label"},"_createLabel":{"!doc":"<p>Creates a label for the given form item.</p>","!type":"fn(name: string, item: +qx.ui.core.Widget) -> +qx.ui.basic.Label"},"_onFormChange":{"!type":"fn()"},"addButton":{"!doc":"<p>Adds a button the form renderer. All buttons will be added in a\nsingle row at the bottom of the form.</p>","!type":"fn(button: +qx.ui.form.Button)"},"addItems":{"!doc":"<p>Add a group of form items with the corresponding names. The names are\ndisplayed as label.\nThe title is optional and is used as grouping for the given form\nitems.</p>","!type":"fn(items: +qx.ui.core.Widget, names: string, title?: string)"},"getLayout":{"!doc":"<p>Returns the set layout for configuration.</p>","!type":"fn() -> +qx.ui.layout.Grid"}}},"IFormRenderer":{"!doc":"<p>This interface defines the necessary features a form renderer should have.\nKeep in mind that all renderes has to be widgets.</p>","prototype":{"addButton":{"!doc":"<p>Adds a button the form renderer.</p>","!type":"fn(button: +qx.ui.form.Button, options?: +Map)"},"addItems":{"!doc":"<p>Add a group of form items with the corresponding names. The names should\nbe displayed as hint for the user what to do with the form item.\nThe title is optional and can be used as grouping for the given form\nitems.</p>","!type":"fn(items: +qx.ui.core.Widget, names: string, title?: string, itemsOptions?: +Array, headerOptions?: +Map)"}}},"Single":{"!proto":"qx.ui.form.renderer.AbstractRenderer","!doc":"<p>Single column renderer for {@link qx.ui.form.Form}.</p>","!type":"fn()","prototype":{"_createHeader":{"!doc":"<p>Creates a header label for the form groups.</p>","!type":"fn(title: string) -> +qx.ui.basic.Label"},"_createLabel":{"!doc":"<p>Creates a label for the given form item.</p>","!type":"fn(name: string, item: +qx.ui.core.Widget) -> +qx.ui.basic.Label"},"_onFormChange":{"!type":"fn()"},"addButton":{"!doc":"<p>Adds a button the form renderer. All buttons will be added in a\nsingle row at the bottom of the form.</p>","!type":"fn(button: +qx.ui.form.Button)"},"addItems":{"!doc":"<p>Add a group of form items with the corresponding names. The names are\ndisplayed as label.\nThe title is optional and is used as grouping for the given form\nitems.</p>","!type":"fn(items: +qx.ui.core.Widget, names: string, title?: string)"},"getLayout":{"!doc":"<p>Returns the set layout for configuration.</p>","!type":"fn() -> +qx.ui.layout.Grid"}}},"SinglePlaceholder":{"!proto":"qx.ui.form.renderer.Single","!doc":"<p>Renderer using the placeholder property of {@link qx.ui.form.AbstractField}\nto visualize the name.</p>","prototype":{"addItems":{"!type":"fn(items: +undefined, names: +undefined, title: +undefined)"}}}},"RepeatButton":{"!proto":"qx.ui.form.Button","!doc":"<p>The RepeatButton is a special button, which fires repeatedly {@link #execute}\nevents, while a button is pressed on the button. The initial delay\nand the interval time can be set using the properties {@link #firstInterval}\nand {@link #interval}. The {@link #execute} events will be fired in a shorter\namount of time if a button is hold, until the min {@link #minTimer}\nis reached. The {@link #timerDecrease} property sets the amount of milliseconds\nwhich will decreased after every firing.</p>\n\n<pre class=\"javascript\">\n  var button = new qx.ui.form.RepeatButton(\"Hello World\");\n\n  button.addListener(\"execute\", function(e) {\n    alert(\"Button is executed\");\n  }, this);\n\n  this.getRoot.add(button);\n</pre>\n\n<p>This example creates a button with the label &#8220;Hello World&#8221; and attaches an\nevent listener to the {@link #execute} event.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/widget/repeatbutton.html\" target=\"_blank\">\nDocumentation of this widget in the qooxdoo manual.</a>","!type":"fn()","prototype":{"__startInternalTimer":{"!doc":"<p>Starts the internal timer which causes firing of execution\nevents in an interval. It also presses the button.</p>","!type":"fn()"},"__stopInternalTimer":{"!doc":"<p>Stops the internal timer and releases the button.</p>","!type":"fn()"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_onInterval":{"!doc":"<p>Callback for the interval event.</p>\n\n<p>Stops the timer and starts it with a new interval\n(value of the &#8220;interval&#8221; property &#8211; value of the &#8220;timerDecrease&#8221; property).\nDispatches the &#8220;execute&#8221; event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyDown":{"!doc":"<p>Listener method for &#8220;keydown&#8221; event.</p>\n\n<p>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state\nfor the keys &#8220;Enter&#8221; or &#8220;Space&#8221;. It also starts\nthe internal timer (same like pointerdown).</p>","!type":"fn(e: +Event)"},"_onKeyUp":{"!doc":"<p>Listener method for &#8220;keyup&#8221; event.</p>\n\n<p>Removes &#8220;abandoned&#8221; and &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set)\nfor the keys &#8220;Enter&#8221; or &#8220;Space&#8221; and stops the internal timer\n(same like pointer up).</p>","!type":"fn(e: +Event)"},"_onPointerDown":{"!doc":"<p>Callback method for the &#8220;pointerdown&#8221; method.</p>\n\n<p>Sets the interval of the timer (value of firstInterval property) and\nstarts the timer. Additionally removes the state &#8220;abandoned&#8221; and adds the\nstate &#8220;pressed&#8221;.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOut":{"!doc":"<p>Listener method for &#8220;pointerout&#8221; event\n<ul>\n<li>Removes &#8220;hovered&#8221; state</li>\n<li>Adds &#8220;abandoned&#8221; and removes &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +Event)"},"_onPointerOver":{"!doc":"<p>Listener method for &#8220;pointerover&#8221; event\n<ul>\n<li>Adds state &#8220;hovered&#8221;</li>\n<li>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state (if &#8220;abandoned&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +Event)"},"_onPointerUp":{"!doc":"<p>Callback method for the &#8220;pointerup&#8221; event.</p>\n\n<p>Handles the case that the user is releasing a button\nbefore the timer interval method got executed. This way the\n&#8220;execute&#8221; method get executed at least one time.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"getFirstInterval":{"!doc":"<p>Returns the (computed) value of the property <code>firstInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn() -> Object"},"getInterval":{"!doc":"<p>Returns the (computed) value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn() -> Object"},"getMinTimer":{"!doc":"<p>Returns the (computed) value of the property <code>minTimer</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn() -> Object"},"getTimerDecrease":{"!doc":"<p>Returns the (computed) value of the property <code>timerDecrease</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn() -> Object"},"initFirstInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>firstInterval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn(value: Object) -> Object"},"initInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>interval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"initMinTimer":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minTimer</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn(value: Object) -> Object"},"initTimerDecrease":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>timerDecrease</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn(value: Object) -> Object"},"press":{"!doc":"<p>Calling this function is like a tap from the user on the\nbutton with all consequences.\n<span>Be sure to call the {@link #release} function.</span></p>","!type":"fn()"},"release":{"!doc":"<p>Calling this function is like a release from the user on the\nbutton with all consequences.\nUsually the {@link #release} function will be called before the call of\nthis function.</p>","!type":"fn(fireExecuteEvent?: bool)"},"resetFirstInterval":{"!doc":"<p>Resets the user value of the property <code>firstInterval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn()"},"resetInterval":{"!doc":"<p>Resets the user value of the property <code>interval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn()"},"resetMinTimer":{"!doc":"<p>Resets the user value of the property <code>minTimer</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn()"},"resetTimerDecrease":{"!doc":"<p>Resets the user value of the property <code>timerDecrease</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn()"},"setFirstInterval":{"!doc":"<p>Sets the user value of the property <code>firstInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstInterval}.</p>","!type":"fn(value: Object) -> Object"},"setInterval":{"!doc":"<p>Sets the user value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"setMinTimer":{"!doc":"<p>Sets the user value of the property <code>minTimer</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minTimer}.</p>","!type":"fn(value: Object) -> Object"},"setTimerDecrease":{"!doc":"<p>Sets the user value of the property <code>timerDecrease</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #timerDecrease}.</p>","!type":"fn(value: Object) -> Object"}}},"Resetter":{"!proto":"qx.core.Object","!doc":"<p>The resetter is responsible for managing a set of items and resetting these\nitems on a {@link #reset} call. It can handle all form items supplying a\nvalue property and all widgets implementing the single selection linked list\nor select box.</p>","!type":"fn()","prototype":{"__getCurrentValue":{"!doc":"<p>Internal helper top access the value of a given item.</p>","!type":"fn(item: +qx.ui.core.Widget) -> Object"},"__setItem":{"!doc":"<p>Internal helper for setting an item to a given init value. It checks\nfor the supported APIs and uses the fitting <span class=\"caps\">API</span>.</p>","!type":"fn(item: +qx.ui.core.Widget, init: Object)"},"__supportsDataBindingSelection":{"!doc":"<p>Returns true, if the given item implements the\n{@link qx.data.controller.ISelection} interface.</p>","!type":"fn(formItem: +qx.core.Object) -> bool"},"__supportsSingleSelection":{"!doc":"<p>Returns true, if the given item implements the\n{@link qx.ui.core.ISingleSelection} interface.</p>","!type":"fn(formItem: +qx.core.Object) -> bool"},"_supportsValue":{"!doc":"<p>Returns true, if the value property is supplied by the form item.</p>","!type":"fn(formItem: +qx.core.Object) -> bool"},"add":{"!doc":"<p>Adding a widget to the reseter will get its current value and store\nit for resetting. To access the value, the given item needs to specify\na value property or implement the {@link qx.ui.core.ISingleSelection}\ninterface.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"redefine":{"!doc":"<p>Takes the current values of all added items and uses these values as\ninit values for resetting.</p>","!type":"fn()"},"redefineItem":{"!doc":"<p>Takes the current value of the given item and stores this value as init\nvalue for resetting.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"remove":{"!doc":"<p>Removes a widget to the reseter</p>","!type":"fn(item: +qx.ui.core.Widget) -> bool"},"reset":{"!doc":"<p>Resets all added form items to their initial value. The initial value\nis the value in the widget during the {@link #add}.</p>","!type":"fn()"},"resetItem":{"!doc":"<p>Resets a single given item. The item has to be added to the resetter\ninstance before. Otherwise, an error is thrown.</p>","!type":"fn(item: +qx.ui.core.Widget)"}}},"SelectBox":{"!proto":"qx.ui.form.AbstractSelectBox","!doc":"<p>A form widget which allows a single selection. Looks somewhat like\na normal button, but opens a list of items to select when tapping on it.</p>\n\n<p>Keep in mind that the SelectBox widget has always a selected item (due to the\nsingle selection mode). Right after adding the first item a <code>changeSelection</code>\nevent is fired.</p>\n\n<pre class=\"javascript\">\nvar selectBox = new qx.ui.form.SelectBox();\n\nselectBox.addListener(\"changeSelection\", function(e) {\n  // ...\n});\n\n// now the 'changeSelection' event is fired\nselectBox.add(new qx.ui.form.ListItem(\"Item 1\"));\n</pre>","!type":"fn()","prototype":{"__onChangeSelection":{"!doc":"<p>Event handler for <code>changeSelection</code>.</p>","!type":"fn(e: +qx.event.type.Data)"},"__updateIcon":{"!doc":"<p>Sets the icon inside the list to match the selected ListItem.</p>","!type":"fn()"},"__updateLabel":{"!doc":"<p>Sets the label inside the list to match the selected ListItem.</p>","!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getItems":{"!doc":"<p>Returns the list items for the selection.</p>","!type":"fn() -> +qx.ui.form.ListItem"},"_isAllowEmptySelection":{"!doc":"<p>Returns if the selection could be empty or not.</p>","!type":"fn() -> bool"},"_onKeyInput":{"!doc":"<p>Forwards key event to list widget.</p>","!type":"fn(e: +qx.event.type.KeyInput)"},"_onKeyPress":{"!type":"fn(e: +undefined)"},"_onListChangeSelection":{"!type":"fn(e: +undefined)"},"_onListPointerDown":{"!type":"fn(e: +undefined)"},"_onPointerOut":{"!doc":"<p>Listener method for &#8220;pointerout&#8221; event\n<ul>\n<li>Removes &#8220;hovered&#8221; state</li>\n<li>Adds &#8220;abandoned&#8221; and removes &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Listener method for &#8220;pointerover&#8221; event\n<ul>\n<li>Adds state &#8220;hovered&#8221;</li>\n<li>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state (if &#8220;abandoned&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPopupChangeVisibility":{"!type":"fn(e: +undefined)"},"_onTap":{"!doc":"<p>Toggles the popup&#8217;s visibility.</p>","!type":"fn(e: +qx.event.type.Pointer)"}}},"Slider":{"!proto":"qx.ui.core.Widget","!doc":"<p>The Slider widget provides a vertical or horizontal slider.</p>\n\n<p>The Slider is the classic widget for controlling a bounded value.\nIt lets the user move a slider handle along a horizontal or vertical\ngroove and translates the handle&#8217;s position into an integer value\nwithin the defined range.</p>\n\n<p>The Slider has very few of its own functions.\nThe most useful functions are slideTo() to set the slider directly to some\nvalue; setSingleStep(), setPageStep() to set the steps; and setMinimum()\nand setMaximum() to define the range of the slider.</p>\n\n<p>A slider accepts focus on Tab and provides both a mouse wheel and\na keyboard interface. The keyboard interface is the following:</p>\n\n<ul>\n<li>Left/Right move a horizontal slider by one single step.</li>\n<li>Up/Down move a vertical slider by one single step.</li>\n<li>PageUp moves up one page.</li>\n<li>PageDown moves down one page.</li>\n<li>Home moves to the start (minimum).</li>\n<li>End moves to the end (maximum).</li>\n</ul>\n\n<p>Here are the main properties of the class:</p>\n\n<ol>\n<li><code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}<br />\nmaintains.</li>\n<li><code>minimum</code>: The lowest possible value.</li>\n<li><code>maximum</code>: The highest possible value.</li>\n<li><code>singleStep</code>: The smaller of two natural steps that an abstract<br />\nsliders provides and typically corresponds to the user pressing an arrow key.</li>\n<li><code>pageStep</code>: The larger of two natural steps that an abstract<br />\nslider provides and typically corresponds to the user pressing PageUp or<br />\nPageDown.</li>\n</ol>","!type":"fn()","prototype":{"__animateTo":{"!doc":"<p>Animation helper which takes care of the animated slide.</p>","!type":"fn(to: number, duration: number)"},"__computeTrackingEnd":{"!doc":"<p>Computes the value where the tracking should end depending on\nthe current pointer position.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__normalizeValue":{"!doc":"<p>Internal helper to normalize the given value concerning the minimum\nand maximum value.</p>","!type":"fn(value: number) -> number"},"_applyKnobFactor":{"!doc":"<p>Applies changes of the property value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: number, old: number)"},"_applyMaximum":{"!doc":"<p>Applies changes of the property value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyMinimum":{"!doc":"<p>Applies changes of the property value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object, old: Object)"},"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object, old: Object)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_fireValue":{"!doc":"<p>Helper for applyValue which fires the changeValue event.</p>","!type":"fn()"},"_onInterval":{"!doc":"<p>Listener of interval event by the internal timer. Only used\nin tracking sequences.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyPress":{"!doc":"<p>Event handler for keypress events.</p>\n\n<p>Adds support for arrow keys, page up, page down, home and end keys.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onPointerDown":{"!doc":"<p>Listener of pointerdown event. Initializes drag or tracking mode.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerMove":{"!doc":"<p>Listener of pointermove event for the knob. Only used in drag mode.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOut":{"!doc":"<p>Event handler for pointerout events at the knob child control.</p>\n\n<p>Removes the &#8216;hovered&#8217; state</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Event handler for pointerover events at the knob child control.</p>\n\n<p>Adds the &#8216;hovered&#8217; state</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerUp":{"!doc":"<p>Listener of pointerup event. Used for cleanup of previously\ninitialized modes.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onRoll":{"!doc":"<p>Listener of roll event</p>","!type":"fn(e: +qx.event.type.Roll)"},"_onUpdate":{"!doc":"<p>Listener of resize event for both the slider itself and the knob.</p>","!type":"fn(e: +qx.event.type.Data)"},"_positionToValue":{"!doc":"<p>Converts the given position to a value.</p>\n\n<p>Does not respect single or page step.</p>","!type":"fn(position: +Integer) -> +Integer"},"_setKnobPosition":{"!doc":"<p>Moves the knob to the given position.</p>","!type":"fn(position: +Integer)"},"_updateKnobPosition":{"!doc":"<p>Updates the knob position following the currently configured\nvalue. Useful on reflows where the dimensions of the slider\nitself have been modified.</p>","!type":"fn()"},"_updateKnobSize":{"!doc":"<p>Reconfigures the size of the knob depending on\nthe optionally defined {@link #knobFactor}.</p>","!type":"fn()"},"_valueToPosition":{"!doc":"<p>Converts the given value to a position to place\nthe knob to.</p>","!type":"fn(value: +Integer) -> +Integer"},"getKnobFactor":{"!doc":"<p>Returns the (computed) value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn() -> Object"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getMinimum":{"!doc":"<p>Returns the (computed) value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getPageStep":{"!doc":"<p>Returns the (computed) value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn() -> Object"},"getSingleStep":{"!doc":"<p>Returns the (computed) value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initKnobFactor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>knobFactor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initMinimum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initPageStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>pageStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: Object) -> Object"},"initSingleStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>singleStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"renderLayout":{"!type":"fn(left: +undefined, top: +undefined, width: +undefined, height: +undefined)"},"resetKnobFactor":{"!doc":"<p>Resets the user value of the property <code>knobFactor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn()"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetMinimum":{"!doc":"<p>Resets the user value of the property <code>minimum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetPageStep":{"!doc":"<p>Resets the user value of the property <code>pageStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn()"},"resetSingleStep":{"!doc":"<p>Resets the user value of the property <code>singleStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setKnobFactor":{"!doc":"<p>Sets the user value of the property <code>knobFactor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #knobFactor}.</p>","!type":"fn(value: Object) -> Object"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setMinimum":{"!doc":"<p>Sets the user value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setPageStep":{"!doc":"<p>Sets the user value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: Object) -> Object"},"setSingleStep":{"!doc":"<p>Sets the user value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"slideBack":{"!doc":"<p>Slides backward (to left or top depending on orientation)</p>","!type":"fn()"},"slideBy":{"!doc":"<p>Slides by the given offset.</p>\n\n<p>This method works with the value, not with the coordinate.</p>","!type":"fn(offset: +Integer, duration: number)"},"slideForward":{"!doc":"<p>Slides forward (right or bottom depending on orientation)</p>","!type":"fn()"},"slidePageBack":{"!doc":"<p>Slides a page backward (to left or top depending on orientation)</p>","!type":"fn(duration: number)"},"slidePageForward":{"!doc":"<p>Slides a page forward (to right or bottom depending on orientation)</p>","!type":"fn(duration: number)"},"slideTo":{"!doc":"<p>Slides to the given value</p>\n\n<p>This method works with the value, not with the coordinate.</p>","!type":"fn(value: +Integer, duration: number)"},"slideToBegin":{"!doc":"<p>Slides backward to the minimum value</p>","!type":"fn(duration: number)"},"slideToEnd":{"!doc":"<p>Slides forward to the maximum value</p>","!type":"fn(duration: number)"},"stopSlideAnimation":{"!doc":"<p>In case a slide animation is currently running, it will be stopped.\nIf not, the method does nothing.</p>","!type":"fn()"},"updatePosition":{"!doc":"<p>Updates the position property considering the minimum and maximum values.</p>","!type":"fn(value: number)"}}},"Spinner":{"!proto":"qx.ui.core.Widget","!doc":"<p>A <strong>spinner</strong> is a control that allows you to adjust a numerical value,\ntypically within an allowed range. An obvious example would be to specify the\nmonth of a year as a number in the range 1 &#8211; 12.</p>\n\n<p>To do so, a spinner encompasses a field to display the current value (a\ntextfield) and controls such as up and down buttons to change that value. The\ncurrent value can also be changed by editing the display field directly, or\nusing mouse wheel and cursor keys.</p>\n\n<p>An optional {@link #numberFormat} property allows you to control the format of\nhow a value can be entered and will be displayed.</p>\n\n<p>A brief, but non-trivial example:</p>\n\n<pre class=\"javascript\">\nvar s = new qx.ui.form.Spinner();\ns.set({\n  maximum: 3000,\n  minimum: -3000\n});\nvar nf = new qx.util.format.NumberFormat();\nnf.setMaximumFractionDigits(2);\ns.setNumberFormat(nf);\n</pre>\n\n<p>A spinner instance without any further properties specified in the\nconstructor or a subsequent <strong>set</strong> command will appear with default\nvalues and behaviour.</p>","!type":"fn()","prototype":{"_applyEditable":{"!doc":"<p>Apply routine for the editable property.</p>\n\n<p>It sets the textfield of the spinner to not read only.</p>","!type":"fn(value: bool, old: bool)"},"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyMaximum":{"!doc":"<p>Apply routine for the maximum property.</p>\n\n<p>It sets the value of the spinner to the minimum of the current spinner\nvalue and the given max property value.</p>","!type":"fn(value: number, old: number)"},"_applyMinimum":{"!doc":"<p>Apply routine for the minimum property.</p>\n\n<p>It sets the value of the spinner to the maximum of the current spinner\nvalue and the given min property value.</p>","!type":"fn(value: number, old: number)"},"_applyNumberFormat":{"!doc":"<p>Apply routine for the numberFormat property.</p>\n\n<p>When setting a number format, the display of the\nvalue in the textfield will be changed immediately.</p>","!type":"fn(value: bool, old: bool)"},"_applyValue":{"!doc":"<p>Apply routine for the value property.</p>\n\n<p>It checks the min and max values, disables / enables the\nbuttons and handles the wrap around.</p>","!type":"fn(value: number, old: number)"},"_applyWrap":{"!doc":"<p>Apply routine for the wrap property.</p>\n\n<p>Enables all buttons if the wrapping is enabled.</p>","!type":"fn(value: bool, old: bool)"},"_checkValue":{"!doc":"<p>Check whether the value being applied is allowed.</p>\n\n<p>If you override this to change the allowed type, you will also\nwant to override {@link #_applyValue}, {@link #_applyMinimum},\n{@link #_applyMaximum}, {@link #_countUp}, {@link #_countDown}, and\n{@link #_onTextChange} methods as those cater specifically to numeric\nvalues.</p>","!type":"fn(value: Object) -> bool"},"_countDown":{"!doc":"<p>Checks if the spinner is in page mode and counts either the single\nor page Step down.</p>","!type":"fn()"},"_countUp":{"!doc":"<p>Checks if the spinner is in page mode and counts either the single\nor page Step up.</p>","!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_getFilterRegExp":{"!doc":"<p>Returns the regular expression used as the text field&#8217;s filter</p>","!type":"fn() -> +RegExp"},"_onChangeLocale":{"!doc":"<p>Callback method for the locale Manager&#8217;s &#8220;changeLocale&#8221; event.</p>","!type":"fn(ev: +qx.event.type.Event)"},"_onChangeNumberFormat":{"!doc":"<p>Callback method for the number format&#8217;s &#8220;changeNumberFormat&#8221; event.</p>","!type":"fn(ev: +qx.event.type.Event)"},"_onKeyDown":{"!doc":"<p>Callback for &#8220;keyDown&#8221; event.</p>\n\n<p>Controls the interval mode (&#8220;single&#8221; or &#8220;page&#8221;)\nand the interval increase by detecting &#8220;Up&#8221;/&#8220;Down&#8221;\nand &#8220;PageUp&#8221;/&#8220;PageDown&#8221; keys.</p>\n\n<p>The corresponding button will be pressed.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onKeyUp":{"!doc":"<p>Callback for &#8220;keyUp&#8221; event.</p>\n\n<p>Detecting &#8220;Up&#8221;/&#8220;Down&#8221; and &#8220;PageUp&#8221;/&#8220;PageDown&#8221; keys.</p>\n\n<p>Releases the button and disabled the page mode, if necessary.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onRoll":{"!doc":"<p>Callback method for the &#8220;roll&#8221; event.</p>\n\n<p>Increments or decrements the value of the spinner.</p>","!type":"fn(e: +qx.event.type.Roll)"},"_onTextChange":{"!doc":"<p>Callback method for the &#8220;change&#8221; event of the textfield.</p>","!type":"fn(e: +qx.event.type.Event)"},"_updateButtons":{"!doc":"<p>Checks the min and max values, disables / enables the\nbuttons and handles the wrap around.</p>","!type":"fn()"},"getEditable":{"!doc":"<p>Returns the (computed) value of the property <code>editable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #editable}.</p>","!type":"fn() -> Object"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getMinimum":{"!doc":"<p>Returns the (computed) value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn() -> Object"},"getNumberFormat":{"!doc":"<p>Returns the (computed) value of the property <code>numberFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn() -> Object"},"getPageStep":{"!doc":"<p>Returns the (computed) value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn() -> Object"},"getSingleStep":{"!doc":"<p>Returns the (computed) value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"getWrap":{"!doc":"<p>Returns the (computed) value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> Object"},"gotoValue":{"!doc":"<p>Normalizes the incoming value to be in the valid range and\napplies it to the {@link #value} afterwards.</p>","!type":"fn(value: number) -> number"},"initEditable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>editable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #editable}.</p>","!type":"fn(value: Object) -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initMinimum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"initNumberFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>numberFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn(value: Object) -> Object"},"initPageStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>pageStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: Object) -> Object"},"initSingleStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>singleStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"initWrap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wrap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"isEditable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>editable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #editable}.</p>","!type":"fn() -> bool"},"isWrap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>wrap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"},"resetEditable":{"!doc":"<p>Resets the user value of the property <code>editable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #editable}.</p>","!type":"fn()"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetMinimum":{"!doc":"<p>Resets the user value of the property <code>minimum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn()"},"resetNumberFormat":{"!doc":"<p>Resets the user value of the property <code>numberFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn()"},"resetPageStep":{"!doc":"<p>Resets the user value of the property <code>pageStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn()"},"resetSingleStep":{"!doc":"<p>Resets the user value of the property <code>singleStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"resetWrap":{"!doc":"<p>Resets the user value of the property <code>wrap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn()"},"setEditable":{"!doc":"<p>Sets the user value of the property <code>editable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #editable}.</p>","!type":"fn(value: Object) -> Object"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setMinimum":{"!doc":"<p>Sets the user value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"setNumberFormat":{"!doc":"<p>Sets the user value of the property <code>numberFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn(value: Object) -> Object"},"setPageStep":{"!doc":"<p>Sets the user value of the property <code>pageStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pageStep}.</p>","!type":"fn(value: Object) -> Object"},"setSingleStep":{"!doc":"<p>Sets the user value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"setWrap":{"!doc":"<p>Sets the user value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"tabFocus":{"!type":"fn()"},"toggleEditable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>editable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #editable}.</p>","!type":"fn() -> bool"},"toggleWrap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"}}},"SplitButton":{"!proto":"qx.ui.core.Widget","!doc":"<p>A button which acts as a normal button and shows a menu on one\nof the sides to open something like a history list.</p>","!type":"fn()","prototype":{"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyMenu":{"!doc":"<p>Applies changes of the property value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: +qx.ui.menu.Menu, old: +qx.ui.menu.Menu)"},"_applyShow":{"!doc":"<p>Applies changes of the property value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object, old: Object)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onButtonExecute":{"!doc":"<p>Event listener for button&#8217;s execute event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onChangeMenuVisibility":{"!doc":"<p>Event listener for visibility changes of the menu</p>","!type":"fn(e: +qx.event.type.Data)"},"_onKeyDown":{"!doc":"<p>Event listener for all keyboard events</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onKeyUp":{"!doc":"<p>Event listener for all keyboard events</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onPointerOut":{"!doc":"<p>Listener for <code>pointerout</code> event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Listener for <code>pointerover</code> event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getMenu":{"!doc":"<p>Returns the (computed) value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> Object"},"getShow":{"!doc":"<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn() -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>menu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"initShow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetMenu":{"!doc":"<p>Resets the user value of the property <code>menu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn()"},"resetShow":{"!doc":"<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn()"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setMenu":{"!doc":"<p>Sets the user value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"setShow":{"!doc":"<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"}}},"TextArea":{"!proto":"qx.ui.form.AbstractField","!doc":"<p>The TextField is a multi-line text input field.</p>","!type":"fn()","prototype":{"__autoSize":{"!doc":"<p>Adjust height of <code>TextArea</code> so that content fits without scroll bar.</p>","!type":"fn()"},"__createAreaClone":{"!doc":"<p>Creates and prepares the area clone.</p>","!type":"fn() -> +Element"},"__forceRewrap":{"!doc":"<p>Force rewrapping of text.</p>\n\n<p>The distribution of characters depends on the space available.\nUnfortunately, browsers do not reliably (or not at all) rewrap text when\nthe size of the text area changes.</p>\n\n<p>This method is called on change of the area&#8217;s size.</p>","!type":"fn()"},"__getAreaClone":{"!doc":"<p>Returns the area clone.</p>","!type":"fn() -> +Element"},"__scrollCloneToBottom":{"!doc":"<p>Scroll <code>TextArea</code> to bottom. That way, scrollTop reflects the height\nof the <code>TextArea</code>.</p>","!type":"fn(clone: +Element)"},"__warnAutoSizeAndHeight":{"!doc":"<p>Warn when both autoSize and height property are set.</p>","!type":"fn()"},"_applyAutoSize":{"!doc":"<p>Applies changes of the property value of the property <code>autoSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn(value: bool, old: bool)"},"_applyDimension":{"!doc":"<p>Applies changes of the property value of the properties <code>height</code>, <code>maxHeight</code>, <code>maxWidth</code>, <code>minHeight</code>, <code>minWidth</code> and <code>width</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #height}, {@link #maxHeight}, {@link #maxWidth}, {@link #minHeight}, {@link #minWidth} and {@link #width}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyMinimalLineHeight":{"!doc":"<p>Applies changes of the property value of the property <code>minimalLineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimalLineHeight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyWrap":{"!doc":"<p>Applies changes of the property value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: bool, old: bool)"},"_createInputElement":{"!type":"fn()"},"_getAreaHeight":{"!doc":"<p>Get actual height of <code>TextArea</code></p>","!type":"fn() -> +Integer"},"_getContentHint":{"!type":"fn()"},"_getScrolledAreaHeight":{"!doc":"<p>Get scrolled area height. Equals the total height of the <code>TextArea</code>,\nas if no scroll-bar was visible.</p>","!type":"fn() -> +Integer"},"_onRoll":{"!doc":"<p>Handles the roll for scrolling the <code>TextArea</code>.</p>","!type":"fn(e: +qx.event.type.Roll)"},"_setAreaHeight":{"!doc":"<p>Set actual height of <code>TextArea</code></p>","!type":"fn(height: +Integer)"},"getAutoSize":{"!doc":"<p>Returns the (computed) value of the property <code>autoSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn() -> Object"},"getMinimalLineHeight":{"!doc":"<p>Returns the (computed) value of the property <code>minimalLineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimalLineHeight}.</p>","!type":"fn() -> Object"},"getSingleStep":{"!doc":"<p>Returns the (computed) value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn() -> Object"},"getWrap":{"!doc":"<p>Returns the (computed) value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> Object"},"initAutoSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoSize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn(value: Object) -> Object"},"initMinimalLineHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimalLineHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimalLineHeight}.</p>","!type":"fn(value: Object) -> Object"},"initSingleStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>singleStep</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"initWrap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wrap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"isAutoSize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>autoSize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn() -> bool"},"isWrap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>wrap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"},"resetAutoSize":{"!doc":"<p>Resets the user value of the property <code>autoSize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn()"},"resetMinimalLineHeight":{"!doc":"<p>Resets the user value of the property <code>minimalLineHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimalLineHeight}.</p>","!type":"fn()"},"resetSingleStep":{"!doc":"<p>Resets the user value of the property <code>singleStep</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn()"},"resetWrap":{"!doc":"<p>Resets the user value of the property <code>wrap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn()"},"setAutoSize":{"!doc":"<p>Sets the user value of the property <code>autoSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn(value: Object) -> Object"},"setMinimalLineHeight":{"!doc":"<p>Sets the user value of the property <code>minimalLineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimalLineHeight}.</p>","!type":"fn(value: Object) -> Object"},"setSingleStep":{"!doc":"<p>Sets the user value of the property <code>singleStep</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #singleStep}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!type":"fn(value: +undefined)"},"setWrap":{"!doc":"<p>Sets the user value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"toggleAutoSize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>autoSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoSize}.</p>","!type":"fn() -> bool"},"toggleWrap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"}}},"TextField":{"!proto":"qx.ui.form.AbstractField","!doc":"<p>The TextField is a single-line text input field.</p>","prototype":{"_renderContentElement":{"!type":"fn(innerHeight: +undefined, element: +undefined)"}}},"ToggleButton":{"!proto":"qx.ui.basic.Atom","!doc":"<p>A toggle Button widget</p>\n\n<p>If the user presses the button by tapping on it pressing the enter or\nspace key, the button toggles between the pressed an not pressed states.\nThere is no execute event, only a {@link qx.ui.form.ToggleButton#changeValue}\nevent.</p>","!type":"fn()","prototype":{"_applyGroup":{"!doc":"<p>The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons</p>","!type":"fn(value: +undefined, old: +undefined)"},"_applyTriState":{"!doc":"<p>Apply value property when triState property is modified.</p>","!type":"fn(value: bool, old: bool)"},"_applyValue":{"!doc":"<p>Changes the state of the button dependent on the checked value.</p>","!type":"fn(value: bool, old: bool)"},"_onExecute":{"!doc":"<p>Handler for the execute event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyDown":{"!doc":"<p>Listener method for &#8220;keydown&#8221; event.</p>\n\n<p>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state\nfor the keys &#8220;Enter&#8221; or &#8220;Space&#8221;</p>","!type":"fn(e: +Event)"},"_onKeyUp":{"!doc":"<p>Listener method for &#8220;keyup&#8221; event.</p>\n\n<p>Removes &#8220;abandoned&#8221; and &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set)\nfor the keys &#8220;Enter&#8221; or &#8220;Space&#8221;. It also toggles the {@link #value} property.</p>","!type":"fn(e: +Event)"},"_onPointerDown":{"!doc":"<p>Listener method for &#8220;pointerdown&#8221; event.\n<ul>\n<li>Activates capturing</li>\n<li>Removes &#8220;abandoned&#8221; state</li>\n<li>Adds &#8220;pressed&#8221; state</li>\n</ul></p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOut":{"!doc":"<p>Listener method for &#8220;pointerout&#8221; event.\n<ul>\n<li>Removes &#8220;hovered&#8221; state</li>\n<li>Adds &#8220;abandoned&#8221; state (if &#8220;pressed&#8221; state is set)</li>\n<li>Removes &#8220;pressed&#8221; state (if &#8220;pressed&#8221; state is set and button is not checked)\n</ul></p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Listener method for &#8220;pointerover&#8221; event.\n<ul>\n<li>Adds state &#8220;hovered&#8221;</li>\n<li>Removes &#8220;abandoned&#8221; and adds &#8220;pressed&#8221; state (if &#8220;abandoned&#8221; state is set)</li>\n</ul></p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerUp":{"!doc":"<p>Listener method for &#8220;pointerup&#8221; event.\n<ul>\n<li>Releases capturing</li>\n<li>Removes &#8220;pressed&#8221; state (if not &#8220;abandoned&#8221; state is set and &#8220;pressed&#8221; state is set)</li>\n<li>Removes &#8220;abandoned&#8221; state (if set)</li>\n<li>Toggles {@link #value} (if state &#8220;abandoned&#8221; is not set and state &#8220;pressed&#8221; is set)</li>\n</ul></p>","!type":"fn(e: +qx.event.type.Pointer)"},"getGroup":{"!doc":"<p>Returns the (computed) value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn() -> Object"},"getTriState":{"!doc":"<p>Returns the (computed) value of the property <code>triState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #triState}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initGroup":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>group</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"initTriState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>triState</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #triState}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"isTriState":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>triState</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #triState}.</p>","!type":"fn() -> bool"},"isValue":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>value</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"},"resetGroup":{"!doc":"<p>Resets the user value of the property <code>group</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn()"},"resetTriState":{"!doc":"<p>Resets the user value of the property <code>triState</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #triState}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setGroup":{"!doc":"<p>Sets the user value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"setTriState":{"!doc":"<p>Sets the user value of the property <code>triState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #triState}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"toggleTriState":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>triState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #triState}.</p>","!type":"fn() -> bool"},"toggleValue":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"}}},"validation":{"AsyncValidator":{"!proto":"qx.core.Object","!doc":"<p>This class is responsible for validation in all asynchronous cases and\nshould always be used with {@link qx.ui.form.validation.Manager}.</p>\n\n<p>It acts like a wrapper for asynchronous validation functions. These\nvalidation function must be set in the constructor. The form manager will\ninvoke the validation and the validator function will be called with two\narguments:\n<ul>\n <li>asyncValidator: A reference to the corresponding validator.</li>\n <li>value: The value of the assigned input field.</li>\n</ul>\nThese two parameters are needed to set the validation status of the current\nvalidator. {@link #setValid} is responsible for doing that.</p>\n\n<p><strong>Warning:</strong> Instances of this class can only be used with one input\nfield at a time. Multi usage is not supported!</p>\n\n<p><strong>Warning:</strong> Calling {@link #setValid} synchronously does not work. If you\nhave an synchronous validator, please check\n{@link qx.ui.form.validation.Manager#add}. If you have both cases, you have\nto wrap the synchronous call in a timeout to make it asychronous.</p>","!type":"fn()","prototype":{"setValid":{"!doc":"<p>This method should be called within the asynchronous callback to tell the\nvalidator the result of the validation.</p>","!type":"fn(valid: bool, message?: string)"},"validate":{"!doc":"<p>The validate function should only be called by\n{@link qx.ui.form.validation.Manager}.</p>\n\n<p>It stores the given information and calls the validation function set in\nthe constructor. The method is used for form fields only. Validating a\nform itself will be invokes with {@link #validateForm}.</p>","!type":"fn(item: +qx.ui.core.Widget, value: Object, manager: +qx.ui.form.validation.Manager, context?: Object)"},"validateForm":{"!doc":"<p>The validateForm function should only be called by\n{@link qx.ui.form.validation.Manager}.</p>\n\n<p>It stores the given information and calls the validation function set in\nthe constructor. The method is used for forms only. Validating a\nform item will be invokes with {@link #validate}.</p>","!type":"fn(items: +qx.ui.core.Widget, manager: +qx.ui.form.validation.Manager, context?: Object)"}}},"Manager":{"!proto":"qx.core.Object","!doc":"<p>This validation manager is responsible for validation of forms.</p>","!type":"fn()","prototype":{"__checkValidationComplete":{"!doc":"<p>Checks if all asynchronous validators have validated so the result\nis final and the {@link #complete} event can be fired. If that&#8217;s not\nthe case, nothing will happen in the method.</p>","!type":"fn()"},"__isAsyncValidator":{"!doc":"<p>Helper function which checks, if the given validator is synchronous\nor asynchronous.</p>","!type":"fn(validator: fn()) -> bool"},"__setValid":{"!doc":"<p>Internal setter for the valid member. It generates the event if\nnecessary and stores the new value</p>","!type":"fn(value: bool)"},"__supportsInvalid":{"!doc":"<p>Returns true, if the given item implements the {@link qx.ui.form.IForm}\ninterface.</p>","!type":"fn(formItem: +qx.core.Object) -> bool"},"__supportsSingleSelection":{"!doc":"<p>Returns true, if the given item implements the\n{@link qx.ui.core.ISingleSelection} interface.</p>","!type":"fn(formItem: +qx.core.Object) -> bool"},"__validateForm":{"!doc":"<p>Validates the form. It checks for asynchronous validation and handles\nthe differences to synchronous validation. If no form validator is given,\ntrue will be returned. If a synchronous validator is given, the\nvalidation result will be returned. In asynchronous cases, null will be\nreturned cause the result is not available.</p>","!type":"fn(items: +qx.ui.core.Widget) -> bool"},"__validateItem":{"!doc":"<p>Validates a form item. This method handles the differences of\nsynchronous and asynchronous validation and returns the result of the\nvalidation if possible (synchronous cases). If the validation is\nasynchronous, null will be returned.</p>","!type":"fn(dataEntry: Object, value: Object) -> bool"},"__validateRequired":{"!doc":"<p>Checks if the form item is required. If so, the value is checked\nand the result will be returned. If the form item is not required, true\nwill be returned.</p>","!type":"fn(formItem: +qx.ui.core.Widget) -> Object"},"_showToolTip":{"!doc":"<p>Responsible for showing a tooltip in case the validation is done for\nwidgets based on qx.ui.core.Widget.</p>","!type":"fn(valid: bool)"},"add":{"!doc":"<p>Add a form item to the validation manager.</p>\n\n<p>The form item has to implement at least two interfaces:\n<ol>\n  <li>The {@link qx.ui.form.IForm} Interface</li>\n  <li>One of the following interfaces:\n    <ul>\n      <li>{@link qx.ui.form.IBooleanForm}</li>\n      <li>{@link qx.ui.form.IColorForm}</li>\n      <li>{@link qx.ui.form.IDateForm}</li>\n      <li>{@link qx.ui.form.INumberForm}</li>\n      <li>{@link qx.ui.form.IStringForm}</li>\n    </ul>\n  </li>\n</ol>\nThe validator can be a synchronous or asynchronous validator. In\nboth cases the validator can either returns a boolean or fire an\n{@link qx.core.ValidationError}. For synchronous validation, a plain\nJavaScript function should be used. For all asynchronous validations,\na {@link qx.ui.form.validation.AsyncValidator} is needed to wrap the\nplain function.</p>","!type":"fn(formItem: +qx.ui.core.Widget, validator: fn(), context?: Object)"},"getContext":{"!doc":"<p>Returns the (computed) value of the property <code>context</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn() -> Object"},"getInvalidFormItems":{"!doc":"<p>Selects invalid form items</p>","!type":"fn() -> +Array"},"getInvalidMessage":{"!doc":"<p>Returns the (computed) value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn() -> Object"},"getInvalidMessages":{"!doc":"<p>Returns an array of all invalid messages of the invalid form items and\nthe form manager itself.</p>","!type":"fn() -> string"},"getItems":{"!doc":"<p>Returns registered form items from the validation manager.</p>","!type":"fn() -> +Array"},"getRequiredFieldMessage":{"!doc":"<p>Returns the (computed) value of the property <code>requiredFieldMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredFieldMessage}.</p>","!type":"fn() -> Object"},"getValid":{"!doc":"<p>Returns the valid state of the manager.</p>","!type":"fn() -> bool"},"getValidator":{"!doc":"<p>Returns the (computed) value of the property <code>validator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validator}.</p>","!type":"fn() -> Object"},"initContext":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>context</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn(value: Object) -> Object"},"initInvalidMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>invalidMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"initRequiredFieldMessage":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>requiredFieldMessage</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredFieldMessage}.</p>","!type":"fn(value: Object) -> Object"},"initValidator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>validator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #validator}.</p>","!type":"fn(value: Object) -> Object"},"isValid":{"!doc":"<p>Returns the valid state of the manager.</p>","!type":"fn() -> bool"},"remove":{"!doc":"<p>Remove a form item from the validation manager.</p>","!type":"fn(formItem: +qx.ui.core.Widget) -> +qx.ui.core.Widget"},"reset":{"!doc":"<p>Resets the validator.</p>","!type":"fn()"},"resetContext":{"!doc":"<p>Resets the user value of the property <code>context</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn()"},"resetInvalidMessage":{"!doc":"<p>Resets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn()"},"resetRequiredFieldMessage":{"!doc":"<p>Resets the user value of the property <code>requiredFieldMessage</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredFieldMessage}.</p>","!type":"fn()"},"resetValidator":{"!doc":"<p>Resets the user value of the property <code>validator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #validator}.</p>","!type":"fn()"},"setContext":{"!doc":"<p>Sets the user value of the property <code>context</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #context}.</p>","!type":"fn(value: Object) -> Object"},"setFormValid":{"!doc":"<p>Internal helper method to set the form manager to valid for asynchronous\nvalidation calls. This indirection is used to determinate if the\nvalidation process is completed or if other asynchronous validators\nare still validating. {@link #__checkValidationComplete} checks if the\nvalidation is complete and will be called at the end of this method.</p>","!type":"fn(valid: bool)"},"setInvalidMessage":{"!doc":"<p>Sets the user value of the property <code>invalidMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #invalidMessage}.</p>","!type":"fn(value: Object) -> Object"},"setItemValid":{"!doc":"<p>Internal helper method to set the given item to valid for asynchronous\nvalidation calls. This indirection is used to determinate if the\nvalidation process is completed or if other asynchronous validators\nare still validating. {@link #__checkValidationComplete} checks if the\nvalidation is complete and will be called at the end of this method.</p>","!type":"fn(formItem: +qx.ui.core.Widget, valid: bool)"},"setRequiredFieldMessage":{"!doc":"<p>Sets the user value of the property <code>requiredFieldMessage</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #requiredFieldMessage}.</p>","!type":"fn(value: Object) -> Object"},"setValidator":{"!doc":"<p>Sets the user value of the property <code>validator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validator}.</p>","!type":"fn(value: Object) -> Object"},"validate":{"!doc":"<p>Invokes the validation. If only synchronous validators are set, the\nresult of the whole validation is available at the end of the method\nand can be returned. If an asynchronous validator is set, the result\nis still unknown at the end of this method so nothing will be returned.\nIn both cases, a {@link #complete} event will be fired if the validation\nhas ended. The result of the validation can then be accessed with the\n{@link #getValid} method.</p>","!type":"fn() -> bool"}}}},"VirtualComboBox":{"!proto":"qx.ui.form.core.AbstractVirtualBox","!doc":"<p>A virtual form widget that allows text entry as well as selection from a\ndrop-down.</p>","!type":"fn()","prototype":{"__convertValue":{"!doc":"<p>Helper method to convert the model item to a String.</p>","!type":"fn(modelItem: Object) -> string"},"__onSelectionChange":{"!doc":"<p>Handler to synchronize selection changes with the value property.</p>","!type":"fn(event: +qx.event.type.Data)"},"__selectFirstMatch":{"!doc":"<p>Selects the first list item that starts with the text field&#8217;s value.</p>","!type":"fn()"},"_applyPlaceholder":{"!doc":"<p>Applies changes of the property value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: string, old: string)"},"_beforeOpen":{"!type":"fn()"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getAction":{"!type":"fn(event: +undefined)"},"_handleKeyboard":{"!type":"fn(event: +undefined)"},"_handlePointer":{"!type":"fn(event: +undefined)"},"clearTextSelection":{"!doc":"<p>Clears the current selection. This method only works if the widget is\nalready created and added to the document.</p>","!type":"fn()"},"focus":{"!type":"fn()"},"getDefaultFormat":{"!doc":"<p>Returns the (computed) value of the property <code>defaultFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultFormat}.</p>","!type":"fn() -> Object"},"getPlaceholder":{"!doc":"<p>Returns the (computed) value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn() -> Object"},"getTextSelection":{"!doc":"<p>Returns the current selection. This method only works if the widget is\nalready created and added to the document.</p>","!type":"fn() -> string"},"getTextSelectionLength":{"!doc":"<p>Returns the current selection length. This method only works if the\nwidget is already created and added to the document.</p>","!type":"fn() -> +Integer"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initDefaultFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultFormat}.</p>","!type":"fn(value: Object) -> Object"},"initPlaceholder":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placeholder</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"resetAllTextSelection":{"!doc":"<p>Clear any text selection, then select all text.</p>","!type":"fn()"},"resetDefaultFormat":{"!doc":"<p>Resets the user value of the property <code>defaultFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultFormat}.</p>","!type":"fn()"},"resetPlaceholder":{"!doc":"<p>Resets the user value of the property <code>placeholder</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"selectAllText":{"!doc":"<p>Selects the whole content.</p>","!type":"fn()"},"setDefaultFormat":{"!doc":"<p>Sets the user value of the property <code>defaultFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultFormat}.</p>","!type":"fn(value: Object) -> Object"},"setPlaceholder":{"!doc":"<p>Sets the user value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"setTextSelection":{"!doc":"<p>Set the selection to the given start and end (zero-based). If no end\nvalue is given the selection will extend to the end of the textfield&#8217;s\ncontent. This method only works if the widget is already created and\nadded to the document.</p>","!type":"fn(start: +Integer, end: +Integer)"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"tabFocus":{"!type":"fn()"}}},"VirtualSelectBox":{"!proto":"qx.ui.form.core.AbstractVirtualBox","!doc":"<p>A form virtual widget which allows a single selection. Looks somewhat like\na normal button, but opens a virtual list of items to select when tapping\non it.</p>","!type":"fn()","prototype":{"__convertKeyIdentifier":{"!doc":"<p>Converts the keyIdentifier to a printable character e.q. <code>&#8220;Space&#8221;</code>\nto <code>&#8221; &#8221;</code>.</p>","!type":"fn(keyIdentifier: string) -> string"},"__preselect":{"!doc":"<p>Preselects an item in the drop-down, when item starts with the\n__seachValue value.</p>","!type":"fn()"},"_addBindings":{"!doc":"<p>This method is called when the binding can be added to the\nwidget. For e.q. bind the drop-down selection with the widget.</p>","!type":"fn()"},"_applySelection":{"!doc":"<p>Applies changes of the property value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getAction":{"!type":"fn(event: +undefined)"},"_handleKeyboard":{"!type":"fn(event: +undefined)"},"_handlePointer":{"!type":"fn(event: +undefined)"},"_onPointerOut":{"!doc":"<p>Listener method for &#8220;pointerout&#8221; event.</p>\n\n<ul>\n<li>Removes \"hovered\" state</li>\n<li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state\n  is set)</li>\n</ul>","!type":"fn(event: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Listener method for &#8220;pointerover&#8221; event.</p>\n\n<ul>\n<li>Adds state \"hovered\"</li>\n<li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state\n  is set)</li>\n</ul>","!type":"fn(event: +qx.event.type.Pointer)"},"_removeBindings":{"!doc":"<p>This method is called when the binding can be removed from the\nwidget. For e.q. remove the bound drop-down selection.</p>","!type":"fn()"},"getSelection":{"!doc":"<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn() -> Object"},"initSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"resetSelection":{"!doc":"<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn()"},"setSelection":{"!doc":"<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"syncWidget":{"!type":"fn(jobs: +undefined)"}}}},"groupbox":{"CheckGroupBox":{"!proto":"qx.ui.groupbox.GroupBox","!doc":"<p>A group box, which has a check box near the legend.</p>","prototype":{"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onExecute":{"!doc":"<p>Event listener for execute event of checkbox.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onRadioChangeValue":{"!doc":"<p>Event listener for change event of checkbox</p>","!type":"fn(e: +qx.event.type.Data)"},"execute":{"!type":"fn()"},"getCommand":{"!type":"fn()"},"getValue":{"!doc":"<p>The value of the groupbox.</p>","!type":"fn() -> bool"},"resetValue":{"!doc":"<p>Resets the value.</p>","!type":"fn()"},"setCommand":{"!type":"fn(command: +undefined)"},"setValue":{"!doc":"<p>Configures the value of the groupbox.</p>","!type":"fn(value: bool)"}}},"GroupBox":{"!proto":"qx.ui.core.Widget","!doc":"<p>Group boxes are used to group a set of form elements.</p>","!type":"fn()","prototype":{"_applyLegendPosition":{"!doc":"<p>Apply method for applying the legend position. It calls the\n{@link #_repositionFrame} method.</p>","!type":"fn(e: +undefined)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_repositionFrame":{"!doc":"<p>Repositions the frame of the group box dependent on the\n{@link #legendPosition} property.</p>","!type":"fn()"},"getChildrenContainer":{"!doc":"<p>The children container needed by the {@link qx.ui.core.MRemoteChildrenHandling}\nmixin</p>","!type":"fn() -> +qx.ui.container.Composite"},"getIcon":{"!doc":"<p>Accessor method for the icon of the legend sub widget</p>","!type":"fn() -> string"},"getLegend":{"!doc":"<p>Accessor method for the label of the legend sub widget</p>","!type":"fn() -> string"},"getLegendPosition":{"!doc":"<p>Returns the (computed) value of the property <code>legendPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #legendPosition}.</p>","!type":"fn() -> Object"},"initLegendPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>legendPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #legendPosition}.</p>","!type":"fn(value: Object) -> Object"},"resetLegendPosition":{"!doc":"<p>Resets the user value of the property <code>legendPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #legendPosition}.</p>","!type":"fn()"},"setIcon":{"!doc":"<p>Sets the icon of the legend sub widget.</p>","!type":"fn(icon: string)"},"setLegend":{"!doc":"<p>Sets the label of the legend sub widget if the given string is\nvalid. Otherwise the legend sub widget get not displayed.</p>","!type":"fn(legend: string)"},"setLegendPosition":{"!doc":"<p>Sets the user value of the property <code>legendPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #legendPosition}.</p>","!type":"fn(value: Object) -> Object"}}},"RadioGroupBox":{"!proto":"qx.ui.groupbox.GroupBox","!doc":"<p>A group box, which has a radio button near the legend.</p>","prototype":{"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onExecute":{"!doc":"<p>Event listener for execute event of checkbox.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onRadioChangeValue":{"!doc":"<p>Event listener for changeValue event of radio button</p>","!type":"fn(e: +qx.event.type.Data)"},"execute":{"!type":"fn()"},"getCommand":{"!type":"fn()"},"getGroup":{"!doc":"<p>Returns the radio group</p>","!type":"fn() -> +qx.ui.form.RadioGroup"},"getLabel":{"!doc":"<p>Returns the configured legend. Only used for RadioManager compatibility.</p>","!type":"fn() -> string"},"getValue":{"!doc":"<p>The value of the groupbox</p>","!type":"fn() -> bool"},"resetValue":{"!doc":"<p>Resets the value.</p>","!type":"fn()"},"setCommand":{"!type":"fn(command: +undefined)"},"setGroup":{"!doc":"<p>Sets the radio group to use</p>","!type":"fn(value: +qx.ui.form.RadioGroup)"},"setValue":{"!doc":"<p>Configures the value of the groupbox.</p>","!type":"fn(value: bool)"}}}},"indicator":{"ProgressBar":{"!proto":"qx.ui.container.Composite","!doc":"<p>The Progress bar is designed to simply display the current % complete\nfor a process.</p>\n\n<p>The Value is limited between 0 and Maximum value.\nIt&#8217;s not allowed to set a Maximum value of 0.  If you set a Maximum value\nbigger than 0, but smaller than Value, it will be limited to Value.</p>\n\n<p>The following example creates and adds a progress bar to the root element.\nA listener is used to show the user if the value is changed,\nand another one when the progress is complete.</p>\n\n<pre class=\"javascript\">\nvar pb = new qx.ui.indicator.ProgressBar();\nthis.getRoot().add(pb, { left : 20, top: 20});\n\npb.addListener(\"change\", function(e) {\n  this.debug(e.getData()); // % complete\n  this.debug(pb.getValue()); // absolute value\n});\n\npb.addListener(\"complete\", function(e) {\n  this.debug(\"complete\");\n});\n\n//set a value\npb.setValue(20);\n</pre>","!type":"fn()","prototype":{"_changeProgress":{"!doc":"<p>Update the progress bar.</p>","!type":"fn(value: number)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"getMaximum":{"!doc":"<p>Returns the maximum value of progress bar.</p>","!type":"fn() -> number"},"getValue":{"!doc":"<p>Returns the progress bar value.</p>","!type":"fn() -> number"},"setMaximum":{"!doc":"<p>Sets the maximum value of the progress bar.</p>","!type":"fn(value: number) -> number"},"setValue":{"!doc":"<p>Sets the value of the progress bar.</p>","!type":"fn(value: number) -> number"}}}},"layout":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Base class for all layout managers.</p>\n\n<p>Custom layout manager must derive from\nthis class and implement the methods {@link #invalidateLayoutCache},\n{@link #renderLayout} and {@link #getSizeHint}.</p>","prototype":{"_applyLayoutChange":{"!doc":"<p>Indicate that the layout has layout changed and propagate this information\nup the widget hierarchy.</p>\n\n<p>Also a generic property apply method for all layout relevant properties.</p>","!type":"fn()"},"_clearSeparators":{"!doc":"<p>Remove all currently visible separators</p>","!type":"fn()"},"_computeSizeHint":{"!doc":"<p>This computes the size hint of the layout and returns it.</p>","!type":"fn() -> +Map"},"_getLayoutChildren":{"!doc":"<p>Returns the list of all layout relevant children.</p>","!type":"fn() -> +Array"},"_getWidget":{"!doc":"<p>Return the widget that is this layout is responsible for.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_renderSeparator":{"!doc":"<p>Renders a separator between two children</p>","!type":"fn(separator: string, bounds: +Map)"},"connectToWidget":{"!doc":"<p>This method is called by the widget to connect the widget with the layout.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"getHeightForWidth":{"!doc":"<p>If layout wants to trade height for width it has to implement this\nmethod and return the preferred height if it is resized to\nthe given width. This function returns <code>null</code> if the item\ndo not support height for width.</p>","!type":"fn(width: +Integer) -> +Integer"},"getSizeHint":{"!doc":"<p>Computes the layout dimensions and possible ranges of these.</p>","!type":"fn() -> +Map"},"hasHeightForWidth":{"!doc":"<p>Whether the layout manager supports height for width.</p>","!type":"fn() -> bool"},"invalidateChildrenCache":{"!doc":"<p>This method is called, on each child &#8220;add&#8221; and &#8220;remove&#8221; action and\nwhenever the layout data of a child is changed. The method should be used\nto clear any children relevant cached data.</p>","!type":"fn()"},"invalidateLayoutCache":{"!doc":"<p>Invalidate all layout relevant caches. Automatically deletes the size hint.</p>","!type":"fn()"},"renderLayout":{"!doc":"<p>Applies the children layout.</p>","!type":"fn(availWidth: +Integer, availHeight: +Integer, padding: +Map)"},"verifyLayoutProperty":{"!doc":"<p>Verifies the value of a layout property.</p>\n\n<p>Note: This method is only available in the debug builds.</p>","!type":"fn(item: Object, name: Object, value: Object)"}}},"Atom":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>A atom layout. Used to place an image and label in relation\nto each other. Useful to create buttons, list items, etc.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Gap between icon and text (using {@link #gap})</li>\n<li>Vertical and horizontal mode (using {@link #iconPosition})</li>\n<li>Sorting options to place first child on top/left or bottom/right (using {@link #iconPosition})</li>\n<li>Automatically middles/centers content to the available space</li>\n<li>Auto-sizing</li>\n<li>Supports more than two children (will be processed the same way like the previous ones)</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<p>None</p>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n<li>Does not support margins and alignment of {@link qx.ui.core.LayoutItem}.</li>\n</ul>\n\n<p><strong>Alternative Names</strong></p>\n\n<p>None</p>","prototype":{"_computeSizeHint":{"!type":"fn()"},"getCenter":{"!doc":"<p>Returns the (computed) value of the property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn() -> Object"},"getGap":{"!doc":"<p>Returns the (computed) value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn() -> Object"},"getIconPosition":{"!doc":"<p>Returns the (computed) value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn() -> Object"},"initCenter":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>center</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn(value: Object) -> Object"},"initGap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>gap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: Object) -> Object"},"initIconPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object) -> Object"},"isCenter":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>center</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"},"resetCenter":{"!doc":"<p>Resets the user value of the property <code>center</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn()"},"resetGap":{"!doc":"<p>Resets the user value of the property <code>gap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn()"},"resetIconPosition":{"!doc":"<p>Resets the user value of the property <code>iconPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn()"},"setCenter":{"!doc":"<p>Sets the user value of the property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn(value: Object) -> Object"},"setGap":{"!doc":"<p>Sets the user value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: Object) -> Object"},"setIconPosition":{"!doc":"<p>Sets the user value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object) -> Object"},"toggleCenter":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn() -> bool"}}},"Basic":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>A basic layout, which supports positioning of child widgets by absolute\nleft/top coordinates. This layout is very simple but should also\nperform best.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Basic positioning using <code>left</code> and <code>top</code> properties</li>\n<li>Respects minimum and maximum dimensions without skrinking/growing</li>\n<li>Margins for top and left side (including negative ones)</li>\n<li>Respects right and bottom margins in the size hint</li>\n<li>Auto-sizing</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>left</strong> <em>(Integer)</em>: The left coordinate in pixel</li>\n<li><strong>top</strong> <em>(Integer)</em>: The top coordinate in pixel</li>\n</ul>\n\n<p><strong>Details</strong></p>\n\n<p>The default location of any widget is zero for both\n<code>left</code> and <code>top</code>.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the basic layout.</p>\n\n<pre class=\"javascript\">\nvar container = new qx.ui.container.Composite(new qx.ui.layout.Basic());\n\n// simple positioning\ncontainer.add(new qx.ui.core.Widget(), {left: 10, top: 10});\ncontainer.add(new qx.ui.core.Widget(), {left: 100, top: 50});\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/layout/basic.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual.","prototype":{"_computeSizeHint":{"!type":"fn()"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"}}},"Canvas":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>The Canvas is an extended Basic layout.</p>\n\n<p>It is possible to position a widget relative to the right or bottom edge of\nthe available space. It further supports stretching between left and right\nor top and bottom e.g. <code>left=20</code> and <code>right=20</code> would\nkeep a margin of 20 pixels to both edges. The Canvas layout has support for\npercent dimensions and locations.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Pixel dimensions and locations</li>\n<li>Percent dimensions and locations</li>\n<li>Stretching between left+right and top+bottom</li>\n<li>Minimum and maximum dimensions</li>\n<li>Children are automatically shrunk to their minimum dimensions if not enough space is available</li>\n<li>Auto sizing (ignoring percent values)</li>\n<li>Margins (also negative ones)</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>left</strong> <em>(Integer|String)</em>: The left coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>top</strong> <em>(Integer|String)</em>: The top coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>right</strong> <em>(Integer|String)</em>: The right coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>bottom</strong> <em>(Integer|String)</em>: The bottom coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>edge</strong> <em>(Integer|String)</em>: The coordinate in pixels or as a percent string to be used for all four edges.\n<li><strong>width</strong> <em>(String)</em>: A percent width e.g. <code>40%</code>.</li>\n<li><strong>height</strong> <em>(String)</em>: A percent height e.g. <code>60%</code>.</li>\n</ul>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n<li>Stretching (<code>left</code>-><code>right</code> or <code>top</code>-><code>bottom</code>)\n  has a higher priority than the preferred dimensions</li>\n<li>Stretching has a lower priority than the min/max dimensions.</li>\n<li>Percent values have no influence on the size hint of the layout.</li>\n</ul>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the canvas layout.</p>\n\n<pre class=\"javascript\">\nvar container = new qx.ui.container.Composite(new qx.ui.layout.Canvas());\n\n// simple positioning\ncontainer.add(new qx.ui.core.Widget(), {top: 10, left: 10});\n\n// stretch vertically with 10 pixel distance to the parent's top\n// and bottom border\ncontainer.add(new qx.ui.core.Widget(), {top: 10, left: 10, bottom: 10});\n\n// percent positioning and size\ncontainer.add(new qx.ui.core.Widget(), {left: \"50%\", top: \"50%\", width: \"25%\", height: \"40%\"});\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/layout/canvas.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual.","prototype":{"_computeSizeHint":{"!type":"fn()"},"getDesktop":{"!doc":"<p>Returns the (computed) value of the property <code>desktop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>","!type":"fn() -> Object"},"initDesktop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>desktop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>","!type":"fn(value: Object) -> Object"},"isDesktop":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>desktop</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"},"resetDesktop":{"!doc":"<p>Resets the user value of the property <code>desktop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>","!type":"fn()"},"setDesktop":{"!doc":"<p>Sets the user value of the property <code>desktop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>","!type":"fn(value: Object) -> Object"},"toggleDesktop":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>desktop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>","!type":"fn() -> bool"}}},"Dock":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>Docks children to one of the edges.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Percent width for left/right/center attached children</li>\n<li>Percent height for top/bottom/center attached children</li>\n<li>Minimum and maximum dimensions</li>\n<li>Prioritized growing/shrinking (flex)</li>\n<li>Auto sizing</li>\n<li>Margins and Spacings</li>\n<li>Alignment in orthogonal axis (e.g. alignX of north attached)</li>\n<li>Different sort options for children</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>edge</strong> <em>(String)</em>: The edge where the layout item\n  should be docked. This may be one of <code>north</code>, <code>east</code>,\n  <code>south</code>, <code>west</code> or <code>center</code>. (Required)</li>\n<li><strong>width</strong> <em>(String)</em>: Defines a percent\n  width for the item. The percent width,\n  when specified, is used instead of the width defined by the size hint.\n  This is only supported for children added to the north or south edge or\n  are centered in the middle of the layout.\n  The minimum and maximum width still takes care of the elements limitations.\n  It has no influence on the layout's size hint. Percents are mainly useful for\n  widgets which are sized by the outer hierarchy.\n</li>\n<li><strong>height</strong> <em>(String)</em>: Defines a percent\n  height for the item. The percent height,\n  when specified, is used instead of the height defined by the size hint.\n  This is only supported for children added to the west or east edge or\n  are centered in the middle of the layout.\n  The minimum and maximum height still takes care of the elements limitations.\n  It has no influence on the layout's size hint. Percents are mainly useful for\n  widgets which are sized by the outer hierarchy.\n</li>\n</ul>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.layout.Dock();\n\nvar w1 = new qx.ui.core.Widget();\nvar w2 = new qx.ui.core.Widget();\nvar w3 = new qx.ui.core.Widget();\n\nw1.setHeight(200);\nw2.setWidth(150);\n\nvar container = new qx.ui.container.Composite(layout);\ncontainer.add(w1, {edge:\"north\"});\ncontainer.add(w2, {edge:\"west\"});\ncontainer.add(w3, {edge:\"center\"});\n</pre>\n\n<p><strong>Detailed Description</strong></p>\n\n<p>Using this layout, items may be &#8220;docked&#8221; to a specific side\nof the available space. Each displayed item reduces the available space\nfor the following children. Priorities depend on the position of\nthe child in the internal children list.</p>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/layout/dock.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual.","!type":"fn()","prototype":{"__rebuildCache":{"!doc":"<p>Rebuilds cache for sorted children list.</p>","!type":"fn()"},"_applySort":{"!doc":"<p>Applies changes of the property value of the property <code>sort</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sort}.</p>","!type":"fn(value: Object, old: Object)"},"_computeSizeHint":{"!type":"fn()"},"_getSeparatorWidths":{"!doc":"<p>Computes the dimensions each separator on both the <code>x</code> and\n<code>y</code> axis needs.</p>","!type":"fn() -> +Map"},"getConnectSeparators":{"!doc":"<p>Returns the (computed) value of the property <code>connectSeparators</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #connectSeparators}.</p>","!type":"fn() -> Object"},"getSeparatorX":{"!doc":"<p>Returns the (computed) value of the property <code>separatorX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorX}.</p>","!type":"fn() -> Object"},"getSeparatorY":{"!doc":"<p>Returns the (computed) value of the property <code>separatorY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorY}.</p>","!type":"fn() -> Object"},"getSort":{"!doc":"<p>Returns the (computed) value of the property <code>sort</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sort}.</p>","!type":"fn() -> Object"},"getSpacingX":{"!doc":"<p>Returns the (computed) value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn() -> Object"},"getSpacingY":{"!doc":"<p>Returns the (computed) value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn() -> Object"},"initConnectSeparators":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>connectSeparators</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #connectSeparators}.</p>","!type":"fn(value: Object) -> Object"},"initSeparatorX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>separatorX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorX}.</p>","!type":"fn(value: Object) -> Object"},"initSeparatorY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>separatorY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorY}.</p>","!type":"fn(value: Object) -> Object"},"initSort":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sort</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sort}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"isConnectSeparators":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>connectSeparators</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #connectSeparators}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"},"resetConnectSeparators":{"!doc":"<p>Resets the user value of the property <code>connectSeparators</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #connectSeparators}.</p>","!type":"fn()"},"resetSeparatorX":{"!doc":"<p>Resets the user value of the property <code>separatorX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorX}.</p>","!type":"fn()"},"resetSeparatorY":{"!doc":"<p>Resets the user value of the property <code>separatorY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorY}.</p>","!type":"fn()"},"resetSort":{"!doc":"<p>Resets the user value of the property <code>sort</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sort}.</p>","!type":"fn()"},"resetSpacingX":{"!doc":"<p>Resets the user value of the property <code>spacingX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn()"},"resetSpacingY":{"!doc":"<p>Resets the user value of the property <code>spacingY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn()"},"setConnectSeparators":{"!doc":"<p>Sets the user value of the property <code>connectSeparators</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #connectSeparators}.</p>","!type":"fn(value: Object) -> Object"},"setSeparatorX":{"!doc":"<p>Sets the user value of the property <code>separatorX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorX}.</p>","!type":"fn(value: Object) -> Object"},"setSeparatorY":{"!doc":"<p>Sets the user value of the property <code>separatorY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separatorY}.</p>","!type":"fn(value: Object) -> Object"},"setSort":{"!doc":"<p>Sets the user value of the property <code>sort</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sort}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingX":{"!doc":"<p>Sets the user value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingY":{"!doc":"<p>Sets the user value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"toggleConnectSeparators":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>connectSeparators</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #connectSeparators}.</p>","!type":"fn() -> bool"}}},"Flow":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>A basic layout, which supports positioning of child widgets in a &#8216;flowing&#8217;\nmanner, starting at the container&#8217;s top/left position, placing children left to right\n(like a HBox) until the there&#8217;s no remaining room for the next child. When\nout of room on the current line of elements, a new line is started, cleared\nbelow the tallest child of the preceding line&#8212;a bit like using &#8216;float&#8217;\nin <span class=\"caps\">CSS</span>, except that a new line wraps all the way back to the left.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li> Reversing children order </li>\n<li> Manual line breaks </li>\n<li> Horizontal alignment of lines </li>\n<li> Vertical alignment of individual widgets within a line </li>\n<li> Margins with horizontal margin collapsing </li>\n<li> Horizontal and vertical spacing </li>\n<li> Height for width calculations </li>\n<li> Auto-sizing </li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>lineBreak</strong> <em>(Boolean)</em>: If set to <code>true</code>\n  a forced line break will happen after this child widget.\n</li>\n<li><strong>stretch</strong> <em>(Boolean)</em>: If set to <code>true</code>\n  the widget will be stretched to the remaining line width. This requires\n  lineBreak to be true.\n</li>\n\n</ul>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the Flow layout.</p>\n\n<pre class=\"javascript\">\n var flowlayout = new qx.ui.layout.Flow();\n\n flowlayout.setAlignX( \"center\" );  // Align children to the X axis of the container (left|center|right)\n\n var container = new qx.ui.container.Composite(flowlayout);\n this.getRoot().add(container, {edge: 0});\n\n var button1 = new qx.ui.form.Button(\"1. First Button\", \"flowlayout/test.png\");\n container.add(button1);\n\n var button2 = new qx.ui.form.Button(\"2. Second longer Button...\", \"flowlayout/test.png\");\n // Have this child create a break in the current Line (next child will always start a new Line)\n container.add(button2, {lineBreak: true});\n\n var button3 = new qx.ui.form.Button(\"3rd really, really, really long Button\", \"flowlayout/test.png\");\n button3.setHeight(100);  // tall button\n container.add(button3);\n\n var button4 = new qx.ui.form.Button(\"Number 4\", \"flowlayout/test.png\");\n button4.setAlignY(\"bottom\");\n container.add(button4);\n\n var button5 = new qx.ui.form.Button(\"20px Margins around the great big 5th button!\");\n button5.setHeight(100);  // tall button\n button5.setMargin(20);\n container.add(button5, {lineBreak: true});    // Line break after this button.\n\n var button6 = new qx.ui.form.Button(\"Number 6\", \"flowlayout/test.png\");\n button6.setAlignY(\"middle\");  // Align this child to the vertical center of this line.\n container.add(button6);\n\n var button7 = new qx.ui.form.Button(\"7th a wide, short button\", \"flowlayout/test.png\");\n button7.setMaxHeight(20);  // short button\n container.add(button7);\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/layout/flow.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual.","!type":"fn()","prototype":{"__computeSize":{"!doc":"<p>Compute the preferred size optionally constrained by the available width</p>","!type":"fn(availWidth: +Integer) -> +Map"},"__renderLine":{"!doc":"<p>Render a line in the flow layout</p>","!type":"fn(line: +Map, lineTop: +Integer, availWidth: +Integer, padding: +Map)"},"_computeSizeHint":{"!type":"fn()"},"connectToWidget":{"!type":"fn(widget: +undefined)"},"getAlignX":{"!doc":"<p>Returns the (computed) value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn() -> Object"},"getAlignY":{"!doc":"<p>Returns the (computed) value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn() -> Object"},"getHeightForWidth":{"!type":"fn(width: +undefined)"},"getLastLineChildren":{"!doc":"<p>Returns the list of children fitting in the last row of the given width.</p>","!type":"fn(width: number) -> +Array"},"getReversed":{"!doc":"<p>Returns the (computed) value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> Object"},"getSpacingX":{"!doc":"<p>Returns the (computed) value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn() -> Object"},"getSpacingY":{"!doc":"<p>Returns the (computed) value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn() -> Object"},"hasHeightForWidth":{"!type":"fn()"},"initAlignX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"initAlignY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"initReversed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>reversed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"isReversed":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>reversed</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"},"renderLayout":{"!doc":"<p>The FlowLayout tries to add as many Children as possible to the current &#8216;Line&#8217;\nand when it sees that the next Child won&#8217;t fit, it starts on a new Line, continuing\nuntil all the Children have been added.\nTo enable alignX &#8220;left&#8221;, &#8220;center&#8221;, &#8220;right&#8221; renderLayout has to calculate the positions\nof all a Line&#8217;s children before it draws them.</p>","!type":"fn(availWidth: +Integer, availHeight: +Integer, padding: +Map)"},"resetAlignX":{"!doc":"<p>Resets the user value of the property <code>alignX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn()"},"resetAlignY":{"!doc":"<p>Resets the user value of the property <code>alignY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn()"},"resetReversed":{"!doc":"<p>Resets the user value of the property <code>reversed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn()"},"resetSpacingX":{"!doc":"<p>Resets the user value of the property <code>spacingX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn()"},"resetSpacingY":{"!doc":"<p>Resets the user value of the property <code>spacingY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn()"},"setAlignX":{"!doc":"<p>Sets the user value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"setAlignY":{"!doc":"<p>Sets the user value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"setReversed":{"!doc":"<p>Sets the user value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingX":{"!doc":"<p>Sets the user value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingY":{"!doc":"<p>Sets the user value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"toggleReversed":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"}}},"Grid":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>The grid layout manager arranges the items in a two dimensional\ngrid. Widgets can be placed into the grid&#8217;s cells and may span multiple rows\nand columns.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Flex values for rows and columns</li>\n<li>Minimal and maximal column and row sizes</li>\n<li>Manually setting of column and row sizes</li>\n<li>Horizontal and vertical alignment</li>\n<li>Horizontal and vertical spacing</li>\n<li>Column and row spans</li>\n<li>Auto-sizing</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\n  widget should occupy. Each cell can only contain one widget. This layout\n  property is mandatory.\n</li>\n<li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\n  widget should occupy. Each cell can only contain one widget. This layout\n  property is mandatory.\n</li>\n<li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\n  widget should span, starting from the row specified in the <code>row</code>\n  property. The cells in the spanned rows must be empty as well.\n</li>\n<li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\n  widget should span, starting from the column specified in the <code>column</code>\n  property. The cells in the spanned columns must be empty as well.\n</li>\n</ul>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the grid layout.</p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.layout.Grid();\nlayout.setRowFlex(0, 1); // make row 0 flexible\nlayout.setColumnWidth(1, 200); // set with of column 1 to 200 pixel\n\nvar container = new qx.ui.container.Composite(layout);\ncontainer.add(new qx.ui.core.Widget(), {row: 0, column: 0});\ncontainer.add(new qx.ui.core.Widget(), {row: 0, column: 1});\ncontainer.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/layout/grid.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual.","!type":"fn()","prototype":{"__buildGrid":{"!doc":"<p>Rebuild the internal representation of the grid</p>","!type":"fn()"},"__getOuterSize":{"!doc":"<p>Computes the widget&#8217;s size hint including the widget&#8217;s margins</p>","!type":"fn(widget: +qx.ui.core.LayoutItem) -> +Map"},"_computeSizeHint":{"!type":"fn()"},"_fixHeightsRowSpan":{"!doc":"<p>Check whether all row spans fit with their preferred height into the\npreferred row heights. If there is not enough space, the preferred\nrow sizes are increased. The distribution respects the flex and max\nvalues of the rows.</p>\n\n<p>The same is true for the min sizes.</p>\n\n<p>The height array is modified in place.</p>","!type":"fn(rowHeights: +Map)"},"_fixWidthsColSpan":{"!doc":"<p>Check whether all col spans fit with their preferred width into the\npreferred column widths. If there is not enough space the preferred\ncolumn sizes are increased. The distribution respects the flex and max\nvalues of the columns.</p>\n\n<p>The same is true for the min sizes.</p>\n\n<p>The width array is modified in place.</p>","!type":"fn(colWidths: +Map)"},"_getColumnFlexOffsets":{"!doc":"<p>Computes for each column by how many pixels it must grow or shrink, taking\nthe column flex values and min/max widths into account.</p>","!type":"fn(width: +Integer) -> +Integer"},"_getColWidths":{"!doc":"<p>Compute the min/pref/max column widths.</p>","!type":"fn() -> +Map"},"_getRowFlexOffsets":{"!doc":"<p>Computes for each row by how many pixels it must grow or shrink, taking\nthe row flex values and min/max heights into account.</p>","!type":"fn(height: +Integer) -> +Integer"},"_getRowHeights":{"!doc":"<p>Compute the min/pref/max row heights.</p>","!type":"fn() -> +Map"},"_setColumnData":{"!doc":"<p>Stores data for a grid column</p>","!type":"fn(column: +Integer, key: string, value: Object)"},"_setRowData":{"!doc":"<p>Stores data for a grid row</p>","!type":"fn(row: +Integer, key: string, value: Object)"},"getCellAlign":{"!doc":"<p>Get a map of the cell&#8217;s alignment. For vertical alignment the row alignment\ntakes precedence over the column alignment. For horizontal alignment it is\nthe over way round. If an alignment is set on the cell widget using\n{@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\nalways precedence over row or column alignment.</p>","!type":"fn(row: +Integer, column: +Integer) -> +Map"},"getCellWidget":{"!doc":"<p>Get the widget located in the cell. If a the cell is empty or the widget\nhas a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\n<code>null</code> is returned.</p>","!type":"fn(row: +Integer, column: +Integer) -> +qx.ui.core.Widget"},"getColumnAlign":{"!doc":"<p>Get a map of the column&#8217;s alignment.</p>","!type":"fn(column: +Integer) -> +Map"},"getColumnCount":{"!doc":"<p>Get the number of columns in the grid layout.</p>","!type":"fn() -> +Integer"},"getColumnFlex":{"!doc":"<p>Get the flex value of a grid column.</p>","!type":"fn(column: +Integer) -> +Integer"},"getColumnMaxWidth":{"!doc":"<p>Get the maximum width of a grid column.</p>","!type":"fn(column: +Integer) -> +Integer"},"getColumnMinWidth":{"!doc":"<p>Get the minimum width of a grid column.</p>","!type":"fn(column: +Integer) -> +Integer"},"getColumnWidth":{"!doc":"<p>Get the preferred width of a grid column.</p>","!type":"fn(column: +Integer) -> +Integer"},"getRowAlign":{"!doc":"<p>Get a map of the row&#8217;s alignment.</p>","!type":"fn(row: +Integer) -> +Map"},"getRowCount":{"!doc":"<p>Get the number of rows in the grid layout.</p>","!type":"fn() -> +Integer"},"getRowFlex":{"!doc":"<p>Get the flex value of a grid row.</p>","!type":"fn(row: +Integer) -> +Integer"},"getRowHeight":{"!doc":"<p>Get the preferred height of a grid row.</p>","!type":"fn(row: +Integer) -> +Integer"},"getRowMaxHeight":{"!doc":"<p>Get the maximum height of a grid row.</p>","!type":"fn(row: +Integer) -> +Integer"},"getRowMinHeight":{"!doc":"<p>Get the minimum height of a grid row.</p>","!type":"fn(row: +Integer) -> +Integer"},"getSpacingX":{"!doc":"<p>Returns the (computed) value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn() -> Object"},"getSpacingY":{"!doc":"<p>Returns the (computed) value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn() -> Object"},"initSpacingX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"invalidateLayoutCache":{"!type":"fn()"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"},"resetSpacingX":{"!doc":"<p>Resets the user value of the property <code>spacingX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn()"},"resetSpacingY":{"!doc":"<p>Resets the user value of the property <code>spacingY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn()"},"setColumnAlign":{"!doc":"<p>Set the default cell alignment for a column. This alignment can be\noverridden on a per cell basis by setting the cell&#8217;s content widget&#8217;s\n<code>alignX</code> and <code>alignY</code> properties.</p>\n\n<p>If on a grid cell both row and a column alignment is set, the horizontal\nalignment is taken from the column and the vertical alignment is taken\nfrom the row.</p>","!type":"fn(column: +Integer, hAlign: string, vAlign: string) -> +qx.ui.layout.Grid"},"setColumnFlex":{"!doc":"<p>Set the flex value for a grid column.\nBy default the column flex value is <code>0</code>.</p>","!type":"fn(column: +Integer, flex: +Integer) -> +qx.ui.layout.Grid"},"setColumnMaxWidth":{"!doc":"<p>Set the maximum width of a grid column.\nThe default value is <code>Infinity</code>.</p>","!type":"fn(column: +Integer, maxWidth: +Integer) -> +qx.ui.layout.Grid"},"setColumnMinWidth":{"!doc":"<p>Set the minimum width of a grid column.\nThe default value is <code>0</code>.</p>","!type":"fn(column: +Integer, minWidth: +Integer) -> +qx.ui.layout.Grid"},"setColumnWidth":{"!doc":"<p>Set the preferred width of a grid column.\nThe default value is <code>Infinity</code>.</p>","!type":"fn(column: +Integer, width: +Integer) -> +qx.ui.layout.Grid"},"setRowAlign":{"!doc":"<p>Set the default cell alignment for a row. This alignment can be\noverridden on a per cell basis by setting the cell&#8217;s content widget&#8217;s\n<code>alignX</code> and <code>alignY</code> properties.</p>\n\n<p>If on a grid cell both row and a column alignment is set, the horizontal\nalignment is taken from the column and the vertical alignment is taken\nfrom the row.</p>","!type":"fn(row: +Integer, hAlign: string, vAlign: string) -> +qx.ui.layout.Grid"},"setRowFlex":{"!doc":"<p>Set the flex value for a grid row.\nBy default the row flex value is <code>0</code>.</p>","!type":"fn(row: +Integer, flex: +Integer) -> +qx.ui.layout.Grid"},"setRowHeight":{"!doc":"<p>Set the preferred height of a grid row.\nThe default value is <code>Infinity</code>.</p>","!type":"fn(row: +Integer, height: +Integer) -> +qx.ui.layout.Grid"},"setRowMaxHeight":{"!doc":"<p>Set the maximum height of a grid row.\nThe default value is <code>Infinity</code>.</p>","!type":"fn(row: +Integer, maxHeight: +Integer) -> +qx.ui.layout.Grid"},"setRowMinHeight":{"!doc":"<p>Set the minimum height of a grid row.\nThe default value is <code>0</code>.</p>","!type":"fn(row: +Integer, minHeight: +Integer) -> +qx.ui.layout.Grid"},"setSpacing":{"!doc":"<p>Shortcut to set both horizontal and vertical spacing between grid cells\nto the same value.</p>","!type":"fn(spacing: +Integer) -> +qx.ui.layout.Grid"},"setSpacingX":{"!doc":"<p>Sets the user value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingY":{"!doc":"<p>Sets the user value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"}}},"Grow":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>The grow layout stretches all children to the full available size\nbut still respects limits configured by min/max values.</p>\n\n<p>It will place all children over each other with the top and left coordinates\nset to <code>0</code>. The {@link qx.ui.container.Stack} and the\n{@link qx.ui.core.scroll.ScrollPane} are using this layout.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Auto-sizing</li>\n<li>Respects minimum and maximum child dimensions</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<p>None</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.layout.Grow();\n\nvar w1 = new qx.ui.core.Widget();\nvar w2 = new qx.ui.core.Widget();\nvar w3 = new qx.ui.core.Widget();\n\nvar container = new qx.ui.container.Composite(layout);\ncontainer.add(w1);\ncontainer.add(w2);\ncontainer.add(w3);\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/4.1/pages/layout/grow.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual.","prototype":{"_computeSizeHint":{"!type":"fn()"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"}}},"HBox":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>A horizontal box layout.</p>\n\n<p>The horizontal box layout lays out widgets in a horizontal row, from left\nto right.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Minimum and maximum dimensions</li>\n<li>Prioritized growing/shrinking (flex)</li>\n<li>Margins (with horizontal collapsing)</li>\n<li>Auto sizing (ignoring percent values)</li>\n<li>Percent widths (not relevant for size hint)</li>\n<li>Alignment (child property {@link qx.ui.core.LayoutItem#alignX} is ignored)</li>\n<li>Horizontal spacing (collapsed with margins)</li>\n<li>Reversed children layout (from last to first)</li>\n<li>Vertical children stretching (respecting size hints)</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>flex</strong> <em>(Integer)</em>: The flexibility of a layout item determines how the container\n  distributes remaining empty space among its children. If items are made\n  flexible, they can grow or shrink accordingly. Their relative flex values\n  determine how the items are being resized, i.e. the larger the flex ratio\n  of two items, the larger the resizing of the first item compared to the\n  second.\n\n<p>If there is only one flex item in a layout container, its actual flex\n  value is not relevant. To disallow items to become flexible, set the\n  flex value to zero.\n</li>\n<li><strong>width</strong> <em>(String)</em>: Allows to define a percent\n  width for the item. The width in percent, if specified, is used instead\n  of the width defined by the size hint. The minimum and maximum width still\n  takes care of the element&#8217;s limits. It has no influence on the layout&#8217;s\n  size hint. Percent values are mostly useful for widgets which are sized by\n  the outer hierarchy.\n</li>\n</ul></p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the HBox layout.</p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.layout.HBox();\nlayout.setSpacing(4); // apply spacing\n\nvar container = new qx.ui.container.Composite(layout);\n\ncontainer.add(new qx.ui.core.Widget());\ncontainer.add(new qx.ui.core.Widget());\ncontainer.add(new qx.ui.core.Widget());\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<p>See <a href=\"http://manual.qooxdoo.org/4.1/pages/layout/box.html\">extended documentation</a>\nand links to demos for this layout.</p>","!type":"fn()","prototype":{"__rebuildCache":{"!doc":"<p>Rebuilds caches for flex and percent layout properties</p>","!type":"fn()"},"_applyReversed":{"!doc":"<p>Applies changes of the property value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: bool, old: bool)"},"_computeSizeHint":{"!type":"fn()"},"getAlignX":{"!doc":"<p>Returns the (computed) value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn() -> Object"},"getAlignY":{"!doc":"<p>Returns the (computed) value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn() -> Object"},"getReversed":{"!doc":"<p>Returns the (computed) value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> Object"},"getSeparator":{"!doc":"<p>Returns the (computed) value of the property <code>separator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn() -> Object"},"getSpacing":{"!doc":"<p>Returns the (computed) value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn() -> Object"},"initAlignX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"initAlignY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"initReversed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>reversed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"initSeparator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>separator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn(value: Object) -> Object"},"initSpacing":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"isReversed":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>reversed</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"},"resetAlignX":{"!doc":"<p>Resets the user value of the property <code>alignX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn()"},"resetAlignY":{"!doc":"<p>Resets the user value of the property <code>alignY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn()"},"resetReversed":{"!doc":"<p>Resets the user value of the property <code>reversed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn()"},"resetSeparator":{"!doc":"<p>Resets the user value of the property <code>separator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn()"},"resetSpacing":{"!doc":"<p>Resets the user value of the property <code>spacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn()"},"setAlignX":{"!doc":"<p>Sets the user value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"setAlignY":{"!doc":"<p>Sets the user value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"setReversed":{"!doc":"<p>Sets the user value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"setSeparator":{"!doc":"<p>Sets the user value of the property <code>separator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn(value: Object) -> Object"},"setSpacing":{"!doc":"<p>Sets the user value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"toggleReversed":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"}}},"LineSizeIterator":{"!proto":"Object","!doc":"<p>This class iterates over the lines in a flow layout.</p>","!type":"fn()","prototype":{"__computeGapBeforeChild":{"!doc":"<p>Computes the gap before the child at the given index</p>","!type":"fn(childIndex: +Integer) -> +Integer"},"computeNextLine":{"!doc":"<p>Computes the properties of the next line taking the available width into\naccount</p>","!type":"fn(availWidth: +Integer) -> +Map"},"hasMoreLines":{"!doc":"<p>Whether there are more lines</p>","!type":"fn() -> bool"}}},"Util":{"!doc":"<p>Common set of utility methods used by the standard qooxdoo layouts.</p>","arrangeIdeals":{"!doc":"<p>Arranges two sizes in one box to best respect their individual limitations.</p>\n\n<p>Mainly used by split layouts (Split Panes) where the layout is mainly defined\nby the outer dimensions.</p>","!type":"fn(beginMin: +Integer, beginIdeal: +Integer, beginMax: +Integer, endMin: +Integer, endIdeal: +Integer, endMax: +Integer) -> +Map"},"collapseMargins":{"!doc":"<p>Collapses two margins.</p>\n\n<p>Supports positive and negative margins.\nCollapsing find the largest positive and the largest\nnegative value. Afterwards the result is computed through the\nsubtraction of the negative from the positive value.</p>","!type":"fn(varargs: +arguments) -> +Integer"},"computeFlexOffsets":{"!doc":"<p>Computes the flex offsets needed to reduce the space\ndifference as much as possible by respecting the\npotential of the given elements (being in the range of\ntheir min/max values)</p>","!type":"fn(flexibles: +Map, avail: +Integer, used: +Integer) -> +Map"},"computeHorizontalAlignOffset":{"!doc":"<p>Computes the offset which needs to be added to the top position\nto result in the stated vertical alignment. Also respects\nexisting margins (without collapsing).</p>","!type":"fn(align: string, width: +Integer, availWidth: +Integer, marginLeft?: +Integer, marginRight?: +Integer) -> +Integer"},"computeHorizontalGaps":{"!doc":"<p>Computes the sum of all horizontal gaps. Normally the\nresult is used to compute the available width in a widget.</p>\n\n<p>The method optionally respects margin collapsing as well. In\nthis mode the spacing is collapsed together with the margins.</p>","!type":"fn(children: +Array, spacing?: +Integer, collapse?: bool) -> +Integer"},"computeHorizontalSeparatorGaps":{"!doc":"<p>Computes the gaps together with the configuration of separators.</p>","!type":"fn(children: +qx.ui.core.LayoutItem, spacing: +Integer, separator: string) -> +Integer"},"computeVerticalAlignOffset":{"!doc":"<p>Computes the offset which needs to be added to the top position\nto result in the stated vertical alignment. Also respects\nexisting margins (without collapsing).</p>","!type":"fn(align: string, height: +Integer, availHeight: +Integer, marginTop?: +Integer, marginBottom?: +Integer) -> +Integer"},"computeVerticalGaps":{"!doc":"<p>Computes the sum of all vertical gaps. Normally the\nresult is used to compute the available height in a widget.</p>\n\n<p>The method optionally respects margin collapsing as well. In\nthis mode the spacing is collapsed together with the margins.</p>","!type":"fn(children: +Array, spacing?: +Integer, collapse?: bool) -> +Integer"},"computeVerticalSeparatorGaps":{"!doc":"<p>Computes the gaps together with the configuration of separators.</p>","!type":"fn(children: +qx.ui.core.LayoutItem, spacing: +Integer, separator: string) -> +Integer"}},"VBox":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>A vertical box layout.</p>\n\n<p>The vertical box layout lays out widgets in a vertical column, from top\nto bottom.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Minimum and maximum dimensions</li>\n<li>Prioritized growing/shrinking (flex)</li>\n<li>Margins (with vertical collapsing)</li>\n<li>Auto sizing (ignoring percent values)</li>\n<li>Percent heights (not relevant for size hint)</li>\n<li>Alignment (child property {@link qx.ui.core.LayoutItem#alignY} is ignored)</li>\n<li>Vertical spacing (collapsed with margins)</li>\n<li>Reversed children layout (from last to first)</li>\n<li>Horizontal children stretching (respecting size hints)</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>flex</strong> <em>(Integer)</em>: The flexibility of a layout item determines how the container\n  distributes remaining empty space among its children. If items are made\n  flexible, they can grow or shrink accordingly. Their relative flex values\n  determine how the items are being resized, i.e. the larger the flex ratio\n  of two items, the larger the resizing of the first item compared to the\n  second.\n\n<p>If there is only one flex item in a layout container, its actual flex\n  value is not relevant. To disallow items to become flexible, set the\n  flex value to zero.\n</li>\n<li><strong>height</strong> <em>(String)</em>: Allows to define a percent\n  height for the item. The height in percent, if specified, is used instead\n  of the height defined by the size hint. The minimum and maximum height still\n  takes care of the element&#8217;s limits. It has no influence on the layout&#8217;s\n  size hint. Percent values are mostly useful for widgets which are sized by\n  the outer hierarchy.\n</li>\n</ul></p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the vertical box layout.</p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.layout.VBox();\nlayout.setSpacing(4); // apply spacing\n\nvar container = new qx.ui.container.Composite(layout);\n\ncontainer.add(new qx.ui.core.Widget());\ncontainer.add(new qx.ui.core.Widget());\ncontainer.add(new qx.ui.core.Widget());\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<p>See <a href=\"http://manual.qooxdoo.org/4.1/pages/layout/box.html\">extended documentation</a>\nand links to demos for this layout.</p>","!type":"fn()","prototype":{"__rebuildCache":{"!doc":"<p>Rebuilds caches for flex and percent layout properties</p>","!type":"fn()"},"_applyReversed":{"!doc":"<p>Applies changes of the property value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: bool, old: bool)"},"_computeSizeHint":{"!type":"fn()"},"getAlignX":{"!doc":"<p>Returns the (computed) value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn() -> Object"},"getAlignY":{"!doc":"<p>Returns the (computed) value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn() -> Object"},"getReversed":{"!doc":"<p>Returns the (computed) value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> Object"},"getSeparator":{"!doc":"<p>Returns the (computed) value of the property <code>separator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn() -> Object"},"getSpacing":{"!doc":"<p>Returns the (computed) value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn() -> Object"},"initAlignX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"initAlignY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"initReversed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>reversed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"initSeparator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>separator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn(value: Object) -> Object"},"initSpacing":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"isReversed":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>reversed</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"},"resetAlignX":{"!doc":"<p>Resets the user value of the property <code>alignX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn()"},"resetAlignY":{"!doc":"<p>Resets the user value of the property <code>alignY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn()"},"resetReversed":{"!doc":"<p>Resets the user value of the property <code>reversed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn()"},"resetSeparator":{"!doc":"<p>Resets the user value of the property <code>separator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn()"},"resetSpacing":{"!doc":"<p>Resets the user value of the property <code>spacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn()"},"setAlignX":{"!doc":"<p>Sets the user value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"setAlignY":{"!doc":"<p>Sets the user value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"setReversed":{"!doc":"<p>Sets the user value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"setSeparator":{"!doc":"<p>Sets the user value of the property <code>separator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #separator}.</p>","!type":"fn(value: Object) -> Object"},"setSpacing":{"!doc":"<p>Sets the user value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"toggleReversed":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"}}}},"list":{"core":{"IListDelegate":{"!doc":"<p>Objects which are used as delegates for the <code>qx.ui.list.List</code> may\nimplement any of the methods described in this interface. The delegate does\nnot need to implement all the methods of this interface. If a method is not\nimplemented the <code>qx.ui.list.List</code> provides a default\nimplementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nactually implemented.</p>","prototype":{"bindGroupItem":{"!doc":"<p>Sets up the binding for the given group item and index.</p>\n\n<p>For every property you want to bind, use\n{@link MWidgetController#bindProperty} like this:\n<code>\ncontroller.bindProperty(null, &#8220;value&#8221;, options, item, id);\n</code></p>","!type":"fn(controller: +MWidgetController, item: +qx.ui.core.Widget, id: +Integer)"},"bindItem":{"!doc":"<p>Sets up the binding for the given item and index.</p>\n\n<p>For every property you want to bind, use\n{@link MWidgetController#bindProperty} like this:\n<code>\ncontroller.bindProperty(&#8220;path.in.the.model&#8221;, &#8220;label&#8221;, options, item, id);\n</code></p>","!type":"fn(controller: +MWidgetController, item: +qx.ui.core.Widget, id: +Integer)"},"configureGroupItem":{"!doc":"<p>Gives the user the opportunity to set individual styles and properties\non the group widget cells created by the controller.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"configureItem":{"!doc":"<p>Gives the user the opportunity to set individual styles and properties\non the item widget cells created by the controller.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"createGroupItem":{"!doc":"<p>Creates a group cell which will be used for rendering. Be sure to\nimplement the {@link #bindGroupItem} function as well to get the needed\nproperties bound.</p>","!type":"fn() -> +qx.ui.core.Widget"},"createItem":{"!doc":"<p>Creates an item cell which will be used for rendering. Be sure to\nimplement the {@link #bindItem} function as well to get the needed\nproperties bound.</p>","!type":"fn() -> +qx.ui.core.Widget"},"filter":{"!doc":"<p>Gives the user the opportunity to filter the model. The filter\nmethod has to return <code>true</code> if the given data should be\nshown and <code>false</code> if the given data should be ignored.</p>","!type":"fn(data: Object) -> bool"},"group":{"!doc":"<p>Gives the user the opportunity to group the model. The group method\nshould return unique identifier for the passed data.</p>\n\n<p>Note: When you returning <code>null</code> the passed data will added\nto the default group, which is <code>???</code> from the type\n<code>String</code>. But keep in mind that you can only use the default\ngroup feature when each other group identifier is also a <code>String</code>.\nOtherwise an exception occurs, because you can&#8217;t mix <code>Object</code>\nand <code>String</code> group identifiers.</p>","!type":"fn(data: Object) -> string"},"onPool":{"!doc":"<p>Gives the user the opportunity to reset properties or states.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"sorter":{"!doc":"<p>Gives the user the opportunity to sort the model. The sorting method\nshould return a negative value if a < b, zero if a = b, or a positive\nvalue if a > b.</p>","!type":"fn(a: Object, b: Object) -> +Integer"}}},"MWidgetController":{"!doc":"<p>The mixin controls the binding between model and item.</p>","!type":"fn()","prototype":{"__addBinding":{"!doc":"<p>Helper method to save the binding for the widget.</p>","!type":"fn(widget: +qx.ui.core.Widget, id: Object)"},"__getBindings":{"!doc":"<p>Helper method which returns all bound id from the widget.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +Array"},"__getBindPath":{"!doc":"<p>Helper method to create the path for binding.</p>","!type":"fn(index: +Integer, path: string, type: string) -> string"},"_bindGroupItem":{"!doc":"<p>Sets up the binding for the given group item and index.</p>","!type":"fn(item: +qx.ui.core.Widget, index: +Integer)"},"_bindItem":{"!doc":"<p>Sets up the binding for the given item and index.</p>","!type":"fn(item: +qx.ui.core.Widget, index: +Integer)"},"_configureGroupItem":{"!doc":"<p>Configure the passed item if a delegate is set and the needed\nfunction {@link IListDelegate#configureGroupItem} is available.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"_configureItem":{"!doc":"<p>Configure the passed item if a delegate is set and the needed\nfunction {@link IListDelegate#configureItem} is available.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"_removeBindingsFrom":{"!doc":"<p>Removes the binding of the given item.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"bindDefaultProperties":{"!doc":"<p>Helper-Method for binding the default properties from\nthe model to the target widget. The used default properties\ndepends on the passed item. When the passed item is\na list item the &#8220;label&#8221; and &#8220;icon&#8221; property is used.\nWhen the passed item is a group item the &#8220;value&#8221; property is\nused.</p>\n\n<p>This method should only be called in the\n{@link IListDelegate#bindItem} function\nimplemented by the {@link #delegate} property.</p>","!type":"fn(item: +qx.ui.core.Widget, index: +Integer)"},"bindProperty":{"!doc":"<p>Helper-Method for binding a given property from the model to the target\nwidget.\nThis method should only be called in the\n{@link IListDelegate#bindItem} function implemented by the\n{@link #delegate} property.</p>","!type":"fn(sourcePath: string, targetProperty: string, options: +Map, targetWidget: +qx.ui.core.Widget, index: +Integer)"},"bindPropertyReverse":{"!doc":"<p>Helper-Method for binding a given property from the target widget to\nthe model.\nThis method should only be called in the\n{@link IListDelegate#bindItem} function implemented by the\n{@link #delegate} property.</p>","!type":"fn(targetPath: string, sourceProperty: string, options: +Map, sourceWidget: +qx.ui.core.Widget, index: +Integer)"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getGroupLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>groupLabelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn() -> Object"},"getGroupLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>groupLabelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initGroupLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>groupLabelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initGroupLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>groupLabelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"removeBindings":{"!doc":"<p>Remove all bindings from all bounded items.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetGroupLabelOptions":{"!doc":"<p>Resets the user value of the property <code>groupLabelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn()"},"resetGroupLabelPath":{"!doc":"<p>Resets the user value of the property <code>groupLabelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setGroupLabelOptions":{"!doc":"<p>Sets the user value of the property <code>groupLabelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setGroupLabelPath":{"!doc":"<p>Sets the user value of the property <code>groupLabelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"}}}},"List":{"!proto":"qx.ui.virtual.core.Scroller","!doc":"<p>The <code>qx.ui.list.List</code> is based on the virtual infrastructure and\nsupports filtering, sorting, grouping, single selection, multi selection,\ndata binding and custom rendering.</p>\n\n<p>Using the virtual infrastructure has considerable advantages when there is a\nhuge amount of model items to render because the virtual infrastructure only\ncreates widgets for visible items and reuses them. This saves both creation\ntime and memory.</p>\n\n<p>With the {@link qx.ui.list.core.IListDelegate} interface it is possible\nto configure the list&#8217;s behavior (item and group renderer configuration,\nfiltering, sorting, grouping, etc.).</p>\n\n<p>Here&#8217;s an example of how to use the widget:</p>\n\n<pre class=\"javascript\">\n//create the model data\nvar rawData = [];\nfor (var i = 0; i < 2500; i++) {\n rawData[i] = \"Item No \" + i;\n}\nvar model = qx.data.marshal.Json.createModel(rawData);\n\n//create the list\nvar list = new qx.ui.list.List(model);\n\n//configure the lists's behavior\nvar delegate = {\n  sorter : function(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n};\nlist.setDelegate(delegate);\n\n//Pre-Select \"Item No 20\"\nlist.getSelection().push(model.getItem(20));\n\n//log selection changes\nlist.getSelection().addListener(\"change\", function(e) {\n  this.debug(\"Selection: \" + list.getSelection().getItem(0));\n}, this);\n</pre>","!type":"fn()","prototype":{"__addGroup":{"!doc":"<p>Adds a model index the the group.</p>","!type":"fn(group: string, index: +Integer)"},"__buildUpLookupTable":{"!doc":"<p>Internal method for building the lookup table.</p>","!type":"fn()"},"__checkGroupStructure":{"!doc":"<p>Checks that <code>Object</code> and <code>String</code> are not mixed\nas group identifier, otherwise an exception occurs.</p>","!type":"fn()"},"__createLookupFromGroup":{"!doc":"<p>Creates a lookup table form the internal group hash map.</p>","!type":"fn() -> +Array"},"__getUniqueGroupName":{"!doc":"<p>Returns an unique group name for the passed group.</p>","!type":"fn(group: string) -> string"},"__updateRowCount":{"!doc":"<p>Helper method to update the row count.</p>","!type":"fn()"},"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_applyGroupLabelOptions":{"!doc":"<p>Applies changes of the property value of the property <code>groupLabelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyGroupLabelPath":{"!doc":"<p>Applies changes of the property value of the property <code>groupLabelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn(value: string, old: string)"},"_applyIconOptions":{"!doc":"<p>Applies changes of the property value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyIconPath":{"!doc":"<p>Applies changes of the property value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: string, old: string)"},"_applyLabelOptions":{"!doc":"<p>Applies changes of the property value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyLabelPath":{"!doc":"<p>Applies changes of the property value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: string, old: string)"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: +qx.data.IListData, old: +qx.data.IListData)"},"_applyRowHeight":{"!doc":"<p>Applies changes of the property value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getDataFromRow":{"!doc":"<p>Returns the model data for the given row.</p>","!type":"fn(row: +Integer) -> Object"},"_getLookupTable":{"!doc":"<p>Return the internal lookup table. But do not manipulate the\nlookup table!</p>","!type":"fn() -> +Array"},"_getSelectables":{"!doc":"<p>Returns the selectable model items.</p>","!type":"fn() -> +qx.data.Array"},"_init":{"!doc":"<p>Initializes the virtual list.</p>","!type":"fn()"},"_initBackground":{"!doc":"<p>Initializes the background renderer.</p>","!type":"fn()"},"_initLayer":{"!doc":"<p>Initializes the layer for rendering.</p>","!type":"fn()"},"_isGroup":{"!doc":"<p>Checks if the passed row is a group or an item.</p>","!type":"fn(row: +Integer) -> bool"},"_lookup":{"!doc":"<p>Performs a lookup from row to model index.</p>","!type":"fn(row: number) -> number"},"_lookupGroup":{"!doc":"<p>Performs a lookup from row to group index.</p>","!type":"fn(row: number) -> number"},"_onModelChange":{"!doc":"<p>Event handler for the model change event.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onResize":{"!doc":"<p>Event handler for the resize event.</p>","!type":"fn(e: +qx.event.type.Data)"},"_reverseLookup":{"!doc":"<p>Performs a lookup from model index to row.</p>","!type":"fn(index: number) -> number"},"_runDelegateFilter":{"!doc":"<p>Invokes filtering using the filter given in the delegate.</p>","!type":"fn(model: +qx.data.IListData)"},"_runDelegateGroup":{"!doc":"<p>Invokes grouping using the group result given in the delegate.</p>","!type":"fn(model: +qx.data.IListData)"},"_runDelegateSorter":{"!doc":"<p>Invokes sorting using the sorter given in the delegate.</p>","!type":"fn(model: +qx.data.IListData)"},"getAutoGrouping":{"!doc":"<p>Returns the (computed) value of the property <code>autoGrouping</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoGrouping}.</p>","!type":"fn() -> Object"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getGroupLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>groupLabelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn() -> Object"},"getGroupLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>groupLabelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn() -> Object"},"getGroups":{"!doc":"<p>Returns the (computed) value of the property <code>groups</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groups}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getItemHeight":{"!doc":"<p>Returns the (computed) value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"initAutoGrouping":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoGrouping</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoGrouping}.</p>","!type":"fn(value: Object) -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initGroupLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>groupLabelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initGroupLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>groupLabelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn(value: Object) -> Object"},"initGroups":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>groups</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #groups}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initItemHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>itemHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"isAutoGrouping":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>autoGrouping</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoGrouping}.</p>","!type":"fn() -> bool"},"refresh":{"!doc":"<p>Trigger a rebuild from the internal data structure.</p>","!type":"fn()"},"resetAutoGrouping":{"!doc":"<p>Resets the user value of the property <code>autoGrouping</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoGrouping}.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetGroupLabelOptions":{"!doc":"<p>Resets the user value of the property <code>groupLabelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn()"},"resetGroupLabelPath":{"!doc":"<p>Resets the user value of the property <code>groupLabelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn()"},"resetGroups":{"!doc":"<p>Resets the user value of the property <code>groups</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #groups}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetItemHeight":{"!doc":"<p>Resets the user value of the property <code>itemHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"setAutoGrouping":{"!doc":"<p>Sets the user value of the property <code>autoGrouping</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoGrouping}.</p>","!type":"fn(value: Object) -> Object"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setGroupLabelOptions":{"!doc":"<p>Sets the user value of the property <code>groupLabelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setGroupLabelPath":{"!doc":"<p>Sets the user value of the property <code>groupLabelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupLabelPath}.</p>","!type":"fn(value: Object) -> Object"},"setGroups":{"!doc":"<p>Sets the user value of the property <code>groups</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groups}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setItemHeight":{"!doc":"<p>Sets the user value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"toggleAutoGrouping":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>autoGrouping</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoGrouping}.</p>","!type":"fn() -> bool"}}},"provider":{"IListProvider":{"!doc":"<p>This interface needs to implemented from all {@link qx.ui.list.List} providers.</p>","prototype":{"createGroupRenderer":{"!doc":"<p>Creates a renderer for group rendering.</p>","!type":"fn() -> Object"},"createItemRenderer":{"!doc":"<p>Creates a renderer for item rendering.</p>","!type":"fn() -> Object"},"createLayer":{"!doc":"<p>Creates a layer for item and group rendering.</p>","!type":"fn() -> +qx.ui.virtual.layer.Abstract"},"isSelectable":{"!doc":"<p>Returns if the passed row can be selected or not.</p>","!type":"fn(row: +Integer) -> bool"},"removeBindings":{"!doc":"<p>Remove all bindings from all bounded items.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Delegation object, which can have one or more functions defined by the\n{@link qx.ui.list.core.IListDelegate} interface.</p>","!type":"fn(delegate: Object)"},"setIconOptions":{"!doc":"<p>A map containing the options for the icon binding. The possible keys\ncan be found in the {@link qx.data.SingleValueBinding} documentation.</p>","!type":"fn(options: +Map)"},"setIconPath":{"!doc":"<p>The path to the property which holds the information that should be\nshown as an icon. This is only needed if objects are stored in the model\nand if the icon should be shown.</p>","!type":"fn(path: string)"},"setLabelOptions":{"!doc":"<p>A map containing the options for the label binding. The possible keys\ncan be found in the {@link qx.data.SingleValueBinding} documentation.</p>","!type":"fn(options: +Map)"},"setLabelPath":{"!doc":"<p>The path to the property which holds the information that should be\nshown as a label. This is only needed if objects are stored in the model.</p>","!type":"fn(path: string)"},"styleSelectabled":{"!doc":"<p>Styles a selected item.</p>","!type":"fn(row: +Integer)"},"styleUnselectabled":{"!doc":"<p>Styles a not selected item.</p>","!type":"fn(row: +Integer)"}}},"WidgetProvider":{"!proto":"qx.core.Object","!doc":"<p>The provider implements the {@link qx.ui.virtual.core.IWidgetCellProvider} <span class=\"caps\">API</span>,\nwhich can be used as delegate for the widget cell rendering and it\nprovides a <span class=\"caps\">API</span> to bind the model with the rendered item.</p>","!type":"fn()","prototype":{"__getWidgetFrom":{"!doc":"<p>Helper method to get the widget from the passed row.</p>","!type":"fn(row: +Integer) -> +qx.ui.core.Widget"},"__updateStates":{"!doc":"<p>Helper method to update the states from a widget.</p>","!type":"fn(widget: +qx.ui.core.Widget, states: +Map)"},"_onChangeDelegate":{"!doc":"<p>Event handler for the change delegate event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onGroupItemCreated":{"!doc":"<p>Event handler for the created item widget event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onItemCreated":{"!doc":"<p>Event handler for the created item widget event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onPool":{"!doc":"<p>Calls the delegate <code>onPool</code> method when it is used in the\n{@link #delegate} property.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"_styleSelectabled":{"!doc":"<p>Styles a selected item.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"_styleUnselectabled":{"!doc":"<p>Styles a not selected item.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"createGroupRenderer":{"!type":"fn()"},"createItemRenderer":{"!type":"fn()"},"createLayer":{"!type":"fn()"},"getCellWidget":{"!type":"fn(row: +undefined, column: +undefined)"},"isSelectable":{"!type":"fn(row: +undefined)"},"poolCellWidget":{"!type":"fn(widget: +undefined)"},"styleSelectabled":{"!type":"fn(row: +undefined)"},"styleUnselectabled":{"!type":"fn(row: +undefined)"}}}}},"menu":{"AbstractButton":{"!proto":"qx.ui.core.Widget","!doc":"<p>The abstract menu button class is used for all type of menu content\nfor example normal buttons, checkboxes or radiobuttons.</p>","!type":"fn()","prototype":{"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyMenu":{"!doc":"<p>Applies changes of the property value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: +qx.ui.menu.Menu, old: +qx.ui.menu.Menu)"},"_applyShowCommandLabel":{"!doc":"<p>Applies changes of the property value of the property <code>showCommandLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onChangeCommand":{"!doc":"<p>Event listener for command changes. Updates the text of the shortcut.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onKeyPress":{"!doc":"<p>Event listener for keypress event</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onTap":{"!doc":"<p>Event listener for tap</p>","!type":"fn(e: +qx.event.type.Pointer)"},"getChildrenSizes":{"!doc":"<p>Returns the dimensions of all children</p>","!type":"fn() -> +Array"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getMenu":{"!doc":"<p>Returns the (computed) value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> Object"},"getShowCommandLabel":{"!doc":"<p>Returns the (computed) value of the property <code>showCommandLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn() -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>menu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"initShowCommandLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showCommandLabel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn(value: Object) -> Object"},"isShowCommandLabel":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showCommandLabel</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn() -> bool"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetMenu":{"!doc":"<p>Resets the user value of the property <code>menu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn()"},"resetShowCommandLabel":{"!doc":"<p>Resets the user value of the property <code>showCommandLabel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn()"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setMenu":{"!doc":"<p>Sets the user value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"setShowCommandLabel":{"!doc":"<p>Sets the user value of the property <code>showCommandLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowCommandLabel":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showCommandLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCommandLabel}.</p>","!type":"fn() -> bool"}}},"Button":{"!proto":"qx.ui.menu.AbstractButton","!doc":"<p>The real menu button class which supports a command and an icon. All\nother features are inherited from the {@link qx.ui.menu.AbstractButton}\nclass.</p>","!type":"fn()","prototype":{"_onKeyPress":{"!type":"fn(e: +undefined)"},"_onTap":{"!type":"fn(e: +undefined)"}}},"ButtonLayout":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>Layout used for the menu buttons which may contain four elements. A icon,\na label, a shortcut text and an arrow (for a sub menu)</p>","prototype":{"__getMenu":{"!doc":"<p>Get the widget&#8217;s menu</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.ui.menu.Menu"},"_computeSizeHint":{"!type":"fn()"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"}}},"CheckBox":{"!proto":"qx.ui.menu.AbstractButton","!doc":"<p>Renders a special checkbox button inside a menu. The button behaves like\na normal {@link qx.ui.form.CheckBox} and shows a check icon when\nchecked; normally shows no icon when not checked (depends on the theme).</p>","!type":"fn()","prototype":{"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: bool, old: bool)"},"_onExecute":{"!doc":"<p>Handler for the execute event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyPress":{"!type":"fn(e: +undefined)"},"_onTap":{"!type":"fn(e: +undefined)"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"isValue":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>value</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"toggleValue":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"}}},"Layout":{"!proto":"qx.ui.layout.VBox","!doc":"<p>Layouter used by the qooxdoo menu&#8217;s to render their buttons</p>","prototype":{"_computeSizeHint":{"!type":"fn()"},"getArrowColumnWidth":{"!doc":"<p>Returns the (computed) value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn() -> Object"},"getColumnSizes":{"!doc":"<p>Returns the column sizes detected during the pre-layout phase</p>","!type":"fn() -> +Array"},"getColumnSpacing":{"!doc":"<p>Returns the (computed) value of the property <code>columnSpacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnSpacing}.</p>","!type":"fn() -> Object"},"getIconColumnWidth":{"!doc":"<p>Returns the (computed) value of the property <code>iconColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn() -> Object"},"getSpanColumn":{"!doc":"<p>Returns the (computed) value of the property <code>spanColumn</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spanColumn}.</p>","!type":"fn() -> Object"},"initArrowColumnWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>arrowColumnWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"initColumnSpacing":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>columnSpacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #columnSpacing}.</p>","!type":"fn(value: Object) -> Object"},"initIconColumnWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconColumnWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"initSpanColumn":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spanColumn</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spanColumn}.</p>","!type":"fn(value: Object) -> Object"},"resetArrowColumnWidth":{"!doc":"<p>Resets the user value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn()"},"resetColumnSpacing":{"!doc":"<p>Resets the user value of the property <code>columnSpacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #columnSpacing}.</p>","!type":"fn()"},"resetIconColumnWidth":{"!doc":"<p>Resets the user value of the property <code>iconColumnWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn()"},"resetSpanColumn":{"!doc":"<p>Resets the user value of the property <code>spanColumn</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spanColumn}.</p>","!type":"fn()"},"setArrowColumnWidth":{"!doc":"<p>Sets the user value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"setColumnSpacing":{"!doc":"<p>Sets the user value of the property <code>columnSpacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnSpacing}.</p>","!type":"fn(value: Object) -> Object"},"setIconColumnWidth":{"!doc":"<p>Sets the user value of the property <code>iconColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"setSpanColumn":{"!doc":"<p>Sets the user value of the property <code>spanColumn</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spanColumn}.</p>","!type":"fn(value: Object) -> Object"}}},"Manager":{"!proto":"qx.core.Object","!doc":"<p>This singleton manages visible menu instances and supports some\ncore features to schedule menu open/close with timeout support.</p>\n\n<p>It also manages the whole keyboard support for the currently\nregistered widgets.</p>\n\n<p>The zIndex order is also managed by this class.</p>","!type":"fn()","prototype":{"_getChild":{"!doc":"<p>Query engine for menu children.</p>","!type":"fn(menu: +qx.ui.menu.Menu, start: +Integer, iter: +Integer, loop?: bool) -> +qx.ui.menu.Button"},"_getMenuButton":{"!doc":"<p>Returns an instance of a menu button if the given widget is a child</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.ui.menu.Button"},"_isInMenu":{"!doc":"<p>Whether the given widget is inside any Menu instance.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"_isMenuOpener":{"!doc":"<p>Whether the given widget is one of the menu openers.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> bool"},"_onCloseInterval":{"!doc":"<p>Event listener for a pending close request. Configured to the interval\nof the current menu to close.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyPress":{"!doc":"<p>Event handler for all keypress events. Delegates the event to the more\nspecific methods defined in this class.</p>\n\n<p>Currently processes the keys: <code>Up</code>, <code>Down</code>,\n<code>Left</code>, <code>Right</code> and <code>Enter</code>.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onKeyPressDown":{"!doc":"<p>Event handler for <code>Down</code> key</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"_onKeyPressEnter":{"!doc":"<p>Event handler for <code>Enter</code> key</p>","!type":"fn(menu: +qx.ui.menu.Menu, button: +qx.ui.menu.AbstractButton, e: +qx.event.type.KeySequence)"},"_onKeyPressLeft":{"!doc":"<p>Event handler for <code>Left</code> key</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"_onKeyPressRight":{"!doc":"<p>Event handler for <code>Right</code> key</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"_onKeyPressSpace":{"!doc":"<p>Event handler for <code>Space</code> key</p>","!type":"fn(menu: +qx.ui.menu.Menu, button: +qx.ui.menu.AbstractButton, e: +qx.event.type.KeySequence)"},"_onKeyPressUp":{"!doc":"<p>Event handler for <code>Up</code> key</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"_onKeyUpDown":{"!doc":"<p>Event handler for all keyup/keydown events. Stops all events\nwhen any menu is opened.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onOpenInterval":{"!doc":"<p>Event listener for a pending open request. Configured to the interval\nof the current menu to open.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onPointerDown":{"!doc":"<p>Event handler for pointerdown events</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onRoll":{"!doc":"<p>Event handler for roll which hides all windows on scroll.</p>","!type":"fn(e: +qx.event.type.Roll)"},"add":{"!doc":"<p>Adds a menu to the list of visible menus.</p>","!type":"fn(obj: +qx.ui.menu.Menu)"},"cancelClose":{"!doc":"<p>When the given menu is scheduled for close this pending\nrequest is canceled.</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"cancelOpen":{"!doc":"<p>When the given menu is scheduled for open this pending\nrequest is canceled.</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"getActiveMenu":{"!doc":"<p>Returns the menu which was opened at last (which\nis the active one this way)</p>","!type":"fn() -> +qx.ui.menu.Menu"},"hideAll":{"!doc":"<p>Hides all currently opened menus.</p>","!type":"fn()"},"remove":{"!doc":"<p>Remove a menu from the list of visible menus.</p>","!type":"fn(obj: +qx.ui.menu.Menu)"},"scheduleClose":{"!doc":"<p>Schedules the given menu to be closed after the\n{@link qx.ui.menu.Menu#closeInterval} configured by the\nmenu instance itself.</p>","!type":"fn(menu: +qx.ui.menu.Menu)"},"scheduleOpen":{"!doc":"<p>Schedules the given menu to be opened after the\n{@link qx.ui.menu.Menu#openInterval} configured by the\nmenu instance itself.</p>","!type":"fn(menu: +qx.ui.menu.Menu)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.menu.Manager"}},"Menu":{"!proto":"qx.ui.core.Widget","!doc":"<p>The menu is a popup like control which supports buttons. It comes\nwith full keyboard navigation and an improved timeout based pointer\ncontrol behavior.</p>\n\n<p>This class is the container for all derived instances of\n{@link qx.ui.menu.AbstractButton}.</p>","!type":"fn()","prototype":{"__updateBlockerVisibility":{"!doc":"<p>Updates the blocker&#8217;s visibility</p>","!type":"fn()"},"__updateSlideBar":{"!doc":"<p>Updates the visibility of the slidebar based on the menu&#8217;s current size\nand position.</p>","!type":"fn()"},"_applyArrowColumnWidth":{"!doc":"<p>Applies changes of the property value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyBlockerColor":{"!doc":"<p>Applies changes of the property value of the property <code>blockerColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyBlockerOpacity":{"!doc":"<p>Applies changes of the property value of the property <code>blockerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn(value: number, old: number)"},"_applyIconColumnWidth":{"!doc":"<p>Applies changes of the property value of the property <code>iconColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyOpenedButton":{"!doc":"<p>Applies changes of the property value of the property <code>openedButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openedButton}.</p>","!type":"fn(value: +qx.ui.core.Widget, old: +qx.ui.core.Widget)"},"_applySelectedButton":{"!doc":"<p>Applies changes of the property value of the property <code>selectedButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedButton}.</p>","!type":"fn(value: +qx.ui.core.Widget, old: +qx.ui.core.Widget)"},"_applySpacingX":{"!doc":"<p>Applies changes of the property value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applySpacingY":{"!doc":"<p>Applies changes of the property value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"},"_assertSlideBar":{"!doc":"<p>Schedules the addition of the slidebar and calls the given callback\nafter the slidebar has been added.</p>","!type":"fn(callback: fn()) -> Object"},"_computePlacementSize":{"!doc":"<p>Computes the size of the menu. This method is used by the\n{@link qx.ui.core.MPlacement} mixin.</p>","!type":"fn() -> +Map"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getMenuBounds":{"!doc":"<p>Get the menu bounds</p>","!type":"fn() -> +Map"},"_getMenuLayout":{"!doc":"<p>Get the menu layout manager</p>","!type":"fn() -> +Layout"},"_onPointerOut":{"!doc":"<p>Event listener for pointerout event.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOver":{"!doc":"<p>Event listener for pointerover event.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onResize":{"!doc":"<p>Update position if the menu or the root is resized</p>","!type":"fn()"},"addSeparator":{"!doc":"<p>Convenience method to add a separator to the menu</p>","!type":"fn()"},"getArrowColumnWidth":{"!doc":"<p>Returns the (computed) value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn() -> Object"},"getBlockBackground":{"!doc":"<p>Returns the (computed) value of the property <code>blockBackground</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockBackground}.</p>","!type":"fn() -> Object"},"getBlockerColor":{"!doc":"<p>Returns the (computed) value of the property <code>blockerColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn() -> Object"},"getBlockerOpacity":{"!doc":"<p>Returns the (computed) value of the property <code>blockerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn() -> Object"},"getChildrenContainer":{"!type":"fn()"},"getCloseInterval":{"!doc":"<p>Returns the (computed) value of the property <code>closeInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #closeInterval}.</p>","!type":"fn() -> Object"},"getColumnSizes":{"!doc":"<p>Returns the column sizes detected during the pre-layout phase</p>","!type":"fn() -> +Array"},"getIconColumnWidth":{"!doc":"<p>Returns the (computed) value of the property <code>iconColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn() -> Object"},"getOpenedButton":{"!doc":"<p>Returns the (computed) value of the property <code>openedButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openedButton}.</p>","!type":"fn() -> Object"},"getOpener":{"!doc":"<p>Returns the (computed) value of the property <code>opener</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn() -> Object"},"getOpenInterval":{"!doc":"<p>Returns the (computed) value of the property <code>openInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openInterval}.</p>","!type":"fn() -> Object"},"getParentMenu":{"!doc":"<p>Get the parent menu. Returns <code>null</code> if the menu doesn&#8217;t have a\nparent menu.</p>","!type":"fn() -> +Menu"},"getSelectables":{"!doc":"<p>Return all selectable menu items.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getSelectedButton":{"!doc":"<p>Returns the (computed) value of the property <code>selectedButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedButton}.</p>","!type":"fn() -> Object"},"getSpacingX":{"!doc":"<p>Returns the (computed) value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn() -> Object"},"getSpacingY":{"!doc":"<p>Returns the (computed) value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn() -> Object"},"initArrowColumnWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>arrowColumnWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"initBlockBackground":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockBackground</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockBackground}.</p>","!type":"fn(value: Object) -> Object"},"initBlockerColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockerColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn(value: Object) -> Object"},"initBlockerOpacity":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockerOpacity</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn(value: Object) -> Object"},"initCloseInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>closeInterval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #closeInterval}.</p>","!type":"fn(value: Object) -> Object"},"initIconColumnWidth":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconColumnWidth</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"initOpenedButton":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openedButton</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openedButton}.</p>","!type":"fn(value: Object) -> Object"},"initOpener":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>opener</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn(value: Object) -> Object"},"initOpenInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openInterval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openInterval}.</p>","!type":"fn(value: Object) -> Object"},"initSelectedButton":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectedButton</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedButton}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"initSpacingY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacingY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"isBlockBackground":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>blockBackground</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockBackground}.</p>","!type":"fn() -> bool"},"open":{"!doc":"<p>Opens the menu and configures the opener</p>","!type":"fn()"},"openAtMouse":{"!doc":"<p>Opens the menu at the mouse position</p>","!type":"fn(e: +qx.event.type.Mouse)"},"openAtPoint":{"!doc":"<p>Opens the menu in relation to the given point</p>","!type":"fn(point: +Map)"},"openAtPointer":{"!doc":"<p>Opens the menu at the pointer position</p>","!type":"fn(e: +qx.event.type.Pointer)"},"resetArrowColumnWidth":{"!doc":"<p>Resets the user value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn()"},"resetBlockBackground":{"!doc":"<p>Resets the user value of the property <code>blockBackground</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockBackground}.</p>","!type":"fn()"},"resetBlockerColor":{"!doc":"<p>Resets the user value of the property <code>blockerColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn()"},"resetBlockerOpacity":{"!doc":"<p>Resets the user value of the property <code>blockerOpacity</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn()"},"resetCloseInterval":{"!doc":"<p>Resets the user value of the property <code>closeInterval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #closeInterval}.</p>","!type":"fn()"},"resetIconColumnWidth":{"!doc":"<p>Resets the user value of the property <code>iconColumnWidth</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn()"},"resetOpenedButton":{"!doc":"<p>Resets the user value of the property <code>openedButton</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openedButton}.</p>","!type":"fn()"},"resetOpener":{"!doc":"<p>Resets the user value of the property <code>opener</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn()"},"resetOpenInterval":{"!doc":"<p>Resets the user value of the property <code>openInterval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openInterval}.</p>","!type":"fn()"},"resetSelectedButton":{"!doc":"<p>Resets the user value of the property <code>selectedButton</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedButton}.</p>","!type":"fn()"},"resetSpacingX":{"!doc":"<p>Resets the user value of the property <code>spacingX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn()"},"resetSpacingY":{"!doc":"<p>Resets the user value of the property <code>spacingY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn()"},"setArrowColumnWidth":{"!doc":"<p>Sets the user value of the property <code>arrowColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"setBlockBackground":{"!doc":"<p>Sets the user value of the property <code>blockBackground</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockBackground}.</p>","!type":"fn(value: Object) -> Object"},"setBlockerColor":{"!doc":"<p>Sets the user value of the property <code>blockerColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerColor}.</p>","!type":"fn(value: Object) -> Object"},"setBlockerOpacity":{"!doc":"<p>Sets the user value of the property <code>blockerOpacity</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockerOpacity}.</p>","!type":"fn(value: Object) -> Object"},"setCloseInterval":{"!doc":"<p>Sets the user value of the property <code>closeInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #closeInterval}.</p>","!type":"fn(value: Object) -> Object"},"setIconColumnWidth":{"!doc":"<p>Sets the user value of the property <code>iconColumnWidth</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconColumnWidth}.</p>","!type":"fn(value: Object) -> Object"},"setOpenedButton":{"!doc":"<p>Sets the user value of the property <code>openedButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openedButton}.</p>","!type":"fn(value: Object) -> Object"},"setOpener":{"!doc":"<p>Sets the user value of the property <code>opener</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn(value: Object) -> Object"},"setOpenInterval":{"!doc":"<p>Sets the user value of the property <code>openInterval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openInterval}.</p>","!type":"fn(value: Object) -> Object"},"setSelectedButton":{"!doc":"<p>Sets the user value of the property <code>selectedButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedButton}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingX":{"!doc":"<p>Sets the user value of the property <code>spacingX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingX}.</p>","!type":"fn(value: Object) -> Object"},"setSpacingY":{"!doc":"<p>Sets the user value of the property <code>spacingY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacingY}.</p>","!type":"fn(value: Object) -> Object"},"syncWidget":{"!type":"fn(jobs: +undefined)"},"toggleBlockBackground":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>blockBackground</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockBackground}.</p>","!type":"fn() -> bool"}}},"MenuSlideBar":{"!proto":"qx.ui.container.SlideBar","!doc":"<p>The MenuSlideBar is used to scroll menus if they don&#8217;t fit on the screen.</p>","!type":"fn()","prototype":{"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"}}},"RadioButton":{"!proto":"qx.ui.menu.AbstractButton","!doc":"<p>Renders a special radio button inside a menu. The button behaves like\na normal {@link qx.ui.form.RadioButton} and shows a radio icon when\nchecked; normally shows no icon when not checked (depends on the theme).</p>","!type":"fn()","prototype":{"_applyGroup":{"!doc":"<p>Applies changes of the property value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: +qx.ui.form.RadioGroup, old: +qx.ui.form.RadioGroup)"},"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: bool, old: bool)"},"_onExecute":{"!doc":"<p>Handler for the execute event.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onKeyPress":{"!type":"fn(e: +undefined)"},"_onTap":{"!type":"fn(e: +undefined)"},"getGroup":{"!doc":"<p>Returns the (computed) value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"initGroup":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>group</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"isValue":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>value</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"},"resetGroup":{"!doc":"<p>Resets the user value of the property <code>group</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"setGroup":{"!doc":"<p>Sets the user value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"toggleValue":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> bool"}}},"Separator":{"!proto":"qx.ui.core.Widget","!doc":"<p>This widget draws a separator line between two instances of\n{@link qx.ui.menu.AbstractButton} and is inserted into the\n{@link qx.ui.menu.Menu}.</p>\n\n<p>For convenience reasons there is also\na method {@link qx.ui.menu.Menu#addSeparator} to append instances\nof this class to the menu.</p>"}},"menubar":{"Button":{"!proto":"qx.ui.form.MenuButton","!doc":"<p>A menubar button</p>","!type":"fn()","prototype":{"_onMenuChange":{"!doc":"<p>Listener for visibility property changes of the attached menu</p>","!type":"fn(e: +qx.event.type.Data)"},"_onPointerOver":{"!doc":"<p>Event listener for pointerover event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerUp":{"!type":"fn(e: +undefined)"},"getMenuBar":{"!doc":"<p>Inspects the parent chain to find the MenuBar</p>","!type":"fn() -> +qx.ui.menubar.MenuBar"},"open":{"!type":"fn(selectFirst: +undefined)"}}},"MenuBar":{"!proto":"qx.ui.toolbar.ToolBar","!doc":"<p>Container for menubar buttons to display a classic application menu.</p>"}},"mobile":{"basic":{"Atom":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>A multi-purpose widget, which combines a label with an icon.</p>\n\n<p>The intended purpose of qx.ui.mobile.basic.Atom is to easily align the common icon-text\ncombination in different ways.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var atom = new qx.ui.mobile.basic.Atom(\"Icon Right\", \"icon/32/actions/go-next.png\");\n  this.getRoot().add(atom);\n</pre>\n\n<p>This example creates an atom with the label &#8220;Icon Right&#8221; and an icon.</p>","!type":"fn()","prototype":{"__createChildren":{"!doc":"<p>This function is responsible for creating and adding 2 children controls to the Button widget.\nA label and an icon.</p>","!type":"fn(label: string, icon: string)"},"_applyGap":{"!doc":"<p>Applies changes of the property value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyIconPosition":{"!doc":"<p>Applies changes of the property value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object, old: Object)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyShow":{"!doc":"<p>Applies changes of the property value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object, old: Object)"},"_createIconWidget":{"!doc":"<p>Creates the icon widget.</p>","!type":"fn(iconUrl: string) -> +qx.ui.mobile.basic.Image"},"_createLabelWidget":{"!doc":"<p>Creates the label widget.</p>","!type":"fn(label: string) -> +qx.ui.mobile.basic.Label"},"getGap":{"!doc":"<p>Returns the (computed) value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn() -> Object"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getIconPosition":{"!doc":"<p>Returns the (computed) value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn() -> Object"},"getIconWidget":{"!doc":"<p>Returns the icon widget.</p>","!type":"fn() -> +qx.ui.mobile.basic.Image"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getLabelWidget":{"!doc":"<p>Returns the label widget.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"getShow":{"!doc":"<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn() -> Object"},"initGap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>gap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: Object) -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initIconPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initShow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"resetGap":{"!doc":"<p>Resets the user value of the property <code>gap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn()"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetIconPosition":{"!doc":"<p>Resets the user value of the property <code>iconPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetShow":{"!doc":"<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn()"},"setGap":{"!doc":"<p>Sets the user value of the property <code>gap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #gap}.</p>","!type":"fn(value: Object) -> Object"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setIconPosition":{"!doc":"<p>Sets the user value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setShow":{"!doc":"<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"}}},"Image":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The image widget displays an image file.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var image = new qx.ui.mobile.basic.Image(\"path/to/icon.png\");\n\n  this.getRoot().add(image);\n</pre>\n\n<p>This example create a widget to display the image\n<code>path/to/icon.png</code>.</p>","!type":"fn()","prototype":{"__loaderCallback":{"!doc":"<p>Event handler fired after the preloader has finished loading the icon</p>","!type":"fn(source: string, imageInfo: +Map)"},"_applySource":{"!doc":"<p>Applies changes of the property value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: string, old: string)"},"_createHighResolutionOverlay":{"!doc":"<p>Creates an overlay for this image which shows the image defined by the parameter &#8216;highResSource&#8217;,\nbut has the same size and position as the source image.\nThe original image widget is hidden by this method.</p>","!type":"fn(highResSource: string, lowResSource: string)"},"_findHighResolutionSource":{"!doc":"<p>Detects whether there is a high-resolution image available.\nA high-resolution image is assumed to have the same file name as\nthe parameter source, but with a pixelRatio identifier before the file\nextension, like &#8221;@2x&#8221;.\nMedium Resolution: &#8220;example.png&#8221;, high-resolution: &#8220;<a href=\"mailto:example@2x.png\">example@2x.png</a>&#8221;\nIf an image with a higher resolution is available, the method\n{@link #_createHighResolutionOverlay} is called.</p>","!type":"fn(lowResImgSrc: string) -> bool"},"_getHighResolutionSource":{"!doc":"<p>Returns the source name for the high-resolution image based on the passed\nparameters.</p>","!type":"fn(source: string, pixelRatio: number) -> string"},"_getTagName":{"!type":"fn()"},"_onChangeAppScale":{"!doc":"<p>Event handler for &#8220;changeAppScale&#8221; on application root.\nReloads the image source.</p>","!type":"fn()"},"_setSource":{"!doc":"<p>Sets the source attribute of the image tag.</p>","!type":"fn(source: string)"},"getSource":{"!doc":"<p>Returns the (computed) value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn() -> Object"},"initSource":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>source</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"},"resetSource":{"!doc":"<p>Resets the user value of the property <code>source</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn()"},"setDraggable":{"!doc":"<p>Sets the attribute draggable to the given value &#8220;isDraggable&#8221;.</p>","!type":"fn(isDraggable: bool)"},"setSource":{"!doc":"<p>Sets the user value of the property <code>source</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #source}.</p>","!type":"fn(value: Object) -> Object"}}},"Label":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The label widget displays a text or <span class=\"caps\">HTML</span> content.\n<strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var label = new qx.ui.mobile.basic.Label(\"Hello World\");\n\n  this.getRoot().add(label);\n</pre>\n\n<p>This example create a widget to display the label.</p>","!type":"fn()","prototype":{"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: string, old: string)"},"_applyWrap":{"!doc":"<p>Applies changes of the property value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: bool, old: bool)"},"_onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"getWrap":{"!doc":"<p>Returns the (computed) value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"initWrap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wrap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"isWrap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>wrap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"resetWrap":{"!doc":"<p>Resets the user value of the property <code>wrap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn()"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"setWrap":{"!doc":"<p>Sets the user value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"toggleWrap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"}}}},"container":{"Carousel":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>Creates a Carousel widget.\nA carousel is a widget which can switch between several sub pages {@link  qx.ui.mobile.container.Composite}.\nA page switch is triggered by a swipe to left, for next page, or a swipe to right for\nprevious page.</p>\n\n<p>A carousel shows by default a pagination indicator at the bottom of the carousel.\nThis pagination indicator can be hidden by property <code>showPagination</code>.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n\n var carousel = new qx.ui.mobile.container.Carousel();\n var carouselPage1 = new qx.ui.mobile.container.Composite();\n var carouselPage2 = new qx.ui.mobile.container.Composite();\n\n carouselPage1.add(new qx.ui.mobile.basic.Label(\"This is a carousel. Please swipe left.\"));\n carouselPage2.add(new qx.ui.mobile.basic.Label(\"Now swipe right.\"));\n\n carousel.add(carouselPage1);\n carousel.add(carouselPage2);\n</pre>","!type":"fn()","prototype":{"_applyCurrentIndex":{"!doc":"<p>Applies changes of the property value of the property <code>currentIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #currentIndex}.</p>","!type":"fn(value: number, old: number)"},"_applyShowPagination":{"!doc":"<p>Called when showPagination property is changed.\nManages <code>show()</code> and <code>hide()</code> of pagination container.</p>","!type":"fn(value: +undefined, old: +undefined)"},"_calculateTransitionDuration":{"!doc":"<p>Calculates the duration the transition will need till the next carousel\nsnap point is reached.</p>","!type":"fn(deltaX: +Integer, duration: number) -> number"},"_createPaginationLabel":{"!doc":"<p>Factory method for a paginationLabel.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_doScrollLoop":{"!doc":"<p>Manages the the scroll loop. First fades out carousel scroller >>\nwaits till fading is done >> scrolls to pageIndex >> waits till scrolling is done\n>> fades scroller in.</p>","!type":"fn()"},"_getScrollerOffset":{"!doc":"<p>Returns the current horizontal position of the carousel scrolling container.</p>","!type":"fn() -> number"},"_onContainerUpdate":{"!doc":"<p>Handles window resize, device orientatonChange or page appear events.</p>","!type":"fn()"},"_onNativeScroll":{"!doc":"<p>Handles the native scroll event on the carousel container.\nThis is needed for preventing &#8220;scrollIntoView&#8221; method.</p>","!type":"fn(evt: +qx.event.type.Native)"},"_onPaginationLabelTap":{"!doc":"<p>Handles a tap on paginationLabel.</p>","!type":"fn()"},"_onPointerDown":{"!doc":"<p>Event handler for <code>pointerdown</code> events.</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"_onPointerUp":{"!doc":"<p>Handler for <code>pointerup</code> event on carousel scroller.</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"_onScrollerTransitionEnd":{"!doc":"<p>Event handler for <code>transitionEnd</code> event on carouselScroller.</p>","!type":"fn()"},"_onSwipe":{"!doc":"<p>Handler for swipe event on carousel scroller.</p>","!type":"fn(evt: +qx.event.type.Swipe)"},"_onTrack":{"!doc":"<p>Event handler for <code>track</code> events.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_refreshScrollerPosition":{"!doc":"<p>Synchronizes the positions of the scroller to the current shown page index.</p>","!type":"fn()"},"_removeListeners":{"!doc":"<p>Remove all listeners.</p>","!type":"fn()"},"_scrollToPage":{"!doc":"<p>Scrolls the carousel to the page with the given pageIndex.</p>","!type":"fn(pageIndex: +Integer, showTransition?: bool)"},"_setScrollersOpacity":{"!doc":"<p>Changes the opacity of the carouselScroller element.</p>","!type":"fn(opacity: +Integer)"},"_setShowTransition":{"!type":"fn(showTransition: bool)"},"_setTransitionDuration":{"!doc":"<p>Applies the <span class=\"caps\">CSS</span> property &#8220;transitionDuration&#8221; to the carouselScroller.</p>","!type":"fn(value: number)"},"_snapCarouselPage":{"!doc":"<p>Snaps carouselScroller offset to a carouselPage.\nIt determines which carouselPage is the nearest and moves\ncarouselScrollers offset till nearest carouselPage&#8217;s left border is aligned to carousel&#8217;s left border.</p>","!type":"fn()"},"_updateCarouselLayout":{"!doc":"<p>Updates the layout of the carousel the carousel scroller and its pages.</p>","!type":"fn()"},"_updatePagination":{"!doc":"<p>Updates the pagination indicator of this carousel.\nRemoves the active state from from paginationLabel with oldActiveIndex,\nAdds actives state to paginationLabel new ActiveIndex.</p>","!type":"fn(oldActiveIndex: +Integer, newActiveIndex: +Integer)"},"_updateScrollerPosition":{"!doc":"<p>Assign new position of carousel scrolling container.</p>","!type":"fn(x: +Integer)"},"add":{"!doc":"<p>Adds a page to the end of the carousel.</p>","!type":"fn(page: +qx.ui.mobile.container.Composite)"},"getCurrentIndex":{"!doc":"<p>Returns the (computed) value of the property <code>currentIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #currentIndex}.</p>","!type":"fn() -> Object"},"getHeight":{"!doc":"<p>Returns the (computed) value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn() -> Object"},"getPageCount":{"!doc":"<p>Returns the current page count of this carousel.</p>","!type":"fn() -> +Integer"},"getScrollLoop":{"!doc":"<p>Returns the (computed) value of the property <code>scrollLoop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollLoop}.</p>","!type":"fn() -> Object"},"getShowPagination":{"!doc":"<p>Returns the (computed) value of the property <code>showPagination</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showPagination}.</p>","!type":"fn() -> Object"},"getTransitionDuration":{"!doc":"<p>Returns the (computed) value of the property <code>transitionDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn() -> Object"},"initCurrentIndex":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>currentIndex</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #currentIndex}.</p>","!type":"fn(value: Object) -> Object"},"initHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>height</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: Object) -> Object"},"initScrollLoop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollLoop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollLoop}.</p>","!type":"fn(value: Object) -> Object"},"initShowPagination":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showPagination</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showPagination}.</p>","!type":"fn(value: Object) -> Object"},"initTransitionDuration":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>transitionDuration</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn(value: Object) -> Object"},"isScrollLoop":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>scrollLoop</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollLoop}.</p>","!type":"fn() -> bool"},"isShowPagination":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showPagination</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showPagination}.</p>","!type":"fn() -> bool"},"nextPage":{"!doc":"<p>Scrolls the carousel to next page.</p>","!type":"fn()"},"previousPage":{"!doc":"<p>Scrolls the carousel to previous page.</p>","!type":"fn()"},"removeAll":{"!type":"fn()"},"removePageByIndex":{"!doc":"<p>Removes a carousel page from carousel identified by its index.</p>","!type":"fn(pageIndex: +Integer) -> +qx.ui.mobile.container.Composite"},"resetCurrentIndex":{"!doc":"<p>Resets the user value of the property <code>currentIndex</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #currentIndex}.</p>","!type":"fn()"},"resetHeight":{"!doc":"<p>Resets the user value of the property <code>height</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn()"},"resetScrollLoop":{"!doc":"<p>Resets the user value of the property <code>scrollLoop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollLoop}.</p>","!type":"fn()"},"resetShowPagination":{"!doc":"<p>Resets the user value of the property <code>showPagination</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showPagination}.</p>","!type":"fn()"},"resetTransitionDuration":{"!doc":"<p>Resets the user value of the property <code>transitionDuration</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn()"},"setCurrentIndex":{"!doc":"<p>Sets the user value of the property <code>currentIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #currentIndex}.</p>","!type":"fn(value: Object) -> Object"},"setHeight":{"!doc":"<p>Sets the user value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: Object) -> Object"},"setScrollLoop":{"!doc":"<p>Sets the user value of the property <code>scrollLoop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollLoop}.</p>","!type":"fn(value: Object) -> Object"},"setShowPagination":{"!doc":"<p>Sets the user value of the property <code>showPagination</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showPagination}.</p>","!type":"fn(value: Object) -> Object"},"setSwipeVelocityLimit":{"!type":"fn(limit: +Integer)"},"setTransitionDuration":{"!doc":"<p>Sets the user value of the property <code>transitionDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn(value: Object) -> Object"},"toggleScrollLoop":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>scrollLoop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollLoop}.</p>","!type":"fn() -> bool"},"toggleShowPagination":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showPagination</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showPagination}.</p>","!type":"fn() -> bool"}}},"Collapsible":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>Creates a Collapsible widget.\nIt contains a {@link qx.ui.mobile.basic.Label Label} for the header and a {@link qx.ui.mobile.container.Composite Composite}\nfor the content.</p>\n\n<p>The visiblity of the content composite toggles when user taps on header.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is an example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n var collapsible = new qx.ui.mobile.container.Collapsible(\"Collapsible Header\");\n collapsible.setCombined(false);\n collapsible.setCollapsed(false);\n\n var label = new qx.ui.mobile.basic.Label(\"This is the content of the Collapsible.\");\n collapsible.add(label);\n\n</pre>","!type":"fn()","prototype":{"_applyCollapsed":{"!doc":"<p>Applies changes of the property value of the property <code>collapsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn(value: bool, old: bool)"},"_applyCombined":{"!doc":"<p>Applies changes of the property value of the property <code>combined</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn(value: bool, old: bool)"},"_createContent":{"!doc":"<p>Factory method for the Collapsible&#8217;s content.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createHeader":{"!doc":"<p>Factory method for the Collapsible&#8217;s header.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"add":{"!doc":"<p>Adds a new child widget to the Collapsible&#8217;s content composite.</p>","!type":"fn(child: +qx.ui.mobile.core.Widget, layoutProperties?: +Map)"},"getCollapsed":{"!doc":"<p>Returns the (computed) value of the property <code>collapsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn() -> Object"},"getCombined":{"!doc":"<p>Returns the (computed) value of the property <code>combined</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn() -> Object"},"getContent":{"!doc":"<p>Getter for the Collapsible&#8217;s content composite.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getHeader":{"!doc":"<p>Getter for the Collapsible&#8217;s header label.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"initCollapsed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>collapsed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn(value: Object) -> Object"},"initCombined":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>combined</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn(value: Object) -> Object"},"isCollapsed":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>collapsed</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn() -> bool"},"isCombined":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>combined</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn() -> bool"},"resetCollapsed":{"!doc":"<p>Resets the user value of the property <code>collapsed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn()"},"resetCombined":{"!doc":"<p>Resets the user value of the property <code>combined</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn()"},"setCollapsed":{"!doc":"<p>Sets the user value of the property <code>collapsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn(value: Object) -> Object"},"setCombined":{"!doc":"<p>Sets the user value of the property <code>combined</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn(value: Object) -> Object"},"setTitle":{"!doc":"<p>Setter for the Collapsible&#8217;s header title.</p>","!type":"fn(title: string)"},"toggleCollapsed":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>collapsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #collapsed}.</p>","!type":"fn() -> bool"},"toggleCombined":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>combined</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #combined}.</p>","!type":"fn() -> bool"}}},"Composite":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The Composite is a generic container widget.</p>\n\n<p>It exposes all methods to set layouts and to manage child widgets\nas public methods. You must configure this widget with a layout manager to\ndefine the way the widget&#8217;s children are positioned.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // create the composite\n  var composite = new qx.ui.mobile.container.Composite();\n\n  composite.setLayout(new qx.ui.mobile.layout.HBox());\n\n  // add some children\n  composite.add(new qx.ui.mobile.basic.Label(\"Name: \"), {flex:1});\n  composite.add(new qx.ui.mobile.form.TextField());\n\n  this.getRoot().add(composite);\n</pre>\n\n<p>This example horizontally groups a label and text field by using a\nComposite configured with a horizontal box layout as a container.</p>","!type":"fn()"},"Drawer":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>Creates a drawer widget inside the given parent widget. The parent widget can\nbe assigned as a constructor argument. If no parent is set, the application&#8217;s\nroot will be assumed as parent. A drawer widget can be assigned to left, right,\ntop or bottom edge of its parent by property <code>orientation</code>. The drawer floats\nin on <code>show()</code> and floats out on <code>hide()</code>. Additionally the drawer is shown by\nswiping in reverse direction on the parent edge to where the drawer is placed\nto: Orientation: <code>left</code>, Swipe: <code>right</code> on parents edge: Drawer is shown etc.\nThe drawer is hidden when user taps the parent area outside of the drawer.\nThis behaviour can be deactivated by the property <code>hideOnParentTap</code>.</p>\n\n<pre class=\"javascript\">\n\n var drawer = new qx.ui.mobile.container.Drawer();\n drawer.setOrientation(\"right\");\n drawer.setTapOffset(100);\n\n var button = new qx.ui.mobile.form.Button(\"A Button\");\n drawer.add(button);\n</pre>","!type":"fn()","prototype":{"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: string, old: string)"},"_applyPositionZ":{"!doc":"<p>Applies changes of the property value of the property <code>positionZ</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #positionZ}.</p>","!type":"fn(value: Object, old: Object)"},"_applySize":{"!doc":"<p>Applies changes of the property value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyTransitionDuration":{"!doc":"<p>Applies changes of the property value of the property <code>transitionDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_disableTransition":{"!doc":"<p>Disables the transition on this drawer.</p>","!type":"fn()"},"_enableTransition":{"!doc":"<p>Enables the transition on this drawer.</p>","!type":"fn()"},"_getTransitionTarget":{"!doc":"<p>Returns the target widget which is responsible for the transition handling.</p>","!type":"fn() -> +qx.ui.mobile.core.Widget"},"_onParentPointerDown":{"!doc":"<p>Handles a tap on drawers&#8217;s root.</p>","!type":"fn(evt: +qx.module.event.Pointer)"},"_onParentSwipe":{"!doc":"<p>Handles a swipe on layout parent.</p>","!type":"fn(evt: +qx.module.event.Pointer)"},"_toggleParentBlockedState":{"!type":"fn()"},"forceHide":{"!doc":"<p>Strict way to hide this drawer. Removes the blocker from the parent,\nand hides the drawer without any animation. Should be called when drawer&#8217;s\nparent is animated and drawer should hide immediately.</p>","!type":"fn()"},"getHeight":{"!type":"fn() -> +Integer"},"getHideOnParentTap":{"!doc":"<p>Returns the (computed) value of the property <code>hideOnParentTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnParentTap}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"getPositionZ":{"!doc":"<p>Returns the (computed) value of the property <code>positionZ</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #positionZ}.</p>","!type":"fn() -> Object"},"getSize":{"!doc":"<p>Returns the (computed) value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn() -> Object"},"getTapOffset":{"!doc":"<p>Returns the (computed) value of the property <code>tapOffset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tapOffset}.</p>","!type":"fn() -> Object"},"getTransitionDuration":{"!doc":"<p>Returns the (computed) value of the property <code>transitionDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn() -> Object"},"getWidth":{"!type":"fn() -> +Integer"},"hide":{"!doc":"<p>Hides the drawer.</p>","!type":"fn()"},"initHideOnParentTap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideOnParentTap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnParentTap}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"initPositionZ":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>positionZ</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #positionZ}.</p>","!type":"fn(value: Object) -> Object"},"initSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>size</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: Object) -> Object"},"initTapOffset":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>tapOffset</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #tapOffset}.</p>","!type":"fn(value: Object) -> Object"},"initTransitionDuration":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>transitionDuration</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn(value: Object) -> Object"},"isHidden":{"!type":"fn()"},"isHideOnParentTap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>hideOnParentTap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnParentTap}.</p>","!type":"fn() -> bool"},"resetHeight":{"!type":"fn()"},"resetHideOnParentTap":{"!doc":"<p>Resets the user value of the property <code>hideOnParentTap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnParentTap}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"resetPositionZ":{"!doc":"<p>Resets the user value of the property <code>positionZ</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #positionZ}.</p>","!type":"fn()"},"resetSize":{"!doc":"<p>Resets the user value of the property <code>size</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn()"},"resetTapOffset":{"!doc":"<p>Resets the user value of the property <code>tapOffset</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #tapOffset}.</p>","!type":"fn()"},"resetTransitionDuration":{"!doc":"<p>Resets the user value of the property <code>transitionDuration</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn()"},"resetWidth":{"!type":"fn()"},"setHeight":{"!type":"fn(value: +Integer)"},"setHideOnParentTap":{"!doc":"<p>Sets the user value of the property <code>hideOnParentTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnParentTap}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setPositionZ":{"!doc":"<p>Sets the user value of the property <code>positionZ</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #positionZ}.</p>","!type":"fn(value: Object) -> Object"},"setSize":{"!doc":"<p>Sets the user value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: Object) -> Object"},"setTapOffset":{"!doc":"<p>Sets the user value of the property <code>tapOffset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tapOffset}.</p>","!type":"fn(value: Object) -> Object"},"setTransitionDuration":{"!doc":"<p>Sets the user value of the property <code>transitionDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transitionDuration}.</p>","!type":"fn(value: Object) -> Object"},"setWidth":{"!type":"fn(value: +Integer)"},"show":{"!doc":"<p>Shows the drawer.</p>","!type":"fn()"},"toggleHideOnParentTap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>hideOnParentTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnParentTap}.</p>","!type":"fn() -> bool"},"toggleVisibility":{"!doc":"<p>Toggle the visibility of the drawer.</p>","!type":"fn() -> bool"}}},"INavigation":{"!doc":"<p>All widgets that are added to the navigation container should implement this interface.</p>","prototype":{"getLeftContainer":{"!doc":"<p>Returns the left container that is merged into the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getRightContainer":{"!doc":"<p>Returns the right container that is merged into the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getTitleWidget":{"!doc":"<p>Returns the title widget that is merged into the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Title"}}},"IScrollDelegate":{"!doc":"<p>Objects which are used as delegates for the {@link qx.ui.mobile.container.Scroll#delegate} may\nimplement any of the methods described in this interface. The delegate does\nnot need to implement all the methods of this interface.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nactually implemented.</p>","prototype":{"getScrollOffset":{"!doc":"<p>Calculates the scroll offset if container scrolls to a widget/element through <code>scrollToElement()|scrollToWidget()</code>.</p>","!type":"fn() -> +Array"}}},"MasterDetail":{"!proto":"qx.ui.mobile.container.Composite","!type":"fn()","prototype":{"__syncLayout":{"!doc":"<p>Synchronizes the layout.</p>","!type":"fn()"},"_createDetailContainer":{"!doc":"<p>Creates the detail container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createMasterContainer":{"!doc":"<p>Creates the master container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_onOrientationChange":{"!doc":"<p>Event handler. Called when the orientation of the device is changed.</p>","!type":"fn(evt: +qx.event.type.Orientation)"},"getDetail":{"!doc":"<p>Returns the detail container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getMaster":{"!doc":"<p>Returns the master container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"}}},"MIScroll":{"!doc":"<p>Mixin for the {@link Scroll} container. Used when the variant\n<code>qx.mobile.nativescroll</code> is set to &#8220;off&#8221;. Uses the iScroll script to simulate\nthe <span class=\"caps\">CSS</span> position:fixed style. Position fixed is not available in iOS and\nAndroid < 2.2.</p>","!type":"fn()","prototype":{"__createScrollInstance":{"!doc":"<p>Creates the iScroll instance.</p>","!type":"fn() -> Object"},"__initScroll":{"!doc":"<p>Loads and inits the iScroll instance.</p>","!type":"fn()"},"__onScrollLoaded":{"!doc":"<p>Load callback. Called when the iScroll script is loaded.</p>","!type":"fn(request: +qx.bom.request.Script)"},"__registerEventListeners":{"!doc":"<p>Registers all needed event listener.</p>","!type":"fn()"},"__unregisterEventListeners":{"!doc":"<p>Unregisters all needed event listener.</p>","!type":"fn()"},"_createScrollElement":{"!doc":"<p>Mixin method. Creates the scroll element.</p>","!type":"fn() -> +Element"},"_getDefaultScrollProperties":{"!doc":"<p>Returns a map with default iScroll properties for the iScroll instance.</p>","!type":"fn() -> Object"},"_getPosition":{"!doc":"<p>Returns the current scroll position</p>","!type":"fn() -> +Array"},"_getScrollContentElement":{"!doc":"<p>Mixin method. Returns the scroll content element..</p>","!type":"fn() -> +Element"},"_refresh":{"!doc":"<p>Calls the refresh function of iScroll. Needed to recalculate the\nscrolling container.</p>","!type":"fn()"},"_scrollTo":{"!doc":"<p>Scrolls the wrapper contents to the x/y coordinates in a given period.</p>","!type":"fn(x: +Integer, y: +Integer, time: +Integer)"},"_setScroll":{"!doc":"<p>Setter for the scroll instance.</p>","!type":"fn(scroll: Object)"},"disable":{"!doc":"<p>Delegation method for iScroll. Disabled the iScroll objects.\nPrevents any further scrolling of this container.</p>","!type":"fn()"},"enable":{"!doc":"<p>Delegation method for iScroll. Enables the iScroll object.</p>","!type":"fn()"}}},"MNativeScroll":{"!type":"fn()","prototype":{"_calcSnapPoints":{"!doc":"<p>Calculates the snapping points for the x/y axis.</p>","!type":"fn()"},"_createScrollElement":{"!doc":"<p>Mixin method. Creates the scroll element.</p>","!type":"fn() -> +Element"},"_determineSnapPoint":{"!doc":"<p>Determines the next snap points for the passed current position.</p>","!type":"fn(current: +Integer, snapProperty: string) -> +Integer"},"_getPosition":{"!doc":"<p>Returns the current scroll position</p>","!type":"fn() -> +Array"},"_getScrollContentElement":{"!doc":"<p>Mixin method. Returns the scroll content element.</p>","!type":"fn() -> +Element"},"_onAppear":{"!doc":"<p>Event handler for <code>appear</code> event.</p>","!type":"fn()"},"_onScroll":{"!doc":"<p>Event handler for <code>scroll</code> events.</p>","!type":"fn()"},"_onTouchMove":{"!doc":"<p>Event handler for <code>touchmove</code> event.\nNeeded for preventing iOS page bounce.</p>","!type":"fn(evt: +qx.event.type.Touch)"},"_onTrackEnd":{"!doc":"<p>Event handler for <code>trackend</code> events.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_onTrackStart":{"!doc":"<p>Event handler for <code>trackstart</code> events.</p>","!type":"fn()"},"_refresh":{"!doc":"<p>Refreshes the scroll container. Recalculates the snap points.</p>","!type":"fn()"},"_scrollTo":{"!doc":"<p>Scrolls the wrapper contents to the x/y coordinates in a given period.</p>","!type":"fn(x: +Integer, y: +Integer, time: +Integer)"},"_snap":{"!doc":"<p>Snaps the scrolling area to the nearest snap point.</p>","!type":"fn()"}}},"Navigation":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>The navigation controller includes already a {@link qx.ui.mobile.navigationbar.NavigationBar}\nand a {@link qx.ui.mobile.container.Composite} container with a {@link qx.ui.mobile.layout.Card} layout.\nAll widgets that implement the {@link qx.ui.mobile.container.INavigation}\ninterface can be added to the container. The added widget provide the title\nwidget and the left/right container, which will be automatically merged into\nnavigation bar.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var container = new qx.ui.mobile.container.Navigation();\n  this.getRoot(container);\n  var page = new qx.ui.mobile.page.NavigationPage();\n  container.add(page);\n  page.show();\n</pre>","!type":"fn()","prototype":{"_createContent":{"!doc":"<p>Creates the content container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createNavigationBar":{"!doc":"<p>Creates the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.NavigationBar"},"_onAnimationEnd":{"!doc":"<p>Handler for the &#8220;animationEnd&#8221; event on the layout.</p>","!type":"fn()"},"_onAnimationStart":{"!doc":"<p>Handler for the &#8220;animationStart&#8221; event on the layout.</p>","!type":"fn()"},"_onUpdateLayout":{"!doc":"<p>Event handler. Called when the &#8220;updateLayout&#8221; event occurs.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_update":{"!doc":"<p>Updates the navigation bar depending on the set widget.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"add":{"!type":"fn(widget: +undefined)"},"getContent":{"!doc":"<p>Returns the content container. Add all your widgets to this container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getLayout":{"!doc":"<p>Returns the assigned card layout.</p>","!type":"fn() -> +qx.ui.mobile.layout.Card"},"getNavigationBar":{"!doc":"<p>Returns the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.NavigationBar"},"remove":{"!type":"fn(widget: +undefined)"}}},"Scroll":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>Container, which allows, depending on the set variant <code>qx.mobile.nativescroll</code>,\nvertical and horizontal scrolling if the contents is larger than the container.</p>\n\n<p>Note that this class can only have one child widget. This container has a\nfixed layout, which cannot be changed.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // create the scroll widget\n  var scroll = new qx.ui.mobile.container.Scroll()\n\n  // add a children\n  scroll.add(new qx.ui.mobile.basic.Label(\"Name: \"));\n\n  this.getRoot().add(scroll);\n</pre>\n\n<p>This example creates a scroll container and adds a label to it.</p>","!type":"fn()","prototype":{"_createContainerElement":{"!type":"fn()"},"_getContentElement":{"!type":"fn()"},"_getScrollOffset":{"!doc":"<p>Determines the scroll offset for the <code>_scrollToElement</code> method.\nIf a delegate is available, the method calls\n<code>qx.ui.mobile.container.IScrollDelegate.getScrollOffset()</code> for offset calculation.</p>","!type":"fn() -> +Array"},"_isScrollable":{"!doc":"<p>Detects whether this scroll container is scrollable or not.</p>","!type":"fn() -> bool"},"_isScrollableX":{"!doc":"<p>Detects whether this scroll container is scrollable on x axis or not.</p>","!type":"fn() -> bool"},"_isScrollableY":{"!doc":"<p>Detects whether this scroll container is scrollable on y axis or not.</p>","!type":"fn() -> bool"},"_scrollToElement":{"!doc":"<p>Scrolls the wrapper contents to the widgets coordinates in a given\nperiod.</p>","!type":"fn(element: string, time?: +Integer)"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getPosition":{"!doc":"<p>Returns the current scroll position</p>","!type":"fn() -> +Array"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"isScrollable":{"!doc":"<p>Detects whether this scroll container is scrollable or not.</p>","!type":"fn() -> bool"},"refresh":{"!doc":"<p>Calls the refresh function the used scrolling method. Needed to recalculate the\nscrolling container.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"scrollTo":{"!doc":"<p>Scrolls the wrapper contents to the x/y coordinates in a given time.</p>","!type":"fn(x: +Integer, y: +Integer, time: +Integer)"},"scrollToElement":{"!doc":"<p>Scrolls the wrapper contents to the widgets coordinates in a given\nperiod.</p>","!type":"fn(target: +Element, time?: +Integer)"},"scrollToWidget":{"!doc":"<p>Scrolls the wrapper contents to the widgets coordinates in a given\nperiod.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, time: +Integer)"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"}}},"ScrollComposite":{"!proto":"qx.ui.mobile.container.Composite","!type":"fn()","prototype":{"_applyBounceEasing":{"!doc":"<p>Activates bounce easing for the scrollContainer.\nUsed when user drags the scrollContainer over the edge manually.</p>","!type":"fn()"},"_applyFixedHeight":{"!doc":"<p>Applies changes of the property value of the property <code>fixedHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn(value: bool, old: bool)"},"_applyHeight":{"!doc":"<p>Applies changes of the property value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: string, old: string)"},"_applyMomentumEasing":{"!doc":"<p>Activates momentum scrolling for the scrollContainer.\nAppears like a &#8220;ease-out&#8221; easing function.</p>","!type":"fn()"},"_applyNoEasing":{"!doc":"<p>Deactivates any scroll easing for the scrollContainer.</p>","!type":"fn()"},"_applyScrollBounceEasing":{"!doc":"<p>Activates the scroll bounce easing for the scrollContainer.\nUsed when momentum scrolling is activated and the momentum calculates an\nendpoint outside of the viewport.\nCauses the effect that scrollContainers scrolls to far and bounces back to right position.</p>","!type":"fn()"},"_calcScrollLimit":{"!doc":"<p>Calculates the lower scroll limit of the scroll container.</p>","!type":"fn() -> +Array"},"_createScrollContainer":{"!doc":"<p>Factory method for the scrollContainer.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_fixChildElementsHeight":{"!doc":"<p>Synchronizes the elements.scrollHeight and its height.\nNeeded for making textArea scrollable.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_handleSize":{"!doc":"<p>Checks if size handling is needed:\nif true, it adds all listener which are needed for synchronizing the scrollHeight to\nelements height.</p>","!type":"fn(child: +qx.ui.mobile.core.Widget)"},"_onSwipe":{"!doc":"<p>Swipe handler for scrollContainer.</p>","!type":"fn(evt: +qx.event.type.Swipe)"},"_onTrack":{"!doc":"<p>Handler for <code>track</code> events on scrollContainer</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"_onTrackStart":{"!doc":"<p>Handler for <code>trackstart</code> events on scrollContainer</p>","!type":"fn(evt: +qx.event.type.Track)"},"_scrollStep":{"!doc":"<p>Enables the momentum scrolling. This method will be called recursively,\nand divides the scroll velocity on every step by the parameter momentum.</p>","!type":"fn(startPosition: number, velocity: number, momentum: number, scrollLimit: number)"},"_unhandleSize":{"!doc":"<p>Removes Listeners from a child if necessary.</p>","!type":"fn(child: +qx.ui.mobile.core.Widget)"},"_updateScrollIndicator":{"!doc":"<p>Updates the visibility of the vertical scroll indicator (top or bottom).</p>","!type":"fn(positionY: +Integer)"},"add":{"!type":"fn(child: +undefined, options: +undefined)"},"addAfter":{"!type":"fn(child: +undefined, after: +undefined, layoutProperties: +undefined)"},"addAt":{"!type":"fn(child: +undefined, index: +undefined, options: +undefined)"},"addBefore":{"!type":"fn(child: +undefined, before: +undefined, layoutProperties: +undefined)"},"getChildren":{"!type":"fn()"},"getFixedHeight":{"!doc":"<p>Returns the (computed) value of the property <code>fixedHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn() -> Object"},"getHeight":{"!doc":"<p>Returns the (computed) value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn() -> Object"},"getLayout":{"!type":"fn()"},"getScrollableX":{"!doc":"<p>Returns the (computed) value of the property <code>scrollableX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableX}.</p>","!type":"fn() -> Object"},"getScrollableY":{"!doc":"<p>Returns the (computed) value of the property <code>scrollableY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableY}.</p>","!type":"fn() -> Object"},"getScrollContainer":{"!doc":"<p>Getter for the inner scrollContainer of this scrollComposite.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getShowScrollIndicator":{"!doc":"<p>Returns the (computed) value of the property <code>showScrollIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollIndicator}.</p>","!type":"fn() -> Object"},"hasChildren":{"!type":"fn()"},"indexOf":{"!type":"fn(child: +undefined)"},"initFixedHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>fixedHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn(value: Object) -> Object"},"initHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>height</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: Object) -> Object"},"initScrollableX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollableX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableX}.</p>","!type":"fn(value: Object) -> Object"},"initScrollableY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollableY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableY}.</p>","!type":"fn(value: Object) -> Object"},"initShowScrollIndicator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showScrollIndicator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollIndicator}.</p>","!type":"fn(value: Object) -> Object"},"isFixedHeight":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>fixedHeight</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn() -> bool"},"isScrollableX":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>scrollableX</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableX}.</p>","!type":"fn() -> bool"},"isScrollableY":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>scrollableY</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableY}.</p>","!type":"fn() -> bool"},"isShowScrollIndicator":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showScrollIndicator</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollIndicator}.</p>","!type":"fn() -> bool"},"remove":{"!type":"fn(child: +undefined)"},"removeAll":{"!type":"fn()"},"removeAt":{"!type":"fn(index: +undefined)"},"resetFixedHeight":{"!doc":"<p>Resets the user value of the property <code>fixedHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn()"},"resetHeight":{"!doc":"<p>Resets the user value of the property <code>height</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn()"},"resetScrollableX":{"!doc":"<p>Resets the user value of the property <code>scrollableX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableX}.</p>","!type":"fn()"},"resetScrollableY":{"!doc":"<p>Resets the user value of the property <code>scrollableY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableY}.</p>","!type":"fn()"},"resetShowScrollIndicator":{"!doc":"<p>Resets the user value of the property <code>showScrollIndicator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollIndicator}.</p>","!type":"fn()"},"scrollTo":{"!doc":"<p>Scrolls the scrollContainer to the given position,\ndepending on the state of properties scrollableX and scrollableY.</p>","!type":"fn(positionX: +Integer, positionY: +Integer)"},"setFixedHeight":{"!doc":"<p>Sets the user value of the property <code>fixedHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn(value: Object) -> Object"},"setHeight":{"!doc":"<p>Sets the user value of the property <code>height</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #height}.</p>","!type":"fn(value: Object) -> Object"},"setLayout":{"!type":"fn(layout: +undefined)"},"setScrollableX":{"!doc":"<p>Sets the user value of the property <code>scrollableX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableX}.</p>","!type":"fn(value: Object) -> Object"},"setScrollableY":{"!doc":"<p>Sets the user value of the property <code>scrollableY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableY}.</p>","!type":"fn(value: Object) -> Object"},"setShowScrollIndicator":{"!doc":"<p>Sets the user value of the property <code>showScrollIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollIndicator}.</p>","!type":"fn(value: Object) -> Object"},"toggleFixedHeight":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>fixedHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fixedHeight}.</p>","!type":"fn() -> bool"},"toggleScrollableX":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>scrollableX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableX}.</p>","!type":"fn() -> bool"},"toggleScrollableY":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>scrollableY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollableY}.</p>","!type":"fn() -> bool"},"toggleShowScrollIndicator":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showScrollIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollIndicator}.</p>","!type":"fn() -> bool"}}}},"core":{"Blocker":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>This class blocks events and can be included into all widgets.</p>","!type":"fn()","prototype":{"__registerEventListener":{"!doc":"<p>Registers all needed event listener.</p>","!type":"fn()"},"__unregisterEventListener":{"!doc":"<p>Unregisters all needed event listener.</p>","!type":"fn()"},"_onScroll":{"!doc":"<p>Event handler. Called when the scroll event occurs.</p>","!type":"fn(evt: +Event)"},"_updateSize":{"!doc":"<p>Event handler. Called whenever the size of the blocker should be updated.</p>","!type":"fn()"},"forceHide":{"!doc":"<p>Force the blocker to hide, even when the show counter is larger than\nzero.</p>","!type":"fn()"},"hide":{"!doc":"<p>Hides the blocker. The blocker is only hidden when the hide method\nis called as many times as the {@link #show} method.</p>","!type":"fn()"},"isShown":{"!doc":"<p>Whether the blocker is shown or not.</p>","!type":"fn() -> bool"},"show":{"!doc":"<p>Shows the blocker. When the show method is called a counter is incremented.\nThe {@link #hide} method needs to be called as many times as the {@link #show}\nmethod. This behavior is useful, when you want to show a loading indicator.</p>","!type":"fn()"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.mobile.core.Blocker"}},"DomUpdatedHandler":{"!proto":"qx.core.Object","!doc":"<p>This class provides the <code>domupdated</code> event. The event is\ndelegated to all widget instances that have a\nlistener for the <code>domupdated</code> event registered.</p>","!type":"fn()","refresh":{"!doc":"<p>Informs all handlers. Useful after massive <span class=\"caps\">DOM</span> manipulations e.g.\nthrough {@link qx.ui.mobile.core.Widget}.</p>","!type":"fn()"},"prototype":{"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"refresh":{"!doc":"<p>This method is called by all <span class=\"caps\">DOM</span> tree modifying routines\nto inform the widgets.</p>","!type":"fn()"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"EventHandler":{"!proto":"qx.core.Object","!doc":"<p>Connects the widgets to the browser <span class=\"caps\">DOM</span> events.</p>","!type":"fn()","__cancelActiveStateTimer":{"!doc":"<p>Cancels the active state timer.</p>","!type":"fn()"},"__onPointerDown":{"!doc":"<p>Event handler. Called when the pointerdown event occurs.\nSets the <code>active class to the event target after a certain\ntime.</p>","!type":"fn(domEvent: +qx.event.type.Pointer)"},"__onPointerMove":{"!doc":"<p>Event handler. Called when the pointermove event occurs.\nRemoves the <code>active class from the event target\nwhen the viewport was scrolled.</p>","!type":"fn(domEvent: +qx.event.type.Pointer)"},"__onPointerUp":{"!doc":"<p>Event handler. Called when the pointerup event occurs.\nRemoves the <code>active class from the event target.</p>","!type":"fn(domEvent: +qx.event.type.Pointer)"},"__removeActiveState":{"!doc":"<p>Removes the <code>active class from the active target.</p>","!type":"fn()"},"prototype":{"_dispatchEvent":{"!doc":"<p>Dispatches a <span class=\"caps\">DOM</span> event on a widget.</p>","!type":"fn(domEvent: +qx.event.type.Event)"},"canHandleEvent":{"!type":"fn(target: +undefined, type: +undefined)"},"registerEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"},"unregisterEvent":{"!type":"fn(target: +undefined, type: +undefined, capture: +undefined)"}}},"MChildrenHandling":{"!doc":"<p>This mixin exposes all basic methods to manage widget children as public methods.\nIt can only be included into instances of {@link Widget}.</p>\n\n<p>To optimize the method calls the including widget should call the method\n{@link #remap} in its defer function. This will map the protected\nmethods to the public ones and save one method call for each function.</p>","prototype":{"add":{"!doc":"<p>Adds a new child widget.</p>","!type":"fn(child: +Widget, layoutProperties?: +Map)"},"addAfter":{"!doc":"<p>Add a widget after another already inserted widget</p>","!type":"fn(child: +Widget, after: +Widget, layoutProperties?: +Map)"},"addAt":{"!doc":"<p>Add a child widget at the specified index</p>","!type":"fn(child: +Widget, index: +Integer, options?: +Map)"},"addBefore":{"!doc":"<p>Add a widget before another already inserted widget</p>","!type":"fn(child: +Widget, before: +Widget, layoutProperties?: +Map)"},"getChildren":{"!doc":"<p>Returns the children list</p>","!type":"fn() -> +Widget"},"hasChildren":{"!doc":"<p>Whether the widget contains children.</p>","!type":"fn() -> bool"},"indexOf":{"!doc":"<p>Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>.</p>","!type":"fn(child: +Widget) -> +Integer"},"remove":{"!doc":"<p>Remove the given child widget.</p>","!type":"fn(child: +Widget)"},"removeAll":{"!doc":"<p>Remove all children.</p>","!type":"fn()"},"removeAt":{"!doc":"<p>Remove the widget at the specified index.</p>","!type":"fn(index: +Integer)"}},"remap":{"!doc":"<p>Mapping of protected methods to public.\nThis omits an additional function call when using these methods. Call\nthis methods in the defer block of the including class.</p>","!type":"fn(members: +Map)"}},"MLayoutHandling":{"!doc":"<p>This mixin exposes all methods to manage the layout manager of a widget.\nIt can only be included into instances of {@link Widget}.</p>\n\n<p>To optimize the method calls the including widget should call the method\n{@link #remap} in its defer function. This will map the protected\nmethods to the public ones and save one method call for each function.</p>","prototype":{"getLayout":{"!doc":"<p>Get the widget&#8217;s layout manager.</p>","!type":"fn() -> +qx.ui.mobile.layout.Abstract"},"setLayout":{"!doc":"<p>Set a layout manager for the widget. A a layout manager can only be connected\nwith one widget. Reset the connection with a previous widget first, if you\nlike to use it in another widget instead.</p>","!type":"fn(layout: +qx.ui.mobile.layout.Abstract)"}},"remap":{"!doc":"<p>Mapping of protected methods to public.\nThis omits an additional function call when using these methods. Call\nthis methods in the defer block of the including class.</p>","!type":"fn(members: +Map)"}},"MResize":{"!doc":"<p>This mixin resizes the container element to the height of the parent element.\nUse this when the height can not be set by <span class=\"caps\">CSS</span>.</p>","prototype":{"_setHeight":{"!doc":"<p>Sets the height of the container element.</p>","!type":"fn(height: +Integer)"},"_setWidth":{"!doc":"<p>Sets the width of the container element.</p>","!type":"fn(width: +Integer)"},"fixSize":{"!doc":"<p>Resizes the container element to the height of the parent element.</p>","!type":"fn()"},"getFireDomUpdatedOnResize":{"!doc":"<p>Returns the (computed) value of the property <code>fireDomUpdatedOnResize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fireDomUpdatedOnResize}.</p>","!type":"fn() -> Object"},"initFireDomUpdatedOnResize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>fireDomUpdatedOnResize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #fireDomUpdatedOnResize}.</p>","!type":"fn(value: Object) -> Object"},"isFireDomUpdatedOnResize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>fireDomUpdatedOnResize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fireDomUpdatedOnResize}.</p>","!type":"fn() -> bool"},"releaseFixedSize":{"!doc":"<p>Removes fixed size from container.</p>","!type":"fn()"},"resetFireDomUpdatedOnResize":{"!doc":"<p>Resets the user value of the property <code>fireDomUpdatedOnResize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #fireDomUpdatedOnResize}.</p>","!type":"fn()"},"setFireDomUpdatedOnResize":{"!doc":"<p>Sets the user value of the property <code>fireDomUpdatedOnResize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fireDomUpdatedOnResize}.</p>","!type":"fn(value: Object) -> Object"},"toggleFireDomUpdatedOnResize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>fireDomUpdatedOnResize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #fireDomUpdatedOnResize}.</p>","!type":"fn() -> bool"}}},"Root":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>Root widget for the mobile application.</p>","!type":"fn()","prototype":{"_applyShowScrollbarY":{"!doc":"<p>Applies changes of the property value of the property <code>showScrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn(value: bool, old: bool)"},"_createContainerElement":{"!type":"fn()"},"_onOrientationChange":{"!doc":"<p>Event handler. Called when the orientation of the device is changed.</p>","!type":"fn(evt: +qx.event.type.Orientation)"},"getAppScale":{"!doc":"<p>Returns the application&#8217;s total scale factor. It takes into account both\nthe application&#8217;s font scale (determined by {@link #getFontScale}) and\nthe device pixel ratio. The latter could be modified at runtime by the\nbrowsers font scaling/zooming feature.</p>","!type":"fn() -> number"},"getFontScale":{"!doc":"<p>Returns the application&#8217;s font scale factor.</p>","!type":"fn() -> number"},"getHeight":{"!doc":"<p>Returns the rendered height.</p>","!type":"fn() -> +Integer"},"getShowScrollbarY":{"!doc":"<p>Returns the (computed) value of the property <code>showScrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn() -> Object"},"getWidth":{"!doc":"<p>Returns the rendered width.</p>","!type":"fn() -> +Integer"},"initShowScrollbarY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showScrollbarY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn(value: Object) -> Object"},"isShowScrollbarY":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showScrollbarY</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn() -> bool"},"resetShowScrollbarY":{"!doc":"<p>Resets the user value of the property <code>showScrollbarY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn()"},"setFontScale":{"!doc":"<p>Sets the application&#8217;s font scale factor, i.e. relative to a default 100%\nfont size.</p>","!type":"fn(value: number)"},"setShowScrollbarY":{"!doc":"<p>Sets the user value of the property <code>showScrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowScrollbarY":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showScrollbarY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showScrollbarY}.</p>","!type":"fn() -> bool"}}},"Widget":{"!proto":"qx.core.Object","!doc":"<p>This is the base class for all mobile widgets.</p>","!type":"fn()","prototype":{"__setVisibility":{"!doc":"<p>Sets the visibility of the widget.</p>","!type":"fn(action: string, properties: +Map)"},"_add":{"!doc":"<p>Adds a new child widget.</p>","!type":"fn(child: +Widget, layoutProperties?: +Map)"},"_addAfter":{"!doc":"<p>Add a widget after another already inserted widget.</p>","!type":"fn(child: +Widget, afterWidget: +Widget, layoutProperties?: +Map)"},"_addAt":{"!doc":"<p>Add a child widget at the specified index</p>","!type":"fn(child: +Widget, index: +Integer, options?: +Map)"},"_addBefore":{"!doc":"<p>Add a widget before another already inserted widget</p>","!type":"fn(child: +Widget, beforeWidget: +Widget, layoutProperties?: +Map)"},"_applyAttribute":{"!doc":"<p>Shortcut for each property that should change a certain attribute of the\ncontainer element.\nUse the {@link #addAttributeMapping} method to add a property to attribute\nmapping when the attribute name or value differs from the property name or\nvalue.</p>","!type":"fn(value: Object, old: Object, attribute: string)"},"_applyDefaultCssClass":{"!doc":"<p>Applies changes of the property value of the property <code>defaultCssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCssClass}.</p>","!type":"fn(value: string, old: string)"},"_applyEnabled":{"!doc":"<p>Sets the enable property to the new value</p>","!type":"fn(value: bool, old?: bool)"},"_applyId":{"!doc":"<p>Applies changes of the property value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: string, old: string)"},"_applyStyle":{"!doc":"<p>Shortcut for each property that should change a certain style of the container\nelement.\nUse the {@link #addStyleMapping} method to add a property to style\nmapping when the style name or value differs from the property name or\nvalue.</p>","!type":"fn(value: +undefined, old: +undefined, style: +undefined)"},"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"},"_createContainerElement":{"!doc":"<p>Creates the container <span class=\"caps\">DOM</span> element of the widget.\nOverride this method if you want to create a custom widget.</p>","!type":"fn() -> +Element"},"_domUpdated":{"!doc":"<p>Triggers the {@link #scheduleDomUpdated} method. This method needs to be called\nwhen the <span class=\"caps\">DOM</span> has changed, e.g. an element was added / removed / styled.</p>","!type":"fn()"},"_getAttribute":{"!doc":"<p>Returns the set value of the given attribute.</p>","!type":"fn(attribute: string) -> Object"},"_getChildren":{"!doc":"<p>Returns the children of the widget.</p>","!type":"fn() -> +Widget"},"_getContentElement":{"!doc":"<p>Returns the content <span class=\"caps\">DOM</span> element of the widget.\nOverride this method, to define another element as the content element.</p>\n\n<p>Note: Most times this element points to to the container element.\nWhen the widget has a more complex element structure,\nthe function should return a reference of the element that should contain\nthe content.</p>","!type":"fn() -> +Element"},"_getLayout":{"!doc":"<p>Returns the set layout manager for the widget.</p>","!type":"fn() -> +qx.ui.mobile.layout.Abstract"},"_getStyle":{"!doc":"<p>Returns the value of a certain style of the container element.</p>","!type":"fn(style: string) -> Object"},"_getTagName":{"!doc":"<p>Returns the tag name of the container element of this widget.\nOverride this method if you want to create a custom widget.</p>","!type":"fn() -> string"},"_hasChildren":{"!doc":"<p>Whether the widget has child widgets.</p>","!type":"fn() -> bool"},"_indexOf":{"!doc":"<p>Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>.</p>","!type":"fn(child: +Widget) -> +Integer"},"_initializeChildLayout":{"!doc":"<p>Initializes the layout of the given child widget.</p>","!type":"fn(child: +Widget, layoutProperties?: +Map)"},"_remove":{"!doc":"<p>Removes a given child from the widget.</p>","!type":"fn(child: +Widget)"},"_removeAll":{"!doc":"<p>Removes all children from the widget.</p>","!type":"fn() -> +Array"},"_removeAt":{"!doc":"<p>Remove the widget at the specified index.</p>","!type":"fn(index: +Integer)"},"_setAttribute":{"!doc":"<p>Sets an attribute with the given value of the container element. The\n<code>null</code> value resets the attribute.</p>","!type":"fn(attribute: string, value: Object)"},"_setContainerElement":{"!doc":"<p>Sets the container <span class=\"caps\">DOM</span> element of the widget.</p>","!type":"fn(element: +Element)"},"_setHtml":{"!doc":"<p>Sets the innerHTML of the content element and calls the {@link #_domUpdated}\nmethod.</p>","!type":"fn(value?: string)"},"_setLayout":{"!doc":"<p>Set a layout manager for the widget. A layout manager can only be connected\nwith one widget. Reset the connection with a previous widget first, if you\nlike to use it in another widget instead.</p>","!type":"fn(layout: +qx.ui.mobile.layout.Abstract)"},"_setStyle":{"!doc":"<p>Sets the value of a certain style of the container element. The\n<code>null</code> value resets the attribute.</p>","!type":"fn(style: string, value: Object)"},"_transform":{"!doc":"<p>Transforms this widget (rotate, scale, translate3d)</p>","!type":"fn()"},"_transformId":{"!doc":"<p>Transforms the value of the ID property. When the value is null, an auto\ngenerated ID is set. This makes sure that an ID is always set.</p>","!type":"fn(value: string) -> string"},"addCssClass":{"!doc":"<p>Adds a <span class=\"caps\">CSS</span> class to the container element of the widget. Use this method\nto enhance the default appearance of the widget.</p>","!type":"fn(cssClass: string)"},"addCssClasses":{"!doc":"<p>Adds an array of <span class=\"caps\">CSS</span> classes to the container element of the widget. Use this method\nto enhance the default appearance of the widget.</p>","!type":"fn(cssClasses: string)"},"destroy":{"!doc":"<p>Removes this widget from its parent and disposes it.</p>","!type":"fn()"},"exclude":{"!doc":"<p>Hide this widget and exclude it from the underlying layout.</p>","!type":"fn(properties: +Map)"},"getActivatable":{"!doc":"<p>Returns the (computed) value of the property <code>activatable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activatable}.</p>","!type":"fn() -> Object"},"getAnonymous":{"!doc":"<p>Returns the (computed) value of the property <code>anonymous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn() -> Object"},"getContainerElement":{"!doc":"<p>Returns the container <span class=\"caps\">DOM</span> element of the widget.</p>","!type":"fn() -> +Element"},"getContentElement":{"!doc":"<p>Returns the content <span class=\"caps\">DOM</span> element of the widget.</p>","!type":"fn() -> +Element"},"getDefaultCssClass":{"!doc":"<p>Returns the (computed) value of the property <code>defaultCssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCssClass}.</p>","!type":"fn() -> Object"},"getEnabled":{"!doc":"<p>Returns the (computed) value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> Object"},"getId":{"!doc":"<p>Returns the (computed) value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn() -> Object"},"getLayoutParent":{"!doc":"<p>Returns the parent widget of this widget.</p>","!type":"fn() -> +Widget"},"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"getRotation":{"!doc":"<p>Returns the (computed) value of the property <code>rotation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rotation}.</p>","!type":"fn() -> Object"},"getScaleX":{"!doc":"<p>Returns the (computed) value of the property <code>scaleX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleX}.</p>","!type":"fn() -> Object"},"getScaleY":{"!doc":"<p>Returns the (computed) value of the property <code>scaleY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleY}.</p>","!type":"fn() -> Object"},"getTransformUnit":{"!doc":"<p>Returns the (computed) value of the property <code>transformUnit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transformUnit}.</p>","!type":"fn() -> Object"},"getTranslateX":{"!doc":"<p>Returns the (computed) value of the property <code>translateX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #translateX}.</p>","!type":"fn() -> Object"},"getTranslateY":{"!doc":"<p>Returns the (computed) value of the property <code>translateY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #translateY}.</p>","!type":"fn() -> Object"},"getTranslateZ":{"!doc":"<p>Returns the (computed) value of the property <code>translateZ</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #translateZ}.</p>","!type":"fn() -> Object"},"getVisibility":{"!doc":"<p>Returns the (computed) value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn() -> Object"},"hasCssClass":{"!doc":"<p>Checks if the widget has a certain <span class=\"caps\">CSS</span> class set.</p>","!type":"fn(cssClass: string) -> bool"},"hide":{"!doc":"<p>Hide this widget.</p>","!type":"fn(properties: +Map)"},"initActivatable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>activatable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #activatable}.</p>","!type":"fn(value: Object) -> Object"},"initAnonymous":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>anonymous</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn(value: Object) -> Object"},"initDefaultCssClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultCssClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCssClass}.</p>","!type":"fn(value: Object) -> Object"},"initEnabled":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>enabled</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"initId":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>id</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: Object) -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"initRotation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rotation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rotation}.</p>","!type":"fn(value: Object) -> Object"},"initScaleX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scaleX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleX}.</p>","!type":"fn(value: Object) -> Object"},"initScaleY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scaleY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleY}.</p>","!type":"fn(value: Object) -> Object"},"initTransformUnit":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>transformUnit</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #transformUnit}.</p>","!type":"fn(value: Object) -> Object"},"initTranslateX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>translateX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #translateX}.</p>","!type":"fn(value: Object) -> Object"},"initTranslateY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>translateY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #translateY}.</p>","!type":"fn(value: Object) -> Object"},"initTranslateZ":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>translateZ</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #translateZ}.</p>","!type":"fn(value: Object) -> Object"},"initVisibility":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>visibility</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object) -> Object"},"isActivatable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>activatable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activatable}.</p>","!type":"fn() -> bool"},"isAnonymous":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>anonymous</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn() -> bool"},"isEnabled":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>enabled</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"isExcluded":{"!doc":"<p>Whether the widget is locally excluded.</p>\n\n<p>Note: This method does not respect the hierarchy.</p>","!type":"fn() -> bool"},"isHidden":{"!doc":"<p>Whether the widget is locally hidden.</p>\n\n<p>Note: This method does not respect the hierarchy.</p>","!type":"fn() -> bool"},"isSeeable":{"!doc":"<p>Detects if the widget and all its parents are visible.</p>\n\n<p>Warning: forces rendering of the browser. Do not use this method during\nanimations or performance critical tasks.</p>","!type":"fn() -> bool"},"isVisible":{"!doc":"<p>Whether the widget is locally visible.</p>\n\n<p>Note: This method does not respect the hierarchy.</p>","!type":"fn() -> bool"},"removeChild":{"!doc":"<p>Internal method. Removes a given child widget and the corresponding <span class=\"caps\">DOM</span> element.</p>","!type":"fn(child: +Widget)"},"removeCssClass":{"!doc":"<p>Removes a <span class=\"caps\">CSS</span> class from the container element of the widget.</p>","!type":"fn(cssClass: string)"},"removeCssClasses":{"!doc":"<p>Removes an array of <span class=\"caps\">CSS</span> classes from the container element of the widget.</p>","!type":"fn(cssClasses: string)"},"resetActivatable":{"!doc":"<p>Resets the user value of the property <code>activatable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #activatable}.</p>","!type":"fn()"},"resetAnonymous":{"!doc":"<p>Resets the user value of the property <code>anonymous</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn()"},"resetDefaultCssClass":{"!doc":"<p>Resets the user value of the property <code>defaultCssClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCssClass}.</p>","!type":"fn()"},"resetEnabled":{"!doc":"<p>Resets the user value of the property <code>enabled</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn()"},"resetId":{"!doc":"<p>Resets the user value of the property <code>id</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn()"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"resetRotation":{"!doc":"<p>Resets the user value of the property <code>rotation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rotation}.</p>","!type":"fn()"},"resetScaleX":{"!doc":"<p>Resets the user value of the property <code>scaleX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleX}.</p>","!type":"fn()"},"resetScaleY":{"!doc":"<p>Resets the user value of the property <code>scaleY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleY}.</p>","!type":"fn()"},"resetTransformUnit":{"!doc":"<p>Resets the user value of the property <code>transformUnit</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #transformUnit}.</p>","!type":"fn()"},"resetTranslateX":{"!doc":"<p>Resets the user value of the property <code>translateX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #translateX}.</p>","!type":"fn()"},"resetTranslateY":{"!doc":"<p>Resets the user value of the property <code>translateY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #translateY}.</p>","!type":"fn()"},"resetTranslateZ":{"!doc":"<p>Resets the user value of the property <code>translateZ</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #translateZ}.</p>","!type":"fn()"},"resetVisibility":{"!doc":"<p>Resets the user value of the property <code>visibility</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn()"},"setActivatable":{"!doc":"<p>Sets the user value of the property <code>activatable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activatable}.</p>","!type":"fn(value: Object) -> Object"},"setAnonymous":{"!doc":"<p>Sets the user value of the property <code>anonymous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn(value: Object) -> Object"},"setDefaultCssClass":{"!doc":"<p>Sets the user value of the property <code>defaultCssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCssClass}.</p>","!type":"fn(value: Object) -> Object"},"setEnabled":{"!doc":"<p>Sets the user value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: Object) -> Object"},"setId":{"!doc":"<p>Sets the user value of the property <code>id</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #id}.</p>","!type":"fn(value: Object) -> Object"},"setLayoutParent":{"!doc":"<p>Internal method. Sets the layout parent.</p>","!type":"fn(parent: +qx.ui.mobile.core.Widget)"},"setLayoutProperties":{"!doc":"<p>Stores the given layout properties.</p>","!type":"fn(properties: +Map)"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"setRotation":{"!doc":"<p>Sets the user value of the property <code>rotation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rotation}.</p>","!type":"fn(value: Object) -> Object"},"setScaleX":{"!doc":"<p>Sets the user value of the property <code>scaleX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleX}.</p>","!type":"fn(value: Object) -> Object"},"setScaleY":{"!doc":"<p>Sets the user value of the property <code>scaleY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scaleY}.</p>","!type":"fn(value: Object) -> Object"},"setTransformUnit":{"!doc":"<p>Sets the user value of the property <code>transformUnit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #transformUnit}.</p>","!type":"fn(value: Object) -> Object"},"setTranslateX":{"!doc":"<p>Sets the user value of the property <code>translateX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #translateX}.</p>","!type":"fn(value: Object) -> Object"},"setTranslateY":{"!doc":"<p>Sets the user value of the property <code>translateY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #translateY}.</p>","!type":"fn(value: Object) -> Object"},"setTranslateZ":{"!doc":"<p>Sets the user value of the property <code>translateZ</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #translateZ}.</p>","!type":"fn(value: Object) -> Object"},"setVisibility":{"!doc":"<p>Sets the user value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object) -> Object"},"show":{"!doc":"<p>Make this widget visible.</p>","!type":"fn(properties: +Map)"},"toggleActivatable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>activatable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activatable}.</p>","!type":"fn() -> bool"},"toggleAnonymous":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>anonymous</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #anonymous}.</p>","!type":"fn() -> bool"},"toggleCssClass":{"!doc":"<p>Toggles the given <span class=\"caps\">CSS</span>. Adds or removes the <span class=\"caps\">CSS</span> class from the container element of the widget.</p>","!type":"fn(cssClass: string)"},"toggleEnabled":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn() -> bool"},"updateLayout":{"!doc":"<p>Updates the layout with the given arguments.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, action: string, properties: +Map)"},"updateLayoutProperties":{"!doc":"<p>Updates the layout properties of a given widget.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, properties: +Map)"}},"addAttributeMapping":{"!doc":"<p>Adds an attribute mapping entry. This entry is used by the {@link #_applyAttribute}\nmethod. Shortcut when the property name differs from the real\nattribute name. Use this method if you want to add an attribute entry to the mapping\nfrom the defer function of a different widget.</p>\n\n<p>e.g.:\n&#8220;selectable&#8221; :\n{\n  attribute : &#8220;data-selectable&#8221;,\n  values :\n  {\n    &#8220;true&#8221; : null,\n    &#8220;false&#8221; : &#8220;false&#8221;\n  }\n}</p>","!type":"fn(property: string, attribute: string, values: +Map)"},"addStyleMapping":{"!doc":"<p>Adds a style mapping entry. This entry is used by the {@link #_applyStyle}\nmethod. Shortcut when the property name differs from the real\nstyle name. Use this method if you want to add a style entry to the mapping\nfrom the defer function of a different widget.</p>\n\n<p>e.g.:\n&#8220;anonymous&#8221; :\n{\n style : &#8220;pointer-events&#8221;,\n values :\n {\n   &#8220;true&#8221; : &#8220;none&#8221;,\n   &#8220;false&#8221; : null\n }\n}</p>","!type":"fn(property: string, style: string, values: +Map)"},"getCurrentId":{"!doc":"<p>Returns the current widget id of the registry.</p>","!type":"fn() -> +Integer"},"getWidgetById":{"!doc":"<p>Returns the widget with the given id.</p>","!type":"fn(id: string) -> +Widget"},"onShutdown":{"!doc":"<p>Event handler. Called when the application is in shutdown.</p>","!type":"fn()"},"registerWidget":{"!doc":"<p>Registers a widget with its id for internal widget handling.</p>","!type":"fn(widget: +Widget)"},"scheduleDomUpdated":{"!doc":"<p>Schedules the {@link #domUpdated} method. The method will be called after a timeout\nto prevent the triggered events to be fired too often, during massive <span class=\"caps\">DOM</span> manipulations.</p>","!type":"fn()"},"unregisterWidget":{"!doc":"<p>Unregisters the widget with the given id.</p>","!type":"fn(id: string)"}}},"dialog":{"BusyIndicator":{"!proto":"qx.ui.mobile.basic.Atom","!doc":"<p>The widget displays a busy indicator.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var busyIndicator = new qx.ui.mobile.dialog.BusyIndicator(\"Please wait\");\n  this.getRoot().add(busyIndicator);\n</pre>\n\n<p>This example create a widget to display the busy indicator.</p>","!type":"fn()","prototype":{"_applySpinnerClass":{"!doc":"<p>Applies changes of the property value of the property <code>spinnerClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spinnerClass}.</p>","!type":"fn(value: string, old: string)"},"_createIconWidget":{"!type":"fn(iconUrl: +undefined)"},"_onAppear":{"!doc":"<p>Listener for appear event.</p>","!type":"fn()"},"_onDisappear":{"!doc":"<p>Handler for disappear event.</p>","!type":"fn()"},"getSpinnerClass":{"!doc":"<p>Returns the (computed) value of the property <code>spinnerClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spinnerClass}.</p>","!type":"fn() -> Object"},"initSpinnerClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spinnerClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spinnerClass}.</p>","!type":"fn(value: Object) -> Object"},"resetSpinnerClass":{"!doc":"<p>Resets the user value of the property <code>spinnerClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spinnerClass}.</p>","!type":"fn()"},"setSpinnerClass":{"!doc":"<p>Sets the user value of the property <code>spinnerClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spinnerClass}.</p>","!type":"fn(value: Object) -> Object"}}},"Manager":{"!proto":"qx.core.Object","!doc":"<p>Very basic dialog manager. Displays a native alert or confirm dialog if\nthe application is running in a PhoneGap environment. For debugging in a browser\nit displays the browser <code>alert</code> or <code>confirm</code> dialog. In the near\nfuture this should be replaced by dialog widgets.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n   var buttons = [];\n   buttons.push(qx.locale.Manager.tr(\"OK\"));\n   buttons.push(qx.locale.Manager.tr(\"Cancel\"));\n   var title = \"Delete item\";\n   var text = \"Do you want to delete the item?\"\n   qx.ui.mobile.dialog.Manager.getInstance().confirm(title, text, function(index) {\n     if (index==1) {\n       // delete the item\n     }\n   }, this, buttons);\n</pre>\n\n<p>This example displays a confirm dialog and defines a button click handler.</p>","prototype":{"__processDialogButtons":{"!doc":"<p>Processes the dialog buttons. Converts them to PhoneGap compatible strings.</p>","!type":"fn(buttons: string) -> string"},"__showNonNativeDialog":{"!doc":"<p>Shows a dialog widget.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, buttons: string, dialogType: +Integer) -> +qx.ui.mobile.dialog.Popup"},"alert":{"!doc":"<p>Displays an alert box. When the application is running in a PhoneGap\nenvironment, a native alert box is shown. When debugging in a browser, a\nbrowser alert is shown.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, button: string) -> +qx.ui.mobile.dialog.Popup"},"confirm":{"!doc":"<p>Displays a confirm box. When the application is running in a PhoneGap\nenvironment, a native confirm box is shown. When debugging in a browser, a\nbrowser confirm is shown.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, buttons: string) -> +qx.ui.mobile.dialog.Popup"},"error":{"!doc":"<p>Displays an error dialog. When the application is running in an PhoneGap\nenvironment, a native error dialog is shown. For debugging in a browser, a\nbrowser confirm is shown.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, button: string) -> +qx.ui.mobile.dialog.Popup"},"input":{"!doc":"<p>Displays an input dialog.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, buttons: string) -> +qx.ui.mobile.dialog.Popup"},"wait":{"!doc":"<p>Displays a waiting dialog.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, buttons: string) -> +qx.ui.mobile.dialog.Popup"},"warning":{"!doc":"<p>Displays a warning dialog. When the application is running in an PhoneGap\nenvironment, a native warning dialog is shown. For debugging in a browser, a\nbrowser confirm is shown.</p>","!type":"fn(title: string, text: string, handler: fn(), scope: Object, button: string) -> +qx.ui.mobile.dialog.Popup"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.mobile.dialog.Manager"}},"Menu":{"!proto":"qx.ui.mobile.dialog.Popup","!doc":"<p>This widget displays a menu. A dialog menu extends a popup and contains a\nlist, which provides the user the possibility to select one value.\nThe selected value is identified through selected index.</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\n\nvar model = new qx.data.Array([\"item1\",\"item2\",\"item3\"]);\n\nvar menu = new qx.ui.mobile.dialog.Menu(model);\nmenu.show();\nmenu.addListener(\"changeSelection\", function(evt){\n   var selectedIndex = evt.getData().index;\n   var selectedItem = evt.getData().item;\n}, this);\n</pre>\n\n<p>This example creates a menu with several choosable items.</p>","!type":"fn()","prototype":{"__onClearButtonTap":{"!doc":"<p>Event handler for tap on clear button.</p>","!type":"fn()"},"__onListChangeSelection":{"!doc":"<p>Fires an event which contains index and data.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_applyClearButtonLabel":{"!doc":"<p>Applies changes of the property value of the property <code>clearButtonLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearButtonLabel}.</p>","!type":"fn(value: string, old: string)"},"_applyNullable":{"!doc":"<p>Applies changes of the property value of the property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelectedIndex":{"!doc":"<p>Applies changes of the property value of the property <code>selectedIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedIndex}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_createClearButton":{"!doc":"<p>Creates the clearButton. Override this to customize the widget.</p>","!type":"fn() -> +qx.ui.mobile.form.Button"},"_createListScroller":{"!doc":"<p>Creates the scroll container for the selectionList. Override this to customize the widget.</p>","!type":"fn(selectionList: +qx.ui.mobile.list.List) -> +qx.ui.mobile.container.Scroll"},"_createSelectionList":{"!doc":"<p>Creates the selection list. Override this to customize the widget.</p>","!type":"fn() -> +qx.ui.mobile.list.List"},"_getListScroller":{"!doc":"<p>Getter for the scroll container which contains a @see {qx.ui.mobile.list.List} with the choosable items.</p>","!type":"fn() -> +qx.ui.mobile.container.Scroll"},"_onSelectionListTap":{"!doc":"<p>Handler for tap event on selection list.</p>","!type":"fn()"},"_render":{"!doc":"<p>Triggers (re-)rendering of menu items.</p>","!type":"fn()"},"_updatePosition":{"!doc":"<p>Applies changes of the property value of the property <code>visibleListItems</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleListItems}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"getClearButtonLabel":{"!doc":"<p>Returns the (computed) value of the property <code>clearButtonLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearButtonLabel}.</p>","!type":"fn() -> Object"},"getNullable":{"!doc":"<p>Returns the (computed) value of the property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn() -> Object"},"getSelectedIndex":{"!doc":"<p>Returns the (computed) value of the property <code>selectedIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedIndex}.</p>","!type":"fn() -> Object"},"getSelectedItemClass":{"!doc":"<p>Returns the (computed) value of the property <code>selectedItemClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedItemClass}.</p>","!type":"fn() -> Object"},"getSelectionList":{"!doc":"<p>Getter for the selectionList of the menu.</p>","!type":"fn() -> +qx.ui.mobile.list.List"},"getUnselectedItemClass":{"!doc":"<p>Returns the (computed) value of the property <code>unselectedItemClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #unselectedItemClass}.</p>","!type":"fn() -> Object"},"getVisibleListItems":{"!doc":"<p>Returns the (computed) value of the property <code>visibleListItems</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleListItems}.</p>","!type":"fn() -> Object"},"initClearButtonLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>clearButtonLabel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #clearButtonLabel}.</p>","!type":"fn(value: Object) -> Object"},"initNullable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nullable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn(value: Object) -> Object"},"initSelectedIndex":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectedIndex</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedIndex}.</p>","!type":"fn(value: Object) -> Object"},"initSelectedItemClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectedItemClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedItemClass}.</p>","!type":"fn(value: Object) -> Object"},"initUnselectedItemClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>unselectedItemClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #unselectedItemClass}.</p>","!type":"fn(value: Object) -> Object"},"initVisibleListItems":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>visibleListItems</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleListItems}.</p>","!type":"fn(value: Object) -> Object"},"isNullable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>nullable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn() -> bool"},"resetClearButtonLabel":{"!doc":"<p>Resets the user value of the property <code>clearButtonLabel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #clearButtonLabel}.</p>","!type":"fn()"},"resetNullable":{"!doc":"<p>Resets the user value of the property <code>nullable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn()"},"resetSelectedIndex":{"!doc":"<p>Resets the user value of the property <code>selectedIndex</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedIndex}.</p>","!type":"fn()"},"resetSelectedItemClass":{"!doc":"<p>Resets the user value of the property <code>selectedItemClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedItemClass}.</p>","!type":"fn()"},"resetUnselectedItemClass":{"!doc":"<p>Resets the user value of the property <code>unselectedItemClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #unselectedItemClass}.</p>","!type":"fn()"},"resetVisibleListItems":{"!doc":"<p>Resets the user value of the property <code>visibleListItems</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleListItems}.</p>","!type":"fn()"},"scrollToItem":{"!doc":"<p>Scrolls the scroll wrapper of the selectionList to the item with given index.</p>","!type":"fn(index: +Integer)"},"setClearButtonLabel":{"!doc":"<p>Sets the user value of the property <code>clearButtonLabel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearButtonLabel}.</p>","!type":"fn(value: Object) -> Object"},"setItems":{"!doc":"<p>Sets the choosable items of the menu.</p>","!type":"fn(itemsModel: +qx.data.Array)"},"setNullable":{"!doc":"<p>Sets the user value of the property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn(value: Object) -> Object"},"setSelectedIndex":{"!doc":"<p>Sets the user value of the property <code>selectedIndex</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedIndex}.</p>","!type":"fn(value: Object) -> Object"},"setSelectedItemClass":{"!doc":"<p>Sets the user value of the property <code>selectedItemClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectedItemClass}.</p>","!type":"fn(value: Object) -> Object"},"setUnselectedItemClass":{"!doc":"<p>Sets the user value of the property <code>unselectedItemClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #unselectedItemClass}.</p>","!type":"fn(value: Object) -> Object"},"setVisibleListItems":{"!doc":"<p>Sets the user value of the property <code>visibleListItems</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleListItems}.</p>","!type":"fn(value: Object) -> Object"},"show":{"!type":"fn()"},"toggleNullable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn() -> bool"}}},"Picker":{"!proto":"qx.ui.mobile.dialog.Popup","!doc":"<p>The picker widget gives the user the possibility to select a value out of an array\nof values. The picker widget is always shown in a {@link qx.ui.mobile.dialog.Popup}.</p>\n\n<p>The picker widget is able to display multiple picker slots, for letting the user choose\nseveral values at one time, in one single dialog.</p>\n\n<p>The selectable value array is passed to this widget through a {@link qx.data.Array} which represents one picker slot.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is an example of how to use the picker widget.</p>\n\n<pre class=\"javascript\">\n\nvar pickerSlot1 = new qx.data.Array([\"qx.Desktop\", \"qx.Mobile\", \"qx.Website\",\"qx.Server\"]);\nvar pickerSlot2 = new qx.data.Array([\"1.5.1\", \"1.6.1\", \"2.0.4\", \"2.1.2\", \"3.0\"]);\n\nvar picker = new qx.ui.mobile.dialog.Picker();\npicker.setTitle(\"Picker\");\npicker.addSlot(pickerSlot1);\npicker.addSlot(pickerSlot2);\n\nvar showPickerButton = new qx.ui.mobile.form.Button(\"Show Picker\");\nshowPickerButton.addListener(\"tap\", picker.show, picker);\nthis.getContent().add(showPickerButton);\n\n// Listener when user has confirmed his selection.\n// Contains the selectedIndex and values of all slots in a array.\npicker.addListener(\"confirmSelection\",function(evt){\n   var pickerData = evt.getData();\n}, this);\n\n// Listener for change of picker slots.\npicker.addListener(\"changeSelection\",function(evt){\n   var slotData = evt.getData();\n}, this);\n\n</pre>","!type":"fn()","prototype":{"_createPickerSlot":{"!doc":"<p>Creates a {@link qx.ui.mobile.container.Composite} which represents a picker slot.</p>","!type":"fn(slotIndex: +Integer) -> +qx.ui.mobile.container.Composite"},"_createPickerValueLabel":{"!doc":"<p>Creates a {@link qx.ui.mobile.container.Composite} which represents a picker label.</p>","!type":"fn(textValue: string) -> +qx.ui.mobile.basic.Label"},"_decreaseSelectedIndex":{"!doc":"<p>Decreases the selectedIndex on a specific slot, identified by its content element.</p>","!type":"fn(contentElement: +Element)"},"_disposePickerModel":{"!doc":"<p>Disposes the picker model, and removes all &#8220;changeBubble&#8221; listeners from it.</p>","!type":"fn()"},"_fireConfirmSelection":{"!doc":"<p>Collects data for the &#8220;confirmSelection&#8221; event and fires it.</p>","!type":"fn()"},"_fixPickerSlotHeight":{"!doc":"<p>Calculates the needed picker slot height, by it child labels.</p>","!type":"fn(target: +Element)"},"_getModelByElement":{"!doc":"<p>Returns corresponding model for a picker, identified by its content element.</p>","!type":"fn(contentElement: +Element) -> +qx.data.Array"},"_getSlotIndexByElement":{"!doc":"<p>Returns the slotIndex of a picker slot, identified by its content element.</p>","!type":"fn(contentElement: +Element) -> +Integer"},"_increaseSelectedIndex":{"!doc":"<p>Increases the selectedIndex on a specific slot, identified by its content element.</p>","!type":"fn(contentElement: +Element)"},"_isSelectedIndexValid":{"!doc":"<p>Checks if a selectedIndex of a picker slot is valid.</p>","!type":"fn(contentElement: +Element, selectedIndex: +Integer) -> bool"},"_onChangeBubble":{"!doc":"<p>Handler for <code>changeBubble</code> event.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onTrack":{"!doc":"<p>Handler for <code>track</code> events on picker slot.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_onTrackEnd":{"!doc":"<p>Handler for <code>trackend</code> events on picker slot.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_onTrackStart":{"!doc":"<p>Handler for <code>trackstart</code> events on picker slot.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_removePickerSlots":{"!doc":"<p>Remove all listeners from the picker slot composites and destroys them.</p>","!type":"fn()"},"_render":{"!doc":"<p>Renders this picker widget.</p>","!type":"fn()"},"_renderPickerSlotContent":{"!doc":"<p>Renders the content (the labels) of a picker slot.</p>","!type":"fn(pickerSlot: +qx.ui.mobile.core.Widget, slotIndex: +Integer)"},"_updateAllSlots":{"!doc":"<p>Updates the visual position of all available picker slot elements.</p>","!type":"fn()"},"_updateSlot":{"!doc":"<p>Updates the visual position of the picker slot element,\naccording to the current selectedIndex of the slot.</p>","!type":"fn(targetElement: +Element, useTransition?: bool)"},"addSlot":{"!doc":"<p>Adds an picker slot to the end of the array.</p>","!type":"fn(slotData: +qx.data.Array)"},"confirm":{"!doc":"<p>Confirms the selection, fires &#8220;confirmSelection&#8221; data event and hides the picker dialog.</p>","!type":"fn()"},"getPickerButtonContainer":{"!doc":"<p>Returns the composite which contains the buttons that are needed\nto confirm/cancel the choice.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getSelectedIndex":{"!doc":"<p>Getter for the selectedIndex of a picker slot, identified by its index.</p>","!type":"fn(slotIndex: +Integer) -> +Integer"},"getSlotCount":{"!doc":"<p>Returns the picker slot count, added to this picker.</p>","!type":"fn() -> +Integer"},"removeSlot":{"!doc":"<p>Removes the pickerSlot at the given slotIndex.</p>","!type":"fn(slotIndex: +Integer)"},"setCancelButtonCaption":{"!doc":"<p>Setter for the caption of the picker dialog&#8217;s cancel button.\nDefault is &#8220;Cancel&#8221;.</p>","!type":"fn(caption: string)"},"setConfirmButtonCaption":{"!doc":"<p>Setter for the caption of the picker dialog&#8217;s confirm button.\nDefault is &#8220;OK&#8221;.</p>","!type":"fn(caption: string)"},"setSelectedIndex":{"!doc":"<p>Setter for the selectedIndex of a picker slot, identified by its index.</p>","!type":"fn(slotIndex: +Integer, value: +Integer, useTransition?: bool)"},"show":{"!type":"fn()"}}},"Popup":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The popup represents a widget that gets shown above other widgets,\nusually to present more info/details regarding an item in the application.</p>\n\n<p>There are 3 usages for now:</p>\n\n<pre class=\"javascript\">\nvar widget = new qx.ui.mobile.form.Button(\"Error!\");\nvar popup = new qx.ui.mobile.dialog.Popup(widget);\npopup.show();\n</pre>\n\n<p>Here we show a popup consisting of a single buttons alerting the user\nthat an error has occured.\nIt will be centered to the screen.</p>\n\n<pre class=\"javascript\">\nvar label = new qx.ui.mobile.basic.Label(\"Item1\");\nvar widget = new qx.ui.mobile.form.Button(\"Error!\");\nvar popup = new qx.ui.mobile.dialog.Popup(widget, label);\npopup.show();\nwidget.addListener(\"tap\", function(){\n  popup.hide();\n});\n\n</pre>\n\n<p>In this case everything is as above, except that the popup will get shown next to &#8220;label&#8221;\nso that the user can understand that the info presented is about the &#8220;Item1&#8221;\nwe also add a tap listener to the button that will hide out popup.</p>\n\n<p>Once created, the instance is reused between show/hide calls.</p>\n\n<pre class=\"javascript\">\nvar widget = new qx.ui.mobile.form.Button(\"Error!\");\nvar popup = new qx.ui.mobile.dialog.Popup(widget);\npopup.placeTo(25,100);\npopup.show();\n</pre>\n\n<p>Same as the first example, but this time the popup will be shown at the 25,100 coordinates.</p>","!type":"fn()","prototype":{"__registerEventListener":{"!doc":"<p>Registers all needed event listeners</p>","!type":"fn()"},"__unregisterEventListener":{"!doc":"<p>Unregisters all needed event listeners</p>","!type":"fn()"},"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyTitle":{"!doc":"<p>Applies changes of the property value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: string, old: string)"},"_createTitleWidget":{"!doc":"<p>Creates the title atom widget.</p>","!type":"fn() -> +qx.ui.mobile.basic.Atom"},"_getBlocker":{"!type":"fn() -> +qx.ui.mobile.core.Blocker"},"_initializeChild":{"!doc":"<p>This method creates the container where the popup&#8217;s widget will be placed\nand adds it to the popup.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"_positionToCenter":{"!doc":"<p>Centers this widget to window&#8217;s center position.</p>","!type":"fn()"},"_resetPosition":{"!doc":"<p>Resets the position of this element (left, top, margins&#8230;)</p>","!type":"fn()"},"_trackUserTap":{"!doc":"<p>Tracks the user tap on root and hides the widget if <code>pointerdown</code> event\noccurs outside of the widgets bounds.</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"_updatePosition":{"!doc":"<p>Event handler. Called whenever the position of the popup should be updated.</p>","!type":"fn()"},"add":{"!doc":"<p>Adds the widget that will be shown in this popup. This method can be used in the case when you have removed the widget from the popup\nor you haven&#8217;t passed it in the constructor.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"getHideOnBlockerTap":{"!doc":"<p>Returns the (computed) value of the property <code>hideOnBlockerTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnBlockerTap}.</p>","!type":"fn() -> Object"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getModal":{"!doc":"<p>Returns the (computed) value of the property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn() -> Object"},"getTitle":{"!doc":"<p>Returns the (computed) value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn() -> Object"},"getTitleWidget":{"!doc":"<p>Returns the title widget.</p>","!type":"fn() -> +qx.ui.mobile.basic.Atom"},"hide":{"!doc":"<p>Hides the popup.</p>","!type":"fn()"},"hideWithDelay":{"!doc":"<p>Hides the popup after a given time delay.</p>","!type":"fn(delay: +Integer)"},"initHideOnBlockerTap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideOnBlockerTap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnBlockerTap}.</p>","!type":"fn(value: Object) -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initModal":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>modal</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn(value: Object) -> Object"},"initTitle":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>title</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: Object) -> Object"},"isHideOnBlockerTap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>hideOnBlockerTap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnBlockerTap}.</p>","!type":"fn() -> bool"},"isModal":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>modal</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn() -> bool"},"isShown":{"!doc":"<p>Returns the shown state of this popup.</p>","!type":"fn() -> bool"},"placeTo":{"!doc":"<p>This method positions the popup widget at the coordinates specified.</p>","!type":"fn(left: +Integer, top: +Integer)"},"removeWidget":{"!doc":"<p>This method removes the widget shown in the popup.</p>","!type":"fn() -> +qx.ui.mobile.core.Widget"},"resetHideOnBlockerTap":{"!doc":"<p>Resets the user value of the property <code>hideOnBlockerTap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnBlockerTap}.</p>","!type":"fn()"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetModal":{"!doc":"<p>Resets the user value of the property <code>modal</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn()"},"resetTitle":{"!doc":"<p>Resets the user value of the property <code>title</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn()"},"setAnchor":{"!doc":"<p>A widget to attach this popup to.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"setHideOnBlockerTap":{"!doc":"<p>Sets the user value of the property <code>hideOnBlockerTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnBlockerTap}.</p>","!type":"fn(value: Object) -> Object"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setModal":{"!doc":"<p>Sets the user value of the property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn(value: Object) -> Object"},"setTitle":{"!doc":"<p>Sets the user value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: Object) -> Object"},"show":{"!doc":"<p>This method shows the popup.\nFirst it updates the position, then registers the event handlers, and shows it.</p>","!type":"fn()"},"toggleHideOnBlockerTap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>hideOnBlockerTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideOnBlockerTap}.</p>","!type":"fn() -> bool"},"toggleModal":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn() -> bool"},"toggleVisibility":{"!doc":"<p>Toggles the visibility of this popup.</p>","!type":"fn()"}}}},"embed":{"Canvas":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>Creates a <span class=\"caps\">HTML</span> canvas widget in your mobile application.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is an example of how to use the canvas widget.</p>\n\n<pre class=\"javascript\">\nvar canvas = new qx.ui.mobile.embed.Canvas();\n\ncanvas.setWidth(150);\ncanvas.setHeight(150);\nthis.getContent().add(canvas);\n\nvar ctx = canvas.getContext2d();\nctx.strokeStyle = '#3D72C9';\nctx.beginPath();\nctx.arc(75,85,50,0,Math.PI*2,true);\nctx.moveTo(110,85);\nctx.arc(75,85,35,0,Math.PI,false);\nctx.moveTo(65,75);\nctx.arc(60,75,5,0,Math.PI*2,true);\nctx.moveTo(95,75);\nctx.arc(90,75,5,0,Math.PI*2,true);\nctx.stroke();\n</pre>","!type":"fn()","prototype":{"_getTagName":{"!type":"fn()"},"getCanvas":{"!doc":"<p>Get the canvas element [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvas\">W3C-HMTL5</a>]</p>","!type":"fn() -> +Element"},"getContext2d":{"!doc":"<p>Get the canvas&#8217; 2D rendering context\n[<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].\nAll drawing operations are performed on this context.</p>","!type":"fn() -> +CanvasRenderingContext2D"},"getHeight":{"!doc":"<p>Get the height attribute of the canvas element</p>","!type":"fn() -> +Integer"},"getWidth":{"!doc":"<p>Get the width attribute of the canvas element</p>","!type":"fn() -> +Integer"},"setHeight":{"!doc":"<p>Set the height attribute of the canvas element. This property controls the\nsize of the canvas coordinate space.</p>","!type":"fn(height: +Integer)"},"setWidth":{"!doc":"<p>Set the width attribute of the canvas element. This property controls the\nsize of the canvas coordinate space.</p>","!type":"fn(width: +Integer)"}}},"Html":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The Html widget embeds plain <span class=\"caps\">HTML</span> code into the application</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the html widget.</p>\n\n<pre class=\"javascript\">\nvar html = new qx.ui.mobile.embed.Html();\nhtml.setHtml(\"<h1>Hello World</h1>\");\n</pre>","!type":"fn()","prototype":{"_applyHtml":{"!doc":"<p>Applies changes of the property value of the property <code>html</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn(value: string, old: string)"},"getHtml":{"!doc":"<p>Returns the (computed) value of the property <code>html</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn() -> Object"},"initHtml":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>html</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn(value: Object) -> Object"},"resetHtml":{"!doc":"<p>Resets the user value of the property <code>html</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn()"},"setHtml":{"!doc":"<p>Sets the user value of the property <code>html</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #html}.</p>","!type":"fn(value: Object) -> Object"}}}},"form":{"Button":{"!proto":"qx.ui.mobile.basic.Atom","!doc":"<p>A Button widget.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var button = new qx.ui.mobile.form.Button(\"Hello World\");\n\n  button.addListener(\"tap\", function(e) {\n    alert(\"Button was clicked\");\n  }, this);\n\n  this.getRoot.add(button);\n</pre>\n\n<p>This example creates a button with the label &#8220;Hello World&#8221; and attaches an\nevent listener to the {@link qx.ui.mobile.core.Widget#tap} event.</p>","prototype":{"getValue":{"!doc":"<p>Returns the set value.</p>","!type":"fn() -> string"},"setValue":{"!doc":"<p>Sets the value.</p>","!type":"fn(value: string)"}}},"CheckBox":{"!proto":"qx.ui.mobile.form.Input","!doc":"<p>The Checkbox is the mobile correspondent of the html checkbox.</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\n  var checkBox = new qx.ui.mobile.form.CheckBox();\n  var title = new qx.ui.mobile.form.Title(\"Title\");\n\n  checkBox.setModel(\"Title Activated\");\n  checkBox.bind(\"model\", title, \"value\");\n\n  checkBox.addListener(\"changeValue\", function(evt){\n    this.setModel(evt.getdata() ? \"Title Activated\" : \"Title Deactivated\");\n  });\n\n  this.getRoot.add(checkBox);\n  this.getRoot.add(title);\n</pre>\n\n<p>This example adds 2 widgets , a checkBox and a Title and binds them together by their model and value properties.\nWhen the user taps on the checkbox, its model changes and it is reflected in the Title&#8217;s value.</p>","!type":"fn()","prototype":{"_getTagName":{"!type":"fn()"},"_getType":{"!type":"fn()"},"_getValue":{"!doc":"<p>Gets the value [true/false] of this checkbox.\nIt is called by getValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn() -> bool"},"_onTap":{"!doc":"<p>Handler for tap events.</p>","!type":"fn()"},"_setValue":{"!doc":"<p>Sets the value [true/false] of this checkbox.\nIt is called by setValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn(value: bool)"}}},"Form":{"!proto":"qx.ui.form.Form","!doc":"<p>Representation of a form. A form widget can contain one or more {@link Row} widgets.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is an example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var title = new qx.ui.mobile.form.Title(\"Group\");\n  var form = new qx.ui.mobile.form.Form();\n  form.add(new qx.ui.mobile.form.TextField(), \"Username: \");\n\n  this.getRoot().add(title);\n  this.getRoot().add(new qx.ui.mobile.form.renderer.Single(form));\n</pre>\n\n<p>This example creates a form and adds a row with a text field in it.</p>","!type":"fn()","prototype":{"_createResetter":{"!type":"fn()"},"_getItemByIndex":{"!doc":"<p>Gets the item with the given group and rowIndex.</p>","!type":"fn(groupIndex: +Integer, rowIndex: +Integer) -> +qx.ui.form.IForm"},"getInvalidItems":{"!doc":"<p>Returns the invalid items of the form, which were determined by {@link qx.ui.mobile.form.Form#validate} before.\nIt returns an empty array if no items are invalid.</p>","!type":"fn() -> +qx.ui.mobile.core.Widget"},"hideRow":{"!doc":"<p>Makes a row invisible, identified by its group and row index.</p>","!type":"fn(groupIndex: +Integer, rowIndex: +Integer)"},"reset":{"!type":"fn()"},"setRenderer":{"!doc":"<p>Setter for the renderer private variable</p>","!type":"fn(renderer: +qx.ui.mobile.form.renderer.AbstractRenderer)"},"showRow":{"!doc":"<p>Makes a row visible, identified by its group and row index.</p>","!type":"fn(groupIndex: +Integer, rowIndex: +Integer)"},"validate":{"!doc":"<p>Validates the form using the\n{@link qx.ui.form.validation.Manager#validate} method.</p>","!type":"fn() -> bool"}}},"Group":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>A group widget arranges several widgets visual.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var title = new qx.ui.mobile.form.Title(\"Group\");\n  var list = new qx.ui.mobile.list.List();\n  var group = new qx.ui.mobile.form.Group([list]);\n\n  this.getRoot.add(title);\n  this.getRoot.add(group);\n</pre>\n\n<p>This example creates a group and adds a list to it.</p>","!type":"fn()","prototype":{"_onChangeShowBorder":{"!doc":"<p>Reacts on change of showBorder property.</p>","!type":"fn()"},"getShowBorder":{"!doc":"<p>Returns the (computed) value of the property <code>showBorder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBorder}.</p>","!type":"fn() -> Object"},"initShowBorder":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showBorder</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showBorder}.</p>","!type":"fn(value: Object) -> Object"},"isShowBorder":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showBorder</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBorder}.</p>","!type":"fn() -> bool"},"resetShowBorder":{"!doc":"<p>Resets the user value of the property <code>showBorder</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showBorder}.</p>","!type":"fn()"},"setShowBorder":{"!doc":"<p>Sets the user value of the property <code>showBorder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBorder}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowBorder":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showBorder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBorder}.</p>","!type":"fn() -> bool"}}},"Input":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>Abstract class for all input fields.</p>","!type":"fn()","prototype":{"__getScrollContainer":{"!doc":"<p>Returns the parent scroll container of this widget.</p>","!type":"fn() -> +qx.ui.mobile.container.Scroll"},"_getTagName":{"!type":"fn()"},"_getType":{"!doc":"<p>Returns the type of the input field. Override this method in the\nspecialized input class.</p>","!type":"fn()"},"_onSelected":{"!doc":"<p>Handles the <code>click</code> and <code>focus</code> event on this input widget.</p>","!type":"fn(evt: +qx.event.type.Event)"}}},"Label":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The label widget displays a text or <span class=\"caps\">HTML</span> content in form context.</p>\n\n<p>It uses the html tag <label>, for making it possible to set the\n&#8220;for&#8221; attribute.</p>\n\n<p>The &#8220;for&#8221; attribute specifies which form element a label is bound to.\nA tap on the label is forwarded to the bound element.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var checkBox = new qx.ui.mobile.form.CheckBox();\n  var label = new qx.ui.mobile.form.Label(\"Label for CheckBox\");\n\n  label.setLabelFor(checkBox.getId());\n\n  this.getRoot().add(label);\n  this.getRoot().add(checkBox);\n</pre>\n\n<p>This example create a widget to display the label.</p>","!type":"fn()","prototype":{"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object, old: Object)"},"_applyWrap":{"!doc":"<p>Applies changes of the property value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: bool, old: bool)"},"_changeEnabled":{"!doc":"<p>Event handler for the <code>changeEnabled</code> event on the target.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_getTagName":{"!type":"fn()"},"_onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"_onTap":{"!doc":"<p>Handler for <code>tap</code> event on the Label. This event will be delegated to target widget.</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"getValue":{"!doc":"<p>Returns the (computed) value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn() -> Object"},"getWrap":{"!doc":"<p>Returns the (computed) value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> Object"},"initValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>value</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"initWrap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>wrap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"isWrap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>wrap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"},"resetValue":{"!doc":"<p>Resets the user value of the property <code>value</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn()"},"resetWrap":{"!doc":"<p>Resets the user value of the property <code>wrap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn()"},"setLabelFor":{"!doc":"<p>Setter for the &#8220;for&#8221; attribute of this label.\nThe &#8220;for&#8221; attribute specifies which form element a label is bound to.</p>","!type":"fn(elementId: string)"},"setValue":{"!doc":"<p>Sets the user value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: Object) -> Object"},"setWrap":{"!doc":"<p>Sets the user value of the property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn(value: Object) -> Object"},"toggleWrap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>wrap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #wrap}.</p>","!type":"fn() -> bool"}}},"MState":{"!doc":"<p>The mixin contains all functionality to provide methods\nfor form elements to manipulate their state. [usually &#8220;valid&#8221; and &#8220;invalid&#8221;]</p>","prototype":{"addState":{"!doc":"<p>Adds a state to the element</p>","!type":"fn(state: string)"},"hasState":{"!doc":"<p>Checkes whether the element has the state passed as argument</p>","!type":"fn(state: string) -> bool"},"removeState":{"!doc":"<p>Removes a state from the element</p>","!type":"fn(state: string)"},"replaceState":{"!doc":"<p>Replaces a state of the element with a new state.\nIf the element doesn&#8217;t have the state to be removed, then th new state will\njust be added.</p>","!type":"fn(oldState: string, newState: string)"}}},"MText":{"!doc":"<p>The mixin contains all functionality to provide common properties for\ntext fields.</p>","!type":"fn()","prototype":{"_applyMaxLength":{"!doc":"<p>Applies changes of the property value of the property <code>maxLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn(value: +PositiveInteger, old: +PositiveInteger)"},"_applyPlaceholder":{"!doc":"<p>Applies changes of the property value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: string, old: string)"},"blur":{"!doc":"<p>Removes the focus from this widget.</p>","!type":"fn()"},"focus":{"!doc":"<p>Points the focus of the form to this widget.</p>","!type":"fn()"},"getMaxLength":{"!doc":"<p>Returns the (computed) value of the property <code>maxLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn() -> Object"},"getPlaceholder":{"!doc":"<p>Returns the (computed) value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn() -> Object"},"getReadOnly":{"!doc":"<p>Returns the (computed) value of the property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn() -> Object"},"initMaxLength":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxLength</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn(value: Object) -> Object"},"initPlaceholder":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>placeholder</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"initReadOnly":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>readOnly</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn(value: Object) -> Object"},"isReadOnly":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>readOnly</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn() -> bool"},"resetMaxLength":{"!doc":"<p>Resets the user value of the property <code>maxLength</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn()"},"resetPlaceholder":{"!doc":"<p>Resets the user value of the property <code>placeholder</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn()"},"resetReadOnly":{"!doc":"<p>Resets the user value of the property <code>readOnly</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn()"},"setMaxLength":{"!doc":"<p>Sets the user value of the property <code>maxLength</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxLength}.</p>","!type":"fn(value: Object) -> Object"},"setPlaceholder":{"!doc":"<p>Sets the user value of the property <code>placeholder</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #placeholder}.</p>","!type":"fn(value: Object) -> Object"},"setReadOnly":{"!doc":"<p>Sets the user value of the property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn(value: Object) -> Object"},"toggleReadOnly":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>readOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #readOnly}.</p>","!type":"fn() -> bool"}}},"MValue":{"!doc":"<p>The mixin contains all functionality to provide a value property for input\nwidgets.</p>","!type":"fn()","prototype":{"__fireChangeValue":{"!doc":"<p>Fires the {@link #changeValue} event.</p>","!type":"fn(value: Object)"},"_convertValue":{"!doc":"<p>Converts the incoming value.</p>","!type":"fn(value: Object) -> Object"},"_getCaretPosition":{"!doc":"<p>Returns the caret position of this widget.</p>","!type":"fn() -> +Integer"},"_onBlur":{"!doc":"<p>Handler for <code>blur</code> event.</p>","!type":"fn()"},"_onChangeContent":{"!doc":"<p>Event handler. Called when the {@link #changeValue} event occurs.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onFocus":{"!doc":"<p>Handler for <code>focus</code> event.</p>","!type":"fn()"},"_onInput":{"!doc":"<p>Event handler. Called when the {@link #input} event occurs.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_setCaretPosition":{"!doc":"<p>Sets the caret position on this widget.</p>","!type":"fn(position: +Integer)"},"getLiveUpdate":{"!doc":"<p>Returns the (computed) value of the property <code>liveUpdate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn() -> Object"},"getValue":{"!doc":"<p>Returns the set value.</p>","!type":"fn() -> Object"},"hasFocus":{"!doc":"<p>Returns whether this widget has focus or not.</p>","!type":"fn() -> bool"},"initLiveUpdate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>liveUpdate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn(value: Object) -> Object"},"isLiveUpdate":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>liveUpdate</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn() -> bool"},"resetLiveUpdate":{"!doc":"<p>Resets the user value of the property <code>liveUpdate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn()"},"resetValue":{"!doc":"<p>Resets the value.</p>","!type":"fn()"},"setLiveUpdate":{"!doc":"<p>Sets the user value of the property <code>liveUpdate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn(value: Object) -> Object"},"setValue":{"!doc":"<p>Sets the value.</p>","!type":"fn(value: Object)"},"toggleLiveUpdate":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>liveUpdate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveUpdate}.</p>","!type":"fn() -> bool"}}},"NumberField":{"!proto":"qx.ui.mobile.form.Input","!doc":"<p>The NumberField is a single-line number input field. It uses HTML5 input field type\n&#8220;number&#8221; and the attribute &#8220;min&#8221; ,&#8220;max&#8221; and &#8220;step&#8221;. The attributes can be used\nfor form validation {@link qx.ui.form.validation.Manager}.</p>","!type":"fn()","prototype":{"_getType":{"!type":"fn()"},"_onChangeMaximum":{"!doc":"<p>Called when changed the property maximum.\nDelegates value change on <span class=\"caps\">DOM</span> element.</p>","!type":"fn(value: +undefined, old: +undefined)"},"_onChangeMinimum":{"!doc":"<p>Called when changed the property minimum.\nDelegates value change on <span class=\"caps\">DOM</span> element.</p>","!type":"fn(value: +undefined, old: +undefined)"},"_onChangeStep":{"!doc":"<p>Called when changed the property step.\nDelegates value change on <span class=\"caps\">DOM</span> element.</p>","!type":"fn(value: +undefined, old: +undefined)"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getMinimum":{"!doc":"<p>Returns the (computed) value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn() -> Object"},"getStep":{"!doc":"<p>Returns the (computed) value of the property <code>step</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn() -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initMinimum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"initStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>step</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn(value: Object) -> Object"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetMinimum":{"!doc":"<p>Resets the user value of the property <code>minimum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn()"},"resetStep":{"!doc":"<p>Resets the user value of the property <code>step</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn()"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setMinimum":{"!doc":"<p>Sets the user value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"setStep":{"!doc":"<p>Sets the user value of the property <code>step</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn(value: Object) -> Object"}}},"PasswordField":{"!proto":"qx.ui.mobile.form.TextField","!doc":"<p>The PasswordField is a single-line password input field.</p>","prototype":{"_getType":{"!type":"fn()"}}},"RadioButton":{"!proto":"qx.ui.mobile.form.Input","!doc":"<p>The Radio button for mobile.</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\n   var form = new qx.ui.mobile.form.Form();\n\n   var radio1 = new qx.ui.mobile.form.RadioButton();\n   var radio2 = new qx.ui.mobile.form.RadioButton();\n   var radio3 = new qx.ui.mobile.form.RadioButton();\n\n   var group = new qx.ui.mobile.form.RadioGroup(radio1, radio2, radio3);\n\n   form.add(radio1, \"Germany\");\n   form.add(radio2, \"UK\");\n   form.add(radio3, \"USA\");\n\n   this.getRoot.add(new qx.ui.mobile.form.renderer.Single(form));\n</pre>","!type":"fn()","prototype":{"_applyGroup":{"!doc":"<p>The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons</p>","!type":"fn(value: +qx.ui.form.RadioGroup, old: +qx.ui.form.RadioGroup)"},"_getTagName":{"!type":"fn()"},"_getType":{"!type":"fn()"},"_getValue":{"!doc":"<p>Gets the value [true/false] of this radio button.\nIt is called by getValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn() -> bool"},"_onTap":{"!doc":"<p>Reacts on tap on radio button.</p>","!type":"fn()"},"_setValue":{"!doc":"<p>Sets the value [true/false] of this radio button.\nIt is called by setValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn(value: bool)"},"getGroup":{"!doc":"<p>Returns the (computed) value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn() -> Object"},"initGroup":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>group</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"},"resetGroup":{"!doc":"<p>Resets the user value of the property <code>group</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn()"},"setGroup":{"!doc":"<p>Sets the user value of the property <code>group</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #group}.</p>","!type":"fn(value: Object) -> Object"}}},"RadioGroup":{"!proto":"qx.ui.form.RadioGroup","!doc":"<p>The Radio button group for mobile usage.</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\n   var form = new qx.ui.mobile.form.Form();\n\n   var radio1 = new qx.ui.mobile.form.RadioButton();\n   var radio2 = new qx.ui.mobile.form.RadioButton();\n   var radio3 = new qx.ui.mobile.form.RadioButton();\n\n   var radiogroup = new qx.ui.mobile.form.RadioGroup(radio1, radio2, radio3);\n\n   form.add(radio1, \"Germany\");\n   form.add(radio2, \"UK\");\n   form.add(radio3, \"USA\");\n\n   this.getRoot.add(new qx.ui.mobile.form.renderer.Single(form));\n</pre>"},"renderer":{"AbstractRenderer":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>AbstractRenderer is an abstract class used to encapsulate\nbehaviours of how a form can be rendered into a mobile page.\nIts subclasses can extend it and override {@link #addItems} and {@link #addButton}\nmethods in order to customize the way the form gets into the <span class=\"caps\">DOM</span>.</p>","!type":"fn()","prototype":{"_onFormChange":{"!doc":"<p>Handler responsible for updating the rendered widget as soon as the\nform changes.</p>","!type":"fn()"},"_render":{"!doc":"<p>Renders the for: add&#8217;s the items and buttons.</p>","!type":"fn()"},"addButton":{"!type":"fn(button: +undefined)"},"addItems":{"!type":"fn(items: +undefined, names: +undefined, title: +undefined)"},"resetForm":{"!doc":"<p>Resets the errors for the form by removing any error messages\ninserted into <span class=\"caps\">DOM</span> in the case of invalid form elements</p>","!type":"fn()"},"showErrorForItem":{"!doc":"<p>Shows an error to the user when a form element is in invalid state\nusually it prints an error message, so that user can rectify the filling of the form element.</p>","!type":"fn(item: +qx.ui.mobile.core.Widget)"}}},"Single":{"!proto":"qx.ui.mobile.form.renderer.AbstractRenderer","!doc":"<p>Single renderer is a class used to render forms into a mobile page.\nIt displays a label above or next to each form element.</p>","!type":"fn()","prototype":{"_addGroupFooterRow":{"!doc":"<p>Adds an row group footer.</p>","!type":"fn()"},"_addGroupHeader":{"!doc":"<p>Adds a row with the name of a group of elements\nWhen you want to group certain form elements, this methods implements\nthe way the header of that group is presented.</p>","!type":"fn(title: string)"},"_addGroupHeaderRow":{"!doc":"<p>Adds an row group header.</p>","!type":"fn()"},"_addInOneLine":{"!type":"fn(item: +qx.ui.mobile.core.Widget, name: string)"},"_addInScrollComposite":{"!type":"fn(item: +qx.ui.mobile.core.Widget, name: string)"},"_addInSeparateLines":{"!type":"fn(item: +qx.ui.mobile.core.Widget, name: string)"},"_addRow":{"!doc":"<p>Adds a label and its according widget in a row and applies the given layout.</p>","!type":"fn(item: +qx.ui.mobile.core.Widget, name: string, layout: +qx.ui.mobile.layout.Abstract)"},"_addSeparationRow":{"!doc":"<p>Adds a separation line into the form.</p>","!type":"fn()"},"_addToScrollContainer":{"!doc":"<p>Wraps the given item with a {@link qx.ui.mobile.container.Scroll scroll} container.</p>","!type":"fn(item: +qx.ui.mobile.core.Widget, name: string)"},"_getParentRow":{"!doc":"<p>Returns the parent row of the item.</p>","!type":"fn(item: +qx.ui.form.IForm) -> +qx.ui.mobile.core.Widget"},"_getTagName":{"!type":"fn()"},"_isOneLineWidget":{"!doc":"<p>Determines whether the given item can be display in one line\nor whether a separate line for the text label is needed.</p>","!type":"fn(item: +qx.ui.mobile.core.Widget) -> bool"},"_onFormChange":{"!type":"fn()"},"addButton":{"!type":"fn(button: +undefined)"},"addItems":{"!type":"fn(items: +undefined, names: +undefined, title: +undefined)"},"hideItem":{"!doc":"<p>Hides a single item of this form</p>","!type":"fn(item: +qx.ui.form.IForm)"},"resetForm":{"!type":"fn()"},"showErrorForItem":{"!type":"fn(item: +undefined)"},"showItem":{"!doc":"<p>Shows a single item of this form</p>","!type":"fn(item: +qx.ui.form.IForm)"}}},"SinglePlaceholder":{"!proto":"qx.ui.mobile.form.renderer.Single","!doc":"<p>SinglePlaceholder is a class used to render forms into a mobile page.\nIt presents a label into the placeholder of the form elements</p>","!type":"fn()","prototype":{"addItems":{"!type":"fn(items: +undefined, names: +undefined, title: +undefined)"}}}},"Resetter":{"!proto":"qx.ui.form.Resetter","!doc":"<p>The resetter is responsible for managing a set of items and resetting these\nitems on a {@link qx.ui.mobile.form.Resetter#reset} call.</p>","prototype":{"_supportsValue":{"!type":"fn(formItem: +undefined)"}}},"Row":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>The Row widget represents a row in a {@link Form}.</p>","!type":"fn()","prototype":{"_getTagName":{"!type":"fn()"},"getSelectable":{"!doc":"<p>Returns the (computed) value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> Object"},"initSelectable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"isSelectable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>selectable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"},"resetSelectable":{"!doc":"<p>Resets the user value of the property <code>selectable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn()"},"setSelectable":{"!doc":"<p>Sets the user value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"toggleSelectable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"}}},"SelectBox":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The SelectBox</p>\n\n<p>an example, how to use the SelectBox:\n<strong>Example</strong></p>\n\n<pre class=\"javascript\">\n   var page1 = new qx.ui.mobile.page.Page();\n   page1.addListener(\"initialize\", function()\n   {\n     var sel = new qx.ui.mobile.form.SelectBox();\n     page1.add(sel);\n     var model = new qx.data.Array([\"item1\",\"item2\"]);\n     sel.setModel(model);\n     model.push(\"item3\");\n\n     var but = new qx.ui.mobile.form.Button(\"setSelection\");\n     page1.add(but);\n     but.addListener(\"tap\", function(){\n       sel.setSelection(\"item3\");\n     }, this);\n\n     sel.addListener(\"changeSelection\", function(evt) {\n       console.log(evt.getData());\n     }, this);\n\n     var title = new qx.ui.mobile.form.Title(\"item2\");\n     title.bind(\"value\",sel,\"value\");\n     sel.bind(\"value\",title,\"value\");\n     page1.add(title);\n  },this);\n\n  page1.show();\n </pre>","!type":"fn()","prototype":{"__showSelectionDialog":{"!doc":"<p>Refreshs selection dialogs model, and shows it.</p>","!type":"fn()"},"_applyModel":{"!doc":"<p>Sets the model property to the new value</p>","!type":"fn(value: +qx.data.Array, old?: +qx.data.Array)"},"_applyNullable":{"!doc":"<p>Applies changes of the property value of the property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelection":{"!doc":"<p>Applies changes of the property value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object, old: Object)"},"_createSelectionDialog":{"!doc":"<p>Creates the menu dialog. Override this to customize the widget.</p>","!type":"fn() -> +qx.ui.mobile.dialog.Menu"},"_getTagName":{"!type":"fn()"},"_getValue":{"!doc":"<p>Get the text value of this\nIt is called by setValue method of qx.ui.mobile.form.MValue mixin.</p>","!type":"fn() -> number"},"_onChangeSelection":{"!doc":"<p>Gets the selectedIndex out of change selection event and renders view.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onTap":{"!doc":"<p>Handler for <code>tap</code> event on this widget.</p>","!type":"fn(evt: +qx.event.type.Tap)"},"_render":{"!doc":"<p>Renders this SelectBox. Override this if you would like to display the\nvalues of the SelectBox in a different way than the default.</p>","!type":"fn()"},"_setValue":{"!doc":"<p>Sets the selected text value of this SelectBox.</p>","!type":"fn(value: string)"},"_validateSelection":{"!doc":"<p>Validates the selection value.</p>","!type":"fn(value: +Integer)"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getNullable":{"!doc":"<p>Returns the (computed) value of the property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn() -> Object"},"getSelection":{"!doc":"<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn() -> Object"},"getSelectionDialog":{"!doc":"<p>Returns the SelectionDialog.</p>","!type":"fn() -> +qx.ui.mobile.dialog.Menu"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initNullable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nullable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn(value: Object) -> Object"},"initSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"isNullable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>nullable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn() -> bool"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetNullable":{"!doc":"<p>Resets the user value of the property <code>nullable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn()"},"setClearButtonLabel":{"!doc":"<p>Set the ClearButton label of the selection dialog.</p>","!type":"fn(value: string)"},"setDialogTitle":{"!doc":"<p>Sets the dialog title on the selection dialog.</p>","!type":"fn(title: string)"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setNullable":{"!doc":"<p>Sets the user value of the property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn(value: Object) -> Object"},"setSelection":{"!doc":"<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"toggleNullable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>nullable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nullable}.</p>","!type":"fn() -> bool"}}},"Slider":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The Slider widget provides horizontal slider.</p>\n\n<p>The Slider is the classic widget for controlling a bounded value.\nIt lets the user move a slider handle along a horizontal\ngroove and translates the handle&#8217;s position into an integer value\nwithin the defined range.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n   var slider= new qx.ui.mobile.form.Slider().set({\n      minimum : 0,\n      maximum : 10,\n      step : 2\n    });\n    slider.addListener(\"changeValue\", handler, this);\n\n  this.getRoot.add(slider);\n</pre>\n\n<p>This example creates a slider and attaches an\nevent listener to the {@link #changeValue} event.</p>","!type":"fn()","prototype":{"_applyDisplayValue":{"!doc":"<p>Applies changes of the property value of the property <code>displayValue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #displayValue}.</p>","!type":"fn(value: Object, old: Object)"},"_createContainerElement":{"!type":"fn()"},"_createKnobElement":{"!doc":"<p>Creates the knob element.</p>","!type":"fn() -> +Element"},"_getKnobElement":{"!doc":"<p>Returns the knob <span class=\"caps\">DOM</span> element.</p>","!type":"fn() -> +Element"},"_getOffsetForKnob":{"!type":"fn(position: +Integer) -> +Integer"},"_getOverallSteps":{"!doc":"<p>Return the overall number of steps.</p>","!type":"fn() -> +Integer"},"_getPixelPerStep":{"!doc":"<p>Return the number of pixels per step.</p>","!type":"fn(width: +Integer) -> +Integer"},"_getPosition":{"!doc":"<p>Returns the current position of the knob.</p>","!type":"fn(documentLeft: +Integer) -> +Integer"},"_getRange":{"!doc":"<p>Return the range between {@link #maximum} and {@link #minimum}.</p>","!type":"fn() -> +Integer"},"_getValue":{"!doc":"<p>Gets the value [true/false] of this slider.\nIt is called by getValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn() -> +Integer"},"_limitValue":{"!doc":"<p>Limits a value to the set {@link #minimum} and {@link #maximum} properties.</p>","!type":"fn(value: +Integer) -> +Integer"},"_onPointerDown":{"!doc":"<p>Event handler. Called when the <code>pointerdown</code> event occurs.</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"_onTrack":{"!doc":"<p>Event handler. Called when the <code>track</code> event occurs.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_percentToPosition":{"!doc":"<p>Converts the given percent to the position of the knob.</p>","!type":"fn(width: +Integer, percent: +Integer) -> +Integer"},"_positionToValue":{"!doc":"<p>Converts the given position to the corresponding value.</p>","!type":"fn(position: +Integer) -> +Integer"},"_refresh":{"!doc":"<p>Refreshes the slider and the knob position.</p>","!type":"fn()"},"_registerEventListener":{"!doc":"<p>Registers all needed event listener.</p>","!type":"fn()"},"_setValue":{"!doc":"<p>Sets the value of this slider.\nIt is called by setValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn(value: +Integer)"},"_unregisterEventListener":{"!doc":"<p>Unregisters all needed event listener.</p>","!type":"fn()"},"_updateKnobPosition":{"!doc":"<p>Updates the knob position based on the current value.</p>","!type":"fn()"},"_updateSizes":{"!doc":"<p>Updates all internal sizes of the slider.</p>","!type":"fn()"},"_valueToPercent":{"!doc":"<p>Converts the given value to percent.</p>","!type":"fn(value: +Integer) -> +Integer"},"getDisplayValue":{"!doc":"<p>Returns the (computed) value of the property <code>displayValue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #displayValue}.</p>","!type":"fn() -> Object"},"getMaximum":{"!doc":"<p>Returns the (computed) value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn() -> Object"},"getMinimum":{"!doc":"<p>Returns the (computed) value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn() -> Object"},"getReverseDirection":{"!doc":"<p>Returns the (computed) value of the property <code>reverseDirection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reverseDirection}.</p>","!type":"fn() -> Object"},"getStep":{"!doc":"<p>Returns the (computed) value of the property <code>step</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn() -> Object"},"initDisplayValue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>displayValue</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #displayValue}.</p>","!type":"fn(value: Object) -> Object"},"initMaximum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"initMinimum":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimum</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"initReverseDirection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>reverseDirection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #reverseDirection}.</p>","!type":"fn(value: Object) -> Object"},"initStep":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>step</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn(value: Object) -> Object"},"isReverseDirection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>reverseDirection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reverseDirection}.</p>","!type":"fn() -> bool"},"nextValue":{"!doc":"<p>Increments the current value.</p>","!type":"fn()"},"previousValue":{"!doc":"<p>Decrements the current value.</p>","!type":"fn()"},"resetDisplayValue":{"!doc":"<p>Resets the user value of the property <code>displayValue</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #displayValue}.</p>","!type":"fn()"},"resetMaximum":{"!doc":"<p>Resets the user value of the property <code>maximum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn()"},"resetMinimum":{"!doc":"<p>Resets the user value of the property <code>minimum</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn()"},"resetReverseDirection":{"!doc":"<p>Resets the user value of the property <code>reverseDirection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #reverseDirection}.</p>","!type":"fn()"},"resetStep":{"!doc":"<p>Resets the user value of the property <code>step</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn()"},"setDisplayValue":{"!doc":"<p>Sets the user value of the property <code>displayValue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #displayValue}.</p>","!type":"fn(value: Object) -> Object"},"setMaximum":{"!doc":"<p>Sets the user value of the property <code>maximum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximum}.</p>","!type":"fn(value: Object) -> Object"},"setMinimum":{"!doc":"<p>Sets the user value of the property <code>minimum</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimum}.</p>","!type":"fn(value: Object) -> Object"},"setReverseDirection":{"!doc":"<p>Sets the user value of the property <code>reverseDirection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reverseDirection}.</p>","!type":"fn(value: Object) -> Object"},"setStep":{"!doc":"<p>Sets the user value of the property <code>step</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #step}.</p>","!type":"fn(value: Object) -> Object"},"toggleReverseDirection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>reverseDirection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reverseDirection}.</p>","!type":"fn() -> bool"}}},"TextArea":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The TextArea is a multi-line text input field.</p>","!type":"fn()","prototype":{"__getScrollContainer":{"!doc":"<p>Returns the parent scroll container of this widget.</p>","!type":"fn() -> +qx.ui.mobile.container.Scroll"},"_fixChildElementsHeight":{"!doc":"<p>Synchronizes the elements.scrollHeight and its height.\nNeeded for making textArea scrollable.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_getTagName":{"!type":"fn()"}}},"TextField":{"!proto":"qx.ui.mobile.form.Input","!doc":"<p>The TextField is a single-line text input field.</p>","!type":"fn()","prototype":{"_getType":{"!type":"fn()"},"_onKeyPress":{"!doc":"<p>Event handler for <code>keypress</code> event.</p>","!type":"fn(evt: +qx.event.type.KeySequence)"}}},"Title":{"!proto":"qx.ui.mobile.basic.Label","!doc":"<p>Shows a title text for {@link Form} or {@link Group}.</p>","prototype":{"_getTagName":{"!type":"fn()"}}},"ToggleButton":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>A toggle Button widget</p>\n\n<p>If the user tap the button, the button toggles between the <code>ON</code>\nand <code><span class=\"caps\">OFF</span></code> state.</p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var button = new qx.ui.mobile.form.ToggleButton(false,\"YES\",\"NO\");\n\n  button.addListener(\"changeValue\", function(e) {\n    alert(e.getData());\n  }, this);\n\n  this.getRoot.add(button);\n</pre>\n\n<p>This example creates a toggle button and attaches an\nevent listener to the {@link #changeValue} event.</p>","!type":"fn()","prototype":{"_checkLastPointerTime":{"!doc":"<p>Checks if last touch event (swipe,tap) is more than 500ms ago.\nBugfix for several simulator/emulator, when tap is immediately followed by a swipe.</p>","!type":"fn() -> bool"},"_createSwitch":{"!doc":"<p>Creates the switch control of the widget.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_getChild":{"!doc":"<p>Returns the child control of the toggle button.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_getValue":{"!doc":"<p>Gets the value [true/false] of this toggle button.\nIt is called by getValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn() -> bool"},"_onSwipe":{"!doc":"<p>Event handler. Called when the swipe event occurs.\nToggles the button, when.</p>","!type":"fn(evt: +qx.event.type.Swipe)"},"_onTap":{"!doc":"<p>Event handler. Called when the tap event occurs.\nToggles the button.</p>","!type":"fn(evt: +qx.event.type.Tap)"},"_setValue":{"!doc":"<p>Sets the value [true/false] of this toggle button.\nIt is called by setValue method of qx.ui.mobile.form.MValue mixin</p>","!type":"fn(value: bool)"},"toggle":{"!doc":"<p>Toggles the value of the button.</p>","!type":"fn()"}}}},"layout":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Base class for all layout managers.</p>\n\n<p>Custom layout managers must derive from\nthis class and implement the methods {@link #_getCssClasses},\n{@link #_getSupportedChildLayoutProperties} and {@link #_setLayoutProperty}.</p>","prototype":{"__getChildLayoutPropertyCache":{"!doc":"<p>Returns the child layout property cache.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget) -> +Map"},"_addCachedProperty":{"!doc":"<p>Adds a property to the cache. Needed when the layout is not yet\nconnected with the widget.</p>","!type":"fn(property: string, value: Object)"},"_addPropertyToChildLayoutCache":{"!doc":"<p>Adds a child layout property to the cache. When the value is\n<code>null</code> the property will be deleted from the cache.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, property: string, value: Object)"},"_getChildLayoutPropertyValue":{"!doc":"<p>Returns a child layout property value.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, property: string) -> Object"},"_getCssClasses":{"!doc":"<p>Returns the css classes in an array that the layout is using.</p>","!type":"fn() -> +Array"},"_getSupportedChildLayoutProperties":{"!doc":"<p>Returns the supported child layout properites. Needed to validate\nthe incoming layout properites. Override this function in your implementation.</p>","!type":"fn() -> +Map"},"_setLayoutProperty":{"!doc":"<p>Abstracts method. Override this in your implementation.\nThe function is called for all given layout properties once.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, property?: string, value?: Object)"},"connectToChildWidget":{"!doc":"<p>Connects the layout to a given child widget. Can be overridden in a concrete\ninterface implementation.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"connectToWidget":{"!doc":"<p>This method is called by the widget to connect the widget with the layout.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"disconnectFromChildWidget":{"!doc":"<p>Disconnects the layout from a given child widget. Can be overridden in a concrete\ninterface implementation.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"setLayoutProperties":{"!doc":"<p>Sets the given layout properties to a widget.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, properties: +Map)"},"updateLayout":{"!doc":"<p>Updates the layout. Method is called by a widget, when it changes its state.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, action: string, properties: +Map)"}}},"AbstractBox":{"!proto":"qx.ui.mobile.layout.Abstract","!doc":"<p>Base class for all box layout managers.</p>","!type":"fn()","prototype":{"_applyLayoutChange":{"!doc":"<p>Applies changes of the property value of the properties <code>alignX</code>, <code>alignY</code> and <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #alignX}, {@link #alignY} and {@link #reversed}.</p>","!type":"fn(value: Object, old: Object)"},"_getSupportedChildLayoutProperties":{"!type":"fn()"},"_setLayoutProperty":{"!type":"fn(widget: +undefined, property: +undefined, value: +undefined)"},"connectToWidget":{"!type":"fn(widget: +undefined)"},"disconnectFromChildWidget":{"!type":"fn(widget: +undefined)"},"getAlignX":{"!doc":"<p>Returns the (computed) value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn() -> Object"},"getAlignY":{"!doc":"<p>Returns the (computed) value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn() -> Object"},"getReversed":{"!doc":"<p>Returns the (computed) value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> Object"},"initAlignX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"initAlignY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alignY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"initReversed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>reversed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"isReversed":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>reversed</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"},"resetAlignX":{"!doc":"<p>Resets the user value of the property <code>alignX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn()"},"resetAlignY":{"!doc":"<p>Resets the user value of the property <code>alignY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn()"},"resetReversed":{"!doc":"<p>Resets the user value of the property <code>reversed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn()"},"setAlignX":{"!doc":"<p>Sets the user value of the property <code>alignX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignX}.</p>","!type":"fn(value: Object) -> Object"},"setAlignY":{"!doc":"<p>Sets the user value of the property <code>alignY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alignY}.</p>","!type":"fn(value: Object) -> Object"},"setReversed":{"!doc":"<p>Sets the user value of the property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn(value: Object) -> Object"},"toggleReversed":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>reversed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #reversed}.</p>","!type":"fn() -> bool"}}},"Card":{"!proto":"qx.ui.mobile.layout.Abstract","!doc":"<p>A card layout.</p>\n\n<p>The card layout lays out widgets in a stack. Call show to display a widget.\nOnly the widget which show method is called is displayed. All other widgets are excluded.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the Card layout.</p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.mobile.layout.Card());\nvar container = new qx.ui.mobile.container.Composite(layout);\n\nvar label1 = new qx.ui.mobile.basic.Label(\"1\");\ncontainer.add(label1);\nvar label2 = new qx.ui.mobile.basic.Label(\"2\");\ncontainer.add(label2);\n\nlabel2.show();\n</pre>","!type":"fn()","prototype":{"__getAnimationClasses":{"!doc":"<p>Returns the animation <span class=\"caps\">CSS</span> classes for a given direction. The direction\ncan be <code>in</code> or <code>out</code>.</p>","!type":"fn(direction: string) -> string"},"__startAnimation":{"!doc":"<p>Starts the animation for the page transition.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"__stopAnimation":{"!doc":"<p>Stops the animation for the page transition.</p>","!type":"fn()"},"_fixWidgetSize":{"!doc":"<p>Fix size, only if widget has mixin MResize set,\nand nextWidget is set.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"_getCssClasses":{"!type":"fn()"},"_onAnimationEnd":{"!doc":"<p>Event handler. Called when the animation of the page transition ends.</p>","!type":"fn(evt: +qx.event.type.Event)"},"_releaseWidgetSize":{"!doc":"<p>Releases recently fixed widget size (width/height). This is needed for allowing further\nflexbox layouting.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"_showWidget":{"!doc":"<p>Shows the widget with the given properties.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget, properties: +Map)"},"_swapWidget":{"!doc":"<p>Excludes the current widget and sets the next widget to the current widget.</p>","!type":"fn()"},"connectToChildWidget":{"!type":"fn(widget: +undefined)"},"disconnectFromChildWidget":{"!type":"fn(widget: +undefined)"},"getAnimationDuration":{"!doc":"<p>Returns the (computed) value of the property <code>animationDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #animationDuration}.</p>","!type":"fn() -> Object"},"getCardAnimation":{"!doc":"<p>Getter for this.__cardAnimation.</p>","!type":"fn() -> +qx.ui.mobile.layout.CardAnimation"},"getDefaultAnimation":{"!doc":"<p>Returns the (computed) value of the property <code>defaultAnimation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultAnimation}.</p>","!type":"fn() -> Object"},"getShowAnimation":{"!doc":"<p>Returns the (computed) value of the property <code>showAnimation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showAnimation}.</p>","!type":"fn() -> Object"},"initAnimationDuration":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>animationDuration</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #animationDuration}.</p>","!type":"fn(value: Object) -> Object"},"initDefaultAnimation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultAnimation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultAnimation}.</p>","!type":"fn(value: Object) -> Object"},"initShowAnimation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showAnimation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showAnimation}.</p>","!type":"fn(value: Object) -> Object"},"isShowAnimation":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showAnimation</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showAnimation}.</p>","!type":"fn() -> bool"},"resetAnimationDuration":{"!doc":"<p>Resets the user value of the property <code>animationDuration</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #animationDuration}.</p>","!type":"fn()"},"resetDefaultAnimation":{"!doc":"<p>Resets the user value of the property <code>defaultAnimation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultAnimation}.</p>","!type":"fn()"},"resetShowAnimation":{"!doc":"<p>Resets the user value of the property <code>showAnimation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showAnimation}.</p>","!type":"fn()"},"setAnimationDuration":{"!doc":"<p>Sets the user value of the property <code>animationDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #animationDuration}.</p>","!type":"fn(value: Object) -> Object"},"setCardAnimation":{"!doc":"<p>Setter for this.__cardAnimation.</p>","!type":"fn(value: +qx.ui.mobile.layout.CardAnimation)"},"setDefaultAnimation":{"!doc":"<p>Sets the user value of the property <code>defaultAnimation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultAnimation}.</p>","!type":"fn(value: Object) -> Object"},"setShowAnimation":{"!doc":"<p>Sets the user value of the property <code>showAnimation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showAnimation}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowAnimation":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showAnimation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showAnimation}.</p>","!type":"fn() -> bool"},"updateLayout":{"!type":"fn(widget: +undefined, action: +undefined, properties: +undefined)"}}},"CardAnimation":{"!proto":"qx.core.Object","!doc":"<p>Contains all animations which are needed for page transitions on {@link qx.ui.mobile.layout.Card}.\nProvides a convenience method {@link qx.ui.mobile.layout.CardAnimation#getAnimation} which\nmakes it possibility to resolve the right animation for a pageTransition out of the cardAnimationMap.</p>","!type":"fn()","prototype":{"getAnimation":{"!doc":"<p>Returns a map with properties for {@link qx.bom.element.Animation} according to the given input parameters.</p>","!type":"fn(animationName: string, direction: string, reverse: bool) -> +Map"},"getMap":{"!doc":"<p>Getter for the cardAnimationsMap.</p>","!type":"fn() -> +Map"}}},"HBox":{"!proto":"qx.ui.mobile.layout.AbstractBox","!doc":"<p>A horizontal box layout.</p>\n\n<p>The horizontal box layout lays out widgets in a horizontal row, from left\nto right.</p>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>flex</strong> <em>(Integer)</em>: The flex property determines how the container\n  distributes remaining empty space among its children. If items are made\n  flexible, they can grow or shrink accordingly. Their relative flex values\n  determine how the items are being resized, i.e. the larger the flex ratio\n  of two items, the larger the resizing of the first item compared to the\n  second.\n</li>\n</ul>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the HBox layout.</p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.mobile.layout.HBox().set({alignX:\"center\"});\n\nvar container = new qx.ui.mobile.container.Composite(layout);\n\ncontainer.add(new qx.ui.mobile.basic.Label(\"1\"));\ncontainer.add(new qx.ui.mobile.basic.Label(\"2\"), {flex:1});\ncontainer.add(new qx.ui.mobile.basic.Label(\"3\"));\n</pre>","prototype":{"_getCssClasses":{"!type":"fn()"}}},"VBox":{"!proto":"qx.ui.mobile.layout.AbstractBox","!doc":"<p>A vertical box layout.</p>\n\n<p>The vertical box layout lays out widgets in a vertical row, from top\nto bottom.</p>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>flex</strong> <em>(Integer)</em>: The flex property determines how the container\n  distributes remaining empty space among its children. If items are made\n  flexible, they can grow or shrink accordingly. Their relative flex values\n  determine how the items are being resized, i.e. the larger the flex ratio\n  of two items, the larger the resizing of the first item compared to the\n  second.\n</li>\n</ul>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the VBox layout.</p>\n\n<pre class=\"javascript\">\nvar layout = new qx.ui.mobile.layout.VBox().set({alignY:\"middle\"});\n\nvar container = new qx.ui.mobile.container.Composite(layout);\n\ncontainer.add(new qx.ui.mobile.basic.Label(\"1\"));\ncontainer.add(new qx.ui.mobile.basic.Label(\"2\"), {flex:1});\ncontainer.add(new qx.ui.mobile.basic.Label(\"3\"));\n</pre>","prototype":{"_getCssClasses":{"!type":"fn()"}}}},"list":{"IListDelegate":{"!doc":"<p>Objects which are used as delegates for the {@link qx.ui.mobile.list.List#delegate} may\nimplement any of the methods described in this interface. The delegate does\nnot need to implement all the methods of this interface. If a method is not\nimplemented the {@link qx.ui.mobile.list.provider.Provider} provides a default\nimplementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nactually implemented.</p>","prototype":{"configureItem":{"!doc":"<p>Configure the list item renderer with the given data. Mandatory method.\nAt least this method has to be defined for the delegate.</p>","!type":"fn(item: +qx.ui.mobile.list.renderer.Abstract, data: Object, row: +Integer)"},"createItemRenderer":{"!doc":"<p>Creates an instance of the item renderer to use.</p>","!type":"fn() -> +qx.ui.mobile.list.renderer.Abstract"}}},"List":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>The list widget displays the data of a model in a list.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n\n   // Data for the list\n   var data = [\n      {title : \"Row1\", subtitle : \"Sub1\"},\n      {title : \"Row2\", subtitle : \"Sub2\"},\n      {title : \"Row3\", subtitle : \"Sub3\"}\n  ];\n\n  // Create the list with a delegate that\n  var list = new qx.ui.mobile.list.List({\n    configureItem: function(item, data, row)\n    {\n      item.setImage(\"path/to/image.png\");\n      item.setTitle(data.title);\n      item.setSubtitle(data.subtitle);\n    },\n\n    configureGroupItem: function(item, data) {\n      item.setTitle(data.title);\n    },\n\n    group: function(data, row) {\n     return {\n      title: row < 2 ? \"Selectable\" : \"Unselectable\"\n    };\n   }\n  });\n\n  // Set the model of the list\n  list.setModel(new qx.data.Array(data));\n\n  // Add an changeSelection event\n  list.addListener(\"changeSelection\", function(evt) {\n    alert(\"Index: \" + evt.getData())\n  }, this);\n\n  this.getRoot().add(list);\n</pre>\n\n<p>This example creates a list with a delegate that configures the list item with\nthe given data. A listener for the event {@link #changeSelection} is added.</p>","!type":"fn()","prototype":{"__getGroup":{"!doc":"<p>Returns the group for this item, identified by its index</p>","!type":"fn(index: +Integer) -> Object"},"__hasGroup":{"!doc":"<p>Checks whether the delegate support group rendering.</p>","!type":"fn() -> bool"},"__onModelChange":{"!doc":"<p>Reacts on model &#8216;change&#8217; event.</p>","!type":"fn(evt: +qx.event.type.Data)"},"__onModelChangeBubble":{"!doc":"<p>Reacts on model &#8216;changeBubble&#8217; event.</p>","!type":"fn(evt: +qx.event.type.Data)"},"__onModelChangeLength":{"!doc":"<p>Listen on model &#8216;changeLength&#8217; event.</p>","!type":"fn(evt: +qx.event.type.Data)"},"__render":{"!doc":"<p>Renders the list.</p>","!type":"fn()"},"__renderRow":{"!doc":"<p>Renders a specific row identified by its index.</p>","!type":"fn(index: +Integer)"},"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_extractRowsToRender":{"!doc":"<p>Extracts all rows, which should be rendered from &#8220;changeBubble&#8221; event&#8217;s\ndata.name.</p>","!type":"fn(name: string) -> +Integer"},"_getElement":{"!doc":"<p>Returns the target list item.</p>","!type":"fn(evt: +Event) -> +Element"},"_getTagName":{"!type":"fn()"},"_onChangeLocale":{"!doc":"<p>Locale change event handler</p>","!type":"fn(e: +Event)"},"_onTap":{"!doc":"<p>Event handler for the &#8220;tap&#8221; event.</p>","!type":"fn(evt: +qx.event.type.Tap)"},"_onTrack":{"!doc":"<p>Event handler for <code>track</code> event.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_onTrackEnd":{"!doc":"<p>Event handler for <code>trackend</code> event.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_onTrackStart":{"!doc":"<p>Event handler for <code>trackstart</code> event.</p>","!type":"fn(evt: +qx.event.type.Track)"},"_renderGroup":{"!doc":"<p>Renders a group header.</p>","!type":"fn(itemIndex: +Integer, groupIndex: +Integer) -> +Element"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getItemCount":{"!doc":"<p>Returns the (computed) value of the property <code>itemCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemCount}.</p>","!type":"fn() -> Object"},"getListItemHeight":{"!type":"fn() -> +Integer"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initItemCount":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>itemCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #itemCount}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"render":{"!doc":"<p>Triggers a re-rendering of this list.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetItemCount":{"!doc":"<p>Resets the user value of the property <code>itemCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #itemCount}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setItemCount":{"!doc":"<p>Sets the user value of the property <code>itemCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemCount}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"}}},"provider":{"Provider":{"!proto":"qx.core.Object","!doc":"<p>Provides a list item element for a certain row and its data.\nUses the {@link qx.ui.mobile.list.renderer.Default} list item renderer as a\ndefault renderer when no other renderer is given by the {@link qx.ui.mobile.list.List#delegate}.</p>","prototype":{"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_configureGroupItem":{"!doc":"<p>Configures the group renderer with the passed group data.</p>","!type":"fn(data: Object, group: +Integer)"},"_configureItem":{"!doc":"<p>Configure the list item renderer with the passed data.</p>","!type":"fn(data: Object, row: +Integer)"},"_createGroupRenderer":{"!doc":"<p>Creates an instance of the group renderer to use. When no delegate method\nis given the function will return an instance of {@link qx.ui.mobile.list.renderer.group.Default}.</p>","!type":"fn() -> +qx.ui.mobile.list.renderer.group.Abstract"},"_createItemRenderer":{"!doc":"<p>Creates an instance of the item renderer to use. When no delegate method\nis given the function will return an instance of {@link qx.ui.mobile.list.renderer.Default}.</p>","!type":"fn() -> +qx.ui.mobile.list.renderer.Abstract"},"_getGroupRenderer":{"!doc":"<p>Gets the group renderer.</p>","!type":"fn() -> +qx.ui.mobile.list.renderer.group.Abstract"},"_getItemRenderer":{"!doc":"<p>Returns the set item renderer.</p>","!type":"fn() -> +qx.ui.mobile.list.renderer.Abstract"},"_setGroupRenderer":{"!doc":"<p>Sets the group renderer.</p>","!type":"fn(renderer: +qx.ui.mobile.list.renderer.group.Abstract)"},"_setItemRenderer":{"!doc":"<p>Sets the item renderer.</p>","!type":"fn(renderer: +qx.ui.mobile.list.renderer.Abstract)"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getGroupElement":{"!doc":"<p>Returns the group item element for a given row.</p>","!type":"fn(data: Object, group: +Integer) -> +Element"},"getItemElement":{"!doc":"<p>Returns the list item element for a given row.</p>","!type":"fn(data: Object, row: +Integer) -> +Element"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"}}}},"renderer":{"Abstract":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>Base class for all list item renderer.</p>","!type":"fn()","prototype":{"_applyRemovable":{"!doc":"<p>Applies changes of the property value of the property <code>removable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelected":{"!doc":"<p>Applies changes of the property value of the property <code>selected</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShowArrow":{"!doc":"<p>Applies changes of the property value of the property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn(value: bool, old: bool)"},"_getTagName":{"!type":"fn()"},"getRemovable":{"!doc":"<p>Returns the (computed) value of the property <code>removable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn() -> Object"},"getRowIndex":{"!doc":"<p>Returns the row index of a certain <span class=\"caps\">DOM</span> element in the list.</p>","!type":"fn(element: +Element) -> +Integer"},"getRowIndexFromEvent":{"!doc":"<p>Returns the row index of a certain <span class=\"caps\">DOM</span> element in the list from the given event.</p>","!type":"fn(evt: +qx.event.type.Event) -> +Integer"},"getSelectable":{"!doc":"<p>Returns the (computed) value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> Object"},"getSelected":{"!doc":"<p>Returns the (computed) value of the property <code>selected</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn() -> Object"},"getShowArrow":{"!doc":"<p>Returns the (computed) value of the property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn() -> Object"},"initRemovable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>removable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn(value: Object) -> Object"},"initSelectable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"initSelected":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selected</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn(value: Object) -> Object"},"initShowArrow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showArrow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn(value: Object) -> Object"},"isRemovable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>removable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn() -> bool"},"isSelectable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>selectable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"},"isSelected":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>selected</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn() -> bool"},"isShowArrow":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showArrow</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn() -> bool"},"reset":{"!doc":"<p>Resets all defined child widgets. Override this method in your custom\nlist item renderer and reset all widgets displaying data. Needed as the\nrenderer is used for every row and otherwise data of a different row\nmight be displayed, when not all data displaying widgets are used for the row.\nGets called automatically by the {@link qx.ui.mobile.list.provider.Provider}.</p>","!type":"fn()"},"resetRemovable":{"!doc":"<p>Resets the user value of the property <code>removable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn()"},"resetSelectable":{"!doc":"<p>Resets the user value of the property <code>selectable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn()"},"resetSelected":{"!doc":"<p>Resets the user value of the property <code>selected</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn()"},"resetShowArrow":{"!doc":"<p>Resets the user value of the property <code>showArrow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn()"},"setRemovable":{"!doc":"<p>Sets the user value of the property <code>removable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn(value: Object) -> Object"},"setSelectable":{"!doc":"<p>Sets the user value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"setSelected":{"!doc":"<p>Sets the user value of the property <code>selected</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn(value: Object) -> Object"},"setShowArrow":{"!doc":"<p>Sets the user value of the property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn(value: Object) -> Object"},"toggleRemovable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>removable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #removable}.</p>","!type":"fn() -> bool"},"toggleSelectable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"},"toggleSelected":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>selected</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selected}.</p>","!type":"fn() -> bool"},"toggleShowArrow":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn() -> bool"}}},"Default":{"!proto":"qx.ui.mobile.list.renderer.Abstract","!doc":"<p>The default list item renderer. Used as the default renderer by the\n{@link qx.ui.mobile.list.provider.Provider}. Configure the renderer\nby setting the {@link qx.ui.mobile.list.List#delegate} property.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n\n  // Create the list with a delegate that\n  // configures the list item.\n  var list = new qx.ui.mobile.list.List({\n    configureItem : function(item, data, row)\n    {\n      item.setImage(\"path/to/image.png\");\n      item.setTitle(data.title);\n      item.setSubtitle(data.subtitle);\n    }\n  });\n</pre>\n\n<p>This example creates a list with a delegate that configures the list item with\nthe given data.</p>","!type":"fn()","prototype":{"_createImage":{"!doc":"<p>Creates and returns the image widget. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.basic.Image"},"_createRightContainer":{"!doc":"<p>Creates and returns the right container composite. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createSubtitle":{"!doc":"<p>Creates and returns the subtitle widget. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"_createTitle":{"!doc":"<p>Creates and returns the title widget. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"_init":{"!doc":"<p>Inits the widgets for the renderer.</p>","!type":"fn()"},"getImageWidget":{"!doc":"<p>Returns the image widget which is used for this renderer.</p>","!type":"fn() -> +qx.ui.mobile.basic.Image"},"getSubtitleWidget":{"!doc":"<p>Returns the subtitle widget which is used for this renderer.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"getTitleWidget":{"!doc":"<p>Returns the title widget which is used for this renderer.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"reset":{"!type":"fn()"},"setImage":{"!doc":"<p>Sets the source of the image widget.</p>","!type":"fn(source: string)"},"setSubtitle":{"!doc":"<p>Sets the value of the subtitle widget.</p>","!type":"fn(subtitle: string)"},"setTitle":{"!doc":"<p>Sets the value of the title widget.</p>","!type":"fn(title: string)"}}},"group":{"Abstract":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>Base class for all group item renderer.</p>","!type":"fn()","prototype":{"_getTagName":{"!type":"fn()"},"getSelectable":{"!doc":"<p>Returns the (computed) value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> Object"},"initSelectable":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectable</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"isSelectable":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>selectable</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"},"reset":{"!doc":"<p>Resets all defined child widgets. Override this method in your custom\nlist item renderer and reset all widgets displaying data. Needed as the\nrenderer is used for every row and otherwise data of a different row\nmight be displayed, when not all data displaying widgets are used for the row.\nGets called automatically by the {@link qx.ui.mobile.list.provider.Provider}.</p>","!type":"fn()"},"resetSelectable":{"!doc":"<p>Resets the user value of the property <code>selectable</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn()"},"setSelectable":{"!doc":"<p>Sets the user value of the property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn(value: Object) -> Object"},"toggleSelectable":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>selectable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectable}.</p>","!type":"fn() -> bool"}}},"Default":{"!proto":"qx.ui.mobile.list.renderer.group.Abstract","!doc":"<p>The default group renderer. Used as the default renderer by the\n{@link qx.ui.mobile.list.provider.Provider}. Configure the renderer\nby setting the {@link qx.ui.mobile.list.List#delegate} property.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  // Create the list with a delegate that\n  // configures the list item.\n  var list = new qx.ui.mobile.list.List({\n    configureItem: function(item, data, row)\n    {\n      item.setImage(\"path/to/image.png\");\n      item.setTitle(data.title);\n      item.setSubtitle(data.subtitle);\n    },\n\n    configureGroupItem: function(item, data, group) {\n      item.setTitle(group + \" \" + data.title);\n    },\n\n    group: function(data, row) {\n     return {\n      title: row < 4 ? \"Selectable\" : \"Unselectable\"\n    };\n   }\n });\n</pre>\n\n<p>This example creates a list with a delegate that configures the list items and groups with\nthe given data.</p>","!type":"fn()","prototype":{"_createImage":{"!doc":"<p>Creates and returns the image widget. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.basic.Image"},"_createRightContainer":{"!doc":"<p>Creates and returns the right container composite. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createTitle":{"!doc":"<p>Creates and returns the title widget. Override this to adapt the widget code.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"_init":{"!doc":"<p>Inits the widgets for the renderer.</p>","!type":"fn()"},"getImageWidget":{"!doc":"<p>Returns the image widget which is used for this renderer.</p>","!type":"fn() -> +qx.ui.mobile.basic.Image"},"getTitleWidget":{"!doc":"<p>Returns the title widget which is used for this renderer.</p>","!type":"fn() -> +qx.ui.mobile.basic.Label"},"reset":{"!type":"fn()"},"setGroup":{"!doc":"<p>Setter for the data attribute <code></code></p>","!type":"fn(groupTitle: string)"},"setImage":{"!doc":"<p>Sets the source of the image widget.</p>","!type":"fn(source: string)"},"setTitle":{"!doc":"<p>Sets the value of the title widget.</p>","!type":"fn(title: string)"}}}}}},"navigationbar":{"BackButton":{"!proto":"qx.ui.mobile.navigationbar.Button","!doc":"<p>A navigation bar back button widget.</p>"},"Button":{"!proto":"qx.ui.mobile.form.Button","!doc":"<p>A navigation bar button widget.</p>"},"NavigationBar":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>A navigation bar widget.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var bar = new qx.ui.mobile.navigationbar.NavigationBar();\n  var backButton = new qx.ui.mobile.navigationbar.BackButton();\n  bar.add(backButton);\n  var title = new qx.ui.mobile.navigationbar.Title();\n  var.add(title, {flex:1});\n\n  this.getRoot.add(bar);\n</pre>\n\n<p>This example creates a navigation bar and adds a back button and a title to it.</p>","!type":"fn()"},"Title":{"!proto":"qx.ui.mobile.basic.Label","!doc":"<p>A navigation bar title widget.</p>","prototype":{"_getTagName":{"!type":"fn()"}}}},"page":{"Manager":{"!proto":"qx.core.Object","!doc":"<p>The page manager decides automatically whether the added pages should be\ndisplayed in a master/detail view (for tablet) or as a plain card layout (for\nsmartphones).</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the manager.</p>\n\n<pre class=\"javascript\">\n var manager = new qx.ui.mobile.page.Manager();\n var page1 = new qx.ui.mobile.page.NavigationPage();\n var page2 = new qx.ui.mobile.page.NavigationPage();\n var page3 = new qx.ui.mobile.page.NavigationPage();\n manager.addMaster(page1);\n manager.addDetail([page2,page3]);\n\n page1.show();\n</pre>","!type":"fn()","prototype":{"_add":{"!doc":"<p>Adds an array of NavigationPage to the target container.</p>","!type":"fn(pages: +qx.ui.mobile.page.NavigationPage, target: +qx.ui.mobile.container.Navigation)"},"_applyHideMasterButtonCaption":{"!doc":"<p>Called on property changes of hideMasterButtonCaption.</p>","!type":"fn(value: string, old: string)"},"_applyMasterTitle":{"!doc":"<p>Called on property changes of masterTitle.</p>","!type":"fn(value: string, old: string)"},"_createDetailContainer":{"!doc":"<p>Creates the detail container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createDetailContainerGap":{"!doc":"<p>Moves detailContainer to the right edge of MasterContainer.\nCreates spaces for aligning master and detail container aside each other.</p>","!type":"fn()"},"_createDetailNavigation":{"!doc":"<p>Factory method for detailNavigation.</p>","!type":"fn() -> +qx.ui.mobile.container.Navigation"},"_createHideMasterButton":{"!doc":"<p>Factory method for the hide master button, which is responsible for hiding masterContainer on Landscape view.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Button"},"_createMasterButton":{"!doc":"<p>Factory method for the master button, which is responsible for showing/hiding masterContainer.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Button"},"_createMasterContainer":{"!doc":"<p>Creates the master container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createMasterNavigation":{"!doc":"<p>Factory method for masterNavigation.</p>","!type":"fn() -> +qx.ui.mobile.container.Navigation"},"_getGapPropertyKey":{"!doc":"<p>Returns the corresponding <span class=\"caps\">CSS</span> property key which fits to the drawer&#8217;s orientation.</p>","!type":"fn() -> string"},"_onDetailContainerUpdate":{"!doc":"<p>Called when detailContainer is updated.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onDetailPageStart":{"!doc":"<p>Called when a detailPage reaches lifecycle state &#8220;start&#8221;.</p>","!type":"fn(evt: +qx.event.type.Event)"},"_onHideMasterButtonTap":{"!doc":"<p>Called when user taps on hideMasterButton.</p>","!type":"fn()"},"_onLayoutChange":{"!doc":"<p>Called when layout of masterDetailContainer changes.</p>","!type":"fn()"},"_onMasterButtonTap":{"!doc":"<p>Called when user taps on masterButton.</p>","!type":"fn()"},"_onMasterChangeVisibility":{"!doc":"<p>Event handler for <code>changeVisibility</code> event on master container.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onMasterContainerUpdate":{"!doc":"<p>Called when masterContainer is updated.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onMasterPageStart":{"!doc":"<p>Called when a masterPage reaches lifecycle state &#8220;start&#8221;. Then property masterTitle will be update with masterPage&#8217;s title.</p>","!type":"fn(evt: +qx.event.type.Event)"},"_removeDetailContainerGap":{"!doc":"<p>Moves detailContainer to the left edge of viewport.</p>","!type":"fn()"},"addDetail":{"!doc":"<p>Adds an array of NavigationPage to the detailContainer.</p>","!type":"fn(pages: +qx.ui.mobile.page.NavigationPage)"},"addMaster":{"!doc":"<p>Adds an array of NavigationPages to masterContainer, if __isTablet is true. Otherwise it will be added to detailContainer.</p>","!type":"fn(pages: +qx.ui.mobile.page.NavigationPage)"},"getAllowMasterHideOnLandscape":{"!doc":"<p>Returns the (computed) value of the property <code>allowMasterHideOnLandscape</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMasterHideOnLandscape}.</p>","!type":"fn() -> Object"},"getDetailContainer":{"!doc":"<p>Getter for the Detail Container</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getDetailNavigation":{"!doc":"<p>Returns the detailNavigation.</p>","!type":"fn() -> +qx.ui.mobile.container.Navigation"},"getHideMasterButtonCaption":{"!doc":"<p>Returns the (computed) value of the property <code>hideMasterButtonCaption</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterButtonCaption}.</p>","!type":"fn() -> Object"},"getHideMasterOnDetailStart":{"!doc":"<p>Returns the (computed) value of the property <code>hideMasterOnDetailStart</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterOnDetailStart}.</p>","!type":"fn() -> Object"},"getMasterButton":{"!doc":"<p>Returns the button for showing/hiding the masterContainer.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Button"},"getMasterContainer":{"!doc":"<p>Getter for the Master Container</p>","!type":"fn() -> +qx.ui.mobile.container.Drawer"},"getMasterNavigation":{"!doc":"<p>Returns the masterNavigation.</p>","!type":"fn() -> +qx.ui.mobile.container.Navigation"},"getMasterTitle":{"!doc":"<p>Returns the (computed) value of the property <code>masterTitle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #masterTitle}.</p>","!type":"fn() -> Object"},"initAllowMasterHideOnLandscape":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowMasterHideOnLandscape</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMasterHideOnLandscape}.</p>","!type":"fn(value: Object) -> Object"},"initHideMasterButtonCaption":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideMasterButtonCaption</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterButtonCaption}.</p>","!type":"fn(value: Object) -> Object"},"initHideMasterOnDetailStart":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideMasterOnDetailStart</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterOnDetailStart}.</p>","!type":"fn(value: Object) -> Object"},"initMasterTitle":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>masterTitle</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #masterTitle}.</p>","!type":"fn(value: Object) -> Object"},"isAllowMasterHideOnLandscape":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowMasterHideOnLandscape</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMasterHideOnLandscape}.</p>","!type":"fn() -> bool"},"isHideMasterOnDetailStart":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>hideMasterOnDetailStart</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterOnDetailStart}.</p>","!type":"fn() -> bool"},"isMasterContainerHidden":{"!type":"fn() -> bool"},"resetAllowMasterHideOnLandscape":{"!doc":"<p>Resets the user value of the property <code>allowMasterHideOnLandscape</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMasterHideOnLandscape}.</p>","!type":"fn()"},"resetHideMasterButtonCaption":{"!doc":"<p>Resets the user value of the property <code>hideMasterButtonCaption</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterButtonCaption}.</p>","!type":"fn()"},"resetHideMasterOnDetailStart":{"!doc":"<p>Resets the user value of the property <code>hideMasterOnDetailStart</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterOnDetailStart}.</p>","!type":"fn()"},"resetMasterTitle":{"!doc":"<p>Resets the user value of the property <code>masterTitle</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #masterTitle}.</p>","!type":"fn()"},"setAllowMasterHideOnLandscape":{"!doc":"<p>Sets the user value of the property <code>allowMasterHideOnLandscape</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMasterHideOnLandscape}.</p>","!type":"fn(value: Object) -> Object"},"setHideMasterButtonCaption":{"!doc":"<p>Sets the user value of the property <code>hideMasterButtonCaption</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterButtonCaption}.</p>","!type":"fn(value: Object) -> Object"},"setHideMasterOnDetailStart":{"!doc":"<p>Sets the user value of the property <code>hideMasterOnDetailStart</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterOnDetailStart}.</p>","!type":"fn(value: Object) -> Object"},"setMasterContainerHidden":{"!type":"fn(value: bool)"},"setMasterTitle":{"!doc":"<p>Sets the user value of the property <code>masterTitle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #masterTitle}.</p>","!type":"fn(value: Object) -> Object"},"toggleAllowMasterHideOnLandscape":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowMasterHideOnLandscape</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMasterHideOnLandscape}.</p>","!type":"fn() -> bool"},"toggleHideMasterOnDetailStart":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>hideMasterOnDetailStart</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideMasterOnDetailStart}.</p>","!type":"fn() -> bool"}}},"NavigationPage":{"!proto":"qx.ui.mobile.page.Page","!doc":"<p>Specialized page. This page includes already a {@link qx.ui.mobile.navigationbar.NavigationBar}\nand and a {@link qx.ui.mobile.container.Scroll} container.\nThe NavigationPage can only be used with a page manager {@link qx.ui.mobile.page.Manager}.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n\n var manager = new qx.ui.mobile.page.Manager();\n var page = new qx.ui.mobile.page.NavigationPage();\n page.setTitle(\"Page Title\");\n page.setShowBackButton(true);\n page.setBackButtonText(\"Back\")\n page.addListener(\"initialize\", function()\n {\n   var button = new qx.ui.mobile.form.Button(\"Next Page\");\n   page.getContent().add(button);\n },this);\n\n page.addListener(\"back\", function()\n {\n   otherPage.show({animation:\"cube\", reverse:true});\n },this);\n\n manager.addDetail(page);\n page.show();\n</pre>\n\n<p>This example creates a NavigationPage with a title and a back button. In the\n<code>initialize</code> lifecycle method a button is added.</p>","!type":"fn()","prototype":{"_applyActionButtonIcon":{"!doc":"<p>Applies changes of the property value of the property <code>buttonIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonIcon}.</p>","!type":"fn(value: string, old: string)"},"_applyActionButtonText":{"!doc":"<p>Applies changes of the property value of the property <code>buttonText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonText}.</p>","!type":"fn(value: string, old: string)"},"_applyBackButtonText":{"!doc":"<p>Applies changes of the property value of the property <code>backButtonText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backButtonText}.</p>","!type":"fn(value: string, old: string)"},"_applyContentCssClass":{"!doc":"<p>Applies changes of the property value of the property <code>contentCssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentCssClass}.</p>","!type":"fn(value: string, old: string)"},"_applyShowBackButton":{"!doc":"<p>Applies changes of the property value of the property <code>showBackButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShowButton":{"!doc":"<p>Applies changes of the property value of the property <code>showButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTitle":{"!doc":"<p>Applies changes of the property value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: string, old: string)"},"_createBackButton":{"!doc":"<p>Creates the navigation bar back button.\nCreates the scroll container.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.BackButton"},"_createButton":{"!doc":"<p>Creates the navigation bar button.\nCreates the content container.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Button"},"_createContent":{"!doc":"<p>Creates the content container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createLeftContainer":{"!doc":"<p>Creates the left container for the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createRightContainer":{"!doc":"<p>Creates the right container for the navigation bar.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"_createScrollContainer":{"!doc":"<p>Creates the scroll container.</p>","!type":"fn() -> +qx.ui.mobile.container.Scroll"},"_createTitleWidget":{"!doc":"<p>Creates the navigation bar title.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Title"},"_getBackButton":{"!doc":"<p>Returns the back button widget.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.BackButton"},"_getButton":{"!doc":"<p>Returns the action button widget.</p>","!type":"fn() -> +qx.ui.mobile.navigationbar.Button"},"_getScrollContainer":{"!doc":"<p>Returns the scroll container.</p>","!type":"fn() -> +qx.ui.mobile.container.Scroll"},"_initialize":{"!type":"fn()"},"_onBackButtonTap":{"!doc":"<p>Event handler. Called when the tap event occurs on the back button.</p>","!type":"fn(evt: +qx.event.type.Tap)"},"_onButtonTap":{"!doc":"<p>Event handler. Called when the tap event occurs on the button.</p>","!type":"fn(evt: +qx.event.type.Tap)"},"_showBackButton":{"!doc":"<p>Helper method to show the back button.</p>","!type":"fn()"},"_showButton":{"!doc":"<p>Helper method to show the button.</p>","!type":"fn()"},"addAfterNavigationBar":{"!doc":"<p>Adds a widget, below the NavigationBar.</p>","!type":"fn(widget: +qx.ui.mobile.core.Widget)"},"getBackButtonText":{"!doc":"<p>Returns the (computed) value of the property <code>backButtonText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backButtonText}.</p>","!type":"fn() -> Object"},"getButtonIcon":{"!doc":"<p>Returns the (computed) value of the property <code>buttonIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonIcon}.</p>","!type":"fn() -> Object"},"getButtonText":{"!doc":"<p>Returns the (computed) value of the property <code>buttonText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonText}.</p>","!type":"fn() -> Object"},"getContent":{"!doc":"<p>Returns the content container. Add all your widgets to this container.</p>","!type":"fn() -> +qx.ui.mobile.container.Composite"},"getContentCssClass":{"!doc":"<p>Returns the (computed) value of the property <code>contentCssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentCssClass}.</p>","!type":"fn() -> Object"},"getLeftContainer":{"!type":"fn()"},"getNavigationBarHidden":{"!doc":"<p>Returns the (computed) value of the property <code>navigationBarHidden</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarHidden}.</p>","!type":"fn() -> Object"},"getNavigationBarToggleDuration":{"!doc":"<p>Returns the (computed) value of the property <code>navigationBarToggleDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarToggleDuration}.</p>","!type":"fn() -> Object"},"getRightContainer":{"!type":"fn()"},"getShowBackButton":{"!doc":"<p>Returns the (computed) value of the property <code>showBackButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn() -> Object"},"getShowBackButtonOnTablet":{"!doc":"<p>Returns the (computed) value of the property <code>showBackButtonOnTablet</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButtonOnTablet}.</p>","!type":"fn() -> Object"},"getShowButton":{"!doc":"<p>Returns the (computed) value of the property <code>showButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn() -> Object"},"getTitle":{"!doc":"<p>Returns the (computed) value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn() -> Object"},"getTitleWidget":{"!type":"fn()"},"initBackButtonText":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backButtonText</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backButtonText}.</p>","!type":"fn(value: Object) -> Object"},"initButtonIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>buttonIcon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonIcon}.</p>","!type":"fn(value: Object) -> Object"},"initButtonText":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>buttonText</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonText}.</p>","!type":"fn(value: Object) -> Object"},"initContentCssClass":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contentCssClass</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contentCssClass}.</p>","!type":"fn(value: Object) -> Object"},"initNavigationBarHidden":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>navigationBarHidden</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarHidden}.</p>","!type":"fn(value: Object) -> Object"},"initNavigationBarToggleDuration":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>navigationBarToggleDuration</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarToggleDuration}.</p>","!type":"fn(value: Object) -> Object"},"initShowBackButton":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showBackButton</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn(value: Object) -> Object"},"initShowBackButtonOnTablet":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showBackButtonOnTablet</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButtonOnTablet}.</p>","!type":"fn(value: Object) -> Object"},"initShowButton":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showButton</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn(value: Object) -> Object"},"initTitle":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>title</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: Object) -> Object"},"isNavigationBarHidden":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>navigationBarHidden</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarHidden}.</p>","!type":"fn() -> bool"},"isShowBackButton":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showBackButton</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn() -> bool"},"isShowBackButtonOnTablet":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showBackButtonOnTablet</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButtonOnTablet}.</p>","!type":"fn() -> bool"},"isShowButton":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showButton</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn() -> bool"},"isTablet":{"!doc":"<p>Returns the isTablet flag.</p>","!type":"fn() -> bool"},"resetBackButtonText":{"!doc":"<p>Resets the user value of the property <code>backButtonText</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backButtonText}.</p>","!type":"fn()"},"resetButtonIcon":{"!doc":"<p>Resets the user value of the property <code>buttonIcon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonIcon}.</p>","!type":"fn()"},"resetButtonText":{"!doc":"<p>Resets the user value of the property <code>buttonText</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonText}.</p>","!type":"fn()"},"resetContentCssClass":{"!doc":"<p>Resets the user value of the property <code>contentCssClass</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contentCssClass}.</p>","!type":"fn()"},"resetNavigationBarHidden":{"!doc":"<p>Resets the user value of the property <code>navigationBarHidden</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarHidden}.</p>","!type":"fn()"},"resetNavigationBarToggleDuration":{"!doc":"<p>Resets the user value of the property <code>navigationBarToggleDuration</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarToggleDuration}.</p>","!type":"fn()"},"resetShowBackButton":{"!doc":"<p>Resets the user value of the property <code>showBackButton</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn()"},"resetShowBackButtonOnTablet":{"!doc":"<p>Resets the user value of the property <code>showBackButtonOnTablet</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButtonOnTablet}.</p>","!type":"fn()"},"resetShowButton":{"!doc":"<p>Resets the user value of the property <code>showButton</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn()"},"resetTitle":{"!doc":"<p>Resets the user value of the property <code>title</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn()"},"scrollTo":{"!type":"fn(x: +Integer, y: +Integer, time: +Integer)"},"scrollToWidget":{"!type":"fn(widget: +qx.ui.mobile.core.Widget, time: +Integer)"},"setBackButtonText":{"!doc":"<p>Sets the user value of the property <code>backButtonText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backButtonText}.</p>","!type":"fn(value: Object) -> Object"},"setButtonIcon":{"!doc":"<p>Sets the user value of the property <code>buttonIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonIcon}.</p>","!type":"fn(value: Object) -> Object"},"setButtonText":{"!doc":"<p>Sets the user value of the property <code>buttonText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #buttonText}.</p>","!type":"fn(value: Object) -> Object"},"setContentCssClass":{"!doc":"<p>Sets the user value of the property <code>contentCssClass</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contentCssClass}.</p>","!type":"fn(value: Object) -> Object"},"setIsTablet":{"!doc":"<p>Sets the isTablet flag.</p>","!type":"fn(isTablet: bool)"},"setNavigationBarHidden":{"!doc":"<p>Sets the user value of the property <code>navigationBarHidden</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarHidden}.</p>","!type":"fn(value: Object) -> Object"},"setNavigationBarToggleDuration":{"!doc":"<p>Sets the user value of the property <code>navigationBarToggleDuration</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarToggleDuration}.</p>","!type":"fn(value: Object) -> Object"},"setShowBackButton":{"!doc":"<p>Sets the user value of the property <code>showBackButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn(value: Object) -> Object"},"setShowBackButtonOnTablet":{"!doc":"<p>Sets the user value of the property <code>showBackButtonOnTablet</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButtonOnTablet}.</p>","!type":"fn(value: Object) -> Object"},"setShowButton":{"!doc":"<p>Sets the user value of the property <code>showButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn(value: Object) -> Object"},"setTitle":{"!doc":"<p>Sets the user value of the property <code>title</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #title}.</p>","!type":"fn(value: Object) -> Object"},"toggleNavigationBarHidden":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>navigationBarHidden</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #navigationBarHidden}.</p>","!type":"fn() -> bool"},"toggleShowBackButton":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showBackButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButton}.</p>","!type":"fn() -> bool"},"toggleShowBackButtonOnTablet":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showBackButtonOnTablet</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showBackButtonOnTablet}.</p>","!type":"fn() -> bool"},"toggleShowButton":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showButton}.</p>","!type":"fn() -> bool"}}},"Page":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>A page is a widget which provides a screen with which users\ncan interact in order to do something. Most times a page provides a single task\nor a group of related tasks.</p>\n\n<p>A qooxdoo mobile application is usually composed of one or more loosely bound\npages. Typically there is one page that presents the &#8220;main&#8221; view.</p>\n\n<p>Pages can have one or more child widgets from the {@link qx.ui.mobile}\nnamespace. Normally a page provides a {@link qx.ui.mobile.navigationbar.NavigationBar}\nfor the navigation between pages.</p>\n\n<p>To navigate between two pages, just call the {@link #show} method of the page\nthat should be shown. Depending on the used page manager a page transition will be animated.\nThere are several animations available. Have\na look at the {@link qx.ui.mobile.page.Manager} manager or {@link qx.ui.mobile.layout.Card} card layout for more information.</p>\n\n<p>A page has predefined lifecycle methods that get called by the used page manager\nwhen a page gets shown. Each time another page is requested to be shown the currently shown page\nis stopped. The other page, will be, if shown for the first time, initialized and started\nafterwards. For all called lifecycle methods an event is fired.</p>\n\n<p>Call of the {@link #show} method triggers the following lifecycle methods:</p>\n\n<ul>\n<li><strong>initialize</strong>: Initializes the page to show</li>\n<li><strong>start</strong>: Gets called when the page to show is started</li>\n<li><strong>stop</strong>:  Stops the current page</li>\n</ul>\n\n<p><span class=\"caps\">IMPORTANT</span>: Define all child widgets of a page when the {@link #initialize} lifecycle\nmethod is called, either by listening to the {@link #initialize} event or overriding\nthe {@link #_initialize} method. This is because a page can be instanced during\napplication startup and would then decrease performance when the widgets would be\nadded during constructor call. The <code>initialize</code> event and the\n{@link #_initialize} lifecycle method are only called when the page is shown\nfor the first time.</p>","!type":"fn()","_onBackButton":{"!doc":"<p>Event handler. Called when the back button of the device was pressed.</p>","!type":"fn()"},"_onDeviceReady":{"!doc":"<p>Event handler. Called when the device is ready.</p>","!type":"fn()"},"_onMenuButton":{"!doc":"<p>Event handler. Called when the menu button of the device was pressed.</p>","!type":"fn()"},"prototype":{"_applyLifeCycleState":{"!doc":"<p>Applies changes of the property value of the property <code>lifeCycleState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #lifeCycleState}.</p>","!type":"fn(value: Object, old: Object)"},"_back":{"!doc":"<p>Override this method if you want to perform a certain action when back\nis called.</p>","!type":"fn(triggeredByKeyEvent: bool) -> bool"},"_initialize":{"!doc":"<p>Override this method if you would like to perform a certain action when initialize\nis called.</p>","!type":"fn()"},"_pause":{"!doc":"<p>Override this method if you would like to perform a certain action when pause\nis called.</p>","!type":"fn()"},"_resume":{"!doc":"<p>Override this method if you would like to perform a certain action when resume\nis called.</p>","!type":"fn()"},"_start":{"!doc":"<p>Override this method if you would like to perform a certain action when start\nis called.</p>","!type":"fn()"},"_stop":{"!doc":"<p>Override this method if you would like to perform a certain action when stop\nis called.</p>","!type":"fn()"},"_wait":{"!doc":"<p>Override this method if you would like to perform a certain action when wait\nis called.</p>","!type":"fn()"},"back":{"!doc":"<p>Fires the <code>back</code> event. Call this method if you want to request\na back action. For Android PhoneGap applications this method gets called\nby the used page manager when the back button was pressed. Return <code>true</code>\nto exit the application.</p>","!type":"fn(triggeredByKeyEvent: bool) -> bool"},"exclude":{"!type":"fn(properties: +undefined)"},"getLifeCycleState":{"!doc":"<p>Returns the (computed) value of the property <code>lifeCycleState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #lifeCycleState}.</p>","!type":"fn() -> Object"},"initialize":{"!doc":"<p>Lifecycle method. Called by the page manager when the page is shown.\nFires the <code>initialize</code> event. You should create and add all your\nchild widgets of the view,  either by listening to the {@link #initialize} event or overriding\nthe {@link #_initialize} method. This is because a page can be instanced during\napplication startup and would then decrease performance when the widgets would be\nadded during constructor call. The {@link #_initialize} lifecycle method and the\n<code>initialize</code> are only called once when the page is shown for the first time.</p>","!type":"fn()"},"initLifeCycleState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>lifeCycleState</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #lifeCycleState}.</p>","!type":"fn(value: Object) -> Object"},"isInitialized":{"!doc":"<p>Returns the status of the initialization of the page.</p>","!type":"fn() -> bool"},"menu":{"!doc":"<p>Only used by Android PhoneGap applications. Called by the used page manager\nwhen the menu button was pressed. Fires the <code>menu</code> event.</p>","!type":"fn()"},"pause":{"!doc":"<p>Lifecycle method. Not used right now. Should be called when the current page\nis interrupted, e.g. by a dialog, so that page view updates can be interrupted.\nFires the <code>pause</code> event.</p>","!type":"fn()"},"resetLifeCycleState":{"!doc":"<p>Resets the user value of the property <code>lifeCycleState</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #lifeCycleState}.</p>","!type":"fn()"},"resume":{"!doc":"<p>Lifecycle method. Not used right now. Should be called when the current page\nis resuming from a interruption, e.g. when a dialog is closed, so that page\ncan resume updating the view.\nFires the <code>resume</code> event.</p>","!type":"fn()"},"setLifeCycleState":{"!doc":"<p>Sets the user value of the property <code>lifeCycleState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #lifeCycleState}.</p>","!type":"fn(value: Object) -> Object"},"show":{"!type":"fn(properties: +undefined)"},"start":{"!doc":"<p>Lifecycle method. Called by the page manager after the {@link #initialize}\nmethod when the page is shown. Fires the <code>start</code> event. You should\nregister all your event listener when this event occurs, so that no page\nupdates are done when page is not shown.</p>","!type":"fn()"},"stop":{"!doc":"<p>Lifecycle method. Called by the page manager when another page is shown.\nFires the <code>stop</code> event. You should unregister all your event\nlistener when this event occurs, so that no page updates are down when page is not shown.</p>","!type":"fn()"},"wait":{"!doc":"<p>Lifecycle method. Not used right now. Should be called when the current page\nwaits for data request etc.\nFires the <code>wait</code> event.</p>","!type":"fn()"}}}},"tabbar":{"TabBar":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>This widget displays a tab bar.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the widget.</p>\n\n<pre class=\"javascript\">\n  var tabBar = new qx.ui.mobile.tabbar.TabBar();\n  var tabButton1 = new qx.ui.mobile.tabbar.TabButton(\"Tab 1\");\n  tabButton1.setView(view1);\n  tabBar.add(tabButton1);\n  var tabButton2 = new qx.ui.mobile.tabbar.TabButton(\"Tab 2\");\n  tabButton2.setView(view2);\n  tabBar.add(tabButton2);\n\n  this.getRoot.add(tabBar);\n</pre>\n\n<p>This example creates a tab bar and adds two tab buttons to it.</p>","!type":"fn()","prototype":{"_applySelection":{"!doc":"<p>Applies changes of the property value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: +qx.ui.mobile.tabbar.TabButton, old: +qx.ui.mobile.tabbar.TabButton)"},"_onChangeView":{"!doc":"<p>Event handler. Called when the view was changed.</p>","!type":"fn(evt: +qx.event.type.Data)"},"_onTap":{"!doc":"<p>Event handler. Called when a tab event occurs.</p>","!type":"fn(evt: +qx.event.type.Tap)"},"add":{"!doc":"<p>Adds a tab button to the tab bar.</p>","!type":"fn(button: +qx.ui.mobile.tabbar.TabButton)"},"getSelection":{"!doc":"<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn() -> Object"},"initSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"remove":{"!doc":"<p>Removes a tab button from the tab bar.</p>","!type":"fn(button: +qx.ui.mobile.tabbar.TabButton)"},"resetSelection":{"!doc":"<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn()"},"setSelection":{"!doc":"<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"}}},"TabButton":{"!proto":"qx.ui.mobile.form.Button","!doc":"<p>A tab button widget.</p>\n\n<p>A tab button can be added to the tab bar and is associated with a\n{@link #view}.</p>","prototype":{"_applyView":{"!doc":"<p>Applies changes of the property value of the property <code>view</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #view}.</p>","!type":"fn(value: +qx.ui.mobile.core.Widget, old: +qx.ui.mobile.core.Widget)"},"getView":{"!doc":"<p>Returns the (computed) value of the property <code>view</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #view}.</p>","!type":"fn() -> Object"},"initView":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>view</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #view}.</p>","!type":"fn(value: Object) -> Object"},"resetView":{"!doc":"<p>Resets the user value of the property <code>view</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #view}.</p>","!type":"fn()"},"setView":{"!doc":"<p>Sets the user value of the property <code>view</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #view}.</p>","!type":"fn(value: Object) -> Object"}}}},"toolbar":{"Button":{"!proto":"qx.ui.mobile.form.Button","!doc":"<p>A button used in toolbars.</p>"},"Separator":{"!proto":"qx.ui.mobile.core.Widget","!doc":"<p>A separator widget used to separate widgets in a toolbar.</p>","!type":"fn()"},"ToolBar":{"!proto":"qx.ui.mobile.container.Composite","!doc":"<p>A toolbar widget.</p>","!type":"fn()","prototype":{"add":{"!doc":"<p>Adds a new child widget.</p>","!type":"fn(child: +qx.ui.mobile.core.Widget, layoutProperties?: +Map)"}}}}},"popup":{"Manager":{"!proto":"qx.core.Object","!doc":"<p>This singleton is used to manager multiple instances of popups and their\nstate.</p>","!type":"fn()","prototype":{"__onPointerDown":{"!doc":"<p>Event handler for pointer down events</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__updateIndexes":{"!doc":"<p>Updates the zIndex of all registered items to push\nnewly added ones on top of existing ones</p>","!type":"fn()"},"add":{"!doc":"<p>Registers a visible popup.</p>","!type":"fn(obj: +qx.ui.popup.Popup)"},"hideAll":{"!doc":"<p>Excludes all currently open popups,\nexcept those with {@link qx.ui.popup.Popup#autoHide} set to false.</p>","!type":"fn()"},"remove":{"!doc":"<p>Removes a popup from the registry</p>","!type":"fn(obj: +qx.ui.popup.Popup)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.popup.Manager"}},"Popup":{"!proto":"qx.ui.container.Composite","!doc":"<p>Popups are widgets, which can be placed on top of the application.\nThey are automatically added to the application root.</p>\n\n<p>Popups are used to display menus, the lists of combo or select boxes,\ntooltips, etc.</p>","!type":"fn()","prototype":{"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"},"getAutoHide":{"!doc":"<p>Returns the (computed) value of the property <code>autoHide</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoHide}.</p>","!type":"fn() -> Object"},"initAutoHide":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoHide</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoHide}.</p>","!type":"fn(value: Object) -> Object"},"isAutoHide":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>autoHide</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoHide}.</p>","!type":"fn() -> bool"},"resetAutoHide":{"!doc":"<p>Resets the user value of the property <code>autoHide</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoHide}.</p>","!type":"fn()"},"setAutoHide":{"!doc":"<p>Sets the user value of the property <code>autoHide</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoHide}.</p>","!type":"fn(value: Object) -> Object"},"show":{"!type":"fn()"},"toggleAutoHide":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>autoHide</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoHide}.</p>","!type":"fn() -> bool"}}}},"progressive":{"headfoot":{"Abstract":{"!proto":"qx.ui.container.Composite","!doc":"<p>The abstract class for a header or footer for use with Progressive&#8217;s Table\nrenderer.</p>","!type":"fn()","prototype":{"join":{"!doc":"<p>Join this header/footer to a Progressive.  This makes the Progressive\nobject available to the header/footer through the _progressive member.</p>","!type":"fn(progressive: +qx.ui.progressive.Progressive)"}}},"Null":{"!proto":"qx.ui.progressive.headfoot.Abstract","!doc":"<p>A null header/footer.  This is not displayed.</p>","!type":"fn()"},"Progress":{"!proto":"qx.ui.progressive.headfoot.Abstract","!doc":"<p>The standard footer used with Progressive&#8217;s Table renderer, to show\nprogress of loading data into the table.</p>","!type":"fn()","prototype":{"__linkColors":{"!doc":"<p>Helper to link the theme colors to the current class.</p>","!type":"fn()"},"_onChangeTheme":{"!type":"fn()"},"join":{"!type":"fn(progressive: +undefined)"}}},"TableHeading":{"!proto":"qx.ui.progressive.headfoot.Abstract","!doc":"<p>A header for a standard table.</p>","!type":"fn()","prototype":{"_resizeColumns":{"!doc":"<p>Event handler for the &#8220;resize&#8221; event.  We recalculate and set the\nnew widths of each of our columns.</p>","!type":"fn(e: +qx.event.type.Event)"},"getLayoutChildren":{"!doc":"<p>This method is required by the box layout. If returns an array of items\nto relayout.</p>","!type":"fn() -> +Array"},"join":{"!type":"fn(progressive: +undefined)"}}}},"model":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Data Model for Progressive renderer.</p>","prototype":{"getElementCount":{"!doc":"<p>Get the number of data elements currently available.</p>","!type":"fn() -> +Integer"},"getNextElement":{"!doc":"<p>Get the next available element from the data model.</p>","!type":"fn() -> Object"}}},"Default":{"!proto":"qx.ui.progressive.model.Abstract","!doc":"<p>Data Model for Progressive renderer.</p>","!type":"fn()","prototype":{"addElement":{"!doc":"<p>Add a single element to be progressively renderered.  The element must\nbe an object which contains at least two members: renderer (the\nrenderer name) and data.</p>","!type":"fn(elem: Object)"},"addElements":{"!doc":"<p>Add elements to be progressively renderered.  Each element must be an\nobject which contains at least two members: renderer (the renderer\nname) and data.</p>","!type":"fn(elems: +Array)"},"getElementCount":{"!type":"fn()"},"getNextElement":{"!type":"fn()"}}}},"Progressive":{"!proto":"qx.ui.container.Composite","!doc":"<i>Progressive</i>.\n\n<p>Follow progressive instructions provided by a data model.  A variable\nnumber of instructions are executed at one time, after which control is\nreturned briefly to the browser.  This allows browser rendering between\nbatches of instructions, improving the visual experience.</p>\n\n<i>Progressive</i> may be used for various purposes.  Two predefined\npurposes for which \"renderers\" are provided, are a progressively-rendered\ntable which allows variable row height, and a program load/initialization\nrenderer with progress bar.  (Note that the term \"renderer\" is interpreted\nquite broadly.  A renderer needn't actually render; rather it is just some\nset of activities that takes place at one time, e.g a row of table data or\na single widget added to the document or a sending a request to a server,\netc.)","!type":"fn()","prototype":{"__createStateRendererData":{"!doc":"<p>Create the map of empty objects for use by the renderers.</p>","!type":"fn() -> +Map"},"__dataAvailable":{"!doc":"<p>Event callback for the &#8220;dataAvailable&#8221; event.</p>","!type":"fn(e: +qx.event.type.Data)"},"__renderElementBatch":{"!doc":"<p>Render a batch of elements.  The batch size is determined by the\nProgressive&#8217;s batch size at the time that rendering began.  That batch\nsize was copied into the {@link qx.ui.progressive.State} object and is\nused herein.</p>","!type":"fn(state: +qx.ui.progressive.State)"},"_applyDataModel":{"!doc":"<p>Called when the dataModel property is changed.</p>","!type":"fn(value: +qx.ui.progressive.model.Abstract, old: +undefined)"},"addRenderer":{"!doc":"<p>Add a renderer that can be referenced by the data model.</p>","!type":"fn(name: string, renderer: +qx.ui.progressive.renderer.Abstract)"},"getBatchSize":{"!doc":"<p>Returns the (computed) value of the property <code>batchSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn() -> Object"},"getDataModel":{"!doc":"<p>Returns the (computed) value of the property <code>dataModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dataModel}.</p>","!type":"fn() -> Object"},"getFlushWidgetQueueAfterBatch":{"!doc":"<p>Returns the (computed) value of the property <code>flushWidgetQueueAfterBatch</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #flushWidgetQueueAfterBatch}.</p>","!type":"fn() -> Object"},"getInterElementTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>interElementTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interElementTimeout}.</p>","!type":"fn() -> Object"},"getStructure":{"!doc":"<p>Return the structure object</p>","!type":"fn() -> +qx.ui.progressive.structure.Abstract"},"initBatchSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>batchSize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn(value: Object) -> Object"},"initDataModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dataModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dataModel}.</p>","!type":"fn(value: Object) -> Object"},"initFlushWidgetQueueAfterBatch":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>flushWidgetQueueAfterBatch</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #flushWidgetQueueAfterBatch}.</p>","!type":"fn(value: Object) -> Object"},"initInterElementTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>interElementTimeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #interElementTimeout}.</p>","!type":"fn(value: Object) -> Object"},"isFlushWidgetQueueAfterBatch":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>flushWidgetQueueAfterBatch</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #flushWidgetQueueAfterBatch}.</p>","!type":"fn() -> bool"},"removeRenderer":{"!doc":"<p>Remove a previosly added renderer.</p>","!type":"fn(name: string)"},"render":{"!doc":"<p>Render the elements available from the data model.  Elements are\nrendered in batches of size {@link #batchSize}.  After each batch of\nelements are rendered, control is returned temporarily to the\nbrowser, so that actual screen updates can take place.  A timer is\nused to regain control a short while later, in order to render the\nnext batch of element.</p>","!type":"fn()"},"resetBatchSize":{"!doc":"<p>Resets the user value of the property <code>batchSize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn()"},"resetDataModel":{"!doc":"<p>Resets the user value of the property <code>dataModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dataModel}.</p>","!type":"fn()"},"resetFlushWidgetQueueAfterBatch":{"!doc":"<p>Resets the user value of the property <code>flushWidgetQueueAfterBatch</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #flushWidgetQueueAfterBatch}.</p>","!type":"fn()"},"resetInterElementTimeout":{"!doc":"<p>Resets the user value of the property <code>interElementTimeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #interElementTimeout}.</p>","!type":"fn()"},"setBatchSize":{"!doc":"<p>Sets the user value of the property <code>batchSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn(value: Object) -> Object"},"setDataModel":{"!doc":"<p>Sets the user value of the property <code>dataModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dataModel}.</p>","!type":"fn(value: Object) -> Object"},"setFlushWidgetQueueAfterBatch":{"!doc":"<p>Sets the user value of the property <code>flushWidgetQueueAfterBatch</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #flushWidgetQueueAfterBatch}.</p>","!type":"fn(value: Object) -> Object"},"setInterElementTimeout":{"!doc":"<p>Sets the user value of the property <code>interElementTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interElementTimeout}.</p>","!type":"fn(value: Object) -> Object"},"toggleFlushWidgetQueueAfterBatch":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>flushWidgetQueueAfterBatch</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #flushWidgetQueueAfterBatch}.</p>","!type":"fn() -> bool"}}},"renderer":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Abstract renderer for Progressive.</p>","prototype":{"join":{"!doc":"<p>Join this renderer to its {@link qx.ui.progressive.Progressive}.</p>","!type":"fn(progressive: +qx.ui.progressive.Progressive, name: string)"},"render":{"!doc":"<p>Render the provided element in the renderer&#8217;s unique way.</p>","!type":"fn(state: +qx.ui.progressive.State, element: Object)"}}},"FunctionCaller":{"!proto":"qx.ui.progressive.renderer.Abstract","!doc":"<p>Function &#8220;renderer&#8221; for Progressive.\nThis is a renderer that simply calls the function provided by the data\nelement.</p>","prototype":{"render":{"!type":"fn(state: +undefined, element: +undefined)"}}},"table":{"cell":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Cell Renderer for Progressive&#8217;s Table.</p>\n\n<p>Many of the methods in this class accept a parameter called cellInfo.  This\nparameter is an object with the following members:</p>\n\n<dl>\n  <dt>\n    state\n  </dt>\n  <dd>\n    The {@link qx.ui.progressive.State} object pertaining to this rendering\n    session.\n  </dd>\n\n<dt>\n    rowDiv\n  </dt>\n  <dd>\n    The \"div\" DOM element of the row in which this cell is to be added.\n  </dd>\n\n<dt>\n    element\n  </dt>\n  <dd>\n    The entire element object returned by the data model.\n  </dd>\n\n<dt>\n    dataIndex\n  </dt>\n  <dd>\n    The index into the data element provided by the data model.\n    Effectively, this is the column number.\n  </dd>\n\n<dt>\n    cellData\n  </dt>\n  <dd>\n    The data from the data model, to be rendered.  This the specific column\n    data for the column being rendered, and is a shorthand for\n    element.data[element.dataIndex].\n  </dd>\n\n<dt>\n    height <span>Input/Output parameter!</span>\n  </dt>\n  <dd>\n    On input to a cell renderer, this contains the height, as determined to\n    date, for the current row.  The first column being rendered will\n    receive a height of zero.  Upon return, it may leave the height at\n    zero, meaning that it will accept any minimum height, or may specify a\n    minimum height by setting this member.  Subsequent column cell renderers\n    will receive the maximum height specified by any previous cell\n    renderer.  Upon completion of calling each of the cell renderers for a\n    row, the row height will be set to the value found in this member.\n  </dd>\n</dl>","prototype":{"_getCellExtras":{"!doc":"<p>Retrieve any extra attributes the cell renderer wants applied to this\ncell.  Extra attributes could be such things as\n&#8220;onclick=&#8216;handleClick()&#8217;;&#8221;</p>","!type":"fn(cellInfo: Object) -> string"},"_getCellStyle":{"!doc":"<p>Retrieve any style characteristics the cell renderer wants applied to\nthis cell.</p>","!type":"fn(cellInfo: Object) -> string"},"_getContentHtml":{"!doc":"<p>Retrieve the <span class=\"caps\">HTML</span> content to be added to the cell div.</p>","!type":"fn(cellInfo: Object) -> string"},"render":{"!doc":"<p>Given the provided cell information, generate the <span class=\"caps\">HTML</span> for this\ncell.</p>","!type":"fn(cellInfo: Object) -> string"}}},"Boolean":{"!proto":"qx.ui.progressive.renderer.table.cell.Icon","!doc":"<p>Table Cell Boolean Renderer.</p>","!type":"fn()","prototype":{"__resolveImages":{"!doc":"<p>Resolve the boolean images using the alias and resource manager.</p>","!type":"fn()"},"_getCellStyle":{"!type":"fn(cellInfo: +undefined)"},"_identifyImage":{"!type":"fn(cellInfo: +undefined)"},"getAllowToggle":{"!doc":"<p>Returns the (computed) value of the property <code>allowToggle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowToggle}.</p>","!type":"fn() -> Object"},"initAllowToggle":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowToggle</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowToggle}.</p>","!type":"fn(value: Object) -> Object"},"isAllowToggle":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowToggle</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowToggle}.</p>","!type":"fn() -> bool"},"resetAllowToggle":{"!doc":"<p>Resets the user value of the property <code>allowToggle</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowToggle}.</p>","!type":"fn()"},"setAllowToggle":{"!doc":"<p>Sets the user value of the property <code>allowToggle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowToggle}.</p>","!type":"fn(value: Object) -> Object"},"toggleAllowToggle":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowToggle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowToggle}.</p>","!type":"fn() -> bool"}}},"Conditional":{"!proto":"qx.ui.progressive.renderer.table.cell.Abstract","!doc":"<p>Table Cell Renderer for Progressive.</p>","!type":"fn()","prototype":{"__applyFormatting":{"!doc":"<p>Applies the cell styles to the style map.</p>","!type":"fn(condition: +Array, style: +Map)"},"_getCellStyle":{"!doc":"<p>Overridden; called whenever the cell updates. The cell will iterate\nthrough each available condition and apply formatting for those that\nmatch. Multiple conditions can match, but later conditions will\noverride earlier ones. Conditions with null values will stack with\nother conditions that apply to that value.</p>","!type":"fn(cellInfo: +Map) -> +Map"},"addBetweenCondition":{"!doc":"<p>The addBetweenCondition method is used to add a between condition to\nthe cell renderer.</p>\n\n<p>Note: Passing null is different from passing an empty string in the\nalign, color, style and weight arguments. Null will allow pre-existing\nformatting to pass through, where an empty string will clear it back to\nthe default formatting set in the constructor.</p>","!type":"fn(condition: string, value1: +Integer, value2: +Integer, align: string, color: string, style: string, weight: string, target: string)"},"addNumericCondition":{"!doc":"<p>The addNumericCondition method is used to add a basic numeric condition\nto the cell renderer.</p>\n\n<p>Note: Passing null is different from passing an empty string in the\nalign, color, style and weight arguments. Null will allow pre-existing\nformatting to pass through, where an empty string will clear it back to\nthe default formatting set in the constructor.</p>","!type":"fn(condition: string, value1: +Integer, align: string, color: string, style: string, weight: string, target: string)"},"addRegex":{"!doc":"<p>The addRegex method is used to add a regular expression condition to\nthe cell renderer.</p>\n\n<p>Note: Passing null is different from passing an empty string in the\nalign, color, style and weight arguments. Null will allow pre-existing\nformatting to pass through, where an empty string will clear it back to\nthe default formatting set in the constructor.</p>","!type":"fn(regex: string, align: string, color: string, style: string, weight: string, target: string)"}}},"Default":{"!proto":"qx.ui.progressive.renderer.table.cell.Abstract","!doc":"<p>Table Cell Renderer for Progressive.</p>","!type":"fn()","prototype":{"_formatValue":{"!doc":"<p>Formats a value in a reasonably predictable fashion.</p>","!type":"fn(value: Object) -> string"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"}}},"Html":{"!proto":"qx.ui.progressive.renderer.table.cell.Abstract","!doc":"<p>Table Cell Html Renderer.</p>\n\n<p>Renderer the specified <span class=\"caps\">HTML</span> in the cell.</p>"},"Icon":{"!proto":"qx.ui.progressive.renderer.table.cell.Abstract","!doc":"<p>Abstract Icon cell renderer.</p>","!type":"fn()","prototype":{"__getImageData":{"!doc":"<p>Obtain the image data (url, tooltip) that&#8217;s appropriate for this cell</p>","!type":"fn(cellInfo: +Map) -> +Map"},"_getCellStyle":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"_identifyImage":{"!doc":"<p>Identify the image to be displayed in the cell.</p>","!type":"fn(cellInfo: +Map) -> +Map"},"getBlankImage":{"!doc":"<p>Retrieve the <span class=\"caps\">URI</span> for a blank image</p>","!type":"fn() -> string"}}},"Image":{"!proto":"qx.ui.progressive.renderer.table.cell.Icon","!doc":"<p>Table Cell Boolean Renderer.</p>","!type":"fn()","prototype":{"_identifyImage":{"!type":"fn(cellInfo: +undefined)"}}},"String":{"!proto":"qx.ui.progressive.renderer.table.cell.Abstract","!doc":"<p>Table Cell Renderer for Progressive.</p>","!type":"fn()","prototype":{"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"}}}},"Row":{"!proto":"qx.ui.progressive.renderer.Abstract","!doc":"<p>Table Row renderer for Progressive.</p>","!type":"fn()","prototype":{"__linkColors":{"!doc":"<p>Helper to link the theme colors to the current class</p>","!type":"fn()"},"_resizeColumns":{"!doc":"<p>Event handler for the &#8220;resize&#8221; event.  We recalculate the\nwidths of each of the columns, and modify the stylesheet rule\napplicable to each column, to apply the new widths.</p>","!type":"fn(e: +qx.event.type.Event)"},"addRenderer":{"!doc":"<p>Add a cell renderer for use within a row rendered by this row\nrenderer.</p>","!type":"fn(column: +Integer, renderer: +qx.ui.progressive.renderer.table.cell.Abstract)"},"getDefaultRowHeight":{"!doc":"<p>Returns the (computed) value of the property <code>defaultRowHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultRowHeight}.</p>","!type":"fn() -> Object"},"getLayoutChildren":{"!doc":"<p>This method is required by the box layout. If returns an array of items\nto relayout.</p>","!type":"fn() -> +Array"},"initDefaultRowHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultRowHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultRowHeight}.</p>","!type":"fn(value: Object) -> Object"},"join":{"!type":"fn(progressive: +undefined, name: +undefined)"},"removeRenderer":{"!doc":"<p>Remove a cell renderer previously added with {@link #addRenderer}.</p>","!type":"fn(column: +Integer)"},"render":{"!type":"fn(state: +undefined, element: +undefined)"},"resetDefaultRowHeight":{"!doc":"<p>Resets the user value of the property <code>defaultRowHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultRowHeight}.</p>","!type":"fn()"},"setDefaultRowHeight":{"!doc":"<p>Sets the user value of the property <code>defaultRowHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultRowHeight}.</p>","!type":"fn(value: Object) -> Object"}}},"Widths":{"!proto":"qx.core.Object","!doc":"<p>Column width array for a whole set of columns</p>","!type":"fn()","prototype":{"getData":{"!doc":"<p>Get the array of column data.</p>","!type":"fn() -> +Array"},"set":{"!doc":"<p>Set the width, minimum width and/or maximum width of a column at one\ntime.</p>","!type":"fn(column: +Integer, map: +Map)"},"setMaxWidth":{"!doc":"<p>Set the maximum width of a column.</p>","!type":"fn(column: +Integer, width: +Integer)"},"setMinWidth":{"!doc":"<p>Set the minimum width of a column.</p>","!type":"fn(column: +Integer, width: +Integer)"},"setWidth":{"!doc":"<p>Set the width of a column.</p>","!type":"fn(column: +Integer, width: +Integer)"}}}}},"State":{"!proto":"qx.core.Object","!doc":"<p>State of renderering by Progressive.</p>","!type":"fn()","prototype":{"getBatchSize":{"!doc":"<p>Returns the (computed) value of the property <code>batchSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn() -> Object"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getPane":{"!doc":"<p>Returns the (computed) value of the property <code>pane</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pane}.</p>","!type":"fn() -> Object"},"getProgressive":{"!doc":"<p>Returns the (computed) value of the property <code>progressive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #progressive}.</p>","!type":"fn() -> Object"},"getRendererData":{"!doc":"<p>Returns the (computed) value of the property <code>rendererData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rendererData}.</p>","!type":"fn() -> Object"},"getUserData":{"!doc":"<p>Returns the (computed) value of the property <code>userData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #userData}.</p>","!type":"fn() -> Object"},"initBatchSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>batchSize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initPane":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>pane</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #pane}.</p>","!type":"fn(value: Object) -> Object"},"initProgressive":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>progressive</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #progressive}.</p>","!type":"fn(value: Object) -> Object"},"initRendererData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rendererData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rendererData}.</p>","!type":"fn(value: Object) -> Object"},"initUserData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>userData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #userData}.</p>","!type":"fn(value: Object) -> Object"},"resetBatchSize":{"!doc":"<p>Resets the user value of the property <code>batchSize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetPane":{"!doc":"<p>Resets the user value of the property <code>pane</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #pane}.</p>","!type":"fn()"},"resetProgressive":{"!doc":"<p>Resets the user value of the property <code>progressive</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #progressive}.</p>","!type":"fn()"},"resetRendererData":{"!doc":"<p>Resets the user value of the property <code>rendererData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rendererData}.</p>","!type":"fn()"},"resetUserData":{"!doc":"<p>Resets the user value of the property <code>userData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #userData}.</p>","!type":"fn()"},"setBatchSize":{"!doc":"<p>Sets the user value of the property <code>batchSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #batchSize}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setPane":{"!doc":"<p>Sets the user value of the property <code>pane</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #pane}.</p>","!type":"fn(value: Object) -> Object"},"setProgressive":{"!doc":"<p>Sets the user value of the property <code>progressive</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #progressive}.</p>","!type":"fn(value: Object) -> Object"},"setRendererData":{"!doc":"<p>Sets the user value of the property <code>rendererData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rendererData}.</p>","!type":"fn(value: Object) -> Object"},"setUserData":{"!doc":"<p>Sets the user value of the property <code>userData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #userData}.</p>","!type":"fn(value: Object) -> Object"}}},"structure":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Abstract structure definition for Progressive</p>","!type":"fn()","prototype":{"applyStructure":{"!doc":"<p>Apply the structure typically defined in the constructor to the\nProgressive.</p>","!type":"fn(progressive: +qx.ui.progressive.Progressive)"},"getPane":{"!doc":"<p>Get the pane in which this Progressive renders.</p>","!type":"fn() -> +qx.ui.core.Widget"}}},"Default":{"!proto":"qx.ui.progressive.structure.Abstract","!doc":"<p>Structure definition for Progressive</p>","!type":"fn()","prototype":{"applyStructure":{"!type":"fn(progressive: +undefined)"},"getFooter":{"!doc":"<p>Return the footer</p>","!type":"fn() -> +qx.ui.progressive.headfoot.Abstract"},"getHeader":{"!doc":"<p>Return the header</p>","!type":"fn() -> +qx.ui.progressive.headfoot.Abstract"}}}}},"root":{"Abstract":{"!proto":"qx.ui.core.Widget","!doc":"<p>Shared implementation for all root widgets.</p>","!type":"fn()","prototype":{"__preventScrollWhenFocused":{"!doc":"<p>Fix unexpected scrolling when pressing &#8220;Space&#8221; while a widget is focused.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_applyNativeContextMenu":{"!doc":"<p>Applies changes of the property value of the property <code>nativeContextMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeContextMenu}.</p>","!type":"fn(value: bool, old: bool)"},"_applyNativeHelp":{"!doc":"<p>Applies changes of the property value of the property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn(value: bool, old: bool)"},"_onNativeContextMenu":{"!doc":"<p>Stops the <code>contextmenu</code> event from showing the native context menu</p>","!type":"fn(e: +qx.event.type.Mouse)"},"getGlobalCursor":{"!doc":"<p>Returns the (computed) value of the property <code>globalCursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #globalCursor}.</p>","!type":"fn() -> Object"},"getLayout":{"!doc":"<p>Get the widget&#8217;s layout manager.</p>","!type":"fn() -> +qx.ui.layout.Abstract"},"getNativeHelp":{"!doc":"<p>Returns the (computed) value of the property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn() -> Object"},"initGlobalCursor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>globalCursor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #globalCursor}.</p>","!type":"fn(value: Object) -> Object"},"initNativeHelp":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nativeHelp</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn(value: Object) -> Object"},"isNativeHelp":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>nativeHelp</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn() -> bool"},"isRootWidget":{"!type":"fn()"},"resetGlobalCursor":{"!doc":"<p>Resets the user value of the property <code>globalCursor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #globalCursor}.</p>","!type":"fn()"},"resetNativeHelp":{"!doc":"<p>Resets the user value of the property <code>nativeHelp</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn()"},"setGlobalCursor":{"!doc":"<p>Sets the user value of the property <code>globalCursor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #globalCursor}.</p>","!type":"fn(value: Object) -> Object"},"setNativeHelp":{"!doc":"<p>Sets the user value of the property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn(value: Object) -> Object"},"toggleNativeHelp":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>nativeHelp</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nativeHelp}.</p>","!type":"fn() -> bool"}}},"Application":{"!proto":"qx.ui.root.Abstract","!doc":"<p>This is the root widget for qooxdoo applications with an\n&#8220;application&#8221; like behaviour. The widget will span the whole viewport\nand the document body will have no scrollbars.</p>\n\n<p>The root widget does not support paddings and decorators with insets.</p>\n\n<p>If you want to enhance <span class=\"caps\">HTML</span> pages with qooxdoo widgets please use\n{@link qx.ui.root.Page} eventually in combination with\n{@link qx.ui.root.Inline} widgets.</p>\n\n<p>This class uses a {@link qx.ui.layout.Canvas} as fixed layout. The layout\ncannot be changed.</p>","!type":"fn()","prototype":{"__stopScrolling":{"!doc":"<p>Handler for the native &#8216;touchstart&#8217; on the window which prevents\nthe native page scrolling.</p>","!type":"fn(e: +qx.event.type.Touch)"},"_applyPadding":{"!doc":"<p>Applies changes of the property value of the properties <code>paddingBottom</code>, <code>paddingLeft</code>, <code>paddingRight</code> and <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #paddingBottom}, {@link #paddingLeft}, {@link #paddingRight} and {@link #paddingTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_computeSizeHint":{"!type":"fn()"},"_createContentElement":{"!doc":"<p>Create the widget&#8217;s container <span class=\"caps\">HTML</span> element.</p>","!type":"fn() -> +qx.html.Element"},"_onResize":{"!doc":"<p>Listener for window&#8217;s resize event</p>","!type":"fn(e: +qx.event.type.Event)"}}},"Inline":{"!proto":"qx.ui.root.Abstract","!doc":"<p>This classes could be used to insert qooxdoo islands into existing\nweb pages. You can use the isles to place any qooxdoo powered widgets\ninside a layout made using traditional <span class=\"caps\">HTML</span> markup and <span class=\"caps\">CSS</span>.</p>\n\n<p>The size of the widget in each dimension can either be determined by the\nsize hint of the inline&#8217;s children or by the size of the root <span class=\"caps\">DOM</span> element. If\n<code>dynamicX</code>/<code>dynamicY</code> is true the width/height of the <span class=\"caps\">DOM</span>\nelement is used.</p>\n\n<p>This class uses {@link qx.ui.layout.Basic} as default layout. The layout\ncan be changed using the {@link #setLayout} method.</p>\n\n<p>To position popups and tooltips please have a look at {@link qx.ui.root.Page}.</p>","!type":"fn()","prototype":{"__initDynamicMode":{"!doc":"<p>Performs several checks for dynamic mode and adds the &#8220;resize&#8221; listener</p>","!type":"fn()"},"_computeSizeHint":{"!type":"fn()"},"_createContentElement":{"!type":"fn()"},"_onResize":{"!doc":"<p>Listener for the element&#8217;s resize event</p>","!type":"fn(e: +qx.event.type.Event)"},"_onWindowResize":{"!doc":"<p>Listener for the window&#8217;s resize event.</p>","!type":"fn()"}}},"Page":{"!proto":"qx.ui.root.Abstract","!doc":"<p>This widget provides a root widget for popups and tooltips if qooxdoo is used\ninside a traditional <span class=\"caps\">HTML</span> page. Widgets placed into a page will overlay the\n<span class=\"caps\">HTML</span> content.</p>\n\n<p>For this reason the widget&#8217;s layout is initialized with an instance of\n{@link qx.ui.layout.Basic}. The widget&#8217;s layout cannot be changed.</p>\n\n<p>The page widget does not support paddings and decorators with insets.</p>\n\n<p>Note: This widget does not support decorations!</p>\n\n<p>If you want to place widgets inside existing <span class=\"caps\">DOM</span> elements\nuse {@link qx.ui.root.Inline}.</p>","!type":"fn()","prototype":{"__onResize":{"!doc":"<p>Adjust html element size on layout resizes.</p>","!type":"fn(e: +qx.event.type.Data)"},"_applyPadding":{"!doc":"<p>Applies changes of the property value of the properties <code>paddingBottom</code>, <code>paddingLeft</code>, <code>paddingRight</code> and <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #paddingBottom}, {@link #paddingLeft}, {@link #paddingRight} and {@link #paddingTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_computeSizeHint":{"!type":"fn()"},"_createContentElement":{"!type":"fn()"},"supportsMaximize":{"!doc":"<p>Whether the configured layout supports a maximized window\ne.g. is a Canvas.</p>","!type":"fn() -> bool"}}}},"splitpane":{"Blocker":{"!proto":"qx.html.Element","!doc":"<p>A special blocker element for the splitpane which is based on\n{@link qx.html.Element} and takes care of the positioning of the div.</p>","!type":"fn()","prototype":{"_applyOrientation":{"!doc":"<p>Applies changes of the property value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object, old: Object)"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"setHeight":{"!doc":"<p>Takes the two parameter and sets the propper height of the blocker.</p>","!type":"fn(offset: number, spliterSize: number)"},"setLeft":{"!doc":"<p>Takes the two parameter and sets the propper left position of\nthe blocker.</p>","!type":"fn(offset: number, splitterLeft: number)"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"setTop":{"!doc":"<p>Takes the two parameter and sets the propper top position of\nthe blocker.</p>","!type":"fn(offset: number, splitterTop: number)"},"setWidth":{"!doc":"<p>Takes the two parameters and set the propper width of the blocker.</p>","!type":"fn(offset: number, spliterSize: number)"}}},"HLayout":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>Layouter for horizontal split panes.</p>","prototype":{"_computeSizeHint":{"!type":"fn()"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"}}},"Pane":{"!proto":"qx.ui.core.Widget","!doc":"<p>A split panes divides an area into two panes. The ratio between the two\npanes is configurable by the user using the splitter.</p>","!type":"fn()","prototype":{"__computeSizes":{"!doc":"<p>Computes widgets&#8217; sizes based on the pointer coordinate.</p>","!type":"fn()"},"__createBlocker":{"!doc":"<p>Creates a blocker for the splitter which takes all bouse events and\nalso handles the offset and cursor.</p>","!type":"fn(orientation: string)"},"__onSplitterMove":{"!doc":"<p>Move handler for the spliiter which takes care of the external\ntriggered resize of children.</p>","!type":"fn(e: +qx.event.type.Data)"},"__setBlockerPosition":{"!doc":"<p>Helper for setting the blocker to the right position, which depends on\nthe offset, orientation and the current position of the splitter.</p>","!type":"fn(bounds?: +Map)"},"_applyOffset":{"!doc":"<p>Applies changes of the property value of the property <code>offset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyOrientation":{"!doc":"<p>Apply routine for the orientation property.</p>\n\n<p>Sets the pane&#8217;s layout to vertical or horizontal split layout.</p>","!type":"fn(value: string, old: string)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_finalizeSizes":{"!doc":"<p>Updates widgets&#8217; sizes based on the slider position.</p>","!type":"fn()"},"_isActiveDragSession":{"!doc":"<p>Determines whether this is an active drag session</p>","!type":"fn() -> bool"},"_onPointerDown":{"!doc":"<p>Handler for pointerdown event.</p>\n\n<p>Shows slider widget and starts drag session if pointer is near/on splitter widget.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerMove":{"!doc":"<p>Handler for pointermove event.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerOut":{"!doc":"<p>Handler for pointerout event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerUp":{"!doc":"<p>Handler for pointerup event</p>\n\n<p>Sets widget sizes if dragging session has been active.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_setLastPointerPosition":{"!doc":"<p>Sets the last pointer position.</p>","!type":"fn(x: +Integer, y: +Integer)"},"add":{"!doc":"<p>Adds a widget to the pane.</p>\n\n<p>Sets the pane&#8217;s layout to vertical or horizontal split layout. Depending on the\npane&#8217;s layout the first widget will be the left or top widget, the second one\nthe bottom or right widget. Adding more than two widgets will overwrite the\nexisting ones.</p>","!type":"fn(widget: +qx.ui.core.Widget, flex: number)"},"getBlocker":{"!doc":"<p>Returns the blocker used over the splitter. this could be used for\nadding event listeners like tap or dbltap.</p>","!type":"fn() -> +qx.ui.splitpane.Blocker"},"getChildren":{"!doc":"<p>Returns an array containing the pane&#8217;s content.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getOffset":{"!doc":"<p>Returns the (computed) value of the property <code>offset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn() -> Object"},"getOrientation":{"!doc":"<p>Returns the (computed) value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn() -> Object"},"initOffset":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>offset</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn(value: Object) -> Object"},"initOrientation":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>orientation</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"},"remove":{"!doc":"<p>Removes the given widget from the pane.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"resetOffset":{"!doc":"<p>Resets the user value of the property <code>offset</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn()"},"resetOrientation":{"!doc":"<p>Resets the user value of the property <code>orientation</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn()"},"setOffset":{"!doc":"<p>Sets the user value of the property <code>offset</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #offset}.</p>","!type":"fn(value: Object) -> Object"},"setOrientation":{"!doc":"<p>Sets the user value of the property <code>orientation</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #orientation}.</p>","!type":"fn(value: Object) -> Object"}}},"Slider":{"!proto":"qx.ui.core.Widget","!doc":"<p>The slider of the SplitPane (used during drag sessions for fast feedback)</p>"},"Splitter":{"!proto":"qx.ui.core.Widget","!doc":"<p>The splitter is the element between the two panes.</p>","!type":"fn()","prototype":{"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"}}},"VLayout":{"!proto":"qx.ui.layout.Abstract","!doc":"<p>Layouter for vertical split panes.</p>","prototype":{"_computeSizeHint":{"!type":"fn()"},"renderLayout":{"!type":"fn(availWidth: +undefined, availHeight: +undefined, padding: +undefined)"}}}},"style":{"Stylesheet":{"!proto":"qx.core.Object","!doc":"<p>Global class which handles the single stylesheet used for qx.desktop.</p>","!type":"fn()","prototype":{"addRule":{"!doc":"<p>Adds a rule to the global stylesheet.</p>","!type":"fn(selector: string, css: string)"},"hasRule":{"!doc":"<p>Check if a rule exists.</p>","!type":"fn(selector: string) -> bool"},"removeRule":{"!doc":"<p>Remove the rule for the given selector.</p>","!type":"fn(selector: string)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.style.Stylesheet"}}},"table":{"celleditor":{"AbstractField":{"!proto":"qx.core.Object","!doc":"<p>An abstract cell editor factory creating text/password/spinner/... fields.</p>","prototype":{"_createEditor":{"!doc":"<p>Factory to create the editor widget</p>","!type":"fn() -> +qx.ui.core.Widget"},"createCellEditor":{"!type":"fn(cellInfo: +undefined)"},"getCellEditorValue":{"!type":"fn(cellEditor: +undefined)"},"getValidationFunction":{"!doc":"<p>Returns the (computed) value of the property <code>validationFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn() -> Object"},"initValidationFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>validationFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn(value: Object) -> Object"},"resetValidationFunction":{"!doc":"<p>Resets the user value of the property <code>validationFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn()"},"setValidationFunction":{"!doc":"<p>Sets the user value of the property <code>validationFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn(value: Object) -> Object"}}},"CheckBox":{"!proto":"qx.core.Object","!doc":"<p>For editing boolean data in a checkbox. It is advisable to use this in\nconjunction with {@link qx.ui.table.cellrenderer.Boolean}.</p>","prototype":{"createCellEditor":{"!type":"fn(cellInfo: +undefined)"},"getCellEditorValue":{"!type":"fn(cellEditor: +undefined)"}}},"ComboBox":{"!proto":"qx.core.Object","!doc":"<p>A cell editor factory creating combo boxes.</p>","prototype":{"createCellEditor":{"!type":"fn(cellInfo: +undefined)"},"getCellEditorValue":{"!type":"fn(cellEditor: +undefined)"},"getListData":{"!doc":"<p>Returns the (computed) value of the property <code>listData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn() -> Object"},"getValidationFunction":{"!doc":"<p>Returns the (computed) value of the property <code>validationFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn() -> Object"},"initListData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>listData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn(value: Object) -> Object"},"initValidationFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>validationFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn(value: Object) -> Object"},"resetListData":{"!doc":"<p>Resets the user value of the property <code>listData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn()"},"resetValidationFunction":{"!doc":"<p>Resets the user value of the property <code>validationFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn()"},"setListData":{"!doc":"<p>Sets the user value of the property <code>listData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn(value: Object) -> Object"},"setValidationFunction":{"!doc":"<p>Sets the user value of the property <code>validationFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn(value: Object) -> Object"}}},"Dynamic":{"!proto":"qx.core.Object","!doc":"<p>A cell editor factory which can dynamically exchange the cell editor\nbased on information retrieved at runtime. This is useful when different\nrows in a column should have different cellEditors based on cell content\nor row meta data. A typical example would be a spreadsheet that has different\nkind of data in one column.</p>","!type":"fn()","prototype":{"createCellEditor":{"!doc":"<p>Creates the cell editor based on the cellEditorFactory instance\nreturned by the function stored in the cellEditorFactoryFunction\nproperty. Passes the cellInfo map to the function.</p>","!type":"fn(cellInfo: +Map) -> +qx.ui.core.Widget"},"getCellEditorFactoryFunction":{"!doc":"<p>Returns the (computed) value of the property <code>cellEditorFactoryFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cellEditorFactoryFunction}.</p>","!type":"fn() -> Object"},"getCellEditorValue":{"!type":"fn(cellEditor: +undefined)"},"initCellEditorFactoryFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cellEditorFactoryFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cellEditorFactoryFunction}.</p>","!type":"fn(value: Object) -> Object"},"resetCellEditorFactoryFunction":{"!doc":"<p>Resets the user value of the property <code>cellEditorFactoryFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cellEditorFactoryFunction}.</p>","!type":"fn()"},"setCellEditorFactoryFunction":{"!doc":"<p>Sets the user value of the property <code>cellEditorFactoryFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cellEditorFactoryFunction}.</p>","!type":"fn(value: Object) -> Object"}}},"PasswordField":{"!proto":"qx.ui.table.celleditor.AbstractField","!doc":"<p>A cell editor factory creating password fields fields.</p>","prototype":{"_createEditor":{"!type":"fn()"}}},"SelectBox":{"!proto":"qx.core.Object","!doc":"<p>A cell editor factory creating select boxes.</p>","prototype":{"createCellEditor":{"!type":"fn(cellInfo: +undefined)"},"getCellEditorValue":{"!type":"fn(cellEditor: +undefined)"},"getListData":{"!doc":"<p>Returns the (computed) value of the property <code>listData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn() -> Object"},"getValidationFunction":{"!doc":"<p>Returns the (computed) value of the property <code>validationFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn() -> Object"},"initListData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>listData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn(value: Object) -> Object"},"initValidationFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>validationFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn(value: Object) -> Object"},"resetListData":{"!doc":"<p>Resets the user value of the property <code>listData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn()"},"resetValidationFunction":{"!doc":"<p>Resets the user value of the property <code>validationFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn()"},"setListData":{"!doc":"<p>Sets the user value of the property <code>listData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #listData}.</p>","!type":"fn(value: Object) -> Object"},"setValidationFunction":{"!doc":"<p>Sets the user value of the property <code>validationFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #validationFunction}.</p>","!type":"fn(value: Object) -> Object"}}},"TextField":{"!proto":"qx.ui.table.celleditor.AbstractField","!doc":"<p>A cell editor factory creating text fields.</p>","prototype":{"_createEditor":{"!type":"fn()"},"getCellEditorValue":{"!type":"fn(cellEditor: +undefined)"}}}},"cellrenderer":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>An abstract data cell renderer that does the basic coloring\n(borders, selected look, ...).</p>","!type":"fn()","prototype":{"_createStyleSheet":{"!doc":"<p>Creates the style sheet used for the table cells.</p>","!type":"fn()"},"_getCellAttributes":{"!doc":"<p>Retrieve any extra attributes the cell renderer wants applied to this\ncell.</p>","!type":"fn(cellInfo: +Map) -> string"},"_getCellClass":{"!doc":"<p>Get a string of the cell element&#8217;s <span class=\"caps\">HTML</span> classes.</p>\n\n<p>This method may be overridden by sub classes.</p>","!type":"fn(cellInfo: +Map) -> string"},"_getCellSizeStyle":{"!doc":"<p>Get the cell size taking the box model into account</p>","!type":"fn(width: +Integer, height: +Integer, insetX: +Integer, insetY: +Integer) -> string"},"_getCellStyle":{"!doc":"<p>Returns the <span class=\"caps\">CSS</span> styles that should be applied to the main div of this\ncell.</p>\n\n<p>This method may be overridden by sub classes.</p>","!type":"fn(cellInfo: +Map) -> Object"},"_getContentHtml":{"!doc":"<p>Returns the <span class=\"caps\">HTML</span> that should be used inside the main div of this cell.</p>\n\n<p>This method may be overridden by sub classes.</p>","!type":"fn(cellInfo: +Map) -> string"},"_onChangeTheme":{"!doc":"<p>Handler for the theme change.</p>","!type":"fn()"},"createDataCellHtml":{"!type":"fn(cellInfo: +undefined, htmlArr: +undefined)"},"getDefaultCellStyle":{"!doc":"<p>Returns the (computed) value of the property <code>defaultCellStyle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCellStyle}.</p>","!type":"fn() -> Object"},"initDefaultCellStyle":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultCellStyle</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCellStyle}.</p>","!type":"fn(value: Object) -> Object"},"resetDefaultCellStyle":{"!doc":"<p>Resets the user value of the property <code>defaultCellStyle</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCellStyle}.</p>","!type":"fn()"},"setDefaultCellStyle":{"!doc":"<p>Sets the user value of the property <code>defaultCellStyle</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultCellStyle}.</p>","!type":"fn(value: Object) -> Object"}}},"AbstractImage":{"!proto":"qx.ui.table.cellrenderer.Abstract","!doc":"<p>A template class for cell renderer, which display images. Concrete\nimplementations must implement the method {@link #_identifyImage}.</p>","!type":"fn()","prototype":{"__getImageSize":{"!doc":"<p>Compute the size of the given image</p>","!type":"fn(source: string) -> +Map"},"_getCellAttributes":{"!type":"fn(cellInfo: +undefined)"},"_getCellClass":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"_getImageInfos":{"!doc":"<p>Retrieves the image infos.</p>","!type":"fn(cellInfo: +Map) -> +Map"},"_identifyImage":{"!doc":"<p>Identifies the Image to show. This is a template method, which must be\nimplemented by sub classes.</p>","!type":"fn(cellInfo: +Map) -> +Map"},"createDataCellHtml":{"!type":"fn(cellInfo: +undefined, htmlArr: +undefined)"},"getRepeat":{"!doc":"<p>Returns the (computed) value of the property <code>repeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeat}.</p>","!type":"fn() -> Object"},"initRepeat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>repeat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #repeat}.</p>","!type":"fn(value: Object) -> Object"},"resetRepeat":{"!doc":"<p>Resets the user value of the property <code>repeat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #repeat}.</p>","!type":"fn()"},"setRepeat":{"!doc":"<p>Sets the user value of the property <code>repeat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #repeat}.</p>","!type":"fn(value: Object) -> Object"}}},"Boolean":{"!proto":"qx.ui.table.cellrenderer.AbstractImage","!doc":"<p>A data cell renderer for boolean values.</p>","!type":"fn()","prototype":{"_applyIconFalse":{"!doc":"<p>Applies changes of the property value of the property <code>iconFalse</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn(value: string, old: string)"},"_applyIconTrue":{"!doc":"<p>Applies changes of the property value of the property <code>iconTrue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn(value: string, old: string)"},"_getCellStyle":{"!type":"fn(cellInfo: +undefined)"},"_identifyImage":{"!type":"fn(cellInfo: +undefined)"},"_onChangeTheme":{"!doc":"<p>Handler for theme changes.</p>","!type":"fn()"},"getIconFalse":{"!doc":"<p>Returns the (computed) value of the property <code>iconFalse</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn() -> Object"},"getIconTrue":{"!doc":"<p>Returns the (computed) value of the property <code>iconTrue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn() -> Object"},"initIconFalse":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconFalse</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn(value: Object) -> Object"},"initIconTrue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconTrue</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn(value: Object) -> Object"},"resetIconFalse":{"!doc":"<p>Resets the user value of the property <code>iconFalse</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn()"},"resetIconTrue":{"!doc":"<p>Resets the user value of the property <code>iconTrue</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn()"},"setIconFalse":{"!doc":"<p>Sets the user value of the property <code>iconFalse</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn(value: Object) -> Object"},"setIconTrue":{"!doc":"<p>Sets the user value of the property <code>iconTrue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn(value: Object) -> Object"}}},"Conditional":{"!proto":"qx.ui.table.cellrenderer.Default","!doc":"<p>The conditional cell renderer allows special per cell formatting based on\nconditions on the cell&#8217;s value.</p>","!type":"fn()","prototype":{"__applyFormatting":{"!doc":"<p>Applies the cell styles to the style map.</p>","!type":"fn(condition: +Array, style: +Map)"},"_getCellStyle":{"!doc":"<p>Overridden; called whenever the cell updates. The cell will iterate through\neach available condition and apply formatting for those that\nmatch. Multiple conditions can match, but later conditions will override\nearlier ones. Conditions with null values will stack with other conditions\nthat apply to that value.</p>","!type":"fn(cellInfo: +Map) -> +Map"},"addBetweenCondition":{"!doc":"<p>The addBetweenCondition method is used to add a between condition to the\ncell renderer.</p>\n\n<p>Note: Passing null is different from passing an empty string in the align,\ncolor, style and weight arguments. Null will allow pre-existing formatting\nto pass through, where an empty string will clear it back to the default\nformatting set in the constructor.</p>","!type":"fn(condition: string, value1: +Integer, value2: +Integer, align: string, color: string, style: string, weight: string, target: string)"},"addNumericCondition":{"!doc":"<p>The addNumericCondition method is used to add a basic numeric condition to\nthe cell renderer.</p>\n\n<p>Note: Passing null is different from passing an empty string in the align,\ncolor, style and weight arguments. Null will allow pre-existing formatting\nto pass through, where an empty string will clear it back to the default\nformatting set in the constructor.</p>","!type":"fn(condition: string, value1: +Integer, align: string, color: string, style: string, weight: string, target: string)"},"addRegex":{"!doc":"<p>The addRegex method is used to add a regular expression condition to the\ncell renderer.</p>\n\n<p>Note: Passing null is different from passing an empty string in the align,\ncolor, style and weight arguments. Null will allow pre-existing formatting\nto pass through, where an empty string will clear it back to the default\nformatting set in the constructor.</p>","!type":"fn(regex: string, align: string, color: string, style: string, weight: string, target: string)"}}},"Date":{"!proto":"qx.ui.table.cellrenderer.Conditional","!doc":"<p>Specific data cell renderer for dates.</p>","prototype":{"_getCellClass":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"getDateFormat":{"!doc":"<p>Returns the (computed) value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn() -> Object"},"initDateFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dateFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: Object) -> Object"},"resetDateFormat":{"!doc":"<p>Resets the user value of the property <code>dateFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn()"},"setDateFormat":{"!doc":"<p>Sets the user value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: Object) -> Object"}}},"Debug":{"!proto":"qx.ui.table.cellrenderer.Abstract","!doc":"<p>A debug cell editor.  This displays cellInfo.value using\n{@link qx.dev.Debug#debugObjectToString} so is useful as a starting point\nduring development of a table, before writing each of the cell renderers.</p>","prototype":{"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"}}},"Default":{"!proto":"qx.ui.table.cellrenderer.Abstract","!doc":"<p>The default data cell renderer.</p>","prototype":{"_formatValue":{"!doc":"<p>Formats a value.</p>","!type":"fn(cellInfo: +Map) -> string"},"_getCellClass":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"_getStyleFlags":{"!doc":"<p>Determines the styles to apply to the cell</p>","!type":"fn(cellInfo: +Map) -> +Integer"},"getUseAutoAlign":{"!doc":"<p>Returns the (computed) value of the property <code>useAutoAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useAutoAlign}.</p>","!type":"fn() -> Object"},"initUseAutoAlign":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useAutoAlign</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useAutoAlign}.</p>","!type":"fn(value: Object) -> Object"},"isUseAutoAlign":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useAutoAlign</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useAutoAlign}.</p>","!type":"fn() -> bool"},"resetUseAutoAlign":{"!doc":"<p>Resets the user value of the property <code>useAutoAlign</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useAutoAlign}.</p>","!type":"fn()"},"setUseAutoAlign":{"!doc":"<p>Sets the user value of the property <code>useAutoAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useAutoAlign}.</p>","!type":"fn(value: Object) -> Object"},"toggleUseAutoAlign":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useAutoAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useAutoAlign}.</p>","!type":"fn() -> bool"}}},"Dynamic":{"!proto":"qx.ui.table.cellrenderer.Default","!doc":"<p>A cell renderer factory which can dynamically exchange the cell renderer\nbased on information retrieved at runtime. This is useful when different\nrows in a column should have different cell renderer based on cell content\nor row metadata. A typical example would be a spreadsheet that has different\nkind of data in one column.</p>","!type":"fn()","prototype":{"createDataCellHtml":{"!doc":"<p>Overridden; called whenever the cell updates. The cell will call the\nfunction stored in the cellRendererFactoryFunction to retrieve the\ncell renderer which should be used for this particular cell</p>","!type":"fn(cellInfo: +Map, htmlArr: string) -> string"},"getCellRendererFactoryFunction":{"!doc":"<p>Returns the (computed) value of the property <code>cellRendererFactoryFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cellRendererFactoryFunction}.</p>","!type":"fn() -> Object"},"initCellRendererFactoryFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>cellRendererFactoryFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cellRendererFactoryFunction}.</p>","!type":"fn(value: Object) -> Object"},"resetCellRendererFactoryFunction":{"!doc":"<p>Resets the user value of the property <code>cellRendererFactoryFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cellRendererFactoryFunction}.</p>","!type":"fn()"},"setCellRendererFactoryFunction":{"!doc":"<p>Sets the user value of the property <code>cellRendererFactoryFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cellRendererFactoryFunction}.</p>","!type":"fn(value: Object) -> Object"}}},"Html":{"!proto":"qx.ui.table.cellrenderer.Conditional","!doc":"<p>This Cellrender is for transparent use, without escaping! Use this Cellrender\nto output plain <span class=\"caps\">HTML</span> content.</p>","prototype":{"_getCellClass":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"}}},"Image":{"!proto":"qx.ui.table.cellrenderer.AbstractImage","!doc":"<p>The image cell renderer renders image into table cells.</p>","!type":"fn()","prototype":{"_identifyImage":{"!type":"fn(cellInfo: +undefined)"}}},"Number":{"!proto":"qx.ui.table.cellrenderer.Conditional","!doc":"<p>Specific data cell renderer for numbers.</p>","prototype":{"_getCellClass":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"getNumberFormat":{"!doc":"<p>Returns the (computed) value of the property <code>numberFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn() -> Object"},"initNumberFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>numberFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn(value: Object) -> Object"},"resetNumberFormat":{"!doc":"<p>Resets the user value of the property <code>numberFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn()"},"setNumberFormat":{"!doc":"<p>Sets the user value of the property <code>numberFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn(value: Object) -> Object"}}},"Password":{"!proto":"qx.ui.table.cellrenderer.Default","!doc":"<p>A cell renderer which hides cell values such as passwords form view\nby masking them by *s</p>","prototype":{"_getContentHtml":{"!doc":"<p>Overridden; called whenever the cell updates.</p>","!type":"fn(cellInfo: +Map) -> string"}}},"Replace":{"!proto":"qx.ui.table.cellrenderer.Default","!doc":"<p>The cell will use, if given, the\nreplaceMap property and/or the replaceFunction to look up labels for a\nspecific cell value. if the replaceMap, which does not need to be used but\ntakes precedence if given, has no entry for a specific value, you can implement\na fallback lookup in the replacementFunction, or use the replacementFunction exclusively.</p>\n\n<p>In editable cells, you need to make sure that the method returning the data\nto the data storage (for example, a database backend) translates the replaced\ncell value (the label) back into the corresponding value. Thus, both map and\nfunction <span class=\"caps\">MUST</span> also take care of the reverse translation of labels into\nvalues. Example: if you have a field that should display &#8220;Active&#8221; on a &#8220;1&#8221;\nvalue and &#8220;Inactive&#8221; on a &#8220;0&#8221; value, you must use the following map:</p>\n\n<pre class=\"javascript\">\n{\n  0 : \"Inactive\",\n  1 : \"Active\",\n  \"Inactive\" : 0,\n  \"Active\" : 1\n}\n</pre>\n\n<p>You can use the addReversedReplaceMap() method to do this for you:</p>\n\n<pre class=\"javascript\">\nvar propertyCellRenderer = new qx.ui.table.cellrenderer.Replace;\npropertyCellRenderer.setReplaceMap({\n   1 : \"Active\",\n  0 : \"Inactive\",\n  2  : \"Waiting\",\n  'admin' : \"System Administrator\",\n  'manager' : \"User Manager\",\n  'user' : \"Website User\"\n});\npropertyCellRenderer.addReversedReplaceMap();\n</pre>","prototype":{"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"addReversedReplaceMap":{"!doc":"<p>adds a reversed replaceMap to itself to translate labels back to the original values</p>","!type":"fn() -> bool"},"getReplaceFunction":{"!doc":"<p>Returns the (computed) value of the property <code>replaceFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceFunction}.</p>","!type":"fn() -> Object"},"getReplaceMap":{"!doc":"<p>Returns the (computed) value of the property <code>replaceMap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceMap}.</p>","!type":"fn() -> Object"},"initReplaceFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>replaceFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceFunction}.</p>","!type":"fn(value: Object) -> Object"},"initReplaceMap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>replaceMap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceMap}.</p>","!type":"fn(value: Object) -> Object"},"resetReplaceFunction":{"!doc":"<p>Resets the user value of the property <code>replaceFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceFunction}.</p>","!type":"fn()"},"resetReplaceMap":{"!doc":"<p>Resets the user value of the property <code>replaceMap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceMap}.</p>","!type":"fn()"},"setReplaceFunction":{"!doc":"<p>Sets the user value of the property <code>replaceFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceFunction}.</p>","!type":"fn(value: Object) -> Object"},"setReplaceMap":{"!doc":"<p>Sets the user value of the property <code>replaceMap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #replaceMap}.</p>","!type":"fn(value: Object) -> Object"}}},"String":{"!proto":"qx.ui.table.cellrenderer.Conditional","!doc":"<p>The string data cell renderer. All it does is escape the incoming String\nvalues.</p>","prototype":{"_getCellClass":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"}}}},"columnmenu":{"Button":{"!proto":"qx.ui.form.MenuButton","!doc":"<p>The traditional qx.ui.menu.MenuButton to access the column visibility menu.</p>","!type":"fn()","prototype":{"empty":{"!type":"fn()"},"factory":{"!type":"fn(item: +undefined, options: +undefined)"},"getBlocker":{"!doc":"<p>Returns the blocker of the columnmenu button.</p>","!type":"fn() -> +qx.ui.core.Blocker"}}},"MenuItem":{"!proto":"qx.ui.menu.CheckBox","!doc":"<p>A menu item.</p>","prototype":{"_applyVisible":{"!doc":"<p>Keep menu in sync with programmatic changes of visibility</p>","!type":"fn(value: bool, old: bool)"},"getVisible":{"!doc":"<p>Returns the (computed) value of the property <code>visible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn() -> Object"},"initVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>visible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn(value: Object) -> Object"},"isVisible":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>visible</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn() -> bool"},"resetVisible":{"!doc":"<p>Resets the user value of the property <code>visible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn()"},"setVisible":{"!doc":"<p>Sets the user value of the property <code>visible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn(value: Object) -> Object"},"toggleVisible":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>visible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn() -> bool"}},"!type":"fn()"}},"columnmodel":{"Basic":{"!proto":"qx.core.Object","!doc":"<p>A model that contains all meta data about columns, such as width, renderer,\nvisibility and order.</p>","!type":"fn()","prototype":{"_getColToXPosMap":{"!doc":"<p>Returns the map that translates model indexes to x positions.</p>\n\n<p>The returned map contains for a model index (int) a map having two\nproperties: overX (the overall x position of the column, int) and\nvisX (the visible x position of the column, int). visX is missing for\nhidden columns.</p>","!type":"fn() -> +Map"},"getCellEditorFactory":{"!doc":"<p>Returns the cell editor factory of a column.</p>","!type":"fn(col: +Integer) -> +qx.ui.table.ICellEditorFactory"},"getColumnWidth":{"!doc":"<p>Returns the width of a column.</p>","!type":"fn(col: +Integer) -> +Integer"},"getDataCellRenderer":{"!doc":"<p>Returns the data renderer of a column.</p>","!type":"fn(col: +Integer) -> +qx.ui.table.ICellRenderer"},"getHeaderCellRenderer":{"!doc":"<p>Returns the header renderer of a column.</p>","!type":"fn(col: +Integer) -> +qx.ui.table.IHeaderRenderer"},"getOverallColumnAtX":{"!doc":"<p>Returns the model index of a column at a certain overall x position.</p>","!type":"fn(overXPos: +Integer) -> +Integer"},"getOverallColumnCount":{"!doc":"<p>Returns the overall number of columns (including hidden columns).</p>","!type":"fn() -> +Integer"},"getOverallX":{"!doc":"<p>Returns the overall x position of a column.</p>","!type":"fn(col: +Integer) -> +Integer"},"getVisibleColumnAtX":{"!doc":"<p>Returns the model index of a column at a certain visible x position.</p>","!type":"fn(visXPos: +Integer) -> +Integer"},"getVisibleColumnCount":{"!doc":"<p>Returns the number of visible columns.</p>","!type":"fn() -> +Integer"},"getVisibleColumns":{"!doc":"<p>Return the array of visible columns</p>","!type":"fn() -> +Array"},"getVisibleX":{"!doc":"<p>Returns the visible x position of a column.</p>","!type":"fn(col: +Integer) -> +Integer"},"init":{"!doc":"<p>Initializes the column model.</p>","!type":"fn(colCount: +Integer, table: +qx.ui.table.Table)"},"isColumnVisible":{"!doc":"<p>Returns whether a certain column is visible.</p>","!type":"fn(col: +Integer) -> bool"},"moveColumn":{"!doc":"<p>Moves a column.</p>","!type":"fn(fromOverXPos: +Integer, toOverXPos: +Integer)"},"setCellEditorFactory":{"!doc":"<p>Sets the cell editor factory of a column.</p>","!type":"fn(col: +Integer, factory: +qx.ui.table.ICellEditorFactory)"},"setColumnsOrder":{"!doc":"<p>Reorders all columns to new overall positions. Will fire one &#8220;orderChanged&#8221; event\nwithout data afterwards</p>","!type":"fn(newPositions: +Integer)"},"setColumnVisible":{"!doc":"<p>Sets whether a certain column is visible.</p>","!type":"fn(col: +Integer, visible: bool)"},"setColumnWidth":{"!doc":"<p>Sets the width of a column.</p>","!type":"fn(col: +Integer, width: +Integer, isPointerAction: bool)"},"setDataCellRenderer":{"!doc":"<p>Sets the data renderer of a column.</p>","!type":"fn(col: +Integer, renderer: +qx.ui.table.ICellRenderer) -> +qx.ui.table.ICellRenderer"},"setHeaderCellRenderer":{"!doc":"<p>Sets the header renderer of a column.</p>","!type":"fn(col: +Integer, renderer: +qx.ui.table.IHeaderRenderer)"}}},"Resize":{"!proto":"qx.ui.table.columnmodel.Basic","!doc":"<p>A table column model that automatically resizes columns based on a\nselected behavior.</p>","!type":"fn()","prototype":{"_addResetColumnWidthButton":{"!doc":"<p>Reset the column widths to their &#8220;onappear&#8221; defaults.</p>","!type":"fn(event: +qx.event.type.Data)"},"_applyBehavior":{"!doc":"<p>Applies changes of the property value of the property <code>behavior</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #behavior}.</p>","!type":"fn(value: +qx.ui.table.columnmodel.resizebehavior.Abstract, old: +qx.ui.table.columnmodel.resizebehavior.Abstract)"},"_onappear":{"!doc":"<p>Event handler for the &#8220;appear&#8221; event.</p>","!type":"fn(event: +qx.event.type.Event)"},"_oncolumnwidthchanged":{"!doc":"<p>Event handler for the &#8220;widthChanged&#8221; event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onTableWidthChanged":{"!doc":"<p>Event handler for the &#8220;tableWidthChanged&#8221; event.</p>","!type":"fn(event: +qx.event.type.Event)"},"_onverticalscrollbarchanged":{"!doc":"<p>Event handler for the &#8220;verticalScrollBarChanged&#8221; event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onvisibilitychanged":{"!doc":"<p>Event handler for the &#8220;visibilityChanged&#8221; event.</p>","!type":"fn(event: +qx.event.type.Data)"},"getBehavior":{"!doc":"<p>Returns the (computed) value of the property <code>behavior</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #behavior}.</p>","!type":"fn() -> Object"},"getTable":{"!doc":"<p>Get the table widget</p>","!type":"fn() -> +qx.ui.table.Table"},"init":{"!doc":"<p>Initializes the column model.</p>","!type":"fn(numColumns: +Integer, table: +qx.ui.table.Table)"},"initBehavior":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>behavior</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #behavior}.</p>","!type":"fn(value: Object) -> Object"},"resetBehavior":{"!doc":"<p>Resets the user value of the property <code>behavior</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #behavior}.</p>","!type":"fn()"},"setBehavior":{"!doc":"<p>Sets the user value of the property <code>behavior</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #behavior}.</p>","!type":"fn(value: Object) -> Object"}}},"resizebehavior":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>An abstract resize behavior.  All resize behaviors should extend this\nclass.</p>","prototype":{"_getAvailableWidth":{"!doc":"<p>Determine the inner width available to columns in the table.</p>","!type":"fn() -> +Integer"},"_setNumColumns":{"!doc":"<p>Called when the ResizeTableColumnModel is initialized, and upon loading of\na new TableModel, to allow the Resize Behaviors to know how many columns\nare in use.</p>","!type":"fn(numColumns: +Integer)"},"onAppear":{"!doc":"<p>Called when the table has first been rendered.</p>","!type":"fn(event: Object, forceRefresh?: bool)"},"onColumnWidthChanged":{"!doc":"<p>Called when a column width is changed.</p>","!type":"fn(event: Object)"},"onTableWidthChanged":{"!doc":"<p>Called when the table width changes due to either a window size change\nor a parent object changing size causing the table to change size.</p>","!type":"fn(event: Object)"},"onVerticalScrollBarChanged":{"!doc":"<p>Called when the use of vertical scroll bar in the table changes, either\nfrom present to not present, or vice versa.</p>","!type":"fn(event: Object)"},"onVisibilityChanged":{"!doc":"<p>Called when a column visibility is changed.</p>","!type":"fn(event: Object)"}}},"Default":{"!proto":"qx.ui.table.columnmodel.resizebehavior.Abstract","!doc":"<p>The default resize behavior.  Until a resize model is loaded, the default\nbehavior is to:\n<ol>\n  <li>\n    Upon the table initially appearing, and upon any window resize, divide\n    the table space equally between the visible columns.\n  </li>\n  <li>\n    When a column is increased in width, all columns to its right are\n    pushed to the right with no change to their widths.  This may push some\n    columns off the right edge of the table, causing a horizontal scroll\n    bar to appear.\n  </li>\n  <li>\n    When a column is decreased in width, if the total width of all columns\n    is <i>greater than</i> the table width, no additional column width\n    change is made.\n  </li>\n  <li>\n    When a column is decreased in width, if the total width of all columns\n    is <i>less than</i> the table width, the visible column\n    immediately to the right of the column which decreased in width has its\n    width increased to fill the remaining space.\n  </li>\n</ol></p>\n\n<p>A resize model may be loaded to provide more guidance on how to adjust\ncolumn width upon each of the events: initial appear, window resize, and\ncolumn resize. *** TO BE <span class=\"caps\">FILLED</span> IN ***</p>","!type":"fn()","prototype":{"__clearLayoutCaches":{"!doc":"<p>Clear all layout caches of the column datas.</p>","!type":"fn()"},"_computeColumnsFlexWidth":{"!doc":"<p>Computes the width of all flexible children.</p>","!type":"fn()"},"_extendLastColumn":{"!doc":"<p>If a column was just made invisible, extend the last column to fill any\navailable space within the inner width of the table.  This means that\nif the sum of the widths of all columns exceeds the inner width of the\ntable, no change is made.  If, on the other hand, the sum of the widths\nof all columns is less than the inner width of the table, the last\ncolumn is extended to take up the width available within the inner\nwidth of the table.</p>","!type":"fn(event: +qx.event.type.Data)"},"_extendNextColumn":{"!doc":"<p>Extend the visible column to right of the column which just changed\nwidth, to fill any available space within the inner width of the table.\nThis means that if the sum of the widths of all columns exceeds the\ninner width of the table, no change is made.  If, on the other hand,\nthe sum of the widths of all columns is less than the inner width of\nthe table, the visible column to the right of the column which just\nchanged width is extended to take up the width available within the\ninner width of the table.</p>","!type":"fn(event: +qx.event.type.Data)"},"_getResizeColumnData":{"!doc":"<p>Returns an array of the resizing information of a column.</p>","!type":"fn() -> +qx.ui.core.ColumnData"},"_setNumColumns":{"!type":"fn(numColumns: +undefined)"},"getInitializeWidthsOnEveryAppear":{"!doc":"<p>Returns the (computed) value of the property <code>initializeWidthsOnEveryAppear</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #initializeWidthsOnEveryAppear}.</p>","!type":"fn() -> Object"},"getLayoutChildren":{"!doc":"<p>This method is required by the box layout. If returns an array of items\nto relayout.</p>","!type":"fn() -> +qx.ui.core.ColumnData"},"getNewResizeBehaviorColumnData":{"!doc":"<p>Returns the (computed) value of the property <code>newResizeBehaviorColumnData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newResizeBehaviorColumnData}.</p>","!type":"fn() -> Object"},"getTableColumnModel":{"!doc":"<p>Returns the (computed) value of the property <code>tableColumnModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tableColumnModel}.</p>","!type":"fn() -> Object"},"initInitializeWidthsOnEveryAppear":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>initializeWidthsOnEveryAppear</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #initializeWidthsOnEveryAppear}.</p>","!type":"fn(value: Object) -> Object"},"initNewResizeBehaviorColumnData":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newResizeBehaviorColumnData</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newResizeBehaviorColumnData}.</p>","!type":"fn(value: Object) -> Object"},"initTableColumnModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>tableColumnModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #tableColumnModel}.</p>","!type":"fn(value: Object) -> Object"},"isInitializeWidthsOnEveryAppear":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>initializeWidthsOnEveryAppear</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #initializeWidthsOnEveryAppear}.</p>","!type":"fn() -> bool"},"onAppear":{"!type":"fn(event: +undefined, forceRefresh: +undefined)"},"onColumnWidthChanged":{"!type":"fn(event: +undefined)"},"onTableWidthChanged":{"!type":"fn(event: +undefined)"},"onVerticalScrollBarChanged":{"!type":"fn(event: +undefined)"},"onVisibilityChanged":{"!type":"fn(event: +undefined)"},"resetInitializeWidthsOnEveryAppear":{"!doc":"<p>Resets the user value of the property <code>initializeWidthsOnEveryAppear</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #initializeWidthsOnEveryAppear}.</p>","!type":"fn()"},"resetNewResizeBehaviorColumnData":{"!doc":"<p>Resets the user value of the property <code>newResizeBehaviorColumnData</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newResizeBehaviorColumnData}.</p>","!type":"fn()"},"resetTableColumnModel":{"!doc":"<p>Resets the user value of the property <code>tableColumnModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #tableColumnModel}.</p>","!type":"fn()"},"set":{"!doc":"<p>Set any or all of the width, minimum width, and maximum width of a\ncolumn in a single call.</p>","!type":"fn(col: +Integer, map: +Map)"},"setInitializeWidthsOnEveryAppear":{"!doc":"<p>Sets the user value of the property <code>initializeWidthsOnEveryAppear</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #initializeWidthsOnEveryAppear}.</p>","!type":"fn(value: Object) -> Object"},"setMaxWidth":{"!doc":"<p>Set the maximum width of a column.</p>","!type":"fn(col: +Integer, width: +Integer)"},"setMinWidth":{"!doc":"<p>Set the minimum width of a column.</p>","!type":"fn(col: +Integer, width: +Integer)"},"setNewResizeBehaviorColumnData":{"!doc":"<p>Sets the user value of the property <code>newResizeBehaviorColumnData</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newResizeBehaviorColumnData}.</p>","!type":"fn(value: Object) -> Object"},"setTableColumnModel":{"!doc":"<p>Sets the user value of the property <code>tableColumnModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tableColumnModel}.</p>","!type":"fn(value: Object) -> Object"},"setWidth":{"!doc":"<p>Set the width of a column.</p>","!type":"fn(col: +Integer, width: +Integer, flex?: +Integer)"},"toggleInitializeWidthsOnEveryAppear":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>initializeWidthsOnEveryAppear</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #initializeWidthsOnEveryAppear}.</p>","!type":"fn() -> bool"}}}}},"headerrenderer":{"Default":{"!proto":"qx.core.Object","!doc":"<p>The default header cell renderer.</p>","prototype":{"createHeaderCell":{"!type":"fn(cellInfo: +undefined)"},"getToolTip":{"!doc":"<p>Returns the (computed) value of the property <code>toolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn() -> Object"},"initToolTip":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>toolTip</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn(value: Object) -> Object"},"resetToolTip":{"!doc":"<p>Resets the user value of the property <code>toolTip</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn()"},"setToolTip":{"!doc":"<p>Sets the user value of the property <code>toolTip</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #toolTip}.</p>","!type":"fn(value: Object) -> Object"},"updateHeaderCell":{"!type":"fn(cellInfo: +undefined, cellWidget: +undefined)"}}},"HeaderCell":{"!proto":"qx.ui.container.Composite","!doc":"<p>The default header cell widget</p>","!type":"fn()","prototype":{"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applySortIcon":{"!doc":"<p>Applies changes of the property value of the property <code>sortIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sortIcon}.</p>","!type":"fn(value: string, old: string)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getSortIcon":{"!doc":"<p>Returns the (computed) value of the property <code>sortIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sortIcon}.</p>","!type":"fn() -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initSortIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>sortIcon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #sortIcon}.</p>","!type":"fn(value: Object) -> Object"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetSortIcon":{"!doc":"<p>Resets the user value of the property <code>sortIcon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #sortIcon}.</p>","!type":"fn()"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setSortIcon":{"!doc":"<p>Sets the user value of the property <code>sortIcon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #sortIcon}.</p>","!type":"fn(value: Object) -> Object"}}},"Icon":{"!proto":"qx.ui.table.headerrenderer.Default","!doc":"<p>A header cell renderer which renders an icon (only). The icon cannot be combined\nwith text.</p>","!type":"fn()","prototype":{"getIconUrl":{"!doc":"<p>Returns the (computed) value of the property <code>iconUrl</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconUrl}.</p>","!type":"fn() -> Object"},"initIconUrl":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconUrl</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconUrl}.</p>","!type":"fn(value: Object) -> Object"},"resetIconUrl":{"!doc":"<p>Resets the user value of the property <code>iconUrl</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconUrl}.</p>","!type":"fn()"},"setIconUrl":{"!doc":"<p>Sets the user value of the property <code>iconUrl</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconUrl}.</p>","!type":"fn(value: Object) -> Object"},"updateHeaderCell":{"!type":"fn(cellInfo: +undefined, cellWidget: +undefined)"}}}},"ICellEditorFactory":{"!doc":"<p>A factory creating widgets to use for editing table cells.</p>","prototype":{"createCellEditor":{"!doc":"<p>Creates a cell editor.</p>\n\n<p>The cellInfo map contains the following properties:\n<ul>\n<li>value (var): the cell&#8217;s value.</li>\n<li>row (int): the model index of the row the cell belongs to.</li>\n<li>col (int): the model index of the column the cell belongs to.</li>\n<li>xPos (int): the x position of the cell in the table pane.</li>\n<li>table (qx.ui.table.Table) reference to the table, the cell belongs to. </li>\n</ul></p>","!type":"fn(cellInfo: +Map) -> +qx.ui.core.Widget"},"getCellEditorValue":{"!doc":"<p>Returns the current value of a cell editor.</p>","!type":"fn(cellEditor: +qx.ui.core.Widget) -> Object"}}},"ICellRenderer":{"!doc":"<p>A cell renderer for data cells.</p>","prototype":{"createDataCellHtml":{"!doc":"<p>Creates the <span class=\"caps\">HTML</span> for a data cell.</p>\n\n<p>The cellInfo map contains the following properties:\n<ul>\n<li>value (var): the cell&#8217;s value.</li>\n<li>rowData (var): contains the row data for the row, the cell belongs to.\n  The kind of this object depends on the table model, see\n  {@link qx.ui.table.ITableModel#getRowData}</li>\n<li>row (int): the model index of the row the cell belongs to.</li>\n<li>col (int): the model index of the column the cell belongs to.</li>\n<li>table (qx.ui.table.Table): the table the cell belongs to.</li>\n<li>xPos (int): the x position of the cell in the table pane.</li>\n<li>selected (boolean): whether the cell is selected.</li>\n<li>focusedRow (boolean): whether the cell is in the same row as the\n  focused cell.</li>\n<li>editable (boolean): whether the cell is editable.</li>\n<li>style (string): The <span class=\"caps\">CSS</span> styles that should be applied to the outer <span class=\"caps\">HTML</span>\n  element.</li>\n<li>styleLeft (string): The left position of the cell.</li>\n<li>styleWidth (string): The cell&#8217;s width (pixel).</li>\n<li>styleHeight (string): The cell&#8217;s height (pixel).</li>\n</ul></p>","!type":"fn(cellInfo: +Map, htmlArr: string) -> bool"}}},"IColumnMenuButton":{"!doc":"<p>Interface for creating the column visibility menu</p>","prototype":{"empty":{"!doc":"<p>Empty the menu of all items, in preparation for building a new column\nvisibility menu.</p>","!type":"fn()"},"factory":{"!doc":"<p>Instantiate a sub-widget.</p>","!type":"fn(item: string, options: +Map) -> +qx.ui.core.Widget"},"getMenu":{"!doc":"<p>Returns the (computed) value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn() -> Object"},"initMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>menu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"},"resetMenu":{"!doc":"<p>Resets the user value of the property <code>menu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn()"},"setMenu":{"!doc":"<p>Sets the user value of the property <code>menu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #menu}.</p>","!type":"fn(value: Object) -> Object"}}},"IColumnMenuItem":{"!doc":"<p>Interface for a column menu item corresponding to a table column.</p>","prototype":{"getVisible":{"!doc":"<p>Returns the (computed) value of the property <code>visible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn() -> Object"},"initVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>visible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn(value: Object) -> Object"},"resetVisible":{"!doc":"<p>Resets the user value of the property <code>visible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn()"},"setVisible":{"!doc":"<p>Sets the user value of the property <code>visible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visible}.</p>","!type":"fn(value: Object) -> Object"}}},"IHeaderRenderer":{"!doc":"<p>A cell renderer for header cells.</p>","prototype":{"createHeaderCell":{"!doc":"<p>Creates a header cell.</p>\n\n<p>The cellInfo map contains the following properties:\n<ul>\n<li>col (int): the model index of the column.</li>\n<li>xPos (int): the x position of the column in the table pane.</li>\n<li>name (string): the name of the column.</li>\n<li>editable (boolean): whether the column is editable.</li>\n<li>sorted (boolean): whether the column is sorted.</li>\n<li>sortedAscending (boolean): whether sorting is ascending.</li>\n</ul></p>","!type":"fn(cellInfo: +Map) -> +qx.ui.core.Widget"},"updateHeaderCell":{"!doc":"<p>Updates a header cell.</p>","!type":"fn(cellInfo: +Map, cellWidget: +qx.ui.core.Widget)"}}},"IRowRenderer":{"!doc":"<p>Interface for a row renderer.</p>","prototype":{"createRowStyle":{"!doc":"<p>Create a style string, which will be set as the style property of the row.</p>","!type":"fn(rowInfo: +Map)"},"getRowClass":{"!doc":"<p>Create a <span class=\"caps\">HTML</span> class string, which will be set as the class property of the row.</p>","!type":"fn(rowInfo: +Map)"},"getRowHeightStyle":{"!doc":"<p>Get the row&#8217;s height <span class=\"caps\">CSS</span> style taking the box model into account</p>","!type":"fn(height: +Integer)"},"updateDataRowElement":{"!doc":"<p>Updates a data row.</p>\n\n<p>The rowInfo map contains the following properties:\n<ul>\n<li>rowData (var): contains the row data for the row.\n  The kind of this object depends on the table model, see\n  {@link ITableModel#getRowData()}</li>\n<li>row (int): the model index of the row.</li>\n<li>selected (boolean): whether a cell in this row is selected.</li>\n<li>focusedRow (boolean): whether the focused cell is in this row.</li>\n<li>table (qx.ui.table.Table): the table the row belongs to.</li>\n</ul></p>","!type":"fn(rowInfo: +Map, rowElement: +Element)"}}},"ITableModel":{"!doc":"<p>The data model of a table.</p>","prototype":{"getColumnCount":{"!doc":"<p>Returns the number of columns in the model.</p>","!type":"fn() -> +Integer"},"getColumnId":{"!doc":"<p>Returns the ID of column. The ID may be used to identify columns\nindependent from their index in the model. E.g. for being aware of added\ncolumns when saving the width of a column.</p>","!type":"fn(columnIndex: +Integer) -> string"},"getColumnIndexById":{"!doc":"<p>Returns the index of a column.</p>","!type":"fn(columnId: string) -> +Integer"},"getColumnName":{"!doc":"<p>Returns the name of a column. This name will be shown to the user in the\ntable header.</p>","!type":"fn(columnIndex: +Integer) -> string"},"getRowCount":{"!doc":"<p>Returns the number of rows in the model.</p>","!type":"fn() -> +Integer"},"getRowData":{"!doc":"<p>Returns the data of one row. This function may be overridden by models which hold\nall data of a row in one object. By using this function, clients have a way of\nquickly retrieving the entire row data.</p>\n\n<b>Important:</b>Models which do not have their row data accessible in one object\nmay return null.","!type":"fn(rowIndex: +Integer) -> Object"},"getSortColumnIndex":{"!doc":"<p>Returns the column index the model is sorted by. If the model is not sorted\n-1 is returned.</p>","!type":"fn() -> +Integer"},"getValue":{"!doc":"<p>Returns a cell value by column index.</p>","!type":"fn(columnIndex: +Integer, rowIndex: +Integer) -> Object"},"getValueById":{"!doc":"<p>Returns a cell value by column ID.</p>\n\n<p>Whenever you have the choice, use {@link #getValue()} instead,\nbecause this should be faster.</p>","!type":"fn(columnId: string, rowIndex: +Integer) -> Object"},"isColumnEditable":{"!doc":"<p>Returns whether a column is editable.</p>","!type":"fn(columnIndex: +Integer) -> bool"},"isColumnSortable":{"!doc":"<p>Returns whether a column is sortable.</p>","!type":"fn(columnIndex: +Integer) -> bool"},"isSortAscending":{"!doc":"<p>Returns whether the model is sorted ascending.</p>","!type":"fn() -> bool"},"prefetchRows":{"!doc":"<p>Prefetches some rows. This is a hint to the model that the specified rows\nwill be read soon.</p>","!type":"fn(firstRowIndex: +Integer, lastRowIndex: +Integer)"},"setValue":{"!doc":"<p>Sets a cell value by column index.</p>","!type":"fn(columnIndex: +Integer, rowIndex: +Integer, value: Object)"},"setValueById":{"!doc":"<p>Sets a cell value by column ID.</p>\n\n<p>Whenever you have the choice, use {@link #setValue()} instead,\nbecause this should be faster.</p>","!type":"fn(columnId: string, rowIndex: +Integer, value: Object)"},"sortByColumn":{"!doc":"<p>Sorts the model by a column.</p>","!type":"fn(columnIndex: +Integer, ascending: bool)"}}},"model":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>An abstract table model that performs the column handling, so subclasses only\nneed to care for row handling.</p>","!type":"fn()","prototype":{"getColumnCount":{"!type":"fn()"},"getColumnId":{"!type":"fn(columnIndex: +undefined)"},"getColumnIndexById":{"!type":"fn(columnId: +undefined)"},"getColumnName":{"!type":"fn(columnIndex: +undefined)"},"getRowCount":{"!doc":"<p>Abstract method</p>","!type":"fn()"},"getRowData":{"!type":"fn(rowIndex: +undefined)"},"getSortColumnIndex":{"!type":"fn()"},"getValue":{"!doc":"<p>Abstract method</p>","!type":"fn(columnIndex: +Integer, rowIndex: +Integer)"},"getValueById":{"!type":"fn(columnId: +undefined, rowIndex: +undefined)"},"init":{"!doc":"<p>Initialize the table model <--> table interaction. The table model is\npassed to the table constructor, but the table model doesn&#8217;t otherwise\nknow anything about the table nor can it operate on table\nproperties. This function provides the capability for the table model\nto specify characteristics of the table. It is called when the table\nmodel is applied to the table.</p>","!type":"fn(table: +qx.ui.table.Table)"},"isColumnEditable":{"!type":"fn(columnIndex: +undefined)"},"isColumnSortable":{"!type":"fn(columnIndex: +undefined)"},"isSortAscending":{"!type":"fn()"},"prefetchRows":{"!type":"fn(firstRowIndex: +undefined, lastRowIndex: +undefined)"},"setColumnIds":{"!doc":"<p>Sets the column IDs. These IDs may be used internally to identify a\ncolumn.</p>\n\n<p>Note: This will clear previously set column names.</p>","!type":"fn(columnIdArr: string)"},"setColumnNamesById":{"!doc":"<p>Sets the column names. These names will be shown to the user.</p>\n\n<p>Note: The column IDs have to be defined before.</p>","!type":"fn(columnNameMap: +Map)"},"setColumnNamesByIndex":{"!doc":"<p>Sets the column names. These names will be shown to the user.</p>\n\n<p>Note: The column IDs have to be defined before.</p>","!type":"fn(columnNameArr: string)"},"setColumns":{"!doc":"<p>Sets the column names (and optionally IDs)</p>\n\n<p>Note: You can not change the <em>number</em> of columns this way.  The number\n      of columns is highly intertwined in the entire table operation,\n      and dynamically changing it would require as much work as just\n      recreating your table.  If you must change the number of columns\n      in a table then you should remove the table and add a new one.</p>","!type":"fn(columnNameArr: string, columnIdArr?: string)"},"setValue":{"!doc":"<p>Abstract method</p>","!type":"fn(columnIndex: +Integer, rowIndex: +Integer, value: Object)"},"setValueById":{"!type":"fn(columnId: +undefined, rowIndex: +undefined, value: +undefined)"},"sortByColumn":{"!type":"fn(columnIndex: +undefined, ascending: +undefined)"}}},"Filtered":{"!proto":"qx.ui.table.model.Simple","!doc":"<p>A filtered table model to provide support for hiding and filtering table\nrows. Any rows that match any applied filters will be hidden.</p>","!type":"fn()","prototype":{"_js_in_array":{"!doc":"<p>Whether the given string (needle) is in the array (haystack)</p>","!type":"fn(the_needle: string, the_haystack: +Array) -> bool"},"addBetweenFilter":{"!doc":"<p>The addBetweenFilter method is used to add a between filter to the\ntable model.</p>","!type":"fn(filter: string, value1: +Integer, value2: +Integer, target: string)"},"addNotRegex":{"!doc":"<p>The addNotRegex method is used to add a regular expression filter to the\ntable model and filter cells that do not match.</p>","!type":"fn(regex: string, target: string, ignorecase: bool)"},"addNumericFilter":{"!doc":"<p>The addNumericFilter method is used to add a basic numeric filter to\nthe table model.</p>","!type":"fn(filter: string, value1: +Integer, target: string)"},"addRegex":{"!doc":"<p>The addRegex method is used to add a regular expression filter to the\ntable model.</p>","!type":"fn(regex: string, target: string, ignorecase: bool)"},"applyFilters":{"!doc":"<p>The applyFilters method is called to apply filters to the table model.</p>","!type":"fn()"},"hideRows":{"!doc":"<p>Hides a specified number of rows.</p>","!type":"fn(rowNum: +Integer, numOfRows: +Integer, dispatchEvent?: bool)"},"resetHiddenRows":{"!doc":"<p>Return the table to the original state with all rows shown and clears\nall filters.</p>","!type":"fn()"},"setData":{"!type":"fn(rowArr: +undefined, clearSorting: +undefined)"}}},"Remote":{"!proto":"qx.ui.table.model.Abstract","!doc":"<p>A table model that loads its data from a backend.</p>\n\n<p>Only a subset of the available rows, those which are within or near the\ncurrently visible area, are loaded. If a quick scroll operation occurs,\nrows will soon be displayed using asynchronous loading in the background.\nAll loaded data is managed through a cache which automatically removes\nthe oldest used rows when it gets full.</p>\n\n<p>This class is abstract: The actual loading of row data must be done by\nsubclasses.</p>","!type":"fn()","prototype":{"_cancelCurrentRequest":{"!doc":"<p>Cancels the current request if possible.</p>\n\n<p>Should be overridden by subclasses if they are able to cancel requests. This\nallows sending a new request directly after a call of {@link #reloadData}.</p>","!type":"fn() -> bool"},"_getIgnoreCurrentRequest":{"!doc":"<p>Returns whether the current request is ignored by the model.</p>","!type":"fn() -> bool"},"_loadRowCount":{"!doc":"<p>Implementing classes have to call {@link #_onRowCountLoaded} when the\nserver response arrived. That method has to be called! Even when there\nwas an error.</p>","!type":"fn()"},"_loadRowData":{"!doc":"<p>Loads some row data from the server.</p>\n\n<p>Implementing classes have to call {@link #_onRowDataLoaded} when the server\nresponse arrived. That method has to be called! Even when there was an error.</p>","!type":"fn(firstRow: +Integer, lastRow: +Integer)"},"_onRowCountLoaded":{"!doc":"<p>Sets the row count.</p>\n\n<p>Has to be called by {@link #_loadRowCount}.</p>","!type":"fn(rowCount: +Integer)"},"_onRowDataLoaded":{"!doc":"<p>Sets row data.</p>\n\n<p>Has to be called by {@link #_loadRowData}.</p>","!type":"fn(rowDataArr: +Map)"},"_setRowBlockData":{"!doc":"<p>Sets the data of one block.</p>","!type":"fn(block: +Integer, rowDataArr: Object)"},"clearCache":{"!doc":"<p>Clears the cache.</p>","!type":"fn()"},"getBlockConcurrentLoadRowCount":{"!doc":"<p>Returns the (computed) value of the property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>","!type":"fn() -> Object"},"getBlockSize":{"!doc":"<p>Returns the (computed) value of the property <code>blockSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>","!type":"fn() -> Object"},"getCacheContent":{"!doc":"<p>Returns the current state of the cache.</p>\n\n<p>Do not change anything in the returned data. This breaks the model state.\nUse this method only together with {@link #restoreCacheContent} for backing\nup state for a later restore.</p>","!type":"fn() -> +Map"},"getClearCacheOnRemove":{"!doc":"<p>Returns the (computed) value of the property <code>clearCacheOnRemove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>","!type":"fn() -> Object"},"getMaxCachedBlockCount":{"!doc":"<p>Returns the (computed) value of the property <code>maxCachedBlockCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>","!type":"fn() -> Object"},"getRowCount":{"!type":"fn()"},"getRowData":{"!doc":"<p>See overridden method for details.</p>","!type":"fn(rowIndex: +Integer) -> Object"},"getSortColumnIndex":{"!type":"fn()"},"getValue":{"!type":"fn(columnIndex: +undefined, rowIndex: +undefined)"},"initBlockConcurrentLoadRowCount":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockConcurrentLoadRowCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>","!type":"fn(value: Object) -> Object"},"initBlockSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>blockSize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>","!type":"fn(value: Object) -> Object"},"initClearCacheOnRemove":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>clearCacheOnRemove</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>","!type":"fn(value: Object) -> Object"},"initMaxCachedBlockCount":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxCachedBlockCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>","!type":"fn(value: Object) -> Object"},"isBlockConcurrentLoadRowCount":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>blockConcurrentLoadRowCount</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>","!type":"fn() -> bool"},"isClearCacheOnRemove":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>clearCacheOnRemove</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>","!type":"fn() -> bool"},"isColumnEditable":{"!type":"fn(columnIndex: +undefined)"},"isColumnSortable":{"!type":"fn(columnIndex: +undefined)"},"isSortAscending":{"!type":"fn()"},"iterateCachedRows":{"!doc":"<p>Iterates through all cached rows.</p>\n\n<p>The iterator will be called for each cached row with two parameters: The row\nindex of the current row (Integer) and the row data of that row (var[]). If\nthe iterator returns something this will be used as new row data.</p>\n\n<p>The iterator is called in the same order as the rows are in the model\n(the row index is always ascending).</p>","!type":"fn(iterator: fn(), object: Object)"},"prefetchRows":{"!type":"fn(firstRowIndex: +undefined, lastRowIndex: +undefined)"},"reloadData":{"!doc":"<p>Reloads the model and clears the local cache.</p>","!type":"fn()"},"removeRow":{"!doc":"<p>Removes a row from the model.</p>","!type":"fn(rowIndex: +Integer)"},"resetBlockConcurrentLoadRowCount":{"!doc":"<p>Resets the user value of the property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>","!type":"fn()"},"resetBlockSize":{"!doc":"<p>Resets the user value of the property <code>blockSize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>","!type":"fn()"},"resetClearCacheOnRemove":{"!doc":"<p>Resets the user value of the property <code>clearCacheOnRemove</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>","!type":"fn()"},"resetMaxCachedBlockCount":{"!doc":"<p>Resets the user value of the property <code>maxCachedBlockCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>","!type":"fn()"},"restoreCacheContent":{"!doc":"<p>Restores a cache state created by {@link #getCacheContent}.</p>","!type":"fn(cacheContent: +Map)"},"setBlockConcurrentLoadRowCount":{"!doc":"<p>Sets the user value of the property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>","!type":"fn(value: Object) -> Object"},"setBlockSize":{"!doc":"<p>Sets the user value of the property <code>blockSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>","!type":"fn(value: Object) -> Object"},"setClearCacheOnRemove":{"!doc":"<p>Sets the user value of the property <code>clearCacheOnRemove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>","!type":"fn(value: Object) -> Object"},"setColumnEditable":{"!doc":"<p>Sets whether a column is editable.</p>","!type":"fn(columnIndex: +Integer, editable: bool)"},"setColumnSortable":{"!doc":"<p>Sets whether a column is sortable.</p>","!type":"fn(columnIndex: +Integer, sortable: bool)"},"setEditable":{"!doc":"<p>Sets all columns editable or not editable.</p>","!type":"fn(editable: bool)"},"setMaxCachedBlockCount":{"!doc":"<p>Sets the user value of the property <code>maxCachedBlockCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>","!type":"fn(value: Object) -> Object"},"setSortAscendingWithoutSortingData":{"!doc":"<p>Sets the direction of the sorting without sorting the data.\nUse this method, if you want to set the direction of sorting, (e.g\nfor appearance reason), but the sorting of the data will be done in\nanother step.</p>","!type":"fn(sortAscending: bool)"},"setSortColumnIndexWithoutSortingData":{"!doc":"<p>Sets the sorted column without sorting the data.\nUse this method, if you want to mark the column as the sorted column,\n(e.g. for appearance reason), but the sorting of the data will be done\nin another step.</p>","!type":"fn(sortColumnIndex: +Integer)"},"setValue":{"!type":"fn(columnIndex: +undefined, rowIndex: +undefined, value: +undefined)"},"sortByColumn":{"!type":"fn(columnIndex: +undefined, ascending: +undefined)"},"toggleBlockConcurrentLoadRowCount":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>","!type":"fn() -> bool"},"toggleClearCacheOnRemove":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>clearCacheOnRemove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>","!type":"fn() -> bool"}}},"Simple":{"!proto":"qx.ui.table.model.Abstract","!doc":"<p>A simple table model that provides an <span class=\"caps\">API</span> for changing the model data.</p>","!type":"fn()","prototype":{"_mapArray2RowArr":{"!doc":"<p>Creates an array of maps to an array of arrays.</p>","!type":"fn(mapArr: +Map, rememberMaps?: bool) -> Object"},"_setSortAscending":{"!doc":"<p>Set whether to sort in ascending order or not.</p>\n\n<p><span class=\"caps\">WARNING</span>: This should be called only by subclasses with intimate\n         knowledge of what they are doing!</p>","!type":"fn(ascending: bool)"},"_setSortColumnIndex":{"!doc":"<p>Set the sort column index</p>\n\n<p><span class=\"caps\">WARNING</span>: This should be called only by subclasses with intimate\n         knowledge of what they are doing!</p>","!type":"fn(columnIndex: +Integer)"},"addRows":{"!doc":"<p>Adds some rows to the model.</p>\n\n<p>Warning: The given array will be altered!</p>","!type":"fn(rowArr: Object, startIndex?: +Integer, clearSorting?: bool)"},"addRowsAsMapArray":{"!doc":"<p>Adds some rows to the model.</p>\n\n<p>Warning: The given array (mapArr) will be altered!</p>","!type":"fn(mapArr: +Map, startIndex?: +Integer, rememberMaps?: bool, clearSorting?: bool)"},"clearSorting":{"!doc":"<p>Clears the sorting.</p>","!type":"fn()"},"getCaseSensitiveSorting":{"!doc":"<p>Returns the (computed) value of the property <code>caseSensitiveSorting</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #caseSensitiveSorting}.</p>","!type":"fn() -> Object"},"getData":{"!doc":"<p>Returns the data of this model.</p>\n\n<p>Warning: Do not alter this array! If you want to change the data use\n{@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead.</p>","!type":"fn() -> Object"},"getDataAsMapArray":{"!doc":"<p>Gets the whole data as an array of maps.</p>\n\n<p>Note: Individual items are retrieved by {@link #getRowDataAsMap}.</p>","!type":"fn() -> +Map"},"getRowCount":{"!type":"fn()"},"getRowData":{"!type":"fn(rowIndex: +undefined)"},"getRowDataAsMap":{"!doc":"<p>Returns the data of one row as map containing the column IDs as key and\nthe cell values as value. Also the meta data is included.</p>","!type":"fn(rowIndex: +Integer) -> +Map"},"getSortColumnIndex":{"!type":"fn()"},"getSortMethods":{"!doc":"<p>Returns the sortMethod(s) for a table column.</p>","!type":"fn(columnIndex: +Integer) -> +Map"},"getValue":{"!type":"fn(columnIndex: +undefined, rowIndex: +undefined)"},"initCaseSensitiveSorting":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>caseSensitiveSorting</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #caseSensitiveSorting}.</p>","!type":"fn(value: Object) -> Object"},"isCaseSensitiveSorting":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>caseSensitiveSorting</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #caseSensitiveSorting}.</p>","!type":"fn() -> bool"},"isColumnEditable":{"!type":"fn(columnIndex: +undefined)"},"isColumnSortable":{"!type":"fn(columnIndex: +undefined)"},"isSortAscending":{"!type":"fn()"},"removeRows":{"!doc":"<p>Removes some rows from the model.</p>","!type":"fn(startIndex: +Integer, howMany: +Integer, clearSorting?: bool)"},"resetCaseSensitiveSorting":{"!doc":"<p>Resets the user value of the property <code>caseSensitiveSorting</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #caseSensitiveSorting}.</p>","!type":"fn()"},"setCaseSensitiveSorting":{"!doc":"<p>Sets the user value of the property <code>caseSensitiveSorting</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #caseSensitiveSorting}.</p>","!type":"fn(value: Object) -> Object"},"setColumnEditable":{"!doc":"<p>Sets whether a column is editable.</p>","!type":"fn(columnIndex: +Integer, editable: bool)"},"setColumnSortable":{"!doc":"<p>Sets whether a column is sortable.</p>","!type":"fn(columnIndex: +Integer, sortable: bool)"},"setData":{"!doc":"<p>Sets the whole data in a bulk.</p>","!type":"fn(rowArr: Object, clearSorting?: bool)"},"setDataAsMapArray":{"!doc":"<p>Sets the whole data in a bulk.</p>","!type":"fn(mapArr: +Map, rememberMaps?: bool, clearSorting?: bool)"},"setEditable":{"!doc":"<p>Sets all columns editable or not editable.</p>","!type":"fn(editable: bool)"},"setRows":{"!doc":"<p>Sets rows in the model. The rows overwrite the old rows starting at\n<code>startIndex</code> to <code>startIndex+rowArr.length</code>.</p>\n\n<p>Warning: The given array will be altered!</p>","!type":"fn(rowArr: Object, startIndex?: +Integer, clearSorting?: bool)"},"setRowsAsMapArray":{"!doc":"<p>Set rows in the model. The rows overwrite the old rows starting at\n<code>startIndex</code> to <code>startIndex+rowArr.length</code>.</p>\n\n<p>Warning: The given array (mapArr) will be altered!</p>","!type":"fn(mapArr: +Map, startIndex?: +Integer, rememberMaps?: bool, clearSorting?: bool)"},"setSortMethods":{"!doc":"<p>Specify the methods to use for ascending and descending sorts of a\nparticular column.</p>","!type":"fn(columnIndex: +Integer, compare: fn())"},"setValue":{"!type":"fn(columnIndex: +undefined, rowIndex: +undefined, value: +undefined)"},"sortByColumn":{"!type":"fn(columnIndex: +undefined, ascending: +undefined)"},"toggleCaseSensitiveSorting":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>caseSensitiveSorting</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #caseSensitiveSorting}.</p>","!type":"fn() -> bool"}},"_defaultSortComparatorAscending":{"!doc":"<p>Default ascendeing sort method to use if no custom method has been\nprovided.</p>","!type":"fn(row1: Object, row2: Object) -> +Integer"},"_defaultSortComparatorDescending":{"!doc":"<p>Default descending sort method to use if no custom method has been\nprovided.</p>","!type":"fn(row1: Object, row2: Object) -> +Integer"},"_defaultSortComparatorInsensitiveAscending":{"!doc":"<p>Same as the Default ascending sort method but using case insensitivity</p>","!type":"fn(row1: Object, row2: Object) -> +Integer"},"_defaultSortComparatorInsensitiveDescending":{"!doc":"<p>Same as the Default descending sort method but using case insensitivity</p>","!type":"fn(row1: Object, row2: Object) -> +Integer"}}},"MTableContextMenu":{"!doc":"<p>This mixin allows easily adding handlers for context menus on table columns.</p>","!type":"fn()","prototype":{"getContextMenuHandler":{"!doc":"<p>Return the registered context menu handler for a column.</p>","!type":"fn(col: +Integer) -> fn()"},"setContextMenuHandler":{"!doc":"<p>Add a handler for a context menu which is initiated in a specific\ncolumn.</p>","!type":"fn(col: +Integer, handler: fn(), context?: Object)"}}},"pane":{"CellEvent":{"!proto":"qx.event.type.Pointer","!doc":"<p>A cell event instance contains all data for pointer events related to cells in\na table.</p>","prototype":{"clone":{"!type":"fn(embryo: +undefined)"},"getColumn":{"!doc":"<p>Returns the (computed) value of the property <code>column</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn() -> Object"},"getRow":{"!doc":"<p>Returns the (computed) value of the property <code>row</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn() -> Object"},"init":{"!doc":"<p>Initialize the event</p>","!type":"fn(scroller: +qx.ui.table.pane.Scroller, me: +qx.event.type.Pointer, row?: +Integer, column?: +Integer)"},"initColumn":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>column</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn(value: Object) -> Object"},"initRow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>row</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn(value: Object) -> Object"},"resetColumn":{"!doc":"<p>Resets the user value of the property <code>column</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn()"},"resetRow":{"!doc":"<p>Resets the user value of the property <code>row</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn()"},"setColumn":{"!doc":"<p>Sets the user value of the property <code>column</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn(value: Object) -> Object"},"setRow":{"!doc":"<p>Sets the user value of the property <code>row</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn(value: Object) -> Object"}}},"Clipper":{"!proto":"qx.ui.container.Composite","!doc":"<p>Clipping area for the table header and table pane.</p>","!type":"fn()","prototype":{"scrollToX":{"!doc":"<p>Scrolls the element&#8217;s content to the given left coordinate</p>","!type":"fn(value: +Integer)"},"scrollToY":{"!doc":"<p>Scrolls the element&#8217;s content to the given top coordinate</p>","!type":"fn(value: +Integer)"}}},"FocusIndicator":{"!proto":"qx.ui.container.Composite","!doc":"<p>The focus indicator widget</p>","!type":"fn()","prototype":{"_onKeyPress":{"!doc":"<p>Keypress handler. Suppress all key events but &#8220;Enter&#8221; and &#8220;Escape&#8221;</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"getColumn":{"!doc":"<p>Returns the (computed) value of the property <code>column</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn() -> Object"},"getRow":{"!doc":"<p>Returns the (computed) value of the property <code>row</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn() -> Object"},"initColumn":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>column</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn(value: Object) -> Object"},"initRow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>row</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn(value: Object) -> Object"},"moveToCell":{"!doc":"<p>Move the focus indicator to the given table cell.</p>","!type":"fn(col?: +Integer, row?: +Integer)"},"resetColumn":{"!doc":"<p>Resets the user value of the property <code>column</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn()"},"resetRow":{"!doc":"<p>Resets the user value of the property <code>row</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn()"},"setColumn":{"!doc":"<p>Sets the user value of the property <code>column</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn(value: Object) -> Object"},"setRow":{"!doc":"<p>Sets the user value of the property <code>row</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn(value: Object) -> Object"}}},"Header":{"!proto":"qx.ui.core.Widget","!doc":"<p>Shows the header of a table.</p>","!type":"fn()","prototype":{"_cleanUpCells":{"!doc":"<p>Cleans up all header cells.</p>","!type":"fn()"},"_updateContent":{"!doc":"<p>Updates the content of the header.</p>","!type":"fn(completeUpdate: bool)"},"getBlocker":{"!doc":"<p>Returns the blocker of the header.</p>","!type":"fn() -> +qx.ui.core.Blocker"},"getHeaderWidgetAtColumn":{"!doc":"<p>Get the header widget for the given column</p>","!type":"fn(col: +Integer) -> +qx.ui.table.headerrenderer.HeaderCell"},"getPaneScroller":{"!doc":"<p>Returns the TablePaneScroller this header belongs to.</p>","!type":"fn() -> +qx.ui.table.pane.Scroller"},"getTable":{"!doc":"<p>Returns the table this header belongs to.</p>","!type":"fn() -> +qx.ui.table.Table"},"hideColumnMoveFeedback":{"!doc":"<p>Hides the feedback shown while a column is moved by the user.</p>","!type":"fn()"},"isShowingColumnMoveFeedback":{"!doc":"<p>Returns whether the column move feedback is currently shown.</p>","!type":"fn() -> bool"},"onColOrderChanged":{"!doc":"<p>Event handler. Called the column order has changed.</p>","!type":"fn()"},"onPaneModelChanged":{"!doc":"<p>Event handler. Called when the pane model has changed.</p>","!type":"fn()"},"onTableModelMetaDataChanged":{"!doc":"<p>Event handler. Called when the table model meta data has changed.</p>","!type":"fn()"},"setColumnWidth":{"!doc":"<p>Sets the column width. This overrides the width from the column model.</p>","!type":"fn(col: +Integer, width: +Integer, isPointerAction: bool)"},"setPointerOverColumn":{"!doc":"<p>Sets the column the pointer is currently over.</p>","!type":"fn(col: +Integer)"},"showColumnMoveFeedback":{"!doc":"<p>Shows the feedback shown while a column is moved by the user.</p>","!type":"fn(col: +Integer, x: +Integer)"}}},"Model":{"!proto":"qx.core.Object","!doc":"<p>The model of a table pane. This model works as proxy to a\n{@link qx.ui.table.columnmodel.Basic} and manages the visual order of the columns shown in\na {@link Pane}.</p>","!type":"fn()","prototype":{"_applyFirstColumnX":{"!doc":"<p>Applies changes of the property value of the property <code>firstColumnX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstColumnX}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyMaxColumnCount":{"!doc":"<p>Applies changes of the property value of the property <code>maxColumnCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxColumnCount}.</p>","!type":"fn(value: number, old: number)"},"_onColVisibilityChanged":{"!doc":"<p>Event handler. Called when the visibility of a column has changed.</p>","!type":"fn(evt: +Map)"},"_onHeaderCellRendererChanged":{"!doc":"<p>Event handler. Called when the cell renderer of a column has changed.</p>","!type":"fn(evt: +Map)"},"getColumnAtX":{"!doc":"<p>Returns the model index of the column at the position <code>xPos</code>.</p>","!type":"fn(xPos: +Integer) -> +Integer"},"getColumnCount":{"!doc":"<p>Returns the number of columns in this model.</p>","!type":"fn() -> +Integer"},"getColumnLeft":{"!doc":"<p>Gets the position of the left side of a column (in pixels, relative to the\nleft side of the table pane).</p>\n\n<p>This value corresponds to the sum of the widths of all columns left of the\ncolumn.</p>","!type":"fn(col: +Integer) -> Object"},"getFirstColumnX":{"!doc":"<p>Returns the (computed) value of the property <code>firstColumnX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstColumnX}.</p>","!type":"fn() -> Object"},"getMaxColumnCount":{"!doc":"<p>Returns the (computed) value of the property <code>maxColumnCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxColumnCount}.</p>","!type":"fn() -> Object"},"getTotalWidth":{"!doc":"<p>Returns the total width of all columns in the model.</p>","!type":"fn() -> +Integer"},"getX":{"!doc":"<p>Returns the x position of the column <code>col</code>.</p>","!type":"fn(col: +Integer) -> +Integer"},"initFirstColumnX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>firstColumnX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #firstColumnX}.</p>","!type":"fn(value: Object) -> Object"},"initMaxColumnCount":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxColumnCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxColumnCount}.</p>","!type":"fn(value: Object) -> Object"},"resetFirstColumnX":{"!doc":"<p>Resets the user value of the property <code>firstColumnX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #firstColumnX}.</p>","!type":"fn()"},"resetMaxColumnCount":{"!doc":"<p>Resets the user value of the property <code>maxColumnCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxColumnCount}.</p>","!type":"fn()"},"setFirstColumnX":{"!doc":"<p>Sets the user value of the property <code>firstColumnX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstColumnX}.</p>","!type":"fn(value: Object) -> Object"},"setMaxColumnCount":{"!doc":"<p>Sets the user value of the property <code>maxColumnCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxColumnCount}.</p>","!type":"fn(value: Object) -> Object"},"setTableColumnModel":{"!doc":"<p>Connects the table model to the column model</p>","!type":"fn(tableColumnModel: +qx.ui.table.columnmodel.Basic)"}}},"Pane":{"!proto":"qx.ui.core.Widget","!doc":"<p>The table pane that shows a certain section from a table. This class handles\nthe display of the data part of a table and is therefore the base for virtual\nscrolling.</p>","!type":"fn()","prototype":{"__rowCacheClear":{"!doc":"<p>Clear the row cache</p>","!type":"fn()"},"__rowCacheGet":{"!doc":"<p>Get a line from the row cache.</p>","!type":"fn(row: +Integer, selected: bool, focused: bool) -> string"},"__rowCacheSet":{"!doc":"<p>Add a line to the row cache.</p>","!type":"fn(row: +Integer, rowString: string, selected: bool, focused: bool)"},"_applyFirstVisibleRow":{"!doc":"<p>Applies changes of the property value of the property <code>firstVisibleRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstVisibleRow}.</p>","!type":"fn(value: number, old: number)"},"_applyMaxCacheLines":{"!doc":"<p>Applies changes of the property value of the property <code>maxCacheLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCacheLines}.</p>","!type":"fn(value: number, old: number)"},"_applyVisibleRowCount":{"!doc":"<p>Applies changes of the property value of the property <code>visibleRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleRowCount}.</p>","!type":"fn(value: number, old: number)"},"_getContentHint":{"!type":"fn()"},"_getRowsHtml":{"!doc":"<p>Get the <span class=\"caps\">HTML</span> table fragment for the given row range.</p>","!type":"fn(firstRow: +Integer, rowCount: +Integer) -> string"},"_scrollContent":{"!doc":"<p>Scrolls the pane&#8217;s contents by the given offset.</p>","!type":"fn(rowOffset: +Integer)"},"_updateAllRows":{"!doc":"<p>Updates the content of the pane (implemented using array joins).</p>","!type":"fn()"},"_updateRowStyles":{"!doc":"<p>If only focus or selection changes it is sufficient to only update the\nrow styles. This method updates the row styles of all visible rows or\nof just one row.</p>","!type":"fn(onlyRow?: +Integer)"},"getFirstVisibleRow":{"!doc":"<p>Returns the (computed) value of the property <code>firstVisibleRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstVisibleRow}.</p>","!type":"fn() -> Object"},"getMaxCacheLines":{"!doc":"<p>Returns the (computed) value of the property <code>maxCacheLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCacheLines}.</p>","!type":"fn() -> Object"},"getPaneScroller":{"!doc":"<p>Returns the TablePaneScroller this pane belongs to.</p>","!type":"fn() -> +qx.ui.table.pane.Scroller"},"getTable":{"!doc":"<p>Returns the table this pane belongs to.</p>","!type":"fn() -> +qx.ui.table.Table"},"getVisibleRowCount":{"!doc":"<p>Returns the (computed) value of the property <code>visibleRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleRowCount}.</p>","!type":"fn() -> Object"},"initFirstVisibleRow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>firstVisibleRow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #firstVisibleRow}.</p>","!type":"fn(value: Object) -> Object"},"initMaxCacheLines":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxCacheLines</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCacheLines}.</p>","!type":"fn(value: Object) -> Object"},"initVisibleRowCount":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>visibleRowCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleRowCount}.</p>","!type":"fn(value: Object) -> Object"},"onColOrderChanged":{"!doc":"<p>Event handler. Called the column order has changed.</p>","!type":"fn()"},"onFocusChanged":{"!doc":"<p>Event handler. Called when the table gets or looses the focus.</p>","!type":"fn()"},"onPaneModelChanged":{"!doc":"<p>Event handler. Called when the pane model has changed.</p>","!type":"fn()"},"onSelectionChanged":{"!doc":"<p>Event handler. Called when the selection has changed.</p>","!type":"fn()"},"onTableModelDataChanged":{"!doc":"<p>Event handler. Called when the table model data has changed.</p>","!type":"fn(firstRow: +Integer, lastRow: +Integer, firstColumn: +Integer, lastColumn: +Integer)"},"onTableModelMetaDataChanged":{"!doc":"<p>Event handler. Called when the table model meta data has changed.</p>","!type":"fn()"},"resetFirstVisibleRow":{"!doc":"<p>Resets the user value of the property <code>firstVisibleRow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #firstVisibleRow}.</p>","!type":"fn()"},"resetMaxCacheLines":{"!doc":"<p>Resets the user value of the property <code>maxCacheLines</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCacheLines}.</p>","!type":"fn()"},"resetVisibleRowCount":{"!doc":"<p>Resets the user value of the property <code>visibleRowCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleRowCount}.</p>","!type":"fn()"},"setColumnWidth":{"!doc":"<p>Sets the column width.</p>","!type":"fn(col: +Integer, width: +Integer)"},"setFirstVisibleRow":{"!doc":"<p>Sets the user value of the property <code>firstVisibleRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #firstVisibleRow}.</p>","!type":"fn(value: Object) -> Object"},"setFocusedCell":{"!doc":"<p>Sets the currently focused cell.</p>","!type":"fn(col?: +Integer, row?: +Integer, massUpdate?: bool)"},"setMaxCacheLines":{"!doc":"<p>Sets the user value of the property <code>maxCacheLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCacheLines}.</p>","!type":"fn(value: Object) -> Object"},"setVisibleRowCount":{"!doc":"<p>Sets the user value of the property <code>visibleRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibleRowCount}.</p>","!type":"fn(value: Object) -> Object"},"updateContent":{"!doc":"<p>Updates the content of the pane.</p>","!type":"fn(completeUpdate?: bool, scrollOffset?: +Integer, onlyRow?: +Integer, onlySelectionOrFocusChanged?: bool)"}}},"Scroller":{"!proto":"qx.ui.core.Widget","!doc":"<p>Shows a whole meta column. This includes a {@link Header},\na {@link Pane} and the needed scroll bars. This class handles the\nvirtual scrolling and does all the pointer event handling.</p>","!type":"fn()","prototype":{"__handleMoveColumn":{"!doc":"<p>Common column move logic.</p>","!type":"fn(pageX: +Integer)"},"__handleResizeColumn":{"!doc":"<p>Common column resize logic.</p>","!type":"fn(pageX: +Integer)"},"__isAtEdge":{"!doc":"<p>Checks if the table has been scrolled.</p>","!type":"fn(scrollBar: +qx.ui.core.scroll.IScrollBar, delta: number) -> bool"},"_applyHorizontalScrollBarVisible":{"!doc":"<p>Applies changes of the property value of the property <code>horizontalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn(value: bool, old: bool)"},"_applyScrollTimeout":{"!doc":"<p>Applies changes of the property value of the property <code>scrollTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollTimeout}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyShowCellFocusIndicator":{"!doc":"<p>Applies changes of the property value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTablePaneModel":{"!doc":"<p>Applies changes of the property value of the property <code>tablePaneModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tablePaneModel}.</p>","!type":"fn(value: +qx.ui.table.pane.Model, old: +qx.ui.table.pane.Model)"},"_applyVerticalScrollBarVisible":{"!doc":"<p>Applies changes of the property value of the property <code>verticalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_createHeaderClipper":{"!doc":"<p>Creates and returns an instance of header clipper.</p>","!type":"fn() -> +qx.ui.table.pane.Clipper"},"_createPaneClipper":{"!doc":"<p>Creates and returns an instance of pane clipper.</p>","!type":"fn() -> +qx.ui.table.pane.Clipper"},"_focusCellAtPagePos":{"!doc":"<p>Sets the focus to the cell that&#8217;s located at the page position\n<code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\nnothing happens.</p>","!type":"fn(pageX: +Integer, pageY: +Integer)"},"_getColumnForPageX":{"!doc":"<p>Returns the model index of the column the pointer is over or null if the pointer\nis not over a column.</p>","!type":"fn(pageX: +Integer) -> +Integer"},"_getResizeColumnForPageX":{"!doc":"<p>Returns the model index of the column that should be resized when dragging\nstarts here. Returns -1 if the pointer is in no resize region of any column.</p>","!type":"fn(pageX: +Integer) -> +Integer"},"_getRowForPagePos":{"!doc":"<p>Returns the model index of the row the pointer is currently over. Returns -1 if\nthe pointer is over the header. Returns null if the pointer is not over any\ncolumn.</p>","!type":"fn(pageX: +Integer, pageY: +Integer) -> +Integer"},"_hideResizeLine":{"!doc":"<p>Hides the resize line.</p>","!type":"fn()"},"_onAppear":{"!doc":"<p>Event handler for the scroller&#8217;s appear event</p>","!type":"fn()"},"_onCellEditorModalWindowClose":{"!doc":"<p>Event handler. Called when the modal window of the cell editor closes.</p>","!type":"fn(e: +Map)"},"_onChangeCaptureHeader":{"!doc":"<p>Event handler. Called when the event capturing of the header changed.\nStops/finishes an active header resize/move session if it lost capturing\nduring the session to stay in a stable state.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onContextMenu":{"!doc":"<p>Event handler. Called when a context menu is invoked in a cell.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onContextMenuOpen":{"!type":"fn(e: +undefined)"},"_onDbltapPane":{"!doc":"<p>Event handler. Called when the user double tapped a pointer button over the pane.</p>","!type":"fn(e: +Map)"},"_onDisappear":{"!doc":"<p>Event handler for the disappear event</p>","!type":"fn()"},"_oninterval":{"!doc":"<p>Timer event handler. Periodically checks whether a table update is\nrequired. The update interval is controlled by the {@link #scrollTimeout}\nproperty.</p>","!type":"fn()"},"_onPaneModelChanged":{"!doc":"<p>Event handler. Called when the pane model has changed.</p>","!type":"fn()"},"_onPointerdownHeader":{"!doc":"<p>Event handler. Called when the user pressed a pointer button over the header.</p>","!type":"fn(e: +Map)"},"_onPointerdownPane":{"!doc":"<p>Event handler. Called when the user pressed a pointer button over the pane.</p>","!type":"fn(e: +Map)"},"_onPointermoveHeader":{"!doc":"<p>Event handler. Called when the user moved the pointer over the header.</p>","!type":"fn(e: +Map)"},"_onPointermovePane":{"!doc":"<p>Event handler. Called when the user moved the pointer over the pane.</p>","!type":"fn(e: +Map)"},"_onPointerout":{"!doc":"<p>Event handler. Called when the pointer moved out.</p>","!type":"fn(e: +Map)"},"_onPointerupFocusIndicator":{"!doc":"<p>Event handler for the focus indicator&#8217;s pointerup event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerupHeader":{"!doc":"<p>Event handler. Called when the user released a pointer button over the header.</p>","!type":"fn(e: +Map)"},"_onResizePane":{"!doc":"<p>Event listener for the pane clipper&#8217;s resize event</p>","!type":"fn()"},"_onRoll":{"!doc":"<p>Event handler. Called when the user moved the mouse wheel.</p>","!type":"fn(e: +qx.event.type.Roll)"},"_onScrollX":{"!doc":"<p>Event handler. Called when the horizontal scroll bar moved.</p>","!type":"fn(e: +Map)"},"_onScrollY":{"!doc":"<p>Event handler. Called when the vertical scroll bar moved.</p>","!type":"fn(e: +Map)"},"_onTapHeader":{"!doc":"<p>Event handler. Called when the user tapped a pointer button over the header.</p>","!type":"fn(e: +Map)"},"_onTapPane":{"!doc":"<p>Event handler. Called when the user tapped a pointer button over the pane.</p>","!type":"fn(e: +Map)"},"_postponedUpdateContent":{"!doc":"<p>Does a postponed update of the content.</p>","!type":"fn()"},"_showResizeLine":{"!doc":"<p>Shows the resize line.</p>","!type":"fn(x: +Integer)"},"_startInterval":{"!doc":"<p>Starts the current running interval</p>","!type":"fn(timeout: +Integer)"},"_startMoveHeader":{"!doc":"<p>Start a move session of the header.</p>","!type":"fn(moveCol: +Integer, pageX: +Integer)"},"_startResizeHeader":{"!doc":"<p>Start a resize session of the header.</p>","!type":"fn(resizeCol: +Integer, pageX: +Integer)"},"_stopInterval":{"!doc":"<p>stops the current running interval</p>","!type":"fn()"},"_stopMoveHeader":{"!doc":"<p>Stop a move session of the header.</p>","!type":"fn()"},"_stopResizeHeader":{"!doc":"<p>Stop a resize session of the header.</p>","!type":"fn()"},"_updateContent":{"!doc":"<p>Updates the content. Sets the right section the table pane should show and\ndoes the scrolling.</p>","!type":"fn()"},"_updateFocusIndicator":{"!doc":"<p>Updates the location and the visibility of the focus indicator.</p>","!type":"fn()"},"cancelEditing":{"!doc":"<p>Stops editing without writing the editor&#8217;s value to the model.</p>","!type":"fn()"},"flushEditor":{"!doc":"<p>Writes the editor&#8217;s value to the model.</p>","!type":"fn()"},"getContextMenuFromDataCellsOnly":{"!doc":"<p>Returns the (computed) value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn() -> Object"},"getFocusCellOnPointerMove":{"!doc":"<p>Returns the (computed) value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn() -> Object"},"getFocusedColumn":{"!doc":"<p>Returns the column of currently focused cell.</p>","!type":"fn() -> +Integer"},"getFocusedRow":{"!doc":"<p>Returns the row of currently focused cell.</p>","!type":"fn() -> +Integer"},"getHeader":{"!doc":"<p>Returns the header.</p>","!type":"fn() -> +qx.ui.table.pane.Header"},"getHorizontalScrollBarVisible":{"!doc":"<p>Returns the (computed) value of the property <code>horizontalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn() -> Object"},"getLiveResize":{"!doc":"<p>Returns the (computed) value of the property <code>liveResize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveResize}.</p>","!type":"fn() -> Object"},"getNeededScrollBars":{"!doc":"<p>Returns which scrollbars are needed.</p>","!type":"fn(forceHorizontal?: bool, preventVertical?: bool) -> +Integer"},"getPaneClipper":{"!doc":"<p>Return the pane clipper. It is sometimes required for special activities\nsuch as tracking events for drag&amp;drop.</p>","!type":"fn() -> +qx.ui.table.pane.Clipper"},"getPaneInsetRight":{"!doc":"<p>The right inset of the pane. The right inset is the maximum of the\ntop right widget width and the scrollbar width (if visible).</p>","!type":"fn() -> +Integer"},"getResetSelectionOnHeaderTap":{"!doc":"<p>Returns the (computed) value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn() -> Object"},"getScrollAreaContainer":{"!doc":"<p>Returns the scroll area container widget (which enables more precise\noperations e.g. bounds retrieval for drag session scrolling).</p>","!type":"fn() -> +qx.ui.table.pane.Clipper"},"getScrollTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>scrollTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollTimeout}.</p>","!type":"fn() -> Object"},"getScrollX":{"!doc":"<p>Get the current position of the vertical scroll bar.</p>","!type":"fn() -> +Integer"},"getScrollY":{"!doc":"<p>Get the current position of the vertical scroll bar.</p>","!type":"fn() -> +Integer"},"getSelectBeforeFocus":{"!doc":"<p>Returns the (computed) value of the property <code>selectBeforeFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectBeforeFocus}.</p>","!type":"fn() -> Object"},"getShowCellFocusIndicator":{"!doc":"<p>Returns the (computed) value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn() -> Object"},"getTable":{"!doc":"<p>Returns the table this scroller belongs to.</p>","!type":"fn() -> +qx.ui.table.Table"},"getTablePane":{"!doc":"<p>Returns the table pane.</p>","!type":"fn() -> +qx.ui.table.pane.Pane"},"getTablePaneModel":{"!doc":"<p>Returns the (computed) value of the property <code>tablePaneModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tablePaneModel}.</p>","!type":"fn() -> Object"},"getTopRightWidget":{"!doc":"<p>Get the top right widget</p>","!type":"fn() -> +qx.ui.core.Widget"},"getVerticalScrollBarVisible":{"!doc":"<p>Returns the (computed) value of the property <code>verticalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn() -> Object"},"getVerticalScrollBarWidth":{"!doc":"<p>Get the rendered width of the vertical scroll bar. The return value is\n<code>0</code> if the scroll bar is invisible or not yet rendered.</p>","!type":"fn() -> +Integer"},"hideColumnMoveFeedback":{"!doc":"<p>Hides the feedback shown while a column is moved by the user.</p>","!type":"fn()"},"initContextMenuFromDataCellsOnly":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contextMenuFromDataCellsOnly</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn(value: Object) -> Object"},"initFocusCellOnPointerMove":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>focusCellOnPointerMove</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn(value: Object) -> Object"},"initHorizontalScrollBarVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>horizontalScrollBarVisible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn(value: Object) -> Object"},"initLiveResize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>liveResize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #liveResize}.</p>","!type":"fn(value: Object) -> Object"},"initResetSelectionOnHeaderTap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resetSelectionOnHeaderTap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn(value: Object) -> Object"},"initScrollTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scrollTimeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollTimeout}.</p>","!type":"fn(value: Object) -> Object"},"initSelectBeforeFocus":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectBeforeFocus</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectBeforeFocus}.</p>","!type":"fn(value: Object) -> Object"},"initShowCellFocusIndicator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showCellFocusIndicator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn(value: Object) -> Object"},"initTablePaneModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>tablePaneModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #tablePaneModel}.</p>","!type":"fn(value: Object) -> Object"},"initVerticalScrollBarVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>verticalScrollBarVisible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn(value: Object) -> Object"},"isContextMenuFromDataCellsOnly":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>contextMenuFromDataCellsOnly</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn() -> bool"},"isEditing":{"!doc":"<p>Returns whether currently a cell is editing.</p>","!type":"fn() -> Object"},"isFocusCellOnPointerMove":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>focusCellOnPointerMove</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn() -> bool"},"isHorizontalScrollBarVisible":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>horizontalScrollBarVisible</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn() -> bool"},"isLiveResize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>liveResize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveResize}.</p>","!type":"fn() -> bool"},"isResetSelectionOnHeaderTap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>resetSelectionOnHeaderTap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn() -> bool"},"isSelectBeforeFocus":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>selectBeforeFocus</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectBeforeFocus}.</p>","!type":"fn() -> bool"},"isShowCellFocusIndicator":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showCellFocusIndicator</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn() -> bool"},"isVerticalScrollBarVisible":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>verticalScrollBarVisible</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn() -> bool"},"onColOrderChanged":{"!doc":"<p>Event handler. Called when the column order has changed.</p>","!type":"fn()"},"onColVisibilityChanged":{"!doc":"<p>Event handler. Called when the visibility of a column has changed.</p>","!type":"fn()"},"onFocusChanged":{"!doc":"<p>Event handler. Called when the table gets or looses the focus.</p>","!type":"fn()"},"onKeepFirstVisibleRowCompleteChanged":{"!doc":"<p>Event handler. Called when the table property &#8220;keepFirstVisibleRowComplete&#8221;\nchanged.</p>","!type":"fn()"},"onSelectionChanged":{"!doc":"<p>Event handler. Called when the selection has changed.</p>","!type":"fn()"},"onTableModelDataChanged":{"!doc":"<p>Event handler. Called when the table model has changed.</p>","!type":"fn(firstRow: +Integer, lastRow: +Integer, firstColumn: +Integer, lastColumn: +Integer)"},"onTableModelMetaDataChanged":{"!doc":"<p>Event handler. Called when the table model meta data has changed.</p>","!type":"fn()"},"resetContextMenuFromDataCellsOnly":{"!doc":"<p>Resets the user value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn()"},"resetFocusCellOnPointerMove":{"!doc":"<p>Resets the user value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn()"},"resetHorizontalScrollBarVisible":{"!doc":"<p>Resets the user value of the property <code>horizontalScrollBarVisible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn()"},"resetLiveResize":{"!doc":"<p>Resets the user value of the property <code>liveResize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #liveResize}.</p>","!type":"fn()"},"resetResetSelectionOnHeaderTap":{"!doc":"<p>Resets the user value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn()"},"resetScrollTimeout":{"!doc":"<p>Resets the user value of the property <code>scrollTimeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollTimeout}.</p>","!type":"fn()"},"resetSelectBeforeFocus":{"!doc":"<p>Resets the user value of the property <code>selectBeforeFocus</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectBeforeFocus}.</p>","!type":"fn()"},"resetShowCellFocusIndicator":{"!doc":"<p>Resets the user value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn()"},"resetTablePaneModel":{"!doc":"<p>Resets the user value of the property <code>tablePaneModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #tablePaneModel}.</p>","!type":"fn()"},"resetVerticalScrollBarVisible":{"!doc":"<p>Resets the user value of the property <code>verticalScrollBarVisible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn()"},"scrollCellVisible":{"!doc":"<p>Scrolls a cell visible.</p>","!type":"fn(col: +Integer, row: +Integer)"},"setColumnWidth":{"!doc":"<p>Sets the column width.</p>","!type":"fn(col: +Integer, width: +Integer)"},"setContextMenuFromDataCellsOnly":{"!doc":"<p>Sets the user value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn(value: Object) -> Object"},"setFocusCellOnPointerMove":{"!doc":"<p>Sets the user value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn(value: Object) -> Object"},"setFocusedCell":{"!doc":"<p>Sets the currently focused cell.</p>","!type":"fn(col: +Integer, row: +Integer)"},"setHorizontalScrollBarVisible":{"!doc":"<p>Sets the user value of the property <code>horizontalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn(value: Object) -> Object"},"setLiveResize":{"!doc":"<p>Sets the user value of the property <code>liveResize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveResize}.</p>","!type":"fn(value: Object) -> Object"},"setPaneWidth":{"!doc":"<p>Set the pane&#8217;s width</p>","!type":"fn(width: +Integer)"},"setResetSelectionOnHeaderTap":{"!doc":"<p>Sets the user value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn(value: Object) -> Object"},"setScrollTimeout":{"!doc":"<p>Sets the user value of the property <code>scrollTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scrollTimeout}.</p>","!type":"fn(value: Object) -> Object"},"setScrollX":{"!doc":"<p>Set the current position of the vertical scroll bar.</p>","!type":"fn(scrollX: +Integer)"},"setScrollY":{"!doc":"<p>Set the current position of the vertical scroll bar.</p>","!type":"fn(scrollY: +Integer, renderSync?: bool)"},"setSelectBeforeFocus":{"!doc":"<p>Sets the user value of the property <code>selectBeforeFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectBeforeFocus}.</p>","!type":"fn(value: Object) -> Object"},"setShowCellFocusIndicator":{"!doc":"<p>Sets the user value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn(value: Object) -> Object"},"setTablePaneModel":{"!doc":"<p>Sets the user value of the property <code>tablePaneModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tablePaneModel}.</p>","!type":"fn(value: Object) -> Object"},"setTopRightWidget":{"!doc":"<p>Sets the widget that should be shown in the top right corner.</p>\n\n<p>The widget will not be disposed, when this table scroller is disposed. So the\ncaller has to dispose it.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"setVerticalScrollBarVisible":{"!doc":"<p>Sets the user value of the property <code>verticalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn(value: Object) -> Object"},"showColumnMoveFeedback":{"!doc":"<p>Shows the feedback shown while a column is moved by the user.</p>","!type":"fn(pageX: +Integer) -> +Integer"},"startEditing":{"!doc":"<p>Starts editing the currently focused cell. Does nothing if already\nediting, if the column is not editable, or if the cell editor for the\ncolumn ascertains that the particular cell is not editable.</p>","!type":"fn() -> bool"},"stopEditing":{"!doc":"<p>Stops editing and writes the editor&#8217;s value to the model.</p>","!type":"fn()"},"toggleContextMenuFromDataCellsOnly":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn() -> bool"},"toggleFocusCellOnPointerMove":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn() -> bool"},"toggleHorizontalScrollBarVisible":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>horizontalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #horizontalScrollBarVisible}.</p>","!type":"fn() -> bool"},"toggleLiveResize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>liveResize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #liveResize}.</p>","!type":"fn() -> bool"},"toggleResetSelectionOnHeaderTap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn() -> bool"},"toggleSelectBeforeFocus":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>selectBeforeFocus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectBeforeFocus}.</p>","!type":"fn() -> bool"},"toggleShowCellFocusIndicator":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn() -> bool"},"toggleVerticalScrollBarVisible":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>verticalScrollBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #verticalScrollBarVisible}.</p>","!type":"fn() -> bool"},"updateHorScrollBarMaximum":{"!doc":"<p>Updates the maximum of the horizontal scroll bar, so it corresponds to the\ntotal width of the columns in the table pane.</p>","!type":"fn()"},"updateVerScrollBarMaximum":{"!doc":"<p>Updates the maximum of the vertical scroll bar, so it corresponds to the\nnumber of rows in the table.</p>","!type":"fn()"}}}},"rowrenderer":{"Default":{"!proto":"qx.core.Object","!doc":"<p>The default data row renderer.</p>","!type":"fn()","prototype":{"_renderFont":{"!doc":"<p>Render the new font and update the table pane content\nto reflect the font change.</p>","!type":"fn(font: +qx.bom.Font)"},"createRowStyle":{"!type":"fn(rowInfo: +undefined)"},"getHighlightFocusRow":{"!doc":"<p>Returns the (computed) value of the property <code>highlightFocusRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #highlightFocusRow}.</p>","!type":"fn() -> Object"},"getRowAttributes":{"!doc":"<p>Add extra attributes to each row.</p>","!type":"fn(rowInfo: Object) -> string"},"getRowClass":{"!type":"fn(rowInfo: +undefined)"},"getRowHeightStyle":{"!doc":"<p>Get the row&#8217;s height <span class=\"caps\">CSS</span> style taking the box model into account</p>","!type":"fn(height: +Integer) -> string"},"initHighlightFocusRow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>highlightFocusRow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #highlightFocusRow}.</p>","!type":"fn(value: Object) -> Object"},"initThemeValues":{"!doc":"<p>Initializes the colors from the color theme.</p>","!type":"fn()"},"isHighlightFocusRow":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>highlightFocusRow</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #highlightFocusRow}.</p>","!type":"fn() -> bool"},"resetHighlightFocusRow":{"!doc":"<p>Resets the user value of the property <code>highlightFocusRow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #highlightFocusRow}.</p>","!type":"fn()"},"setHighlightFocusRow":{"!doc":"<p>Sets the user value of the property <code>highlightFocusRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #highlightFocusRow}.</p>","!type":"fn(value: Object) -> Object"},"toggleHighlightFocusRow":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>highlightFocusRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #highlightFocusRow}.</p>","!type":"fn() -> bool"},"updateDataRowElement":{"!type":"fn(rowInfo: +undefined, rowElem: +undefined)"}}}},"selection":{"Manager":{"!proto":"qx.core.Object","!doc":"<p>A selection manager. This is a helper class that handles all selection\nrelated events and updates a SelectionModel.</p>\n\n<p>Widgets that support selection should use this manager. This way the only\nthing the widget has to do is mapping pointer or key events to indexes and\ncall the corresponding handler method.</p>","!type":"fn()","prototype":{"_handleSelectEvent":{"!doc":"<p>Handles a select event.</p>","!type":"fn(index: +Integer, evt: +Map)"},"getSelectionModel":{"!doc":"<p>Returns the (computed) value of the property <code>selectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn() -> Object"},"handleMoveKeyDown":{"!doc":"<p>Handles a key down event that moved the focus (E.g. up, down, home, end, ...).</p>","!type":"fn(index: +Integer, evt: +Map)"},"handleSelectKeyDown":{"!doc":"<p>Handles the key down event that is used as replacement for pointer taps\n(Normally space).</p>","!type":"fn(index: +Integer, evt: +Map)"},"handleTap":{"!doc":"<p>Handles the tap event.</p>","!type":"fn(index: +Integer, evt: +qx.event.type.Tap)"},"initSelectionModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectionModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn(value: Object) -> Object"},"resetSelectionModel":{"!doc":"<p>Resets the user value of the property <code>selectionModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn()"},"setSelectionModel":{"!doc":"<p>Sets the user value of the property <code>selectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn(value: Object) -> Object"}}},"Model":{"!proto":"qx.core.Object","!doc":"<p>A selection model.</p>","!type":"fn()","prototype":{"_addSelectionInterval":{"!doc":"<p>Adds a selection interval to the current selection, but doesn&#8217;t inform\nthe listeners.</p>","!type":"fn(fromIndex: +Integer, toIndex: +Integer)"},"_applySelectionMode":{"!doc":"<p>Applies changes of the property value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(selectionMode: Object, old: Object)"},"_dumpRanges":{"!doc":"<p>Logs the current ranges for debug perposes.</p>","!type":"fn()"},"_fireChangeSelection":{"!doc":"<p>Fires the &#8220;changeSelection&#8221; event to all registered listeners. If the selection model\ncurrently is in batch mode, only one event will be thrown when batch mode is ended.</p>","!type":"fn()"},"_getSelectedRangeArr":{"!doc":"<p>Returns an array that holds all the selected ranges of the table. Each\nentry is a map holding information about the &#8220;minIndex&#8221; and &#8220;maxIndex&#8221; of the\nselection range.</p>","!type":"fn() -> +Map"},"_resetSelection":{"!doc":"<p>Resets (clears) the selection, but doesn&#8217;t inform the listeners.</p>","!type":"fn()"},"_setAnchorSelectionIndex":{"!doc":"<p>Sets the anchor selection index. Only use this function, if you want manipulate\nthe selection manually.</p>","!type":"fn(index: +Integer)"},"_setLeadSelectionIndex":{"!doc":"<p>Sets the lead selection index. Only use this function, if you want manipulate\nthe selection manually.</p>","!type":"fn(index: +Integer)"},"addSelectionInterval":{"!doc":"<p>Adds a selection interval to the current selection.</p>","!type":"fn(fromIndex: +Integer, toIndex: +Integer)"},"getAnchorSelectionIndex":{"!doc":"<p>Returns the first argument of the last call to {@link #setSelectionInterval()},\n{@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.</p>","!type":"fn() -> +Integer"},"getLeadSelectionIndex":{"!doc":"<p>Returns the second argument of the last call to {@link #setSelectionInterval()},\n{@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.</p>","!type":"fn() -> +Integer"},"getSelectedCount":{"!doc":"<p>Returns the number of selected items.</p>","!type":"fn() -> +Integer"},"getSelectedRanges":{"!doc":"<p>Returns the selected ranges as an array. Each array element has a\n<code>minIndex</code> and a <code>maxIndex</code> property.</p>","!type":"fn() -> +Map"},"getSelectionMode":{"!doc":"<p>Returns the (computed) value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn() -> Object"},"hasBatchMode":{"!doc":"<p>Returns whether batch mode is active. See setter for a description of batch mode.</p>","!type":"fn() -> bool"},"initSelectionMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectionMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object) -> Object"},"isSelectedIndex":{"!doc":"<p>Returns whether an index is selected.</p>","!type":"fn(index: +Integer) -> bool"},"isSelectionEmpty":{"!doc":"<p>Returns whether the selection is empty.</p>","!type":"fn() -> bool"},"iterateSelection":{"!doc":"<p>Calls an iterator function for each selected index.</p>\n\n<p>Usage Example:</p>\n\n<pre class=\"javascript\">\nvar selectedRowData = [];\nmySelectionModel.iterateSelection(function(index) {\n  selectedRowData.push(myTableModel.getRowData(index));\n});\n</pre>","!type":"fn(iterator: fn(), object?: Object)"},"removeSelectionInterval":{"!doc":"<p>Removes an interval from the current selection.</p>","!type":"fn(fromIndex: +Integer, toIndex: +Integer)"},"resetSelection":{"!doc":"<p>Resets (clears) the selection.</p>","!type":"fn()"},"resetSelectionMode":{"!doc":"<p>Resets the user value of the property <code>selectionMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn()"},"setBatchMode":{"!doc":"<p>Activates / Deactivates batch mode. In batch mode, no change events will be thrown but\nwill be collected instead. When batch mode is turned off again and any events have\nbeen collected, one event is thrown to inform the listeners.</p>\n\n<p>This method supports nested calling, i. e. batch mode can be turned more than once.\nIn this case, batch mode will not end until it has been turned off once for each\nturning on.</p>","!type":"fn(batchMode: bool) -> bool"},"setSelectionInterval":{"!doc":"<p>Sets the selected interval. This will clear the former selection.</p>","!type":"fn(fromIndex: +Integer, toIndex: +Integer)"},"setSelectionMode":{"!doc":"<p>Sets the user value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object) -> Object"}}}},"Table":{"!proto":"qx.ui.core.Widget","!doc":"<p>Table</p>\n\n<p>A detailed description can be found in the package description\n{@link qx.ui.table}.</p>","!type":"fn()","prototype":{"_applyAdditionalStatusBarText":{"!doc":"<p>Applies changes of the property value of the property <code>additionalStatusBarText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #additionalStatusBarText}.</p>","!type":"fn(value: Object, old: Object)"},"_applyColumnVisibilityButtonVisible":{"!doc":"<p>Applies changes of the property value of the property <code>columnVisibilityButtonVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn(value: bool, old: bool)"},"_applyContextMenuFromDataCellsOnly":{"!doc":"<p>Applies changes of the property value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn(value: bool, old: bool)"},"_applyFocusCellOnPointerMove":{"!doc":"<p>Applies changes of the property value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn(value: bool, old: bool)"},"_applyHeaderCellHeight":{"!doc":"<p>Applies changes of the property value of the property <code>headerCellHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellHeight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyHeaderCellsVisible":{"!doc":"<p>Applies changes of the property value of the property <code>headerCellsVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn(value: bool, old: bool)"},"_applyKeepFirstVisibleRowComplete":{"!doc":"<p>Applies changes of the property value of the property <code>keepFirstVisibleRowComplete</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn(value: bool, old: bool)"},"_applyMetaColumnCounts":{"!doc":"<p>Applies changes of the property value of the property <code>metaColumnCounts</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #metaColumnCounts}.</p>","!type":"fn(value: Object, old: Object)"},"_applyResetSelectionOnHeaderTap":{"!doc":"<p>Applies changes of the property value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn(value: bool, old: bool)"},"_applyRowHeight":{"!doc":"<p>Applies changes of the property value of the property <code>rowHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowHeight}.</p>","!type":"fn(value: number, old: number)"},"_applySelectionModel":{"!doc":"<p>Applies changes of the property value of the property <code>selectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn(value: +qx.ui.table.selection.Model, old: +qx.ui.table.selection.Model)"},"_applyShowCellFocusIndicator":{"!doc":"<p>Applies changes of the property value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn(value: bool, old: bool)"},"_applyStatusBarVisible":{"!doc":"<p>Applies changes of the property value of the property <code>statusBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn(value: bool, old: bool)"},"_applyTableModel":{"!doc":"<p>Applies changes of the property value of the property <code>tableModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tableModel}.</p>","!type":"fn(value: +qx.ui.table.ITableModel, old: +qx.ui.table.ITableModel)"},"_cleanUpMetaColumns":{"!doc":"<p>Cleans up the meta columns.</p>","!type":"fn(fromMetaColumn: +Integer)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_createColumnVisibilityCheckBoxHandler":{"!doc":"<p>Creates a handler for a check box of the column visibility menu.</p>","!type":"fn(col: +Integer) -> fn()"},"_getMetaColumnAtColumnX":{"!doc":"<p>Returns the meta column a column is shown in. If the column is not shown at\nall, -1 is returned.</p>","!type":"fn(visXPos: +Integer) -> +Integer"},"_getMetaColumnAtPageX":{"!doc":"<p>Gets the meta column at a certain x position in the page. If there is no\nmeta column at this position, -1 is returned.</p>","!type":"fn(pageX: +Integer) -> +Integer"},"_getPaneScrollerArr":{"!doc":"<p>Returns an array containing all TablePaneScrollers in this table.</p>","!type":"fn() -> +qx.ui.table.pane.Scroller"},"_initColumnMenu":{"!doc":"<p>Initialize the column menu</p>","!type":"fn()"},"_onChangeLocale":{"!doc":"<p>Event handler. Called when the locale has changed.</p>","!type":"fn(evt: +Event)"},"_onChangeTheme":{"!type":"fn()"},"_onColOrderChanged":{"!doc":"<p>Event handler. Called when the column order has changed.</p>","!type":"fn(evt: +Map)"},"_onColVisibilityChanged":{"!doc":"<p>Event handler. Called when the visibility of a column has changed.</p>","!type":"fn(evt: +Map)"},"_onColWidthChanged":{"!doc":"<p>Event handler. Called when the width of a column has changed.</p>","!type":"fn(evt: +Map)"},"_onFocusChanged":{"!doc":"<p>Event handler. Called when the table gets the focus.</p>","!type":"fn(evt: +Map)"},"_onKeyPress":{"!doc":"<p>Event handler. Called when a key was pressed.</p>","!type":"fn(evt: +qx.event.type.KeySequence)"},"_onResize":{"!doc":"<p>Resize event handler</p>","!type":"fn()"},"_onScrollY":{"!doc":"<p>Event handler. Called when a TablePaneScroller has been scrolled vertically.</p>","!type":"fn(evt: +Map)"},"_onSelectionChanged":{"!doc":"<p>Event handler. Called when the selection has changed.</p>","!type":"fn(evt: +Map)"},"_onTableModelDataChanged":{"!doc":"<p>Event handler. Called when the table model data has changed.</p>","!type":"fn(evt: +Map)"},"_onTableModelMetaDataChanged":{"!doc":"<p>Event handler. Called when the table model meta data has changed.</p>","!type":"fn(evt: +Map)"},"_updateScrollBarVisibility":{"!doc":"<p>Updates the visibility of the scrollbars in the meta columns.</p>","!type":"fn()"},"_updateScrollerWidths":{"!doc":"<p>Updates the widths of all scrollers.</p>","!type":"fn()"},"_updateStatusBar":{"!doc":"<p>Updates the text shown in the status bar.</p>","!type":"fn()"},"_updateTableData":{"!doc":"<p>To update the table if the table model has changed and remove selection.</p>","!type":"fn(firstRow: +Integer, lastRow: +Integer, firstColumn: +Integer, lastColumn: +Integer, removeStart?: +Integer, removeCount?: +Integer)"},"addListener":{"!type":"fn(type: +undefined, listener: +undefined, self: +undefined, capture: +undefined)"},"blockHeaderElements":{"!doc":"<p>Activates the blocker widgets on all column headers and the\ncolumn button</p>","!type":"fn()"},"cancelEditing":{"!doc":"<p>Stops editing without writing the editor&#8217;s value to the model.</p>","!type":"fn()"},"clearFocusedRowHighlight":{"!doc":"<p>Remove the highlighting of the current focus row.</p>\n\n<p>This is used to temporarily remove the highlighting of the currently\nfocused row, and is expected to be used most typically by adding a\nlistener on the &#8220;pointerout&#8221; event, so that the focus highlighting is\nsuspended when the pointer leaves the table:</p>\n\n<p>table.addListener(&#8220;pointerout&#8221;, table.clearFocusedRowHighlight);</p>","!type":"fn(evt: +qx.event.type.Pointer)"},"destroy":{"!type":"fn()"},"getAdditionalStatusBarText":{"!doc":"<p>Returns the (computed) value of the property <code>additionalStatusBarText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #additionalStatusBarText}.</p>","!type":"fn() -> Object"},"getAlwaysUpdateCells":{"!doc":"<p>Returns the (computed) value of the property <code>alwaysUpdateCells</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysUpdateCells}.</p>","!type":"fn() -> Object"},"getColumnVisibilityButtonVisible":{"!doc":"<p>Returns the (computed) value of the property <code>columnVisibilityButtonVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn() -> Object"},"getContextMenuFromDataCellsOnly":{"!doc":"<p>Returns the (computed) value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn() -> Object"},"getDataRowRenderer":{"!doc":"<p>Returns the (computed) value of the property <code>dataRowRenderer</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dataRowRenderer}.</p>","!type":"fn() -> Object"},"getEmptyTableModel":{"!doc":"<p>Get an empty table model instance to use for this table. Use this table\nto configure the table with no table model.</p>","!type":"fn() -> +qx.ui.table.ITableModel"},"getFocusCellOnPointerMove":{"!doc":"<p>Returns the (computed) value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn() -> Object"},"getFocusedColumn":{"!doc":"<p>Returns the column of the currently focused cell.</p>","!type":"fn() -> +Integer"},"getFocusedRow":{"!doc":"<p>Returns the row of the currently focused cell.</p>","!type":"fn() -> +Integer"},"getForceLineHeight":{"!doc":"<p>Returns the (computed) value of the property <code>forceLineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #forceLineHeight}.</p>","!type":"fn() -> Object"},"getHeaderCellHeight":{"!doc":"<p>Returns the (computed) value of the property <code>headerCellHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellHeight}.</p>","!type":"fn() -> Object"},"getHeaderCellsVisible":{"!doc":"<p>Returns the (computed) value of the property <code>headerCellsVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn() -> Object"},"getInitiallyHiddenColumns":{"!doc":"<p>Returns the (computed) value of the property <code>initiallyHiddenColumns</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #initiallyHiddenColumns}.</p>","!type":"fn() -> Object"},"getKeepFirstVisibleRowComplete":{"!doc":"<p>Returns the (computed) value of the property <code>keepFirstVisibleRowComplete</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn() -> Object"},"getMetaColumnCounts":{"!doc":"<p>Returns the (computed) value of the property <code>metaColumnCounts</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #metaColumnCounts}.</p>","!type":"fn() -> Object"},"getModalCellEditorPreOpenFunction":{"!doc":"<p>Returns the (computed) value of the property <code>modalCellEditorPreOpenFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}.</p>","!type":"fn() -> Object"},"getNewColumnMenu":{"!doc":"<p>Returns the (computed) value of the property <code>newColumnMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newColumnMenu}.</p>","!type":"fn() -> Object"},"getNewSelectionManager":{"!doc":"<p>Returns the (computed) value of the property <code>newSelectionManager</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionManager}.</p>","!type":"fn() -> Object"},"getNewSelectionModel":{"!doc":"<p>Returns the (computed) value of the property <code>newSelectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionModel}.</p>","!type":"fn() -> Object"},"getNewTableColumnModel":{"!doc":"<p>Returns the (computed) value of the property <code>newTableColumnModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTableColumnModel}.</p>","!type":"fn() -> Object"},"getNewTablePane":{"!doc":"<p>Returns the (computed) value of the property <code>newTablePane</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePane}.</p>","!type":"fn() -> Object"},"getNewTablePaneHeader":{"!doc":"<p>Returns the (computed) value of the property <code>newTablePaneHeader</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneHeader}.</p>","!type":"fn() -> Object"},"getNewTablePaneModel":{"!doc":"<p>Returns the (computed) value of the property <code>newTablePaneModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneModel}.</p>","!type":"fn() -> Object"},"getNewTablePaneScroller":{"!doc":"<p>Returns the (computed) value of the property <code>newTablePaneScroller</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneScroller}.</p>","!type":"fn() -> Object"},"getPaneScroller":{"!doc":"<p>Returns a TablePaneScroller of this table.</p>","!type":"fn(metaColumn: +Integer) -> +qx.ui.table.pane.Scroller"},"getResetSelectionOnHeaderTap":{"!doc":"<p>Returns the (computed) value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn() -> Object"},"getRowFocusChangeModifiesSelection":{"!doc":"<p>Returns the (computed) value of the property <code>rowFocusChangeModifiesSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}.</p>","!type":"fn() -> Object"},"getRowHeight":{"!doc":"<p>Returns the (computed) value of the property <code>rowHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowHeight}.</p>","!type":"fn() -> Object"},"getSelectionManager":{"!doc":"<p>Returns the selection manager.</p>","!type":"fn() -> +qx.ui.table.selection.Manager"},"getSelectionModel":{"!doc":"<p>Returns the (computed) value of the property <code>selectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn() -> Object"},"getShowCellFocusIndicator":{"!doc":"<p>Returns the (computed) value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn() -> Object"},"getStatusBarVisible":{"!doc":"<p>Returns the (computed) value of the property <code>statusBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn() -> Object"},"getTableColumnModel":{"!doc":"<p>Get the The table column model.</p>","!type":"fn() -> +qx.ui.table.columnmodel.Basic"},"getTableModel":{"!doc":"<p>Returns the (computed) value of the property <code>tableModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tableModel}.</p>","!type":"fn() -> Object"},"getTablePaneScrollerAtPageX":{"!doc":"<p>Gets the TablePaneScroller at a certain x position in the page. If there is\nno TablePaneScroller at this position, null is returned.</p>","!type":"fn(pageX: +Integer) -> +qx.ui.table.pane.Scroller"},"highlightFocusedRow":{"!doc":"<p>Select whether the focused row is highlighted</p>","!type":"fn(bHighlight: bool)"},"initAdditionalStatusBarText":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>additionalStatusBarText</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #additionalStatusBarText}.</p>","!type":"fn(value: Object) -> Object"},"initAlwaysUpdateCells":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alwaysUpdateCells</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysUpdateCells}.</p>","!type":"fn(value: Object) -> Object"},"initColumnVisibilityButtonVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>columnVisibilityButtonVisible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn(value: Object) -> Object"},"initContextMenuFromDataCellsOnly":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>contextMenuFromDataCellsOnly</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn(value: Object) -> Object"},"initDataRowRenderer":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dataRowRenderer</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dataRowRenderer}.</p>","!type":"fn(value: Object) -> Object"},"initFocusCellOnPointerMove":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>focusCellOnPointerMove</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn(value: Object) -> Object"},"initForceLineHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>forceLineHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #forceLineHeight}.</p>","!type":"fn(value: Object) -> Object"},"initHeaderCellHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>headerCellHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellHeight}.</p>","!type":"fn(value: Object) -> Object"},"initHeaderCellsVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>headerCellsVisible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn(value: Object) -> Object"},"initInitiallyHiddenColumns":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>initiallyHiddenColumns</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #initiallyHiddenColumns}.</p>","!type":"fn(value: Object) -> Object"},"initKeepFirstVisibleRowComplete":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>keepFirstVisibleRowComplete</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn(value: Object) -> Object"},"initMetaColumnCounts":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>metaColumnCounts</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #metaColumnCounts}.</p>","!type":"fn(value: Object) -> Object"},"initModalCellEditorPreOpenFunction":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>modalCellEditorPreOpenFunction</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}.</p>","!type":"fn(value: Object) -> Object"},"initNewColumnMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newColumnMenu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newColumnMenu}.</p>","!type":"fn(value: Object) -> Object"},"initNewSelectionManager":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newSelectionManager</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionManager}.</p>","!type":"fn(value: Object) -> Object"},"initNewSelectionModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newSelectionModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionModel}.</p>","!type":"fn(value: Object) -> Object"},"initNewTableColumnModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newTableColumnModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newTableColumnModel}.</p>","!type":"fn(value: Object) -> Object"},"initNewTablePane":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newTablePane</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePane}.</p>","!type":"fn(value: Object) -> Object"},"initNewTablePaneHeader":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newTablePaneHeader</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneHeader}.</p>","!type":"fn(value: Object) -> Object"},"initNewTablePaneModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newTablePaneModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneModel}.</p>","!type":"fn(value: Object) -> Object"},"initNewTablePaneScroller":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>newTablePaneScroller</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneScroller}.</p>","!type":"fn(value: Object) -> Object"},"initResetSelectionOnHeaderTap":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>resetSelectionOnHeaderTap</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn(value: Object) -> Object"},"initRowFocusChangeModifiesSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rowFocusChangeModifiesSelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}.</p>","!type":"fn(value: Object) -> Object"},"initRowHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rowHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rowHeight}.</p>","!type":"fn(value: Object) -> Object"},"initSelectionModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectionModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn(value: Object) -> Object"},"initShowCellFocusIndicator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showCellFocusIndicator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn(value: Object) -> Object"},"initStatusBarVisible":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>statusBarVisible</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn(value: Object) -> Object"},"initTableModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>tableModel</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #tableModel}.</p>","!type":"fn(value: Object) -> Object"},"isAlwaysUpdateCells":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>alwaysUpdateCells</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysUpdateCells}.</p>","!type":"fn() -> bool"},"isColumnVisibilityButtonVisible":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>columnVisibilityButtonVisible</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn() -> bool"},"isContextMenuFromDataCellsOnly":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>contextMenuFromDataCellsOnly</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn() -> bool"},"isEditing":{"!doc":"<p>Returns whether currently a cell is editing.</p>","!type":"fn() -> Object"},"isFocusCellOnPointerMove":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>focusCellOnPointerMove</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn() -> bool"},"isForceLineHeight":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>forceLineHeight</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #forceLineHeight}.</p>","!type":"fn() -> bool"},"isHeaderCellsVisible":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>headerCellsVisible</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn() -> bool"},"isKeepFirstVisibleRowComplete":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>keepFirstVisibleRowComplete</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn() -> bool"},"isResetSelectionOnHeaderTap":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>resetSelectionOnHeaderTap</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn() -> bool"},"isRowFocusChangeModifiesSelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>rowFocusChangeModifiesSelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}.</p>","!type":"fn() -> bool"},"isShowCellFocusIndicator":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showCellFocusIndicator</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn() -> bool"},"isStatusBarVisible":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>statusBarVisible</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn() -> bool"},"moveFocusedCell":{"!doc":"<p>Moves the focus.</p>","!type":"fn(deltaX: +Integer, deltaY: +Integer)"},"removeListener":{"!type":"fn(type: +undefined, listener: +undefined, self: +undefined, capture: +undefined)"},"removeListenerById":{"!type":"fn(id: +undefined)"},"resetAdditionalStatusBarText":{"!doc":"<p>Resets the user value of the property <code>additionalStatusBarText</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #additionalStatusBarText}.</p>","!type":"fn()"},"resetAlwaysUpdateCells":{"!doc":"<p>Resets the user value of the property <code>alwaysUpdateCells</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysUpdateCells}.</p>","!type":"fn()"},"resetCellFocus":{"!doc":"<p>Resets the focused cell.</p>","!type":"fn()"},"resetColumnVisibilityButtonVisible":{"!doc":"<p>Resets the user value of the property <code>columnVisibilityButtonVisible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn()"},"resetContextMenuFromDataCellsOnly":{"!doc":"<p>Resets the user value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn()"},"resetDataRowRenderer":{"!doc":"<p>Resets the user value of the property <code>dataRowRenderer</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dataRowRenderer}.</p>","!type":"fn()"},"resetFocusCellOnPointerMove":{"!doc":"<p>Resets the user value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn()"},"resetForceLineHeight":{"!doc":"<p>Resets the user value of the property <code>forceLineHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #forceLineHeight}.</p>","!type":"fn()"},"resetHeaderCellHeight":{"!doc":"<p>Resets the user value of the property <code>headerCellHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellHeight}.</p>","!type":"fn()"},"resetHeaderCellsVisible":{"!doc":"<p>Resets the user value of the property <code>headerCellsVisible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn()"},"resetInitiallyHiddenColumns":{"!doc":"<p>Resets the user value of the property <code>initiallyHiddenColumns</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #initiallyHiddenColumns}.</p>","!type":"fn()"},"resetKeepFirstVisibleRowComplete":{"!doc":"<p>Resets the user value of the property <code>keepFirstVisibleRowComplete</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn()"},"resetMetaColumnCounts":{"!doc":"<p>Resets the user value of the property <code>metaColumnCounts</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #metaColumnCounts}.</p>","!type":"fn()"},"resetModalCellEditorPreOpenFunction":{"!doc":"<p>Resets the user value of the property <code>modalCellEditorPreOpenFunction</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}.</p>","!type":"fn()"},"resetNewColumnMenu":{"!doc":"<p>Resets the user value of the property <code>newColumnMenu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newColumnMenu}.</p>","!type":"fn()"},"resetNewSelectionManager":{"!doc":"<p>Resets the user value of the property <code>newSelectionManager</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionManager}.</p>","!type":"fn()"},"resetNewSelectionModel":{"!doc":"<p>Resets the user value of the property <code>newSelectionModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionModel}.</p>","!type":"fn()"},"resetNewTableColumnModel":{"!doc":"<p>Resets the user value of the property <code>newTableColumnModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newTableColumnModel}.</p>","!type":"fn()"},"resetNewTablePane":{"!doc":"<p>Resets the user value of the property <code>newTablePane</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePane}.</p>","!type":"fn()"},"resetNewTablePaneHeader":{"!doc":"<p>Resets the user value of the property <code>newTablePaneHeader</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneHeader}.</p>","!type":"fn()"},"resetNewTablePaneModel":{"!doc":"<p>Resets the user value of the property <code>newTablePaneModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneModel}.</p>","!type":"fn()"},"resetNewTablePaneScroller":{"!doc":"<p>Resets the user value of the property <code>newTablePaneScroller</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneScroller}.</p>","!type":"fn()"},"resetResetSelectionOnHeaderTap":{"!doc":"<p>Resets the user value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn()"},"resetRowFocusChangeModifiesSelection":{"!doc":"<p>Resets the user value of the property <code>rowFocusChangeModifiesSelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}.</p>","!type":"fn()"},"resetRowHeight":{"!doc":"<p>Resets the user value of the property <code>rowHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rowHeight}.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Resets (clears) the current selection</p>","!type":"fn()"},"resetSelectionModel":{"!doc":"<p>Resets the user value of the property <code>selectionModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn()"},"resetShowCellFocusIndicator":{"!doc":"<p>Resets the user value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn()"},"resetStatusBarVisible":{"!doc":"<p>Resets the user value of the property <code>statusBarVisible</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn()"},"resetTableModel":{"!doc":"<p>Resets the user value of the property <code>tableModel</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #tableModel}.</p>","!type":"fn()"},"scrollCellVisible":{"!doc":"<p>Scrolls a cell visible.</p>","!type":"fn(col: +Integer, row: +Integer)"},"setAdditionalStatusBarText":{"!doc":"<p>Sets the user value of the property <code>additionalStatusBarText</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #additionalStatusBarText}.</p>","!type":"fn(value: Object) -> Object"},"setAlwaysUpdateCells":{"!doc":"<p>Sets the user value of the property <code>alwaysUpdateCells</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysUpdateCells}.</p>","!type":"fn(value: Object) -> Object"},"setColumnVisibilityButtonVisible":{"!doc":"<p>Sets the user value of the property <code>columnVisibilityButtonVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn(value: Object) -> Object"},"setColumnWidth":{"!doc":"<p>Sets the width of a column.</p>","!type":"fn(col: +Integer, width: +Integer)"},"setContextMenuFromDataCellsOnly":{"!doc":"<p>Sets the user value of the property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn(value: Object) -> Object"},"setDataRowRenderer":{"!doc":"<p>Sets the user value of the property <code>dataRowRenderer</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dataRowRenderer}.</p>","!type":"fn(value: Object) -> Object"},"setFocusCellOnPointerMove":{"!doc":"<p>Sets the user value of the property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn(value: Object) -> Object"},"setFocusedCell":{"!doc":"<p>Sets the currently focused cell. A value of <code>null</code> hides the\nfocus cell.</p>","!type":"fn(col?: +Integer, row?: +Integer, scrollVisible?: bool)"},"setForceLineHeight":{"!doc":"<p>Sets the user value of the property <code>forceLineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #forceLineHeight}.</p>","!type":"fn(value: Object) -> Object"},"setHeaderCellHeight":{"!doc":"<p>Sets the user value of the property <code>headerCellHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellHeight}.</p>","!type":"fn(value: Object) -> Object"},"setHeaderCellsVisible":{"!doc":"<p>Sets the user value of the property <code>headerCellsVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn(value: Object) -> Object"},"setInitiallyHiddenColumns":{"!doc":"<p>Sets the user value of the property <code>initiallyHiddenColumns</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #initiallyHiddenColumns}.</p>","!type":"fn(value: Object) -> Object"},"setKeepFirstVisibleRowComplete":{"!doc":"<p>Sets the user value of the property <code>keepFirstVisibleRowComplete</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn(value: Object) -> Object"},"setMetaColumnCounts":{"!doc":"<p>Sets the user value of the property <code>metaColumnCounts</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #metaColumnCounts}.</p>","!type":"fn(value: Object) -> Object"},"setModalCellEditorPreOpenFunction":{"!doc":"<p>Sets the user value of the property <code>modalCellEditorPreOpenFunction</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}.</p>","!type":"fn(value: Object) -> Object"},"setNewColumnMenu":{"!doc":"<p>Sets the user value of the property <code>newColumnMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newColumnMenu}.</p>","!type":"fn(value: Object) -> Object"},"setNewSelectionManager":{"!doc":"<p>Sets the user value of the property <code>newSelectionManager</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionManager}.</p>","!type":"fn(value: Object) -> Object"},"setNewSelectionModel":{"!doc":"<p>Sets the user value of the property <code>newSelectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newSelectionModel}.</p>","!type":"fn(value: Object) -> Object"},"setNewTableColumnModel":{"!doc":"<p>Sets the user value of the property <code>newTableColumnModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTableColumnModel}.</p>","!type":"fn(value: Object) -> Object"},"setNewTablePane":{"!doc":"<p>Sets the user value of the property <code>newTablePane</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePane}.</p>","!type":"fn(value: Object) -> Object"},"setNewTablePaneHeader":{"!doc":"<p>Sets the user value of the property <code>newTablePaneHeader</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneHeader}.</p>","!type":"fn(value: Object) -> Object"},"setNewTablePaneModel":{"!doc":"<p>Sets the user value of the property <code>newTablePaneModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneModel}.</p>","!type":"fn(value: Object) -> Object"},"setNewTablePaneScroller":{"!doc":"<p>Sets the user value of the property <code>newTablePaneScroller</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #newTablePaneScroller}.</p>","!type":"fn(value: Object) -> Object"},"setResetSelectionOnHeaderTap":{"!doc":"<p>Sets the user value of the property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn(value: Object) -> Object"},"setRowFocusChangeModifiesSelection":{"!doc":"<p>Sets the user value of the property <code>rowFocusChangeModifiesSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}.</p>","!type":"fn(value: Object) -> Object"},"setRowHeight":{"!doc":"<p>Sets the user value of the property <code>rowHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowHeight}.</p>","!type":"fn(value: Object) -> Object"},"setSelectionModel":{"!doc":"<p>Sets the user value of the property <code>selectionModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionModel}.</p>","!type":"fn(value: Object) -> Object"},"setShowCellFocusIndicator":{"!doc":"<p>Sets the user value of the property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn(value: Object) -> Object"},"setStatusBarVisible":{"!doc":"<p>Sets the user value of the property <code>statusBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn(value: Object) -> Object"},"setTableModel":{"!doc":"<p>Sets the user value of the property <code>tableModel</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #tableModel}.</p>","!type":"fn(value: Object) -> Object"},"startEditing":{"!doc":"<p>Starts editing the currently focused cell. Does nothing if already editing\nor if the column is not editable.</p>","!type":"fn() -> bool"},"stopEditing":{"!doc":"<p>Stops editing and writes the editor&#8217;s value to the model.</p>","!type":"fn()"},"toggleAlwaysUpdateCells":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>alwaysUpdateCells</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysUpdateCells}.</p>","!type":"fn() -> bool"},"toggleColumnVisibilityButtonVisible":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>columnVisibilityButtonVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #columnVisibilityButtonVisible}.</p>","!type":"fn() -> bool"},"toggleContextMenuFromDataCellsOnly":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>contextMenuFromDataCellsOnly</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}.</p>","!type":"fn() -> bool"},"toggleFocusCellOnPointerMove":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>focusCellOnPointerMove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusCellOnPointerMove}.</p>","!type":"fn() -> bool"},"toggleForceLineHeight":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>forceLineHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #forceLineHeight}.</p>","!type":"fn() -> bool"},"toggleHeaderCellsVisible":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>headerCellsVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #headerCellsVisible}.</p>","!type":"fn() -> bool"},"toggleKeepFirstVisibleRowComplete":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>keepFirstVisibleRowComplete</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}.</p>","!type":"fn() -> bool"},"toggleResetSelectionOnHeaderTap":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>resetSelectionOnHeaderTap</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}.</p>","!type":"fn() -> bool"},"toggleRowFocusChangeModifiesSelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>rowFocusChangeModifiesSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}.</p>","!type":"fn() -> bool"},"toggleShowCellFocusIndicator":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showCellFocusIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCellFocusIndicator}.</p>","!type":"fn() -> bool"},"toggleStatusBarVisible":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>statusBarVisible</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #statusBarVisible}.</p>","!type":"fn() -> bool"},"unblockHeaderElements":{"!doc":"<p>Deactivates the blocker widgets on all column headers and the\ncolumn button</p>","!type":"fn()"},"updateContent":{"!doc":"<p>Update the table content of every attached table pane.</p>","!type":"fn()"}}}},"tabview":{"Page":{"!proto":"qx.ui.container.Composite","!doc":"<p>A page is the way to add content to a {@link TabView}. Each page gets a\nbutton to switch to the page. Only one page is visible at a time.</p>","!type":"fn()","prototype":{"_applyEnabled":{"!doc":"<p>Applies changes of the property value of the property <code>enabled</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #enabled}.</p>","!type":"fn(value: bool, old: bool)"},"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyShowCloseButton":{"!doc":"<p>Applies changes of the property value of the property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onButtonClose":{"!doc":"<p>Fires an &#8220;close&#8221; event when the close button of the TabButton of the page\nis tapped.</p>","!type":"fn()"},"getButton":{"!doc":"<p>Returns the button used within this page. This method is used by\nthe TabView to access the button.</p>","!type":"fn() -> +qx.ui.form.RadioButton"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getShowCloseButton":{"!doc":"<p>Returns the (computed) value of the property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn() -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initShowCloseButton":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showCloseButton</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn(value: Object) -> Object"},"isShowCloseButton":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showCloseButton</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn() -> bool"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetShowCloseButton":{"!doc":"<p>Resets the user value of the property <code>showCloseButton</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn()"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setShowCloseButton":{"!doc":"<p>Sets the user value of the property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowCloseButton":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn() -> bool"}}},"TabButton":{"!proto":"qx.ui.form.RadioButton","!doc":"<p>A TabButton is the tapable part sitting on the {@link qx.ui.tabview.Page}.\nBy tapping on the TabButton the user can set a Page active.</p>","!type":"fn()","prototype":{"_applyCenter":{"!doc":"<p>Applies changes of the property value of the property <code>center</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #center}.</p>","!type":"fn(value: bool, old: bool)"},"_applyIconPosition":{"!doc":"<p>Applies changes of the property value of the property <code>iconPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPosition}.</p>","!type":"fn(value: Object, old: Object)"},"_applyShowCloseButton":{"!doc":"<p>Applies changes of the property value of the property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onCloseButtonTap":{"!doc":"<p>Fires a &#8220;close&#8221; event when the close button is tapped.</p>","!type":"fn()"},"getShowCloseButton":{"!doc":"<p>Returns the (computed) value of the property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn() -> Object"},"initShowCloseButton":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showCloseButton</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn(value: Object) -> Object"},"isShowCloseButton":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showCloseButton</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn() -> bool"},"resetShowCloseButton":{"!doc":"<p>Resets the user value of the property <code>showCloseButton</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn()"},"setShowCloseButton":{"!doc":"<p>Sets the user value of the property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowCloseButton":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showCloseButton</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showCloseButton}.</p>","!type":"fn() -> bool"}}},"TabView":{"!proto":"qx.ui.core.Widget","!doc":"<p>A tab view is a multi page view where only one page is visible\nat each moment. It is possible to switch the pages using the\nbuttons rendered by each page.</p>","!type":"fn()","prototype":{"_applyBarPosition":{"!doc":"<p>Apply method for the placeBarOnTop-Property.</p>\n\n<p>Passes the desired value to the layout of the tabview so\nthat the layout can handle it.\nIt also sets the states to all buttons so they know the\nposition of the bar.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_onBeforeChangeSelection":{"!doc":"<p>Event handler for <code>beforeChangeSelection</code>.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onChangeSelection":{"!doc":"<p>Event handler for <code>changeSelection</code>.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onPageClose":{"!doc":"<p>Removes the Page widget on which the close button was tapped.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onRadioChangeSelection":{"!doc":"<p>Event handler for the change of the selected item of the radio group.</p>","!type":"fn(e: +qx.event.type.Data)"},"add":{"!doc":"<p>Adds a page to the tabview including its needed button\n(contained in the page).</p>","!type":"fn(page: +qx.ui.tabview.Page)"},"addAt":{"!doc":"<p>Adds a page to the tabview including its needed button\n(contained in the page).</p>","!type":"fn(page: +qx.ui.tabview.Page, index?: +Integer)"},"getBarPosition":{"!doc":"<p>Returns the (computed) value of the property <code>barPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #barPosition}.</p>","!type":"fn() -> Object"},"getChildren":{"!doc":"<p>Returns TabView&#8217;s children widgets.</p>","!type":"fn() -> +qx.ui.tabview.Page"},"getSelectables":{"!doc":"<p>Returns all elements which are selectable.</p>","!type":"fn(all: bool) -> +qx.ui.tabview.Page"},"getSelection":{"!doc":"<p>Returns an array of currently selected items.</p>\n\n<p>Note: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added.</p>","!type":"fn() -> +qx.ui.tabview.Page"},"indexOf":{"!doc":"<p>Returns the position of the given page in the TabView.</p>","!type":"fn(page: +qx.ui.tabview.Page) -> +Integer"},"initBarPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>barPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #barPosition}.</p>","!type":"fn(value: Object) -> Object"},"isSelected":{"!doc":"<p>Detects whether the given item is currently selected.</p>","!type":"fn(item: +qx.ui.tabview.Page) -> bool"},"isSelectionEmpty":{"!doc":"<p>Whether the selection is empty.</p>","!type":"fn() -> bool"},"remove":{"!doc":"<p>Removes a page (and its corresponding button) from the TabView.</p>","!type":"fn(page: +qx.ui.tabview.Page)"},"resetBarPosition":{"!doc":"<p>Resets the user value of the property <code>barPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #barPosition}.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Clears the whole selection at once.</p>","!type":"fn()"},"setBarPosition":{"!doc":"<p>Sets the user value of the property <code>barPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #barPosition}.</p>","!type":"fn(value: Object) -> Object"},"setSelection":{"!doc":"<p>Replaces current selection with the given items.</p>","!type":"fn(items: +qx.ui.tabview.Page)"}}}},"toolbar":{"Button":{"!proto":"qx.ui.form.Button","!doc":"<p>The normal toolbar button. Like a normal {@link qx.ui.form.Button}\nbut with a style matching the toolbar and without keyboard support.</p>","!type":"fn()","prototype":{"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"}}},"CheckBox":{"!proto":"qx.ui.form.ToggleButton","!doc":"<p>A button which is toggle-able for toolbars.</p>","!type":"fn()","prototype":{"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"}}},"MenuButton":{"!proto":"qx.ui.menubar.Button","!doc":"<p>The button to fill the menubar</p>","prototype":{"_applyShowArrow":{"!doc":"<p>Applies changes of the property value of the property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn(value: bool, old: bool)"},"_applyVisibility":{"!doc":"<p>Applies changes of the property value of the property <code>visibility</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #visibility}.</p>","!type":"fn(value: Object, old: Object)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"getShowArrow":{"!doc":"<p>Returns the (computed) value of the property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn() -> Object"},"initShowArrow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showArrow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn(value: Object) -> Object"},"isShowArrow":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showArrow</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn() -> bool"},"resetShowArrow":{"!doc":"<p>Resets the user value of the property <code>showArrow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn()"},"setShowArrow":{"!doc":"<p>Sets the user value of the property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn(value: Object) -> Object"},"toggleShowArrow":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showArrow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showArrow}.</p>","!type":"fn() -> bool"}}},"Part":{"!proto":"qx.ui.core.Widget","!doc":"<p>A part is a container for multiple toolbar buttons. Each part comes\nwith a handle which may be used in later versions to drag the part\naround and move it to another position. Currently mainly used\nfor structuring large toolbars beyond the capabilities of the\n{@link Separator}.</p>","!type":"fn()","prototype":{"__onSyncAppearance":{"!doc":"<p>Helper which applies the left, right and middle states.</p>","!type":"fn()"},"_applySpacing":{"!doc":"<p>Applies changes of the property value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"addSeparator":{"!doc":"<p>Adds a separator to the toolbar part.</p>","!type":"fn()"},"getChildrenContainer":{"!type":"fn()"},"getMenuButtons":{"!doc":"<p>Returns all nested buttons which contains a menu to show. This is mainly\nused for keyboard support.</p>","!type":"fn() -> +Array"},"getShow":{"!doc":"<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn() -> Object"},"getSpacing":{"!doc":"<p>Returns the (computed) value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn() -> Object"},"initShow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"initSpacing":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"resetShow":{"!doc":"<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn()"},"resetSpacing":{"!doc":"<p>Resets the user value of the property <code>spacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn()"},"setShow":{"!doc":"<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"setSpacing":{"!doc":"<p>Sets the user value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"}}},"PartContainer":{"!proto":"qx.ui.container.Composite","!doc":"<p>The container used by {@link Part} to insert the buttons.</p>","!type":"fn()","prototype":{"_afterAddChild":{"!type":"fn(child: +undefined)"},"_afterRemoveChild":{"!type":"fn(child: +undefined)"},"getShow":{"!doc":"<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn() -> Object"},"initShow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"resetShow":{"!doc":"<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn()"},"setShow":{"!doc":"<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"}}},"RadioButton":{"!proto":"qx.ui.toolbar.CheckBox","!doc":"<p>Radio buttons are used to manage a single selection. Radio buttons only\nmake sense used in a group of two or more of them. They are managed (connected)\nto a {@link qx.ui.form.RadioGroup} to handle the selection.</p>","prototype":{"_applyValue":{"!doc":"<p>Applies changes of the property value of the property <code>value</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #value}.</p>","!type":"fn(value: bool, old: bool)"},"_onExecute":{"!type":"fn(e: +undefined)"}}},"Separator":{"!proto":"qx.ui.core.Widget","!doc":"<p>A widget used for decoration proposes to structure a toolbar. Each\nSeparator renders a line between the buttons around.</p>"},"SplitButton":{"!proto":"qx.ui.form.SplitButton","!doc":"<p>A button which acts as a normal button and shows a menu on one\nof the sides to open something like a history list.</p>","!type":"fn()","prototype":{"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"}}},"ToolBar":{"!proto":"qx.ui.core.Widget","!doc":"<p>The Toolbar class is the main part of the toolbar widget.</p>\n\n<p>It can handle added {@link Button}s, {@link CheckBox}es, {@link RadioButton}s\nand {@link Separator}s in its {@link #add} method. The {@link #addSpacer} method\nadds a spacer at the current toolbar position. This means that the widgets\nadded after the method call of {@link #addSpacer} are aligned to the right of\nthe toolbar.</p>\n\n<p>For more details on the documentation of the toolbar widget, take a look at the\ndocumentation of the {@link qx.ui.toolbar}-Package.</p>","!type":"fn()","prototype":{"__hideChild":{"!doc":"<p>Helper to exclude a toolbar item.</p>","!type":"fn(child: +qx.ui.core.Widget)"},"__showChild":{"!doc":"<p>Helper to show a toolbar item.</p>","!type":"fn(child: +qx.ui.core.Widget)"},"_add":{"!type":"fn(child: +undefined, options: +undefined)"},"_addAfter":{"!type":"fn(child: +undefined, after: +undefined, options: +undefined)"},"_addAt":{"!type":"fn(child: +undefined, index: +undefined, options: +undefined)"},"_addBefore":{"!type":"fn(child: +undefined, before: +undefined, options: +undefined)"},"_applyOverflowHandling":{"!doc":"<p>Applies changes of the property value of the property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn(value: bool, old: bool)"},"_applyOverflowIndicator":{"!doc":"<p>Applies changes of the property value of the property <code>overflowIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>","!type":"fn(value: +qx.ui.core.Widget, old: +qx.ui.core.Widget)"},"_applyShow":{"!doc":"<p>Applies changes of the property value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object, old: Object)"},"_applySpacing":{"!doc":"<p>Applies changes of the property value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_computeSizeHint":{"!type":"fn()"},"_getNextToHide":{"!doc":"<p>Responsible for returning the next item to remove. In It checks the\npriorities added by {@link #setRemovePriority}. If all priorized widgets\nalready excluded, it takes the widget added at last.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_isAllowMenuOpenHover":{"!doc":"<p>Return if a menu could be opened on hover or not.</p>","!type":"fn() -> bool"},"_onResize":{"!doc":"<p>Resize event handler.</p>","!type":"fn(e: +qx.event.type.Data)"},"_recalculateOverflow":{"!doc":"<p>Responsible for calculation the overflow based on the available width.</p>","!type":"fn(width?: +Integer, requiredWidth?: +Integer)"},"_remove":{"!type":"fn(child: +undefined)"},"_removeAll":{"!type":"fn()"},"_removeAt":{"!type":"fn(index: +undefined)"},"_setAllowMenuOpenHover":{"!doc":"<p>Indicate if a menu could be opened on hover or not.</p>","!type":"fn(value: bool)"},"addSeparator":{"!doc":"<p>Adds a separator to the toolbar.</p>","!type":"fn()"},"addSpacer":{"!doc":"<p>Add a spacer to the toolbar. The spacer has a flex\nvalue of one and will stretch to the available space.</p>","!type":"fn() -> +qx.ui.core.Spacer"},"getMenuButtons":{"!doc":"<p>Returns all nested buttons which contains a menu to show. This is mainly\nused for keyboard support.</p>","!type":"fn() -> +Array"},"getOpenMenu":{"!doc":"<p>Returns the (computed) value of the property <code>openMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>","!type":"fn() -> Object"},"getOverflowHandling":{"!doc":"<p>Returns the (computed) value of the property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn() -> Object"},"getOverflowIndicator":{"!doc":"<p>Returns the (computed) value of the property <code>overflowIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>","!type":"fn() -> Object"},"getShow":{"!doc":"<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn() -> Object"},"getSpacing":{"!doc":"<p>Returns the (computed) value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn() -> Object"},"initOpenMenu":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openMenu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>","!type":"fn(value: Object) -> Object"},"initOverflowHandling":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>overflowHandling</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn(value: Object) -> Object"},"initOverflowIndicator":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>overflowIndicator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>","!type":"fn(value: Object) -> Object"},"initShow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"initSpacing":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>spacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"isOverflowHandling":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>overflowHandling</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn() -> bool"},"resetOpenMenu":{"!doc":"<p>Resets the user value of the property <code>openMenu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>","!type":"fn()"},"resetOverflowHandling":{"!doc":"<p>Resets the user value of the property <code>overflowHandling</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn()"},"resetOverflowIndicator":{"!doc":"<p>Resets the user value of the property <code>overflowIndicator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>","!type":"fn()"},"resetShow":{"!doc":"<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn()"},"resetSpacing":{"!doc":"<p>Resets the user value of the property <code>spacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn()"},"setOpenMenu":{"!doc":"<p>Sets the user value of the property <code>openMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>","!type":"fn(value: Object) -> Object"},"setOverflowHandling":{"!doc":"<p>Sets the user value of the property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn(value: Object) -> Object"},"setOverflowIndicator":{"!doc":"<p>Sets the user value of the property <code>overflowIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>","!type":"fn(value: Object) -> Object"},"setRemovePriority":{"!doc":"<p>The removal of the toolbar items is priority based. You can change these\npriorities with this method. The higher a priority, the earlier it will\nbe excluded. Remmeber to use every priority only once! If you want\noverride an already set priority, use the override parameter.\nKeep in mind to only use already added items.</p>","!type":"fn(item: +qx.ui.core.Widget, priority: +Integer, override: bool)"},"setShow":{"!doc":"<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>","!type":"fn(value: Object) -> Object"},"setSpacing":{"!doc":"<p>Sets the user value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>","!type":"fn(value: Object) -> Object"},"toggleOverflowHandling":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>","!type":"fn() -> bool"}}}},"tooltip":{"Manager":{"!proto":"qx.core.Object","!doc":"<p>The tooltip manager globally manages the tooltips of all widgets. It will\ndisplay tooltips if the user hovers a widgets with a tooltip and hides all\nother tooltips.</p>","!type":"fn()","prototype":{"__onFocusOutRoot":{"!doc":"<p>Reset the property {@link #current} if the\ncurrent tooltip is the tooltip of the target widget.</p>","!type":"fn(e: +qx.event.type.Focus)"},"__onHideInterval":{"!doc":"<p>Event listener for the interval event of the hide timer.</p>","!type":"fn(e: +qx.event.type.Event)"},"__onPointerMoveRoot":{"!doc":"<p>Global pointer move event handler</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__onPointerOutRoot":{"!doc":"<p>Resets the property {@link #current} if there was a\ntooltip and no new one is created.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__onPointerOverRoot":{"!doc":"<p>Searches for the tooltip of the target widget. If any tooltip instance\nis found this instance is bound to the target widget and the tooltip is\nset as {@link #current}</p>","!type":"fn(e: +qx.event.type.Pointer)"},"__onShowInterval":{"!doc":"<p>Event listener for the interval event of the show timer.</p>","!type":"fn(e: +qx.event.type.Event)"},"_applyCurrent":{"!doc":"<p>Applies changes of the property value of the property <code>current</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #current}.</p>","!type":"fn(value: +qx.ui.tooltip.ToolTip, old: +qx.ui.tooltip.ToolTip)"},"getCurrent":{"!doc":"<p>Returns the (computed) value of the property <code>current</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #current}.</p>","!type":"fn() -> Object"},"getSharedErrorTooltip":{"!doc":"<p>Get the shared tooltip, which is used to display the\n{@link qx.ui.core.Widget#toolTipText} and\n{@link qx.ui.core.Widget#toolTipIcon} properties of widgets.\nYou can use this public shared instance to e.g. customize the\nlook and feel of the validation tooltips like\n<code>getSharedErrorTooltip().getChildControl(&#8220;atom&#8221;).getChildControl(&#8220;label&#8221;).set({rich: true, wrap: true, width: 80})</code></p>","!type":"fn() -> +qx.ui.tooltip.ToolTip"},"getSharedTooltip":{"!doc":"<p>Get the shared tooltip, which is used to display the\n{@link qx.ui.core.Widget#toolTipText} and\n{@link qx.ui.core.Widget#toolTipIcon} properties of widgets.\nYou can use this public shared instance to e.g. customize the\nlook and feel.</p>","!type":"fn() -> +qx.ui.tooltip.ToolTip"},"getShowInvalidToolTips":{"!doc":"<p>Returns the (computed) value of the property <code>showInvalidToolTips</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showInvalidToolTips}.</p>","!type":"fn() -> Object"},"getShowToolTips":{"!doc":"<p>Returns the (computed) value of the property <code>showToolTips</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showToolTips}.</p>","!type":"fn() -> Object"},"initCurrent":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>current</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #current}.</p>","!type":"fn(value: Object) -> Object"},"initShowInvalidToolTips":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showInvalidToolTips</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showInvalidToolTips}.</p>","!type":"fn(value: Object) -> Object"},"initShowToolTips":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showToolTips</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showToolTips}.</p>","!type":"fn(value: Object) -> Object"},"isShowInvalidToolTips":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showInvalidToolTips</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showInvalidToolTips}.</p>","!type":"fn() -> bool"},"isShowToolTips":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showToolTips</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showToolTips}.</p>","!type":"fn() -> bool"},"resetCurrent":{"!doc":"<p>Resets the user value of the property <code>current</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #current}.</p>","!type":"fn()"},"resetShowInvalidToolTips":{"!doc":"<p>Resets the user value of the property <code>showInvalidToolTips</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showInvalidToolTips}.</p>","!type":"fn()"},"resetShowToolTips":{"!doc":"<p>Resets the user value of the property <code>showToolTips</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showToolTips}.</p>","!type":"fn()"},"setCurrent":{"!doc":"<p>Sets the user value of the property <code>current</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #current}.</p>","!type":"fn(value: Object) -> Object"},"setShowInvalidToolTips":{"!doc":"<p>Sets the user value of the property <code>showInvalidToolTips</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showInvalidToolTips}.</p>","!type":"fn(value: Object) -> Object"},"setShowToolTips":{"!doc":"<p>Sets the user value of the property <code>showToolTips</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showToolTips}.</p>","!type":"fn(value: Object) -> Object"},"showToolTip":{"!doc":"<p>Explicitly show tooltip for particular form item.</p>","!type":"fn(target: Object)"},"toggleShowInvalidToolTips":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showInvalidToolTips</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showInvalidToolTips}.</p>","!type":"fn() -> bool"},"toggleShowToolTips":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showToolTips</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showToolTips}.</p>","!type":"fn() -> bool"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.tooltip.Manager"}},"ToolTip":{"!proto":"qx.ui.popup.Popup","!doc":"<p>A Tooltip provides additional information for widgets when the user hovers\nover a widget.</p>","!type":"fn()","prototype":{"_applyArrowPosition":{"!doc":"<p>Applies changes of the property value of the property <code>arrowPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowPosition}.</p>","!type":"fn(value: Object, old: Object)"},"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyRich":{"!doc":"<p>Applies changes of the property value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: bool, old: bool)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onPointerOver":{"!doc":"<p>Listener method for &#8220;pointerover&#8221; event</p>","!type":"fn(e: +qx.event.type.Pointer)"},"getArrowPosition":{"!doc":"<p>Returns the (computed) value of the property <code>arrowPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowPosition}.</p>","!type":"fn() -> Object"},"getHideTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>hideTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideTimeout}.</p>","!type":"fn() -> Object"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getOpener":{"!doc":"<p>Returns the (computed) value of the property <code>opener</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn() -> Object"},"getRich":{"!doc":"<p>Returns the (computed) value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> Object"},"getShowTimeout":{"!doc":"<p>Returns the (computed) value of the property <code>showTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTimeout}.</p>","!type":"fn() -> Object"},"initArrowPosition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>arrowPosition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowPosition}.</p>","!type":"fn(value: Object) -> Object"},"initHideTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideTimeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideTimeout}.</p>","!type":"fn(value: Object) -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initOpener":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>opener</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn(value: Object) -> Object"},"initRich":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rich</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: Object) -> Object"},"initShowTimeout":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showTimeout</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showTimeout}.</p>","!type":"fn(value: Object) -> Object"},"isRich":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>rich</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> bool"},"resetArrowPosition":{"!doc":"<p>Resets the user value of the property <code>arrowPosition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowPosition}.</p>","!type":"fn()"},"resetHideTimeout":{"!doc":"<p>Resets the user value of the property <code>hideTimeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideTimeout}.</p>","!type":"fn()"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetOpener":{"!doc":"<p>Resets the user value of the property <code>opener</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn()"},"resetRich":{"!doc":"<p>Resets the user value of the property <code>rich</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn()"},"resetShowTimeout":{"!doc":"<p>Resets the user value of the property <code>showTimeout</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showTimeout}.</p>","!type":"fn()"},"setArrowPosition":{"!doc":"<p>Sets the user value of the property <code>arrowPosition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #arrowPosition}.</p>","!type":"fn(value: Object) -> Object"},"setHideTimeout":{"!doc":"<p>Sets the user value of the property <code>hideTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideTimeout}.</p>","!type":"fn(value: Object) -> Object"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setOpener":{"!doc":"<p>Sets the user value of the property <code>opener</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #opener}.</p>","!type":"fn(value: Object) -> Object"},"setRich":{"!doc":"<p>Sets the user value of the property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn(value: Object) -> Object"},"setShowTimeout":{"!doc":"<p>Sets the user value of the property <code>showTimeout</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTimeout}.</p>","!type":"fn(value: Object) -> Object"},"toggleRich":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>rich</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rich}.</p>","!type":"fn() -> bool"}}}},"tree":{"core":{"AbstractItem":{"!proto":"qx.ui.core.Widget","!doc":"<p>The AbstractItem serves as a common superclass for the {@link\nqx.ui.tree.core.AbstractTreeItem} and {@link qx.ui.tree.VirtualTreeItem} classes.</p>","!type":"fn()","prototype":{"__getUserValueIcon":{"!doc":"<p>Get user-defined value of &#8220;icon&#8221; property</p>","!type":"fn() -> Object"},"__getUserValueIconOpened":{"!doc":"<p>Get user-defined value of &#8220;iconOpened&#8221; property</p>","!type":"fn() -> Object"},"__setIconSource":{"!doc":"<p>Set source of icon child control</p>","!type":"fn(url: string)"},"_addWidgets":{"!doc":"<p>This method configures the tree item by adding its sub widgets like\nlabel, icon, open symbol, ...</p>\n\n<p>This method must be overridden by sub classes.</p>","!type":"fn()"},"_applyIcon":{"!doc":"<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: string, old: string)"},"_applyIconOpened":{"!doc":"<p>Applies changes of the property value of the property <code>iconOpened</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOpened}.</p>","!type":"fn(value: string, old: string)"},"_applyIndent":{"!doc":"<p>Applies changes of the property value of the property <code>indent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyLabel":{"!doc":"<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: string, old: string)"},"_applyOpen":{"!doc":"<p>Applies changes of the property value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: bool, old: bool)"},"_applyOpenSymbolMode":{"!doc":"<p>Applies changes of the property value of the property <code>openSymbolMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>","!type":"fn(value: Object, old: Object)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onChangeOpen":{"!doc":"<p>Event handler, which listens to open state changes of the open button</p>","!type":"fn(e: +qx.event.type.Data)"},"_shouldShowOpenSymbol":{"!doc":"<p>Whether the open symbol should be shown</p>","!type":"fn() -> bool"},"_updateIndent":{"!doc":"<p>Update the indentation of the tree item.</p>","!type":"fn()"},"addIcon":{"!doc":"<p>Adds the icon widget to the item&#8217;s horizontal box layout. If the icon\nwidget has been added before, it is removed from its old position and\nadded to the end of the layout.</p>","!type":"fn()"},"addLabel":{"!doc":"<p>Adds the label to the item&#8217;s horizontal box layout. If the label\nhas been added before, it is removed from its old position and\nadded to the end of the layout.</p>","!type":"fn(text?: string)"},"addOpenButton":{"!doc":"<p>Adds the open button to the item&#8217;s horizontal box layout. If the open\nbutton has been added before, it is removed from its old position and\nadded to the end of the layout.</p>","!type":"fn()"},"addSpacer":{"!doc":"<p>Adds the spacer used to render the indentation to the item&#8217;s horizontal\nbox layout. If the spacer has been added before, it is removed from its\nold position and added to the end of the layout.</p>","!type":"fn()"},"addWidget":{"!doc":"<p>Adds a sub widget to the tree item&#8217;s horizontal box layout.</p>","!type":"fn(widget: +qx.ui.core.Widget, options?: +Map)"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getIconOpened":{"!doc":"<p>Returns the (computed) value of the property <code>iconOpened</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOpened}.</p>","!type":"fn() -> Object"},"getIndent":{"!doc":"<p>Returns the (computed) value of the property <code>indent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>","!type":"fn() -> Object"},"getLabel":{"!doc":"<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn() -> Object"},"getLevel":{"!doc":"<p>Computes the item&#8217;s nesting level. If the item is not part of a tree\nthis function will return <code>null</code>.</p>","!type":"fn() -> +Integer"},"getOpen":{"!doc":"<p>Returns the (computed) value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn() -> Object"},"getOpenSymbolMode":{"!doc":"<p>Returns the (computed) value of the property <code>openSymbolMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>","!type":"fn() -> Object"},"hasChildren":{"!doc":"<p>Whether the item has any children</p>","!type":"fn() -> bool"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initIconOpened":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOpened</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOpened}.</p>","!type":"fn(value: Object) -> Object"},"initIndent":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>indent</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>","!type":"fn(value: Object) -> Object"},"initLabel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"initOpen":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>open</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: Object) -> Object"},"initOpenSymbolMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openSymbolMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>","!type":"fn(value: Object) -> Object"},"isOpen":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>open</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn() -> bool"},"isOpenable":{"!doc":"<p>Whether the tree item can be opened.</p>","!type":"fn() -> bool"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetIconOpened":{"!doc":"<p>Resets the user value of the property <code>iconOpened</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOpened}.</p>","!type":"fn()"},"resetIndent":{"!doc":"<p>Resets the user value of the property <code>indent</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>","!type":"fn()"},"resetLabel":{"!doc":"<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn()"},"resetOpen":{"!doc":"<p>Resets the user value of the property <code>open</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn()"},"resetOpenSymbolMode":{"!doc":"<p>Resets the user value of the property <code>openSymbolMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>","!type":"fn()"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setIconOpened":{"!doc":"<p>Sets the user value of the property <code>iconOpened</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOpened}.</p>","!type":"fn(value: Object) -> Object"},"setIndent":{"!doc":"<p>Sets the user value of the property <code>indent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>","!type":"fn(value: Object) -> Object"},"setLabel":{"!doc":"<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>","!type":"fn(value: Object) -> Object"},"setOpen":{"!doc":"<p>Sets the user value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: Object) -> Object"},"setOpenSymbolMode":{"!doc":"<p>Sets the user value of the property <code>openSymbolMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>","!type":"fn(value: Object) -> Object"},"syncWidget":{"!type":"fn(jobs: +undefined)"},"toggleOpen":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn() -> bool"}}},"AbstractTreeItem":{"!proto":"qx.ui.tree.core.AbstractItem","!doc":"<p>The AbstractTreeItem serves as a common superclass for the {@link\nqx.ui.tree.TreeFile} and {@link qx.ui.tree.TreeFolder} classes.</p>","!type":"fn()","prototype":{"__addChildrenToParent":{"!doc":"<p>Adds the item&#8217;s children container to the parent&#8217;s children container.</p>","!type":"fn()"},"_applyOpen":{"!doc":"<p>Applies changes of the property value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: bool, old: bool)"},"_shouldShowOpenSymbol":{"!type":"fn()"},"_updateIndent":{"!type":"fn()"},"add":{"!doc":"<p>Adds the passed tree items to the end of this item&#8217;s children list.</p>","!type":"fn(varargs: +AbstractTreeItem)"},"addAfter":{"!doc":"<p>Add a tree item to this item after the existing child <code>before</code>.</p>","!type":"fn(treeItem: +AbstractTreeItem, after: +AbstractTreeItem)"},"addAt":{"!doc":"<p>Adds the tree item to the current item, at the given index.</p>","!type":"fn(treeItem: +AbstractTreeItem, index: +Integer)"},"addAtBegin":{"!doc":"<p>Add a tree item as the first child of this item.</p>","!type":"fn(treeItem: +AbstractTreeItem)"},"addBefore":{"!doc":"<p>Add a tree item to this item before the existing child <code>before</code>.</p>","!type":"fn(treeItem: +AbstractTreeItem, before: +AbstractTreeItem)"},"addState":{"!type":"fn(state: +undefined)"},"getChildren":{"!doc":"<p>Get all child items.</p>\n\n<p>Note: Don not modify the returned array, since this function does not\nreturn a copy!</p>","!type":"fn() -> +AbstractTreeItem"},"getChildrenContainer":{"!doc":"<p>Returns the widget, which acts as container for the child items.\nThis widget must have a vertical box layout.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getItems":{"!doc":"<p>Returns all children of the folder.</p>","!type":"fn(recursive?: bool, invisible?: bool, ignoreFirst?: bool) -> +AbstractTreeItem"},"getLevel":{"!type":"fn()"},"getParent":{"!doc":"<p>Returns the (computed) value of the property <code>parent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>","!type":"fn() -> Object"},"getParentChildrenContainer":{"!doc":"<p>Get the children container of the item&#8217;s parent. This function will return\n<code>null</code>, if the item does not have a parent or is not the root\nitem.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getTree":{"!doc":"<p>Returns the tree the tree item is connected to. If the item is not part of\na tree <code>null</code> will be returned.</p>","!type":"fn() -> +qx.ui.tree.Tree"},"hasChildren":{"!type":"fn()"},"hasChildrenContainer":{"!doc":"<p>Whether the tree item has a children container</p>","!type":"fn() -> bool"},"initParent":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>parent</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>","!type":"fn(value: Object) -> Object"},"recursiveAddToWidgetQueue":{"!doc":"<p>Adds this item and recursively all sub items to the widget queue to\nupdate the indentation.</p>","!type":"fn()"},"remove":{"!doc":"<p>Removes the passed tree items from this item.</p>","!type":"fn(varargs: +AbstractTreeItem)"},"removeAll":{"!doc":"<p>Remove all child items from this item.</p>","!type":"fn()"},"removeAt":{"!doc":"<p>Remove the child with the given child index.</p>","!type":"fn(index: +Integer)"},"removeState":{"!type":"fn(state: +undefined)"},"resetParent":{"!doc":"<p>Resets the user value of the property <code>parent</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>","!type":"fn()"},"setParent":{"!doc":"<p>Sets the user value of the property <code>parent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>","!type":"fn(value: Object) -> Object"}}},"FolderOpenButton":{"!proto":"qx.ui.basic.Image","!doc":"<p>The small folder open/close button</p>","!type":"fn()","prototype":{"_applyOpen":{"!doc":"<p>Applies changes of the property value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: bool, old: bool)"},"_onTap":{"!doc":"<p>Pointer tap event listener</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_stopPropagation":{"!doc":"<p>Stop tap event propagation</p>","!type":"fn(e: +qx.event.type.Event)"},"getOpen":{"!doc":"<p>Returns the (computed) value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn() -> Object"},"initOpen":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>open</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: Object) -> Object"},"isOpen":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>open</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn() -> bool"},"resetOpen":{"!doc":"<p>Resets the user value of the property <code>open</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn()"},"setOpen":{"!doc":"<p>Sets the user value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn(value: Object) -> Object"},"toggleOpen":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>","!type":"fn() -> bool"}}},"IVirtualTree":{"!doc":"<p>Interface describes the methods which the {@link qx.ui.tree.provider.WidgetProvider}\nuses for communication.</p>","prototype":{"closeNode":{"!doc":"<p>Closes the passed node.</p>","!type":"fn(node: +qx.core.Object)"},"getLevel":{"!doc":"<p>Returns the row&#8217;s nesting level.</p>","!type":"fn(row: +Integer) -> +Integer"},"getLookupTable":{"!doc":"<p>Returns the internal data structure. The Array index is the row and the\nvalue is the model item.</p>","!type":"fn() -> +qx.data.Array"},"getSelection":{"!doc":"<p>Returns the current selection.</p>","!type":"fn() -> +qx.data.Array"},"hasChildren":{"!doc":"<p>Return whether the node has visible children or not.</p>","!type":"fn(node: +qx.core.Object) -> bool"},"isNode":{"!doc":"<p>Returns if the passed item is a note or a leaf.</p>","!type":"fn(item: +qx.core.Object) -> bool"},"isNodeOpen":{"!doc":"<p>Return whether the node is opened or closed.</p>","!type":"fn(node: +qx.core.Object) -> bool"},"isShowTopLevelOpenCloseIcons":{"!doc":"<p>Return whether top level items should have an open/close button. The top\nlevel item item is normally the root item, but when the root is hidden,\nthe root children are the top level items.</p>","!type":"fn() -> bool"},"openNode":{"!doc":"<p>Opens the passed node.</p>","!type":"fn(node: +qx.core.Object)"}}},"IVirtualTreeDelegate":{"!doc":"<p>Objects which are used as delegates for the <code>qx.ui.tree.VirtualTree</code> may\nimplement any of the methods described in this interface. The delegate does\nnot need to implement all the methods of this interface. If a method is not\nimplemented the <code>qx.ui.tree.VirtualTree</code> provides a default\nimplementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nactually implemented.</p>","prototype":{"bindItem":{"!doc":"<p>Sets up the binding for the given widget cell and index.</p>\n\n<p>For every property you want to bind, use\n{@link MWidgetController#bindProperty} like this:\n<code>\ncontroller.bindProperty(null, &#8220;value&#8221;, options, item, id);\n</code></p>","!type":"fn(controller: +MWidgetController, item: +qx.ui.core.Widget, id: +Integer)"},"configureItem":{"!doc":"<p>Gives the user the opportunity to set individual styles and properties\non the widget cells created by the controller.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"createItem":{"!doc":"<p>Creates a widget cell which will be used for rendering. Be sure to\nimplement the {@link #bindItem} function as well to get the needed\nproperties bound.</p>","!type":"fn() -> +qx.ui.core.Widget"},"filter":{"!doc":"<p>Filter checks the current data and returns a boolean if the data should\nappear in the filtered data set or not.</p>","!type":"fn(data: Object) -> bool"},"onPool":{"!doc":"<p>Gives the user the opportunity to reset properties or states.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"sorter":{"!doc":"<p>Gives the user the opportunity to sort the children items from a node.\nThe sorting method should return a negative value if a < b, zero\nif a = b, or a positive value if a > b.</p>","!type":"fn(a: Object, b: Object) -> +Integer"}}},"MWidgetController":{"!doc":"<p>The mixin controls the binding between model and item.</p>","!type":"fn()","prototype":{"__addBinding":{"!doc":"<p>Helper method to save the binding for the widget.</p>","!type":"fn(widget: +qx.ui.core.Widget, id: Object)"},"__getBindings":{"!doc":"<p>Helper method which returns all bound id from the widget.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +Array"},"__getBindPath":{"!doc":"<p>Helper method to create the path for binding.</p>","!type":"fn(index: +Integer, path: string) -> string"},"_bindItem":{"!doc":"<p>Sets up the binding for the given item and index.</p>","!type":"fn(item: +qx.ui.core.Widget, index: +Integer)"},"_removeBindingsFrom":{"!doc":"<p>Removes the binding of the given item.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"bindDefaultProperties":{"!doc":"<p>Helper-Method for binding the default properties from the model to the\ntarget widget. The used default properties  depends on the passed item.</p>\n\n<p>This method should only be called in the {@link IVirtualTreeDelegate#bindItem}\nfunction implemented by the {@link #delegate} property.</p>","!type":"fn(item: +qx.ui.core.Widget, index: +Integer)"},"bindProperty":{"!doc":"<p>Helper-Method for binding a given property from the model to the target\nwidget.</p>\n\n<p>This method should only be called in the {@link IVirtualTreeDelegate#bindItem}\nfunction implemented by the {@link #delegate} property.</p>","!type":"fn(sourcePath: string, targetProperty: string, options: +Map, targetWidget: +qx.ui.core.Widget, index: +Integer)"},"bindPropertyReverse":{"!doc":"<p>Helper-Method for binding a given property from the target widget to\nthe model.\nThis method should only be called in the\n{@link qx.ui.tree.core.IVirtualTreeDelegate#bindItem} function implemented by the\n{@link #delegate} property.</p>","!type":"fn(targetPath: string, sourceProperty: string, options: +Map, sourceWidget: +qx.ui.core.Widget, index: +Integer)"},"getChildProperty":{"!doc":"<p>Returns the (computed) value of the property <code>childProperty</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn() -> Object"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"initChildProperty":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>childProperty</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn(value: Object) -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"removeBindings":{"!doc":"<p>Remove all bindings from all bounded items.</p>","!type":"fn()"},"resetChildProperty":{"!doc":"<p>Resets the user value of the property <code>childProperty</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"setChildProperty":{"!doc":"<p>Sets the user value of the property <code>childProperty</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn(value: Object) -> Object"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"}}},"Util":{"!doc":"<p>This utility class implements some methods for the <code>VirtualTree</code>.</p>","hasChildren":{"!doc":"<p>Returns whether the node has visible children or not.</p>","!type":"fn(node: +qx.core.Object, childProperty: string, ignoreLeafs?: bool) -> bool"},"isNode":{"!doc":"<p>Returns if the passed item is a node or a leaf.</p>","!type":"fn(node: +qx.core.Object, childProperty: string) -> bool"}}},"provider":{"IVirtualTreeProvider":{"!doc":"<p>This interface needs to implemented from all {@link qx.ui.tree.VirtualTree}\nproviders.</p>","prototype":{"createLayer":{"!doc":"<p>Creates a layer for node and leaf rendering.</p>","!type":"fn() -> +qx.ui.virtual.layer.Abstract"},"createRenderer":{"!doc":"<p>Creates a renderer for rendering.</p>","!type":"fn() -> Object"},"isSelectable":{"!doc":"<p>Returns if the passed row can be selected or not.</p>","!type":"fn(row: +Integer) -> bool"},"setChildProperty":{"!doc":"<p>Sets the name of the property, where the children are stored in the model.</p>","!type":"fn(value: string)"},"setLabelPath":{"!doc":"<p>Sets the name of the property, where the value for the tree folders label\nis stored in the model classes.</p>","!type":"fn(value: string)"},"styleSelectabled":{"!doc":"<p>Styles a selected item.</p>","!type":"fn(row: +Integer)"},"styleUnselectabled":{"!doc":"<p>Styles a not selected item.</p>","!type":"fn(row: +Integer)"}}},"WidgetProvider":{"!proto":"qx.core.Object","!doc":"<p>The provider implements the {@link qx.ui.virtual.core.IWidgetCellProvider}\n<span class=\"caps\">API</span>, which can be used as delegate for the widget cell rendering and it\nprovides a <span class=\"caps\">API</span> to bind the model with the rendered item.</p>","!type":"fn()","prototype":{"__onOpenChanged":{"!doc":"<p>Handler when a node changes opened or closed state.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onChangeDelegate":{"!doc":"<p>Event handler for the change delegate event.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onItemCreated":{"!doc":"<p>Event handler for the created item&#8217;s.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onPool":{"!doc":"<p>Calls the delegate <code>onPool</code> method when it is used in the\n{@link #delegate} property.</p>","!type":"fn(item: +qx.ui.core.Widget)"},"_styleSelectabled":{"!doc":"<p>Styles a selected item.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"_styleUnselectabled":{"!doc":"<p>Styles a not selected item.</p>","!type":"fn(widget: +qx.ui.core.Widget)"},"createLayer":{"!type":"fn()"},"createRenderer":{"!type":"fn()"},"getCellWidget":{"!type":"fn(row: +undefined, column: +undefined)"},"isSelectable":{"!type":"fn(row: +undefined)"},"poolCellWidget":{"!type":"fn(widget: +undefined)"},"styleSelectabled":{"!type":"fn(row: +undefined)"},"styleUnselectabled":{"!type":"fn(row: +undefined)"}}}},"selection":{"SelectionManager":{"!proto":"qx.ui.core.selection.ScrollArea","!doc":"<p>Responsible for the selection management of the {@link qx.ui.tree.Tree}.</p>","prototype":{"_getFirstSelectable":{"!type":"fn()"},"_getLastSelectable":{"!type":"fn()"},"_getRelatedSelectable":{"!type":"fn(item: +undefined, relation: +undefined)"},"_getSelectableFromPointerEvent":{"!type":"fn(event: +undefined)"},"_getSelectableLocationY":{"!type":"fn(item: +undefined)"},"_getSelectableRange":{"!type":"fn(item1: +undefined, item2: +undefined)"},"_isSelectable":{"!type":"fn(item: +undefined)"},"getSelectables":{"!type":"fn(all: +undefined)"}}}},"Tree":{"!proto":"qx.ui.core.scroll.AbstractScrollArea","!doc":"<p>The Tree class implements a tree widget, with collapsible and expandable\ncontainer nodes and terminal leaf nodes. You instantiate a Tree object and\nthen assign the tree a root folder using the {@link #root} property.</p>\n\n<p>If you don&#8217;t want to show the root item, you can hide it with the\n{@link #hideRoot} property.</p>\n\n<p>The handling of <b>selections</b> within a tree is somewhat distributed\nbetween the root tree object and the attached {@link qx.ui.tree.selection.SelectionManager}.\nTo get the currently selected element of a tree use the tree {@link #getSelection}\nmethod and tree {@link #setSelection} to set it. The TreeSelectionManager\nhandles more coarse-grained issues like providing {@link #selectAll} and\n{@link #resetSelection} methods.</p>","!type":"fn()","prototype":{"_applyHideRoot":{"!doc":"<p>Applies changes of the property value of the property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn(value: bool, old: bool)"},"_applyOpenMode":{"!doc":"<p>Applies changes of the property value of the property <code>openMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn(value: Object, old: Object)"},"_applyRoot":{"!doc":"<p>Applies changes of the property value of the property <code>root</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #root}.</p>","!type":"fn(value: +qx.ui.tree.core.AbstractTreeItem, old: +qx.ui.tree.core.AbstractTreeItem)"},"_applyRootOpenClose":{"!doc":"<p>Applies changes of the property value of the property <code>rootOpenClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn(value: bool, old: bool)"},"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_onChangeSelection":{"!doc":"<p>Event handler for changeSelection events, which opens all parent folders\nof the selected folders.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onKeyPress":{"!doc":"<p>Event handler for key press events. Open and close the current selected\nitem on key left and right press. Jump to parent on key left if already\nclosed.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onOpen":{"!doc":"<p>Event handler for tap events, which could change a tree item&#8217;s open\nstate.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"getChildren":{"!doc":"<p>Returns the tree&#8217;s only &#8220;external&#8221; child, namely the root node.</p>","!type":"fn() -> +qx.ui.tree.core.AbstractTreeItem"},"getChildrenContainer":{"!doc":"<p>Get the widget, which contains the root tree item. This widget must\nhave a vertical box layout.</p>","!type":"fn() -> +qx.ui.core.Widget"},"getHideRoot":{"!doc":"<p>Returns the (computed) value of the property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn() -> Object"},"getItems":{"!doc":"<p>Returns all children of the tree.</p>","!type":"fn(recursive?: bool, invisible?: bool) -> +qx.ui.tree.core.AbstractTreeItem"},"getNextNodeOf":{"!doc":"<p>Get the tree item following the given item in the tree hierarchy.</p>","!type":"fn(treeItem: +qx.ui.tree.core.AbstractTreeItem, invisible?: bool) -> +qx.ui.tree.core.AbstractTreeItem"},"getNextSiblingOf":{"!doc":"<p>Get the tree item&#8217;s next sibling.</p>","!type":"fn(treeItem: +qx.ui.tree.core.AbstractTreeItem) -> +qx.ui.tree.core.AbstractTreeItem"},"getOpenMode":{"!doc":"<p>Returns the (computed) value of the property <code>openMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn() -> Object"},"getPreviousNodeOf":{"!doc":"<p>Get the tree item preceding the given item in the tree hierarchy.</p>","!type":"fn(treeItem: +qx.ui.tree.core.AbstractTreeItem, invisible?: bool) -> +qx.ui.tree.core.AbstractTreeItem"},"getPreviousSiblingOf":{"!doc":"<p>Get the tree item&#8217;s previous sibling.</p>","!type":"fn(treeItem: +qx.ui.tree.core.AbstractTreeItem) -> +qx.ui.tree.core.AbstractTreeItem"},"getRoot":{"!doc":"<p>Returns the (computed) value of the property <code>root</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #root}.</p>","!type":"fn() -> Object"},"getRootOpenClose":{"!doc":"<p>Returns the (computed) value of the property <code>rootOpenClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn() -> Object"},"getTreeItem":{"!doc":"<p>Returns the tree item, which contains the given widget.</p>","!type":"fn(widget: +qx.ui.core.Widget) -> +qx.ui.tree.core.AbstractTreeItem"},"initHideRoot":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideRoot</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn(value: Object) -> Object"},"initOpenMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn(value: Object) -> Object"},"initRoot":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>root</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #root}.</p>","!type":"fn(value: Object) -> Object"},"initRootOpenClose":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>rootOpenClose</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn(value: Object) -> Object"},"isHideRoot":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>hideRoot</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn() -> bool"},"isRootOpenClose":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>rootOpenClose</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn() -> bool"},"resetHideRoot":{"!doc":"<p>Resets the user value of the property <code>hideRoot</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn()"},"resetOpenMode":{"!doc":"<p>Resets the user value of the property <code>openMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn()"},"resetRoot":{"!doc":"<p>Resets the user value of the property <code>root</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #root}.</p>","!type":"fn()"},"resetRootOpenClose":{"!doc":"<p>Resets the user value of the property <code>rootOpenClose</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn()"},"setHideRoot":{"!doc":"<p>Sets the user value of the property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn(value: Object) -> Object"},"setOpenMode":{"!doc":"<p>Sets the user value of the property <code>openMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn(value: Object) -> Object"},"setRoot":{"!doc":"<p>Sets the user value of the property <code>root</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #root}.</p>","!type":"fn(value: Object) -> Object"},"setRootOpenClose":{"!doc":"<p>Sets the user value of the property <code>rootOpenClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn(value: Object) -> Object"},"toggleHideRoot":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn() -> bool"},"toggleRootOpenClose":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>rootOpenClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #rootOpenClose}.</p>","!type":"fn() -> bool"}}},"TreeFile":{"!proto":"qx.ui.tree.core.AbstractTreeItem","!doc":"<p>The tree file is a leaf tree item. It cannot contain any nested tree items.</p>","prototype":{"_addWidgets":{"!type":"fn()"}}},"TreeFolder":{"!proto":"qx.ui.tree.core.AbstractTreeItem","!doc":"<p>The tree folder is a tree element, which can have nested tree elements.</p>","prototype":{"_addWidgets":{"!type":"fn()"}}},"VirtualTree":{"!proto":"qx.ui.virtual.core.Scroller","!doc":"<p>Virtual tree implementation.</p>\n\n<p>The virtual tree can be used to render node and leafs. Nodes and leafs are\nboth items for a tree. The difference between a node and a leaf is that a\nnode has child items, but a leaf not.</p>\n\n<p>With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\nto configure the tree&#8217;s behavior (item renderer configuration, etc.).</p>\n\n<p>Here&#8217;s an example of how to use the widget:</p>\n\n<pre class=\"javascript\">\n//create the model data\nvar nodes = [];\nfor (var i = 0; i < 2500; i++)\n{\n  nodes[i] = {name : \"Item \" + i};\n\n  // if its not the root node\n  if (i !== 0)\n  {\n    // add the children in some random order\n    var node = nodes[parseInt(Math.random() * i)];\n\n    if(node.children == null) {\n      node.children = [];\n    }\n    node.children.push(nodes[i]);\n  }\n}\n\n// converts the raw nodes to qooxdoo objects\nnodes = qx.data.marshal.Json.createModel(nodes, true);\n\n// creates the tree\nvar tree = new qx.ui.tree.VirtualTree(nodes.getItem(0), \"name\", \"children\").set({\n  width : 200,\n  height : 400\n});\n\n//log selection changes\ntree.getSelection().addListener(\"change\", function(e) {\n  this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\n}, this);\n</pre>","!type":"fn()","prototype":{"__applyModelChanges":{"!doc":"<p>Helper method to apply model changes. Normally build the lookup table and\napply the default selection.</p>","!type":"fn()"},"__buildParentChain":{"!doc":"<p>Builds the parent chain form the passed item.</p>","!type":"fn(item: Object)"},"__getVisibleChildrenFrom":{"!doc":"<p>Helper method to get all visible children form the passed parent node.\nThe algorithm implements a depth-first search with a complexity:\n<code>O(n)</code> and <code>n</code> are all visible items.</p>","!type":"fn(node: +qx.core.Object, nestedLevel: +Integer) -> +Array"},"__getVisibleParent":{"!doc":"<p>Return the first visible parent node from the last selected node.</p>","!type":"fn() -> Object"},"__openNode":{"!doc":"<p>Helper method to set the node to the open nodes data structure when it\nis not included.</p>","!type":"fn(node: +qx.core.Object)"},"__openNodeAndAllParents":{"!doc":"<p>Helper method to set the target node and all his parents to the open\nnodes data structure. The algorithm implements a depth-first search with\na complexity: <code>O(n)</code> and <code>n</code> are all model items.</p>","!type":"fn(startNode: +qx.core.Object, targetNode: +qx.core.Object) -> bool"},"__updateRowCount":{"!doc":"<p>Helper method to update the row count.</p>","!type":"fn()"},"_afterApplySelection":{"!doc":"<p>Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\nThe hook method builds the parent chain form the current selected item.</p>","!type":"fn()"},"_applyChildProperty":{"!doc":"<p>Applies changes of the property value of the property <code>childProperty</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn(value: string, old: string)"},"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_applyHideRoot":{"!doc":"<p>Applies changes of the property value of the property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn(value: bool, old: bool)"},"_applyIconOptions":{"!doc":"<p>Applies changes of the property value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyIconPath":{"!doc":"<p>Applies changes of the property value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: string, old: string)"},"_applyLabelOptions":{"!doc":"<p>Applies changes of the property value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object, old: Object)"},"_applyLabelPath":{"!doc":"<p>Applies changes of the property value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: string, old: string)"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: +qx.core.Object, old: +qx.core.Object)"},"_applyOpenMode":{"!doc":"<p>Applies changes of the property value of the property <code>openMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn(value: Object, old: Object)"},"_applyRowHeight":{"!doc":"<p>Applies changes of the property value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyShowLeafs":{"!doc":"<p>Applies changes of the property value of the property <code>showLeafs</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShowTopLevelOpenCloseIcons":{"!doc":"<p>Applies changes of the property value of the property <code>showTopLevelOpenCloseIcons</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn(value: bool, old: bool)"},"_beforeApplySelection":{"!doc":"<p>Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\nThe hook method sets the first visible parent not as new selection when\nthe current selection is empty and the selection mode is one selection.</p>","!type":"fn(newSelection: +Array)"},"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_getDataFromRow":{"!doc":"<p>Returns the model data for the given row.</p>","!type":"fn(row: +Integer) -> Object"},"_getSelectables":{"!doc":"<p>Returns the selectable model items.</p>","!type":"fn() -> +qx.data.Array"},"_init":{"!doc":"<p>Initializes the virtual tree.</p>","!type":"fn()"},"_initLayer":{"!doc":"<p>Initializes the virtual tree layer.</p>","!type":"fn()"},"_onChangeBubble":{"!doc":"<p>Event handler for the changeBubble event. The handler rebuild the lookup\ntable when the child structure changed.</p>","!type":"fn(event: +qx.event.type.Data)"},"_onKeyPress":{"!doc":"<p>Event handler for key press events. Open and close the current selected\nitem on key left and right press. Jump to parent on key left if already\nclosed.</p>","!type":"fn(e: +qx.event.type.KeySequence)"},"_onOpen":{"!doc":"<p>Event handler to open/close tapped nodes.</p>","!type":"fn(event: +qx.ui.virtual.core.CellEvent)"},"_onUpdated":{"!doc":"<p>Event handler for the update event.</p>","!type":"fn(event: +qx.event.type.Event)"},"_reverseLookup":{"!doc":"<p>Performs a lookup from model index to row.</p>","!type":"fn(index: number) -> number"},"buildLookupTable":{"!doc":"<p>Helper method to build the internal data structure.</p>","!type":"fn()"},"closeNode":{"!type":"fn(node: +undefined)"},"getChildProperty":{"!doc":"<p>Returns the (computed) value of the property <code>childProperty</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn() -> Object"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"getHideRoot":{"!doc":"<p>Returns the (computed) value of the property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn() -> Object"},"getIconOptions":{"!doc":"<p>Returns the (computed) value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn() -> Object"},"getIconPath":{"!doc":"<p>Returns the (computed) value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn() -> Object"},"getItemHeight":{"!doc":"<p>Returns the (computed) value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn() -> Object"},"getLabelOptions":{"!doc":"<p>Returns the (computed) value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn() -> Object"},"getLabelPath":{"!doc":"<p>Returns the (computed) value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn() -> Object"},"getLevel":{"!type":"fn(row: +undefined)"},"getLookupTable":{"!type":"fn()"},"getModel":{"!doc":"<p>Returns the (computed) value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn() -> Object"},"getOpenMode":{"!doc":"<p>Returns the (computed) value of the property <code>openMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn() -> Object"},"getOpenNodes":{"!doc":"<p>Returns all open nodes.</p>","!type":"fn() -> +Array"},"getParent":{"!doc":"<p>Helper method to get the parent node. Node! This only works with leaf and\nnodes which are in the internal lookup table.</p>","!type":"fn(item: +qx.core.Object) -> +qx.core.Object"},"getShowLeafs":{"!doc":"<p>Returns the (computed) value of the property <code>showLeafs</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn() -> Object"},"getShowTopLevelOpenCloseIcons":{"!doc":"<p>Returns the (computed) value of the property <code>showTopLevelOpenCloseIcons</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn() -> Object"},"hasChildren":{"!type":"fn(node: +undefined)"},"initChildProperty":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>childProperty</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn(value: Object) -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"initHideRoot":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>hideRoot</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn(value: Object) -> Object"},"initIconOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"initIconPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"initItemHeight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>itemHeight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: Object) -> Object"},"initLabelOptions":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelOptions</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"initLabelPath":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>labelPath</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"initModel":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>model</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"initOpenMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn(value: Object) -> Object"},"initShowLeafs":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showLeafs</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn(value: Object) -> Object"},"initShowTopLevelOpenCloseIcons":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showTopLevelOpenCloseIcons</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn(value: Object) -> Object"},"isHideRoot":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>hideRoot</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn() -> bool"},"isNode":{"!type":"fn(item: +undefined)"},"isNodeOpen":{"!type":"fn(node: +undefined)"},"isShowLeafs":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showLeafs</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn() -> bool"},"isShowTopLevelOpenCloseIcons":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showTopLevelOpenCloseIcons</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn() -> bool"},"openNode":{"!type":"fn(node: +undefined)"},"openNodeAndParents":{"!doc":"<p>Opens the passed node and all his parents. <strong>Note!</strong> The algorithm\nimplements a depth-first search with a complexity: <code>O(n)</code> and\n<code>n</code> are all model items.</p>","!type":"fn(node: +qx.core.Object)"},"refresh":{"!doc":"<p>Trigger a rebuild from the internal data structure.</p>","!type":"fn()"},"resetChildProperty":{"!doc":"<p>Resets the user value of the property <code>childProperty</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn()"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"resetHideRoot":{"!doc":"<p>Resets the user value of the property <code>hideRoot</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn()"},"resetIconOptions":{"!doc":"<p>Resets the user value of the property <code>iconOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn()"},"resetIconPath":{"!doc":"<p>Resets the user value of the property <code>iconPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn()"},"resetItemHeight":{"!doc":"<p>Resets the user value of the property <code>itemHeight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn()"},"resetLabelOptions":{"!doc":"<p>Resets the user value of the property <code>labelOptions</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn()"},"resetLabelPath":{"!doc":"<p>Resets the user value of the property <code>labelPath</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn()"},"resetModel":{"!doc":"<p>Resets the user value of the property <code>model</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn()"},"resetOpenMode":{"!doc":"<p>Resets the user value of the property <code>openMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn()"},"resetShowLeafs":{"!doc":"<p>Resets the user value of the property <code>showLeafs</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn()"},"resetShowTopLevelOpenCloseIcons":{"!doc":"<p>Resets the user value of the property <code>showTopLevelOpenCloseIcons</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn()"},"setChildProperty":{"!doc":"<p>Sets the user value of the property <code>childProperty</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #childProperty}.</p>","!type":"fn(value: Object) -> Object"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"setHideRoot":{"!doc":"<p>Sets the user value of the property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn(value: Object) -> Object"},"setIconOptions":{"!doc":"<p>Sets the user value of the property <code>iconOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconOptions}.</p>","!type":"fn(value: Object) -> Object"},"setIconPath":{"!doc":"<p>Sets the user value of the property <code>iconPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconPath}.</p>","!type":"fn(value: Object) -> Object"},"setItemHeight":{"!doc":"<p>Sets the user value of the property <code>itemHeight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #itemHeight}.</p>","!type":"fn(value: Object) -> Object"},"setLabelOptions":{"!doc":"<p>Sets the user value of the property <code>labelOptions</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelOptions}.</p>","!type":"fn(value: Object) -> Object"},"setLabelPath":{"!doc":"<p>Sets the user value of the property <code>labelPath</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #labelPath}.</p>","!type":"fn(value: Object) -> Object"},"setModel":{"!doc":"<p>Sets the user value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object) -> Object"},"setOpenMode":{"!doc":"<p>Sets the user value of the property <code>openMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMode}.</p>","!type":"fn(value: Object) -> Object"},"setShowLeafs":{"!doc":"<p>Sets the user value of the property <code>showLeafs</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn(value: Object) -> Object"},"setShowTopLevelOpenCloseIcons":{"!doc":"<p>Sets the user value of the property <code>showTopLevelOpenCloseIcons</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn(value: Object) -> Object"},"syncWidget":{"!type":"fn(jobs: +undefined)"},"toggleHideRoot":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>hideRoot</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #hideRoot}.</p>","!type":"fn() -> bool"},"toggleShowLeafs":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showLeafs</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showLeafs}.</p>","!type":"fn() -> bool"},"toggleShowTopLevelOpenCloseIcons":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showTopLevelOpenCloseIcons</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showTopLevelOpenCloseIcons}.</p>","!type":"fn() -> bool"}}},"VirtualTreeItem":{"!proto":"qx.ui.tree.core.AbstractItem","!doc":"<p>The tree item is a tree element for the {@link VirtualTree}, which can have\nnested tree elements.</p>","prototype":{"_addWidgets":{"!type":"fn()"},"_applyModel":{"!doc":"<p>Applies changes of the property value of the property <code>model</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #model}.</p>","!type":"fn(value: Object, old: Object)"},"_onChangeChildProperty":{"!doc":"<p>Handler to add listener to array of children property.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onChangeLength":{"!doc":"<p>Handler to update open/close icon when model length changed.</p>","!type":"fn()"},"_shouldShowOpenSymbol":{"!type":"fn()"},"getLevel":{"!type":"fn()"},"hasChildren":{"!type":"fn()"}}}},"treevirtual":{"DefaultDataCellRenderer":{"!proto":"qx.ui.table.cellrenderer.Default","!doc":"<p>The default data cell renderer for a virtual tree (columns other than the\ntree column)</p>"},"MFamily":{"!doc":"<p>A set of methods which may be used to retrieve various siblings of nodes.</p>","prototype":{"familyGetFirstChild":{"!doc":"<p>Get the first child of the specified node.</p>","!type":"fn(nodeReference: Object) -> +Integer"},"familyGetLastChild":{"!doc":"<p>Get the last child of the specified node.</p>","!type":"fn(nodeReference: Object) -> +Integer"},"familyGetNextSibling":{"!doc":"<p>Get the next sibling of the specified node.</p>","!type":"fn(nodeReference: Object) -> +Integer"},"familyGetPrevSibling":{"!doc":"<p>Get the previous sibling of the specified node.</p>","!type":"fn(nodeReference: Object) -> +Integer"}}},"MNode":{"!doc":"<p>Utility functions for working with nodes.  These methods allow reference\nto a node by either the object itself or the object&#8217;s node id.</p>","prototype":{"nodeGet":{"!doc":"<p>Get a node object given its node id.</p>","!type":"fn(nodeReference: Object) -> Object"},"nodeGetCellStyle":{"!doc":"<p>Get the cell style for a node</p>","!type":"fn(nodeReference: Object) -> string"},"nodeGetHideOpenClose":{"!doc":"<p>Get the hideOpenClose state for a node.</p>","!type":"fn(nodeReference: Object) -> bool"},"nodeGetIcon":{"!doc":"<p>Get the icon for a node when in its unselected (normal) state.</p>","!type":"fn(nodeReference: Object) -> string"},"nodeGetLabel":{"!doc":"<p>Get the label for a node.</p>","!type":"fn(nodeReference: Object) -> string"},"nodeGetLabelStyle":{"!doc":"<p>Get the label style for a node</p>","!type":"fn(nodeReference: Object) -> string"},"nodeGetOpened":{"!doc":"<p>Get the opened state for a node.</p>","!type":"fn(nodeReference: Object) -> bool"},"nodeGetSelected":{"!doc":"<p>Get the selected state for a node.</p>","!type":"fn(nodeReference: Object) -> bool"},"nodeGetSelectedIcon":{"!doc":"<p>Get the icon for a node when in its selected state.</p>","!type":"fn(nodeReference: Object) -> string"},"nodeSetCellStyle":{"!doc":"<p>Set the cell style for a node</p>","!type":"fn(nodeReference: Object, style: string)"},"nodeSetHideOpenClose":{"!doc":"<p>Set the hideOpenClose state for a node.</p>","!type":"fn(nodeReference: Object, b: bool)"},"nodeSetIcon":{"!doc":"<p>Set the icon for a node when in its unselected (normal) state.</p>","!type":"fn(nodeReference: Object, path: string)"},"nodeSetLabel":{"!doc":"<p>Set the label for a node.</p>","!type":"fn(nodeReference: Object, label: string)"},"nodeSetLabelStyle":{"!doc":"<p>Set the label style for a node</p>","!type":"fn(nodeReference: Object, style: string)"},"nodeSetOpened":{"!doc":"<p>Set the opened state for a node.  (Note that this method has no effect\nif the requested state is the same as the current state.)</p>","!type":"fn(nodeReference: Object, b: bool)"},"nodeSetSelected":{"!doc":"<p>Set the selected state for a node.</p>","!type":"fn(nodeReference: Object, b: bool)"},"nodeSetSelectedIcon":{"!doc":"<p>Set the icon for a node when in its selected state.</p>\n\n<p><span class=\"caps\">NOTE</span>: As of 13 Mar 2009, this feature is disabled by default, by\n      virtue of the fact that the tree&#8217;s &#8220;alwaysUpdateCells&#8221; property\n      has a setting of &#8216;false&#8217; now instead of &#8216;true&#8217;. Setting this\n      property to true allows the icon to change upon selection, but\n      causes problems such as single clicks not always selecting a\n      row, and, in IE, double click operations failing\n      completely. (For more information, see bugs 605 and 2021.) To\n      re-enable the option to have an unique icon that is displayed\n      when the node is selected, issue\n      <code>tree.setAlwaysUpdateCells(true);</code></p>","!type":"fn(nodeReference: Object, path: string)"},"nodeSetState":{"!doc":"<p>Set state attributes of a tree node.</p>","!type":"fn(nodeReference: Object, attributes: +Map)"},"nodeToggleOpened":{"!doc":"<p>Toggle the opened state of the node: if the node is opened, close\nit; if it is closed, open it.</p>","!type":"fn(nodeReference: Object)"}}},"MTreePrimitive":{"!doc":"<p>Primitives for building trees and tree nodes.</p>\n\n<p>The methods in this mixin are included directly in the SimpleTreeDataModel\nbut are also useful for other types of trees (not TreeVirtual) that need\nsimilar tree and node creation.</p>","_addNode":{"!doc":"<p>Add a node to the tree.</p>\n\n<p><span class=\"caps\">NOTE</span>: This method is for <b>internal use</b> and should not be called by\n      users of this class. There is no guarantee that the interface to this\n      method will remain unchanged over time.</p>","!type":"fn(nodeArr: +Array, parentNodeId: +Integer, label: string, bOpened: bool, bHideOpenCloseButton: bool, type: +Integer, icon: string, iconSelected: string, nodeId?: +Integer) -> +Integer"},"_getEmptyTree":{"!doc":"<p>An empty tree contains only this one node</p>","!type":"fn() -> +Map"}},"SelectionManager":{"!proto":"qx.ui.table.selection.Manager","!doc":"<p>A selection manager. This is a helper class that handles all selection\nrelated events and updates a SelectionModel.</p>\n\n<p>This Selection Manager differs from its superclass in that we do not want\nrows to be selected when moving around with the keyboard.</p>","!type":"fn()","prototype":{"_handleExtendedClick":{"!doc":"<p>Handle a mouse click event that is not normally handled by the simple\ntree.  This is intended for more sophisticated trees where clicks in\ndifferent places, e.g. on various icons or on the label itself, should\nbe handled specially.</p>","!type":"fn(tree: +qx.ui.treevirtual.TreeVirtual, evt: +Map, node: +Map, left: +Integer) -> bool"},"_handleSelectEvent":{"!doc":"<p>Handles a select event.  First we determine if the click was on the\nopen/close button and toggle the opened/closed state as necessary.\nThen, if the click was not on the open/close button or if the table&#8217;s\n&#8220;openCloseClickSelectsRow&#8221; property so indicates, call our superclass to\nhandle the actual row selection.</p>","!type":"fn(index: +Integer, evt: +Map)"},"getTable":{"!doc":"<p>Getter for the table being managed</p>","!type":"fn() -> +qx.ui.table.Table"}}},"SimpleTreeDataCellRenderer":{"!proto":"qx.ui.table.cellrenderer.Abstract","!doc":"<p>A data cell renderer for the tree column of a simple tree</p>\n\n<p>This cell renderer has provisions for subclasses to easily extend the\nappearance of the tree. If the tree should contain images, labels,\netc. before the indentation, the subclass should override the method\n_addExtraContentBeforeIndentation(). Similarly, content can be added before\nthe icon by overriding _addExtraContentBeforeIcon(), and before the label\nby overriding _addExtraContentBeforeLabel().</p>\n\n<p>Each of these overridden methods that calls _addImage() can provide, as\npart of the map passed to _addImage(), a member called &#8220;tooltip&#8221; which\ncontains the tool tip to present when the mouse is hovered over the image.</p>\n\n<p>If this class is subclassed to form a new cell renderer, an instance of it\nmust be provided, via the &#8216;custom&#8217; parameter, to the TreeVirtual\nconstructor.</p>","!type":"fn()","__preloadImages":{"!doc":"<p>Request preloading of images so they appear immediately upon rendering</p>","!type":"fn()"},"prototype":{"_addExtraContentBeforeIcon":{"!doc":"<p>Adds extra content just before the icon.</p>","!type":"fn(cellInfo: +Map, pos: +Integer) -> +Map"},"_addExtraContentBeforeIndentation":{"!doc":"<p>Adds extra content just before the indentation.</p>","!type":"fn(cellInfo: +Map, pos: +Integer) -> +Map"},"_addExtraContentBeforeLabel":{"!doc":"<p>Adds extra content just before the label.</p>","!type":"fn(cellInfo: +Map, pos: +Integer) -> +Map"},"_addIcon":{"!doc":"<p>Add the icon for this node of the tree.</p>","!type":"fn(cellInfo: +Map, pos: +Integer) -> +Map"},"_addImage":{"!doc":"<p>Add an image to the tree.  This might be a visible icon or it may be\npart of the indentation.</p>","!type":"fn(imageInfo: +Map) -> string"},"_addIndentation":{"!doc":"<p>Add the indentation for this node of the tree.</p>\n\n<p>The indentation optionally includes tree lines.  Whether tree lines are\nused depends on (a) the properties &#8216;useTreeLines&#8217; and\n&#8216;excludeFirstLevelTreelines&#8217; within this class; and (b) the widget\ntheme in use (some themes don&#8217;t support tree lines).</p>","!type":"fn(cellInfo: +Map, pos: +Integer) -> +Map"},"_addLabel":{"!doc":"<p>Add the label for this node of the tree.</p>","!type":"fn(cellInfo: +Map, pos: +Integer) -> string"},"_getCellStyle":{"!type":"fn(cellInfo: +undefined)"},"_getContentHtml":{"!type":"fn(cellInfo: +undefined)"},"_getIndentSymbol":{"!doc":"<p>Determine the symbol to use for indentation of a tree row, at a\nparticular column.  The indentation to use may be just white space or\nmay be a tree line.  Tree lines come in numerous varieties, so the\nappropriate one is selected.</p>","!type":"fn(column: +Integer, node: +Node, bUseTreeLines: bool, bAlwaysShowOpenCloseSymbol: bool, bExcludeFirstLevelTreeLines: bool) -> +Map"},"_onChangeTheme":{"!type":"fn()"},"getAlwaysShowOpenCloseSymbol":{"!doc":"<p>Returns the (computed) value of the property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>","!type":"fn() -> Object"},"getExcludeFirstLevelTreeLines":{"!doc":"<p>Returns the (computed) value of the property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>","!type":"fn() -> Object"},"getUseTreeLines":{"!doc":"<p>Returns the (computed) value of the property <code>useTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>","!type":"fn() -> Object"},"initAlwaysShowOpenCloseSymbol":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alwaysShowOpenCloseSymbol</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>","!type":"fn(value: Object) -> Object"},"initExcludeFirstLevelTreeLines":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>excludeFirstLevelTreeLines</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>","!type":"fn(value: Object) -> Object"},"initUseTreeLines":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>useTreeLines</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>","!type":"fn(value: Object) -> Object"},"isAlwaysShowOpenCloseSymbol":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>alwaysShowOpenCloseSymbol</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>","!type":"fn() -> bool"},"isExcludeFirstLevelTreeLines":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>excludeFirstLevelTreeLines</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>","!type":"fn() -> bool"},"isUseTreeLines":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>useTreeLines</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>","!type":"fn() -> bool"},"resetAlwaysShowOpenCloseSymbol":{"!doc":"<p>Resets the user value of the property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>","!type":"fn()"},"resetExcludeFirstLevelTreeLines":{"!doc":"<p>Resets the user value of the property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>","!type":"fn()"},"resetUseTreeLines":{"!doc":"<p>Resets the user value of the property <code>useTreeLines</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>","!type":"fn()"},"setAlwaysShowOpenCloseSymbol":{"!doc":"<p>Sets the user value of the property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>","!type":"fn(value: Object) -> Object"},"setExcludeFirstLevelTreeLines":{"!doc":"<p>Sets the user value of the property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>","!type":"fn(value: Object) -> Object"},"setUseTreeLines":{"!doc":"<p>Sets the user value of the property <code>useTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>","!type":"fn(value: Object) -> Object"},"toggleAlwaysShowOpenCloseSymbol":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>","!type":"fn() -> bool"},"toggleExcludeFirstLevelTreeLines":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>","!type":"fn() -> bool"},"toggleUseTreeLines":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>useTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>","!type":"fn() -> bool"}}},"SimpleTreeDataModel":{"!proto":"qx.ui.table.model.Abstract","!doc":"<p>A simple tree data model used as the table model</p>\n\n<p>The object structure of a single node of the tree is:</p>\n\n<pre class=\"javascript\">\n{\n  // USER-PROVIDED ATTRIBUTES\n  // ------------------------\n  type           : qx.ui.treevirtual.MTreePrimitive.Type.LEAF,\n  parentNodeId   : 23,    // index of the parent node in _nodeArr\n\n  label          : \"My Documents\",\n  bSelected      : true,  // true if node is selected; false otherwise.\n  bOpened        : true,  // true (-), false (+)\n  bHideOpenClose : false, // whether to hide the open/close button\n  icon           : \"images/folder.gif\",\n  iconSelected   : \"images/folder_selected.gif\",\n\n  cellStyle      : \"background-color:cyan\"\n  labelStyle     : \"background-color:red;color:white\"\n\n  // USER-PROVIDED COLUMN DATA\n  columnData     : [\n                     null, // null at index of tree column (typically 0)\n                     \"text of column 1\",\n                     \"text of column 2\"\n                   ],\n\n  // APPLICATION-, MIXIN-, and SUBCLASS-PROVIDED CUSTOM DATA\n  data           : {\n                     application :\n                     {\n                         // application-specific user data goes in here\n                         foo: \"bar\",\n                         ...\n                     },\n                     MDragAndDropSupport :\n                     {\n                         // Data required for the Drag & Drop mixin.\n                         // When a mixin is included, its constructor\n                         // should create this object, named according\n                         // to the mixin or subclass name (empty or\n                         // otherwise)\n                     },\n                     ... // Additional mixins or subclasses.\n                   },\n\n  // INTERNALLY-CALCULATED ATTRIBUTES\n  // --------------------------------\n  // The following properties need not (and should not) be set by the\n  // caller, but are automatically calculated.  Some are used internally,\n  // while others may be of use to event listeners.\n\n  nodeId         : 42,   // The index in _nodeArr, useful to event listeners.\n  children       : [ ],  // each value is an index into _nodeArr\n\n  level          : 2,    // The indentation level of this tree node\n\n  bFirstChild    : true,\n  lastChild      : [ false ],  // Array where the index is the column of\n                               // indentation, and the value is a boolean.\n                               // These are used to locate the\n                               // appropriate \"tree line\" icon.\n}\n</pre>","!type":"fn()","prototype":{"__calculateLastChildFlags":{"!doc":"<p>Calcultes the lastChild flags to the nodes, so that the tree can render the\ntree lines right.</p>","!type":"fn(nodeId: +Integer)"},"__inorder":{"!doc":"<p>Orders the node and creates all data needed to render the tree.</p>","!type":"fn(nodeId: +Integer, level: +Integer)"},"__render":{"!doc":"<p>Renders the tree data.</p>","!type":"fn()"},"__setLastChildFlag":{"!doc":"<p>Sets the last child flag for a node and all it&#8217;s parents.</p>","!type":"fn(node: Object, isLastChild: bool)"},"_applyFilter":{"!doc":"<p>Applies changes of the property value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn(value: fn(), old: fn())"},"_clearSelections":{"!doc":"<p>Clear all selections in the data model.  This method does not clear\nselections displayed in the widget, and is intended for internal use,\nnot by users of this class.</p>","!type":"fn()"},"addBranch":{"!doc":"<p>Add a branch to the tree.</p>","!type":"fn(parentNodeId: +Integer, label: string, bOpened: bool, bHideOpenCloseButton: bool, icon: string, iconSelected: string) -> +Integer"},"addLeaf":{"!doc":"<p>Add a leaf to the tree.</p>","!type":"fn(parentNodeId: +Integer, label: string, icon: string, iconSelected: string) -> +Integer"},"clearData":{"!doc":"<p>Clears the tree of all nodes</p>","!type":"fn()"},"getColumnData":{"!doc":"<p>Retrieve the data from an additional column (a column other than the\ntree column) of the tree.</p>","!type":"fn(nodeId: +Integer, columnIndex: +Integer) -> Object"},"getData":{"!doc":"<p>Return the array of node data.</p>","!type":"fn() -> +Array"},"getFilter":{"!doc":"<p>Returns the (computed) value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn() -> Object"},"getNode":{"!doc":"<p>Returns the node object specific to a currently visible row. In this\nsimple tree data model, that&#8217;s the same as retrieving the value of the\ntree column of the specified row.</p>","!type":"fn(rowIndex: +Integer) -> Object"},"getNodeFromRow":{"!doc":"<p>This operation maps rowIndexes to nodes.  It does the opposite job to {@link #getRowFromNodeId}.\nThis function is useful to map selection (row based) to nodes.</p>","!type":"fn(rowIndex: +Integer) -> Object"},"getNodeRowMap":{"!doc":"<p>Return the mapping of nodes to rendered rows.  This function is intended\nfor use by the cell renderer, not by users of this class.\nIt is also useful to select a node.</p>","!type":"fn() -> +Array"},"getRowCount":{"!type":"fn()"},"getRowData":{"!type":"fn(rowIndex: +undefined)"},"getRowFromNodeId":{"!doc":"<p>This operation maps nodes to rowIndexes.  It does the opposite job to {@link #getNodeFromRow}.</p>","!type":"fn(nodeId: +Integer) -> +Integer"},"getSelectedNodes":{"!doc":"<p>Return the nodes that are currently selected.</p>","!type":"fn() -> +Array"},"getSortColumnIndex":{"!doc":"<p>Returns the column index the model is sorted by. This model is never\nsorted, so -1 is returned.</p>","!type":"fn() -> +Integer"},"getTree":{"!doc":"<p>Get the tree object for which this data model is used.</p>","!type":"fn() -> +qx.ui.treevirtual.TreeVirtual"},"getTreeColumn":{"!doc":"<p>Get the column in which the tree is to be displayed.</p>","!type":"fn() -> +Integer"},"getValue":{"!doc":"<p>Returns a cell value by column index.</p>","!type":"fn(columnIndex: +Integer, rowIndex: +Integer) -> Object"},"initFilter":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>filter</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn(value: Object) -> Object"},"isColumnEditable":{"!type":"fn(columnIndex: +undefined)"},"isColumnSortable":{"!type":"fn(columnIndex: +undefined)"},"move":{"!doc":"<p>Move a node in the tree.</p>","!type":"fn(moveNodeReference: Object, parentNodeReference: Object)"},"prune":{"!doc":"<p>Prune the tree by removing, recursively, all of a node&#8217;s children.  If\nrequested, also remove the node itself.</p>","!type":"fn(nodeReference: Object, bSelfAlso: bool)"},"resetFilter":{"!doc":"<p>Resets the user value of the property <code>filter</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn()"},"setColumnData":{"!doc":"<p>Add data to an additional column (a column other than the tree column)\nof the tree.</p>","!type":"fn(nodeId: +Integer, columnIndex: +Integer, data: Object)"},"setColumnEditable":{"!doc":"<p>Sets whether a column is editable.</p>","!type":"fn(columnIndex: +Integer, editable: bool)"},"setData":{"!doc":"<p>Sets the whole data en bulk, or notifies the data model that node\nmodifications are complete.</p>","!type":"fn(nodeArr: +Array)"},"setEditable":{"!doc":"<p>Sets all columns editable or not editable.</p>","!type":"fn(editable: bool)"},"setFilter":{"!doc":"<p>Sets the user value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Set state attributes of a node.</p>","!type":"fn(nodeReference: Object, attributes: +Map)"},"setTree":{"!doc":"<p>Set the tree object for which this data model is used.</p>","!type":"fn(tree: +qx.ui.treevirtual.TreeVirtual)"},"setTreeColumn":{"!doc":"<p>Specifies which column the tree is to be displayed in.  The tree is\ndisplayed using the SimpleTreeDataCellRenderer.  Other columns may be\nprovided which use different cell renderers.</p>\n\n<p>Setting the tree column involves more than simply setting this column\nindex; it also requires setting an appropriate cell renderer for this\ncolumn, that knows how to render a tree. The expected and typical\nmethod of setting the tree column is to provide it in the &#8216;custom&#8217;\nparameter to the TreeVirtual constructor, which also initializes the\nproper cell renderers. This method does not set any cell renderers. If\nyou wish to call this method on your own, you should also manually set\nthe cell renderer for the specified column, and likely also set the\ncell renderer for column 0 (the former tree column) to something\nappropriate to your data.</p>","!type":"fn(columnIndex: +Integer)"},"setValue":{"!type":"fn(columnIndex: +undefined, rowIndex: +undefined, value: +undefined)"},"sortByColumn":{"!doc":"<p>Sorts the model by a column.</p>","!type":"fn(columnIndex: +Integer, ascending: bool)"}}},"SimpleTreeDataRowRenderer":{"!proto":"qx.ui.table.rowrenderer.Default","!doc":"<p>A data row renderer for a simple tree row</p>","!type":"fn()","prototype":{"updateDataRowElement":{"!type":"fn(rowInfo: +undefined, rowElem: +undefined)"}}},"TreeVirtual":{"!proto":"qx.ui.table.Table","!doc":"<p>A &#8220;virtual&#8221; tree</p>\n\n<p>A number of convenience methods are available in the following mixins:\n  <ul>\n    <li>{@link qx.ui.treevirtual.MNode}</li>\n    <li>{@link qx.ui.treevirtual.MFamily}</li>\n  </ul></p>","!type":"fn()","prototype":{"_calculateSelectedNodes":{"!doc":"<p>Calculate and return the set of nodes which are currently selected by\nthe user, on the screen.  In the process of calculating which nodes\nare selected, the nodes corresponding to the selected rows on the\nscreen are marked as selected by setting their <i>bSelected</i>\nproperty to true, and all previously-selected nodes have their\n<i>bSelected</i> property reset to false.</p>","!type":"fn() -> +Array"},"_onKeyPress":{"!doc":"<p>Event handler. Called when a key was pressed.</p>\n\n<p>We handle the Enter key to toggle opened/closed tree state.  All\nother keydown events are passed to our superclass.</p>","!type":"fn(evt: +Map)"},"_onSelectionChanged":{"!doc":"<p>Event handler. Called when the selection has changed.</p>","!type":"fn(evt: +Map)"},"getAlwaysShowOpenCloseSymbol":{"!doc":"<p>Set whether the open/close button should be displayed on a branch,\neven if the branch has no children.</p>","!type":"fn() -> bool"},"getDataModel":{"!doc":"<p>Return the data model for this tree.</p>","!type":"fn() -> +qx.ui.table.ITableModel"},"getExcludeFirstLevelTreeLines":{"!doc":"<p>Get whether drawing of first-level tree lines should be disabled even\nif drawing of tree lines is enabled.\n(See also {@link #getUseTreeLines})</p>","!type":"fn() -> bool"},"getHierarchy":{"!doc":"<p>Obtain the entire hierarchy of labels from the root down to the\nspecified node.</p>","!type":"fn(nodeReference: Object) -> +Array"},"getOpenCloseClickSelectsRow":{"!doc":"<p>Returns the (computed) value of the property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>","!type":"fn() -> Object"},"getSelectedNodes":{"!doc":"<p>Return the nodes that are currently selected.</p>","!type":"fn() -> +Array"},"getSelectionMode":{"!doc":"<p>Get the selection mode currently in use.</p>","!type":"fn() -> +Integer"},"getUseTreeLines":{"!doc":"<p>Get whether lines linking tree children shall be drawn on the tree.</p>","!type":"fn() -> bool"},"initOpenCloseClickSelectsRow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>openCloseClickSelectsRow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>","!type":"fn(value: Object) -> Object"},"isOpenCloseClickSelectsRow":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>openCloseClickSelectsRow</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>","!type":"fn() -> bool"},"resetOpenCloseClickSelectsRow":{"!doc":"<p>Resets the user value of the property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>","!type":"fn()"},"setAlwaysShowOpenCloseSymbol":{"!doc":"<p>Set whether the open/close button should be displayed on a branch,\neven if the branch has no children.</p>","!type":"fn(b: bool)"},"setExcludeFirstLevelTreeLines":{"!doc":"<p>Set whether drawing of first-level tree-node lines are disabled even\nif drawing of tree lines is enabled.</p>","!type":"fn(b: bool)"},"setOpenCloseClickSelectsRow":{"!doc":"<p>Sets the user value of the property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>","!type":"fn(value: Object) -> Object"},"setOverflow":{"!doc":"<p>Set the overflow mode.</p>","!type":"fn(s: string)"},"setSelectionMode":{"!doc":"<p>Set the selection mode.</p>","!type":"fn(mode: +Integer)"},"setUseTreeLines":{"!doc":"<p>Set whether lines linking tree children shall be drawn on the tree.\nNote that not all themes support tree lines.  As of the time of this\nwriting, the Classic theme supports tree lines (and uses +/- icons\nwhich lend themselves to tree lines), while the Modern theme, which\nuses right-facing and downward-facing arrows instead of +/-, does not.</p>","!type":"fn(b: bool)"},"toggleOpenCloseClickSelectsRow":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>","!type":"fn() -> bool"}}}},"virtual":{"behavior":{"Prefetch":{"!proto":"qx.core.Object","!doc":"<p>Behavior to support pre-rendering of invisible areas of a virtual scroller.\nIf applied to a scroller it will start a timer and increase the rendered area\nof the scroller after a certain period of time. Subsequent scrolling will not\nhave to render this pre-computed area again.</p>\n\n<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"_applyInterval":{"!doc":"<p>Applies changes of the property value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyScroller":{"!doc":"<p>Applies changes of the property value of the property <code>scroller</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scroller}.</p>","!type":"fn(value: +qx.ui.virtual.core.Scroller, old: +qx.ui.virtual.core.Scroller)"},"_onInterval":{"!doc":"<p>Update prefetching</p>","!type":"fn()"},"getInterval":{"!doc":"<p>Returns the (computed) value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn() -> Object"},"getScroller":{"!doc":"<p>Returns the (computed) value of the property <code>scroller</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scroller}.</p>","!type":"fn() -> Object"},"initInterval":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>interval</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"initScroller":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>scroller</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #scroller}.</p>","!type":"fn(value: Object) -> Object"},"resetInterval":{"!doc":"<p>Resets the user value of the property <code>interval</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn()"},"resetScroller":{"!doc":"<p>Resets the user value of the property <code>scroller</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #scroller}.</p>","!type":"fn()"},"setInterval":{"!doc":"<p>Sets the user value of the property <code>interval</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #interval}.</p>","!type":"fn(value: Object) -> Object"},"setPrefetchX":{"!doc":"<p>Configure horizontal prefetching</p>","!type":"fn(minLeft: +Integer, maxLeft: +Integer, minRight: +Integer, maxRight: +Integer)"},"setPrefetchY":{"!doc":"<p>Configure vertical prefetching</p>","!type":"fn(minAbove: +Integer, maxAbove: +Integer, minBelow: +Integer, maxBelow: +Integer)"},"setScroller":{"!doc":"<p>Sets the user value of the property <code>scroller</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #scroller}.</p>","!type":"fn(value: Object) -> Object"}}}},"cell":{"Abstract":{"!proto":"qx.core.Object","!doc":"<p>Abstract base class for <span class=\"caps\">HTML</span> based cell renderer.</p>\n\n<p><span class=\"caps\">HTML</span> cell renderer are used to construct an <span class=\"caps\">HTML</span> string, which is used to\nrender the cell.</p>","!type":"fn()","prototype":{"getAttributes":{"!doc":"<p>Get the element attributes for the cell</p>","!type":"fn(value: Object, states: Object) -> string"},"getCellProperties":{"!type":"fn(value: +undefined, states: +undefined)"},"getContent":{"!doc":"<p>Get cell&#8217;S <span class=\"caps\">HTML</span> content</p>","!type":"fn(value: Object, states: Object) -> string"},"getCssClasses":{"!doc":"<p>Get the css classes for the cell</p>","!type":"fn(value: Object, states: Object) -> string"},"getInsets":{"!doc":"<p>Get the cell&#8217;s insets. Insets are the sum of the cell&#8217;s padding and\nborder width.</p>","!type":"fn(value: Object, states: Object) -> +Integer"},"getStyles":{"!doc":"<p>Get the <span class=\"caps\">CSS</span> styles for the cell</p>","!type":"fn(value: Object, states: Object) -> string"}}},"AbstractImage":{"!proto":"qx.ui.virtual.cell.Cell","!doc":"<p>Abstract base class for image cell renderer.</p>\n\n<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"__createImage":{"!doc":"<p>Compute image meta data</p>","!type":"fn(imageData: Object) -> Object"},"__getImageSize":{"!doc":"<p>Compute the size of the given image</p>","!type":"fn(source: string) -> +Map"},"_identifyImage":{"!doc":"<p>Identifies the Image to show. This is a template method, which must be\nimplements by sub classes.</p>","!type":"fn(value: Object) -> +Map"},"getContent":{"!type":"fn(value: +undefined, states: +undefined)"}}},"AbstractWidget":{"!proto":"qx.core.Object","!doc":"<p>Abstract base class for widget based cell renderer.</p>","!type":"fn()","prototype":{"__getWidgetFromPool":{"!doc":"<p>Returns a <code>LayoutItem</code> from the pool, when the pool is empty\na new <code>LayoutItem</code> is created.</p>","!type":"fn() -> +qx.ui.core.LayoutItem"},"_cleanupPool":{"!doc":"<p>Cleanup all <code>LayoutItem</code> and destroy them.</p>","!type":"fn()"},"_createWidget":{"!doc":"<p>Creates the widget instance.</p>","!type":"fn() -> +qx.ui.core.LayoutItem"},"getCellWidget":{"!type":"fn(data: +undefined, states: +undefined)"},"pool":{"!type":"fn(widget: +undefined)"},"updateData":{"!type":"fn(widget: +undefined, data: +undefined)"},"updateStates":{"!type":"fn(widget: +undefined, states: +undefined)"}}},"Boolean":{"!proto":"qx.ui.virtual.cell.AbstractImage","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"_applyIconFalse":{"!doc":"<p>Applies changes of the property value of the property <code>iconFalse</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn(value: string, old: string)"},"_applyIconTrue":{"!doc":"<p>Applies changes of the property value of the property <code>iconTrue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn(value: string, old: string)"},"_identifyImage":{"!type":"fn(value: +undefined)"},"getIconFalse":{"!doc":"<p>Returns the (computed) value of the property <code>iconFalse</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn() -> Object"},"getIconTrue":{"!doc":"<p>Returns the (computed) value of the property <code>iconTrue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn() -> Object"},"initIconFalse":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconFalse</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn(value: Object) -> Object"},"initIconTrue":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>iconTrue</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn(value: Object) -> Object"},"resetIconFalse":{"!doc":"<p>Resets the user value of the property <code>iconFalse</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn()"},"resetIconTrue":{"!doc":"<p>Resets the user value of the property <code>iconTrue</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn()"},"setIconFalse":{"!doc":"<p>Sets the user value of the property <code>iconFalse</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconFalse}.</p>","!type":"fn(value: Object) -> Object"},"setIconTrue":{"!doc":"<p>Sets the user value of the property <code>iconTrue</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #iconTrue}.</p>","!type":"fn(value: Object) -> Object"}}},"Cell":{"!proto":"qx.ui.virtual.cell.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Themeable Cell renderer.</p>\n\n<p>This cell renderer can be styled by an appearance theme.</p>","!type":"fn()","prototype":{"__applyThemeValues":{"!doc":"<p>Apply the themed values to the properties</p>","!type":"fn()"},"__cacheThemedValues":{"!doc":"<p>Cache the themed values for the current state combination</p>","!type":"fn()"},"__clearThemedPropertyValues":{"!doc":"<p>Remove the themed value from all <span class=\"caps\">CSS</span> properties</p>","!type":"fn()"},"__computeCssClassForStates":{"!doc":"<p>Compute a <span class=\"caps\">CSS</span> class for the current values of all <span class=\"caps\">CSS</span> properties</p>","!type":"fn()"},"__initializeThemableProperties":{"!doc":"<p>Collect all themable properties, which are not <span class=\"caps\">CSS</span> properties</p>","!type":"fn()"},"__setStates":{"!doc":"<p>Set the cell states and set the correct <span class=\"caps\">CSS</span> class for the given state\ncombination</p>","!type":"fn(states: Object)"},"__updateThemeableProperties":{"!doc":"<p>Set the new themed value for all <span class=\"caps\">CSS</span> properties given the set of states</p>","!type":"fn(states: Object)"},"_applyAppearance":{"!doc":"<p>Applies changes of the property value of the property <code>appearance</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn(value: string, old: string)"},"_applyBackgroundColor":{"!doc":"<p>Applies changes of the property value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyFont":{"!doc":"<p>Applies changes of the property value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: +Font, old: +Font)"},"_applyPadding":{"!doc":"<p>Applies changes of the property value of the properties <code>paddingBottom</code>, <code>paddingLeft</code>, <code>paddingRight</code> and <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #paddingBottom}, {@link #paddingLeft}, {@link #paddingRight} and {@link #paddingTop}.</p>","!type":"fn(value: +Integer, old: +Integer)"},"_applyTextAlign":{"!doc":"<p>Applies changes of the property value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object, old: Object)"},"_applyTextColor":{"!doc":"<p>Applies changes of the property value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: +Color, old: +Color)"},"_getCssProperties":{"!doc":"<p>Get a list of all properties, which should be applied as <span class=\"caps\">CSS</span> styles.</p>","!type":"fn() -> +Array"},"_getValue":{"!doc":"<p>Compute the value of the given property</p>","!type":"fn(propertyName: string) -> Object"},"_storeStyle":{"!doc":"<p>Store a properties computed style string either in the user or in the\ntheme values. User values will be applied as inline styles, while theme\nvalues are stored in a stylesheet.</p>","!type":"fn(propertyName: string, styles: string)"},"getAppearance":{"!doc":"<p>Returns the (computed) value of the property <code>appearance</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn() -> Object"},"getAttributes":{"!type":"fn(value: +undefined, states: +undefined)"},"getBackgroundColor":{"!doc":"<p>Returns the (computed) value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn() -> Object"},"getCellProperties":{"!type":"fn(value: +undefined, states: +undefined)"},"getContent":{"!type":"fn(value: +undefined, states: +undefined)"},"getCssClasses":{"!type":"fn(value: +undefined, states: +undefined)"},"getFont":{"!doc":"<p>Returns the (computed) value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn() -> Object"},"getInsets":{"!type":"fn(value: +undefined, states: +undefined)"},"getPaddingBottom":{"!doc":"<p>Returns the (computed) value of the property <code>paddingBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn() -> Object"},"getPaddingLeft":{"!doc":"<p>Returns the (computed) value of the property <code>paddingLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn() -> Object"},"getPaddingRight":{"!doc":"<p>Returns the (computed) value of the property <code>paddingRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn() -> Object"},"getPaddingTop":{"!doc":"<p>Returns the (computed) value of the property <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn() -> Object"},"getStyles":{"!type":"fn(value: +undefined, states: +undefined)"},"getTextAlign":{"!doc":"<p>Returns the (computed) value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn() -> Object"},"getTextColor":{"!doc":"<p>Returns the (computed) value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn() -> Object"},"initAppearance":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>appearance</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn(value: Object) -> Object"},"initBackgroundColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>backgroundColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: Object) -> Object"},"initFont":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>font</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingBottom":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingBottom</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingLeft":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingLeft</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingRight":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingRight</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn(value: Object) -> Object"},"initPaddingTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>paddingTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn(value: Object) -> Object"},"initTextAlign":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>textAlign</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object) -> Object"},"initTextColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>textColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: Object) -> Object"},"resetAppearance":{"!doc":"<p>Resets the user value of the property <code>appearance</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn()"},"resetBackgroundColor":{"!doc":"<p>Resets the user value of the property <code>backgroundColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn()"},"resetFont":{"!doc":"<p>Resets the user value of the property <code>font</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn()"},"resetPadding":{"!doc":"<p>Resets the user value of the property <code>padding</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #padding}.</p>","!type":"fn()"},"resetPaddingBottom":{"!doc":"<p>Resets the user value of the property <code>paddingBottom</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn()"},"resetPaddingLeft":{"!doc":"<p>Resets the user value of the property <code>paddingLeft</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn()"},"resetPaddingRight":{"!doc":"<p>Resets the user value of the property <code>paddingRight</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn()"},"resetPaddingTop":{"!doc":"<p>Resets the user value of the property <code>paddingTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn()"},"resetTextAlign":{"!doc":"<p>Resets the user value of the property <code>textAlign</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn()"},"resetTextColor":{"!doc":"<p>Resets the user value of the property <code>textColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn()"},"setAppearance":{"!doc":"<p>Sets the user value of the property <code>appearance</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #appearance}.</p>","!type":"fn(value: Object) -> Object"},"setBackgroundColor":{"!doc":"<p>Sets the user value of the property <code>backgroundColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #backgroundColor}.</p>","!type":"fn(value: Object) -> Object"},"setFont":{"!doc":"<p>Sets the user value of the property <code>font</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #font}.</p>","!type":"fn(value: Object) -> Object"},"setPadding":{"!doc":"<p>Sets the values of the property group <code>padding</code>.</p>\n\n<p>This setter supports a shorthand mode compatible with the way margins and paddins are set in <span class=\"caps\">CSS</span>.</p>\n\n<p>For further details take a look at the property definition: {@link #padding}.</p>","!type":"fn(paddingTop: Object, paddingRight: Object, paddingBottom: Object, paddingLeft: Object)"},"setPaddingBottom":{"!doc":"<p>Sets the user value of the property <code>paddingBottom</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingBottom}.</p>","!type":"fn(value: Object) -> Object"},"setPaddingLeft":{"!doc":"<p>Sets the user value of the property <code>paddingLeft</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingLeft}.</p>","!type":"fn(value: Object) -> Object"},"setPaddingRight":{"!doc":"<p>Sets the user value of the property <code>paddingRight</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingRight}.</p>","!type":"fn(value: Object) -> Object"},"setPaddingTop":{"!doc":"<p>Sets the user value of the property <code>paddingTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #paddingTop}.</p>","!type":"fn(value: Object) -> Object"},"setTextAlign":{"!doc":"<p>Sets the user value of the property <code>textAlign</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textAlign}.</p>","!type":"fn(value: Object) -> Object"},"setTextColor":{"!doc":"<p>Sets the user value of the property <code>textColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #textColor}.</p>","!type":"fn(value: Object) -> Object"}}},"CellStylesheet":{"!proto":"qx.core.Object","!doc":"<p>Singleton wrapper for the stylesheet containing the <span class=\"caps\">CSS</span> rules for <span class=\"caps\">HTML</span> cells.</p>\n\n<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"__getNextClassname":{"!doc":"<p>Get the next unique <span class=\"caps\">CSS</span> class name</p>","!type":"fn() -> string"},"computeClassForStyles":{"!doc":"<p>Dynamically create a <span class=\"caps\">CSS</span> rule for the given style string. The selector is\nan unique class name, which is returned. The class is stored under the\ngiven key name and can be queried using {@link #getCssClass}.</p>","!type":"fn(key: string, styleString: string) -> string"},"getCssClass":{"!doc":"<p>Get the <span class=\"caps\">CSS</span> class stored under the given key</p>","!type":"fn(key: string) -> string"},"getStylesheet":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> stylesheet element</p>","!type":"fn() -> +StyleSheet"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.ui.virtual.cell.CellStylesheet"}},"Date":{"!proto":"qx.ui.virtual.cell.Cell","!doc":"<p>Date cell renderer.</p>\n\n<p>Renders a date according to the configured date formatter.</p>\n\n<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"getContent":{"!type":"fn(value: +undefined, states: +undefined)"},"getDateFormat":{"!doc":"<p>Returns the (computed) value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn() -> Object"},"initDateFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dateFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: Object) -> Object"},"resetDateFormat":{"!doc":"<p>Resets the user value of the property <code>dateFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn()"},"setDateFormat":{"!doc":"<p>Sets the user value of the property <code>dateFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dateFormat}.</p>","!type":"fn(value: Object) -> Object"}}},"Html":{"!proto":"qx.ui.virtual.cell.Cell","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","prototype":{"getContent":{"!type":"fn(value: +undefined, states: +undefined)"}}},"ICell":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>A <span class=\"caps\">HTML</span> cell provider provides the {@link qx.ui.virtual.layer.HtmlCell}\nwith <span class=\"caps\">HTML</span> fragments to render the cells.</p>","prototype":{"getCellProperties":{"!doc":"<p>Returns all relevant properties of the cell:\n<ul>\n<li>classes (String): Space separated class names</li>\n<li>style (String): <span class=\"caps\">CSS</span> styles</li>\n<li>attributes (String): Space separated attributes</li>\n<li>content (String): <span class=\"caps\">HTML</span> fragment of the innerHTML of the cell</li>\n<li>insets (Array): insets (padding + border) of the cell as\ntwo-dimensional array.</li>\n</ul></p>","!type":"fn(data: Object, states: +Map) -> +Map"}}},"Image":{"!proto":"qx.ui.virtual.cell.AbstractImage","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","prototype":{"_identifyImage":{"!type":"fn(value: +undefined)"}}},"IWidgetCell":{"!doc":"<p>A widget cell renderer manages a pool of widgets to render cells in a\n{@link qx.ui.virtual.layer.WidgetCell} layer.</p>","prototype":{"getCellWidget":{"!doc":"<p>Get a widget instance to render the cell</p>","!type":"fn(data: Object, states: +Map) -> +qx.ui.core.LayoutItem"},"pool":{"!doc":"<p>Release the given widget instance.</p>\n\n<p>Either pool or dispose the widget.</p>","!type":"fn(widget: +qx.ui.core.LayoutItem)"},"updateData":{"!doc":"<p>Update the data the cell widget should display</p>","!type":"fn(widget: +qx.ui.core.LayoutItem, data: Object)"},"updateStates":{"!doc":"<p>Update the states of the given widget.</p>","!type":"fn(widget: +qx.ui.core.LayoutItem, states: +Map)"}}},"IWidgetCellDelegate":{"!doc":"<p>Objects, which are used as delegates for {@link qx.ui.virtual.cell.WidgetCell} may\nimplement any of the methods described in this interface. The delegate does\nnot need implement all of the methods of this interface. If a method is not\nimplemented the {@link qx.ui.virtual.cell.WidgetCell} provides a default implementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nreally implemented.</p>","prototype":{"createWidget":{"!doc":"<p>Creates a <code>Widget</code> which will be used for rendering.</p>","!type":"fn() -> +qx.ui.core.LayoutItem"}}},"Number":{"!proto":"qx.ui.virtual.cell.Cell","!doc":"<p>Number cell renderer.</p>\n\n<p>Renders the call using the configured number formatter.</p>\n\n<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"getContent":{"!type":"fn(value: +undefined, states: +undefined)"},"getNumberFormat":{"!doc":"<p>Returns the (computed) value of the property <code>numberFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn() -> Object"},"initNumberFormat":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>numberFormat</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn(value: Object) -> Object"},"resetNumberFormat":{"!doc":"<p>Resets the user value of the property <code>numberFormat</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn()"},"setNumberFormat":{"!doc":"<p>Sets the user value of the property <code>numberFormat</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #numberFormat}.</p>","!type":"fn(value: Object) -> Object"}}},"String":{"!proto":"qx.ui.virtual.cell.Cell","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>","!type":"fn()","prototype":{"getContent":{"!type":"fn(value: +undefined, states: +undefined)"}}},"WidgetCell":{"!proto":"qx.ui.virtual.cell.AbstractWidget","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Cell renderer can be used for Widget rendering. The Widget creation can be configured with the\n{@link #delegate} property:</p>\n\n<pre class=\"javascript\">\nwidgetCell.setDelegate(\n{\n  createWidget : function() {\n    return new qx.ui.form.ListItem();\n  }\n});\n</pre>\n\n<p>When the {@link #delegate} property is not used {@link qx.ui.core.Widget} instances are created as\nfallback.</p>\n\n<p>The {@link #updateData} method can be used to update any Widget property. Just use a <code>Map</code>\nwith property name as key:</p>\n\n<pre class=\"javascript\">\n// widget is a qx.ui.form.ListItem instance\nwidgetCell.updateData(widget,\n{\n  label: \"my label value\",\n  icon: \"qx/icon/22/emotes/face-angel.png\"\n});\n</pre>","prototype":{"_applyDelegate":{"!doc":"<p>Applies changes of the property value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object, old: Object)"},"_createWidget":{"!type":"fn()"},"getDelegate":{"!doc":"<p>Returns the (computed) value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn() -> Object"},"initDelegate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>delegate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"resetDelegate":{"!doc":"<p>Resets the user value of the property <code>delegate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn()"},"setDelegate":{"!doc":"<p>Sets the user value of the property <code>delegate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #delegate}.</p>","!type":"fn(value: Object) -> Object"},"updateData":{"!type":"fn(widget: +undefined, data: +undefined)"}}}},"core":{"Axis":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The axis maps virtual screen coordinates to item indexes. By default all\nitems have the same size but it is also possible to give specific items\na different size.</p>","!type":"fn()","prototype":{"__findRangeByIndex":{"!doc":"<p>Returns the range, which contains the position.</p>\n\n<p>Complexity: O(log n) (n = number of custom sized cells)</p>","!type":"fn(index: +Integer) -> +Map"},"__findRangeByPosition":{"!doc":"<p>Returns the range, which contains the position</p>\n\n<p>Complexity: O(log n) (n = number of custom sized cells)</p>","!type":"fn(position: +Integer) -> +Map"},"__getRanges":{"!doc":"<p>Split the position range into disjunct intervals. Each interval starts\nwith a custom sized cell. Each position is contained in exactly one range.\nThe ranges are sorted according to their start position.</p>\n\n<p>Complexity: O(n log n) (n = number of custom sized cells)</p>","!type":"fn() -> +Map"},"getDefaultItemSize":{"!doc":"<p>Get the default size of the items.</p>","!type":"fn() -> +Integer"},"getItemAtPosition":{"!doc":"<p>Get the item and the offset into the item at the given position.</p>","!type":"fn(position: +Integer) -> +Map"},"getItemCount":{"!doc":"<p>Get the number of items in the axis.</p>","!type":"fn() -> +Integer"},"getItemPosition":{"!doc":"<p>Get the start position of the item with the given index.</p>","!type":"fn(index: +Integer) -> +Integer"},"getItemSize":{"!doc":"<p>Get the size of the item at the given index.</p>","!type":"fn(index: +Integer) -> +Integer"},"getItemSizes":{"!doc":"<p>Get an array of item sizes starting with the item at &#8220;startIndex&#8221;. The\nsum of all sizes in the returned array is at least &#8220;minSizeSum&#8221;.</p>","!type":"fn(startIndex: +Integer, minSizeSum: +Integer) -> +Integer"},"getTotalSize":{"!doc":"<p>Returns the sum of all cell sizes.</p>","!type":"fn() -> +Integer"},"resetItemSizes":{"!doc":"<p>Reset all custom sizes set with {@link #setItemSize}.</p>","!type":"fn()"},"setDefaultItemSize":{"!doc":"<p>Set the default size the items.</p>","!type":"fn(defaultItemSize: +Integer)"},"setItemCount":{"!doc":"<p>Set the number of items in the axis.</p>","!type":"fn(itemCount: +Integer)"},"setItemSize":{"!doc":"<p>Sets the size of a specific item. This allow item, which have a size\ndifferent from the default size.</p>","!type":"fn(index: +Integer, size: +Integer)"}}},"CellEvent":{"!proto":"qx.event.type.Pointer","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>A cell event instance contains all data for pointer events related to cells in\na pane.</p>","prototype":{"getColumn":{"!doc":"<p>Returns the (computed) value of the property <code>column</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn() -> Object"},"getRow":{"!doc":"<p>Returns the (computed) value of the property <code>row</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn() -> Object"},"init":{"!doc":"<p>Initialize the event.</p>","!type":"fn(scroller: +qx.ui.table.pane.Scroller, me: +qx.event.type.Pointer, row?: +Integer, column?: +Integer)"},"initColumn":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>column</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn(value: Object) -> Object"},"initRow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>row</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn(value: Object) -> Object"},"resetColumn":{"!doc":"<p>Resets the user value of the property <code>column</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn()"},"resetRow":{"!doc":"<p>Resets the user value of the property <code>row</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn()"},"setColumn":{"!doc":"<p>Sets the user value of the property <code>column</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #column}.</p>","!type":"fn(value: Object) -> Object"},"setRow":{"!doc":"<p>Sets the user value of the property <code>row</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #row}.</p>","!type":"fn(value: Object) -> Object"}}},"IHtmlCellProvider":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>A <span class=\"caps\">HTML</span> cell provider provides the {@link qx.ui.virtual.layer.HtmlCell}\nwith <span class=\"caps\">HTML</span> fragments to render the cells.</p>","prototype":{"getCellProperties":{"!doc":"<p>Returns all relevant properties of the cell:\n<ul>\n<li>classes (String): Space separated class names</li>\n<li>style (String): <span class=\"caps\">CSS</span> styles</li>\n<li>attributes (String): Space separated attributes</li>\n<li>content (String): <span class=\"caps\">HTML</span> fragment of the innerHTML of the cell</li>\n<li>insets (Array): insets (padding + border) of the cell as\ntwo-dimensional array.</li>\n</ul></p>","!type":"fn(row: +Integer, column: +Integer) -> +Map"}}},"ILayer":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>A layer is responsible to render one aspect of a virtual pane. The pane tells\neach layer to render/update a specific window of the virtual grid.</p>","prototype":{"fullUpdate":{"!doc":"<p>Do a complete update of the layer. All cached data should be discarded.\nThis method is called e.g. after changes to the grid geometry\n(row/column sizes, row/column count, ...).</p>\n\n<p>Note: This method can only be called after the widgets initial appear\nevent has been fired because it may work with the widget&#8217;s <span class=\"caps\">DOM</span> elements.</p>","!type":"fn(firstRow: +Integer, firstColumn: +Integer, rowSizes: +Integer, columnSizes: +Integer)"},"updateLayerData":{"!doc":"<p>Update the layer to reflect changes in the data the layer displays.</p>","!type":"fn()"},"updateLayerWindow":{"!doc":"<p>Update the layer to display a different window of the virtual grid.\nThis method is called if the pane is scrolled, resized or cells\nare prefetched. The implementation can assume that no other grid\ndata has been changed since the last &#8220;fullUpdate&#8221; of &#8220;updateLayerWindow&#8221;\ncall.</p>\n\n<p>Note: This method can only be called after the widgets initial appear\nevent has been fired because it may work with the widget&#8217;s <span class=\"caps\">DOM</span> elements.</p>","!type":"fn(firstRow: +Integer, firstColumn: +Integer, rowSizes: +Integer, columnSizes: +Integer)"}}},"IWidgetCellProvider":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>A widget cell provider provides the {@link qx.ui.virtual.layer.WidgetCell}\nwith configured widgets to render the cells and pools/releases unused\ncell widgets.</p>","prototype":{"getCellWidget":{"!doc":"<p>This method returns the configured cell for the given cell. The return\nvalue may be <code>null</code> to indicate that the cell should be empty.</p>","!type":"fn(row: +Integer, column: +Integer) -> +qx.ui.core.LayoutItem"},"poolCellWidget":{"!doc":"<p>Release the given cell widget. Either pool or destroy the widget.</p>","!type":"fn(widget: +qx.ui.core.LayoutItem)"}}},"Pane":{"!proto":"qx.ui.core.Widget","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The Pane provides a window of a larger virtual grid.</p>\n\n<p>The actual rendering is performed by one or several layers ({@link ILayer}.\nThe pane computes, which cells of the virtual area is visible and instructs\nthe layers to render these cells.</p>","!type":"fn()","prototype":{"__checkPaneResize":{"!doc":"<p>Check whether the pane was resized and fire an {@link #update} event if\nit was.</p>","!type":"fn()"},"__handlePointerCellEvent":{"!doc":"<p>Converts a pointer event into a cell event and fires the cell event if the\npointer is over a cell.</p>","!type":"fn(e: +qx.event.type.Pointer, cellEventType: string)"},"_deferredUpdateScrollPosition":{"!doc":"<p>Schedule an update the visible window of the grid according to the top\nand left scroll positions.</p>","!type":"fn()"},"_fullUpdate":{"!doc":"<p>Perform a full update on all visible layers. All cached data will be\ndiscarded.</p>","!type":"fn()"},"_onAppear":{"!doc":"<p>Resize event handler. Do a full update on first appear.</p>","!type":"fn()"},"_onContextmenu":{"!doc":"<p>Event listener for context menu taps. Fires an cellContextmenu event.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onDbltap":{"!doc":"<p>Event listener for double taps. Fires an cellDbltap event.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onPointerDown":{"!doc":"<p>Event listener for pointer down. Remembers cell position to prevent pointer event when cell position change.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onResize":{"!doc":"<p>Resize event handler.</p>\n\n<p>Updates the visible window.</p>","!type":"fn()"},"_onTap":{"!doc":"<p>Event listener for pointer taps. Fires an cellTap event.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_setLayerWindow":{"!doc":"<p>Sets the size of the layers to contain the cells at the pixel position\n&#8220;left/right&#8221; up to &#8220;left+minHeight/right+minHeight&#8221;. The offset of the\nlayer container is adjusted to respect the pane&#8217;s scroll top and scroll\nleft values.</p>","!type":"fn(layers: +ILayer, left: +Integer, top: +Integer, minWidth: +Integer, minHeight: +Integer, doFullUpdate?: bool)"},"_updateScrollPosition":{"!doc":"<p>Update the visible window of the grid according to the top and left scroll\npositions.</p>","!type":"fn()"},"addLayer":{"!doc":"<p>Add a layer to the layer container.</p>","!type":"fn(layer: +ILayer)"},"fullUpdate":{"!doc":"<p>Schedule a full update on all visible layers.</p>","!type":"fn()"},"getCellAtPosition":{"!doc":"<p>Get the grid cell at the given absolute document coordinates. This method\ncan be used to convert the pointer position returned by\n{@link qx.event.type.Pointer#getDocumentLeft} and\n{@link qx.event.type.Pointer#getDocumentLeft} into cell coordinates.</p>","!type":"fn(documentX: +Integer, documentY: +Integer) -> +Map"},"getChildren":{"!doc":"<p>Returns an array containing the layer container.</p>","!type":"fn() -> Object"},"getColumnConfig":{"!doc":"<p>Get the axis object, which defines the column numbers and the column sizes.</p>","!type":"fn() -> +Axis"},"getLayers":{"!doc":"<p>Get a list of all layers.</p>","!type":"fn() -> +ILayer"},"getRowConfig":{"!doc":"<p>Get the axis object, which defines the row numbers and the row sizes.</p>","!type":"fn() -> +Axis"},"getScrollMaxX":{"!doc":"<p>The maximum horizontal scroll position.</p>","!type":"fn() -> +Integer"},"getScrollMaxY":{"!doc":"<p>The maximum vertical scroll position.</p>","!type":"fn() -> +Integer"},"getScrollSize":{"!doc":"<p>The (virtual) size of the content.</p>","!type":"fn() -> +Map"},"getScrollX":{"!doc":"<p>Returns the horizontal scroll offset.</p>","!type":"fn() -> +Integer"},"getScrollY":{"!doc":"<p>Returns the vertical scroll offset.</p>","!type":"fn() -> +Integer"},"getVisibleLayers":{"!doc":"<p>Get a list of all visible layers.</p>","!type":"fn() -> +ILayer"},"isUpdatePending":{"!doc":"<p>Whether a full update is scheduled.</p>","!type":"fn() -> bool"},"prefetchX":{"!doc":"<p>Increase the layers width beyond the needed width to improve\nhorizontal scrolling. The layers are only resized if invisible parts\nleft/right of the pane window are smaller than minLeft/minRight.</p>","!type":"fn(minLeft: +Integer, maxLeft: +Integer, minRight: +Integer, maxRight: +Integer)"},"prefetchY":{"!doc":"<p>Increase the layers height beyond the needed height to improve\nvertical scrolling. The layers are only resized if invisible parts\nabove/below the pane window are smaller than minAbove/minBelow.</p>","!type":"fn(minAbove: +Integer, maxAbove: +Integer, minBelow: +Integer, maxBelow: +Integer)"},"scrollCellIntoView":{"!doc":"<p>Scrolls a grid cell into the visible area of the pane.</p>","!type":"fn(column: +Integer, row: +Integer)"},"scrollColumnIntoView":{"!doc":"<p>Scrolls a column into the visible area of the pane.</p>","!type":"fn(column: +Integer)"},"scrollRowIntoView":{"!doc":"<p>Scrolls a row into the visible area of the pane.</p>","!type":"fn(row: +Integer)"},"setScrollX":{"!doc":"<p>Scrolls the content to the given top coordinate.</p>","!type":"fn(value: +Integer)"},"setScrollY":{"!doc":"<p>Scrolls the content to the given left coordinate.</p>","!type":"fn(value: +Integer)"},"syncWidget":{"!type":"fn(jobs: +undefined)"}}},"Scroller":{"!proto":"qx.ui.core.scroll.AbstractScrollArea","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The Scroller wraps a {@link Pane} and provides scroll bars to interactively\nscroll the pane&#8217;s content.</p>","!type":"fn()","prototype":{"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_onScrollBarX":{"!type":"fn(e: +undefined)"},"_onScrollBarY":{"!type":"fn(e: +undefined)"},"getItemBottom":{"!doc":"<p><span class=\"caps\">NOT</span> <span class=\"caps\">IMPLEMENTED</span></p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemLeft":{"!doc":"<p><span class=\"caps\">NOT</span> <span class=\"caps\">IMPLEMENTED</span></p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemRight":{"!doc":"<p><span class=\"caps\">NOT</span> <span class=\"caps\">IMPLEMENTED</span></p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getItemTop":{"!doc":"<p><span class=\"caps\">NOT</span> <span class=\"caps\">IMPLEMENTED</span></p>","!type":"fn(item: +qx.ui.core.Widget) -> +Integer"},"getPane":{"!doc":"<p>Get the scroller&#8217;s virtual pane.</p>","!type":"fn() -> +Pane"}}}},"layer":{"Abstract":{"!proto":"qx.ui.core.Widget","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Abstract base class for layers of a virtual pane.</p>\n\n<p>This class queues calls to {@link #fullUpdate}, {@link #updateLayerWindow}\nand {@link #updateLayerData} and only performs the absolute necessary\nactions. Concrete implementation of this class must at least implement\nthe {@link #_fullUpdate} method. Additionally the two methods\n{@link #_updateLayerWindow} and {@link #_updateLayerData} may be implemented\nto increase the performance.</p>","!type":"fn()","prototype":{"_fullUpdate":{"!doc":"<p>Do a complete update of the layer. All cached data should be discarded.\nThis method is called e.g. after changes to the grid geometry\n(row/column sizes, row/column count, ...).</p>\n\n<p>Note: It is guaranteed that this method is only called after the layer\nhas been rendered.</p>","!type":"fn(firstRow: +Integer, firstColumn: +Integer, rowSizes: +Integer, columnSizes: +Integer)"},"_updateLayerData":{"!doc":"<p>Update the layer to reflect changes in the data the layer displays.</p>\n\n<p>Note: It is guaranteed that this method is only called after the layer\nhas been rendered.</p>","!type":"fn()"},"_updateLayerWindow":{"!doc":"<p>Update the layer to display a different window of the virtual grid.\nThis method is called if the pane is scrolled, resized or cells\nare prefetched. The implementation can assume that no other grid\ndata has been changed since the last &#8220;fullUpdate&#8221; of &#8220;updateLayerWindow&#8221;\ncall.</p>\n\n<p>Note: It is guaranteed that this method is only called after the layer\nhas been rendered.</p>","!type":"fn(firstRow: +Integer, firstColumn: +Integer, rowSizes: +Integer, columnSizes: +Integer)"},"fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"getColumnSizes":{"!doc":"<p>Get the sizes of the rendered column</p>","!type":"fn() -> +Integer"},"getFirstColumn":{"!doc":"<p>Get the first rendered column</p>","!type":"fn() -> +Integer"},"getFirstRow":{"!doc":"<p>Get the first rendered row</p>","!type":"fn() -> +Integer"},"getRowSizes":{"!doc":"<p>Get the sizes of the rendered rows</p>","!type":"fn() -> +Integer"},"syncWidget":{"!type":"fn(jobs: +undefined)"},"updateLayerData":{"!type":"fn()"},"updateLayerWindow":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"}}},"AbstractBackground":{"!proto":"qx.ui.virtual.layer.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Abstract base class for the {@link Row} and {@link Column} layers.</p>","!type":"fn()","prototype":{"_applyColorEven":{"!doc":"<p>Applies changes of the property value of the property <code>colorEven</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorEven}.</p>","!type":"fn(value: +Color, old: +Color)"},"_applyColorOdd":{"!doc":"<p>Applies changes of the property value of the property <code>colorOdd</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorOdd}.</p>","!type":"fn(value: +Color, old: +Color)"},"clearCustomColors":{"!doc":"<p>Clear all colors set using {@link #setColor}.</p>","!type":"fn()"},"getBackground":{"!doc":"<p>Get the decorator at the given index</p>","!type":"fn(index: +Integer) -> +qx.ui.decoration.IDecorator"},"getColor":{"!doc":"<p>Get the color at the given index</p>","!type":"fn(index: +Integer) -> +Color"},"getColorEven":{"!doc":"<p>Returns the (computed) value of the property <code>colorEven</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorEven}.</p>","!type":"fn() -> Object"},"getColorOdd":{"!doc":"<p>Returns the (computed) value of the property <code>colorOdd</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorOdd}.</p>","!type":"fn() -> Object"},"initColorEven":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorEven</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorEven}.</p>","!type":"fn(value: Object) -> Object"},"initColorOdd":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>colorOdd</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #colorOdd}.</p>","!type":"fn(value: Object) -> Object"},"resetColorEven":{"!doc":"<p>Resets the user value of the property <code>colorEven</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorEven}.</p>","!type":"fn()"},"resetColorOdd":{"!doc":"<p>Resets the user value of the property <code>colorOdd</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #colorOdd}.</p>","!type":"fn()"},"setBackground":{"!doc":"<p>Sets the decorator for the given index</p>","!type":"fn(index: +Integer, decorator: +qx.ui.decoration.IDecorator)"},"setColor":{"!doc":"<p>Sets the color for the given index</p>","!type":"fn(index: +Integer, color: +Color)"},"setColorEven":{"!doc":"<p>Sets the user value of the property <code>colorEven</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorEven}.</p>","!type":"fn(value: Object) -> Object"},"setColorOdd":{"!doc":"<p>Sets the user value of the property <code>colorOdd</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #colorOdd}.</p>","!type":"fn(value: Object) -> Object"}}},"CellSpanManager":{"!proto":"qx.core.Object","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The CellSpanManager manages cells, which span several rows or columns.</p>\n\n<p>It provides functionality to compute, which spanning cells are visible\nin a given view port and how they have to be placed.</p>","!type":"fn()","prototype":{"__intersectionAsArray":{"!doc":"<p>Return the intersection of two maps as an array. The objects intersect if\nthey have the same keys.</p>","!type":"fn(setA: Object, setB: Object) -> string"},"_findCellsInRange":{"!doc":"<p>Finds all cells with a sort key within the given range.</p>\n\n<p>Complexity: O(log n)</p>","!type":"fn(key: string, min: +Integer, max: +Integer) -> +Map"},"_getColumnPosition":{"!doc":"<p>Get the pixel start position of the given column</p>","!type":"fn(column: +Integer) -> +Integer"},"_getRowPosition":{"!doc":"<p>Get the pixel start position of the given row</p>","!type":"fn(row: +Integer) -> +Integer"},"_getSingleCellBounds":{"!doc":"<p>Get the bounds of a single cell</p>","!type":"fn(cell: +Map, firstVisibleRow: +Map, firstVisibleColumn: +Map) -> +Map"},"_getSortedCells":{"!doc":"<p>Get the cell array sorted by the given key (ascending)</p>","!type":"fn(key: string) -> +Map"},"_invalidatePositionCache":{"!doc":"<p>Invalidates the row/column position cache</p>","!type":"fn()"},"_invalidateSortCache":{"!doc":"<p>Invalidate the sort cache</p>","!type":"fn()"},"_onColumnConfigChange":{"!doc":"<p>Event handler for column configuration changes</p>","!type":"fn(e: +qx.event.type.Event)"},"_onRowConfigChange":{"!doc":"<p>Event handler for row configuration changes</p>","!type":"fn(e: +qx.event.type.Event)"},"addCell":{"!doc":"<p>Add a spanning cell to the manager.</p>","!type":"fn(id: string, row: +PositiveInteger, column: +PositiveInteger, rowSpan: +PositiveInteger, columnSpan: +PositiveInteger)"},"computeCellSpanMap":{"!doc":"<p>Compute a bitmap, which marks for each visible cell, whether the cell\nis covered by a spanning cell.</p>","!type":"fn(cells: +Map, firstRow: +PositiveInteger, firstColumn: +PositiveInteger, rowCount: +PositiveInteger, columnCount: +PositiveInteger) -> +Map"},"findCellsInWindow":{"!doc":"<p>Find all cells, which are visible in the given grid window.</p>","!type":"fn(firstRow: +PositiveInteger, firstColumn: +PositiveInteger, rowCount: +PositiveInteger, columnCount: +PositiveInteger) -> +Map"},"getCellBounds":{"!doc":"<p>Get the bounds of a list of cells as returned by {@link #findCellsInWindow}</p>","!type":"fn(cells: +Map, firstVisibleRow: +Map, firstVisibleColumn: +Map) -> +Map"},"removeCell":{"!doc":"<p>Remove a cell from the manager</p>","!type":"fn(id: string)"}}},"Column":{"!proto":"qx.ui.virtual.layer.AbstractBackground","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The Row layer renders row background colors.</p>","prototype":{"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"setColor":{"!type":"fn(index: +undefined, color: +undefined)"},"updateLayerWindow":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"}}},"GridLines":{"!proto":"qx.ui.virtual.layer.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Represents horizontal or vertical lines.</p>","!type":"fn()","prototype":{"__isLineRendered":{"!doc":"<p>Whether the line with the given index is currently rendered (i.e. in the\nlayer&#8217;s view port).</p>","!type":"fn(index: +Integer) -> bool"},"__renderHorizontalLines":{"!doc":"<p>Helper function to render horizontal lines.</p>","!type":"fn(htmlArr: +Array, firstRow: +Integer, rowSizes: +Array)"},"__renderVerticalLines":{"!doc":"<p>Helper function to render vertical lines.</p>","!type":"fn(htmlArr: +Array, firstColumn: +Integer, columnSizes: +Array)"},"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"_updateLayerWindow":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"getDefaultLineColor":{"!doc":"<p>Returns the (computed) value of the property <code>defaultLineColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineColor}.</p>","!type":"fn() -> Object"},"getDefaultLineSize":{"!doc":"<p>Returns the (computed) value of the property <code>defaultLineSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineSize}.</p>","!type":"fn() -> Object"},"getLineColor":{"!doc":"<p>Returns the color of the grid line with the given index.</p>","!type":"fn(index: +PositiveNumber) -> string"},"getLineSize":{"!doc":"<p>Returns the size of the grid line with the given index.</p>","!type":"fn(index: +PositiveNumber) -> +PositiveInteger"},"initDefaultLineColor":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultLineColor</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineColor}.</p>","!type":"fn(value: Object) -> Object"},"initDefaultLineSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>defaultLineSize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineSize}.</p>","!type":"fn(value: Object) -> Object"},"isHorizontal":{"!doc":"<p>Whether horizontal lines are rendered</p>","!type":"fn() -> bool"},"resetDefaultLineColor":{"!doc":"<p>Resets the user value of the property <code>defaultLineColor</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineColor}.</p>","!type":"fn()"},"resetDefaultLineSize":{"!doc":"<p>Resets the user value of the property <code>defaultLineSize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineSize}.</p>","!type":"fn()"},"setDefaultLineColor":{"!doc":"<p>Sets the user value of the property <code>defaultLineColor</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineColor}.</p>","!type":"fn(value: Object) -> Object"},"setDefaultLineSize":{"!doc":"<p>Sets the user value of the property <code>defaultLineSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #defaultLineSize}.</p>","!type":"fn(value: Object) -> Object"},"setLineColor":{"!doc":"<p>Sets the color for the grid line with the given index.</p>","!type":"fn(index: +PositiveNumber, color: +Color)"},"setLineSize":{"!doc":"<p>Sets the width/height for the grid line with the given index.</p>","!type":"fn(index: +PositiveNumber, size: +PositiveInteger)"}}},"HtmlCell":{"!proto":"qx.ui.virtual.layer.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The HtmlCell layer renders each cell with custom <span class=\"caps\">HTML</span> markup. The concrete\nmarkup for each cell is provided by a cell provider.</p>","!type":"fn()","prototype":{"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"_getCellSizeStyle":{"!doc":"<p>Get the cell size taking the box model into account</p>","!type":"fn(width: +Integer, height: +Integer, insetX: +Integer, insetY: +Integer) -> string"}}},"HtmlCellSpan":{"!proto":"qx.ui.virtual.layer.HtmlCell","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>An extended HtmlCell layer, which adds the possibility to specify row and\ncolumn spans for specific cells.</p>","!type":"fn()","prototype":{"__renderCell":{"!doc":"<p>Renders a cell</p>","!type":"fn(htmlArr: string, row: +Integer, column: +Integer, left: +Integer, top: +Integer, width: +Integer, height: +Integer)"},"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"setCellSpan":{"!doc":"<p>Set the row and column span for a specific cell</p>","!type":"fn(row: +PositiveInteger, column: +PositiveInteger, rowSpan: +PositiveInteger, columnSpan: +PositiveInteger)"}}},"Row":{"!proto":"qx.ui.virtual.layer.AbstractBackground","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The Row layer renders row background colors.</p>","prototype":{"__isRowRendered":{"!doc":"<p>Whether the row with the given index is currently rendered (i.e. in the\nlayer&#8217;s view port).</p>","!type":"fn(index: +Integer) -> bool"},"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"_updateLayerWindow":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"setBackground":{"!type":"fn(index: +undefined, decorator: +undefined)"},"setColor":{"!type":"fn(index: +undefined, color: +undefined)"}}},"WidgetCell":{"!proto":"qx.ui.virtual.layer.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The WidgetCell layer renders each cell with a qooxdoo widget. The concrete\nwidget instance for each cell is provided by a cell provider.</p>","!type":"fn()","prototype":{"_activateNotEmptyChild":{"!doc":"<p>Activates one of the still not empty items.</p>","!type":"fn(elementToPool: +qx.ui.core.Widget)"},"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"_getSpacer":{"!doc":"<p>Get the spacer widget, for empty cells</p>","!type":"fn() -> +qx.ui.core.Spacer"},"_updateLayerWindow":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"getRenderedCellWidget":{"!doc":"<p>Returns the widget used to render the given cell. May return null if the\ncell isn&#8217;t rendered currently rendered.</p>","!type":"fn(row: +Integer, column: +Integer) -> +qx.ui.core.LayoutItem"}}},"WidgetCellSpan":{"!proto":"qx.ui.virtual.layer.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>An extended WidgetCell layer, which adds the possibility to specify row and\ncolumn spans for specific cells.</p>","!type":"fn()","prototype":{"__getCellProviderForNonSpanningCells":{"!doc":"<p>Get the cell provider for the non spanning cells</p>","!type":"fn() -> +qx.ui.virtual.core.IWidgetCellProvider"},"__updateCellSpanData":{"!doc":"<p>Updates the fields <code>_cells</code>, <code>_bounds</code> and\n<code>_spanMap</code> according to the given grid window.</p>","!type":"fn(firstRow: +PositiveInteger, firstColumn: +PositiveInteger, rowCount: +PositiveInteger, columnCount: +PositiveInteger)"},"__updateCellSpanWidgets":{"!doc":"<p>Updates the widget in spanned cells.</p>\n\n<p>Note: The method {@link #__updateCellSpanData} must be called before\nthis method is called:</p>","!type":"fn()"},"_fullUpdate":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"_updateLayerWindow":{"!type":"fn(firstRow: +undefined, firstColumn: +undefined, rowSizes: +undefined, columnSizes: +undefined)"},"getRenderedCellWidget":{"!doc":"<p>Returns the widget used to render the given cell. May return null if the\ncell isn&#8217;t rendered currently rendered.</p>","!type":"fn(row: +Integer, column: +Integer) -> +qx.ui.core.LayoutItem"},"setCellSpan":{"!doc":"<p>Set the row and column span for a specific cell</p>","!type":"fn(row: +PositiveInteger, column: +PositiveInteger, rowSpan: +PositiveInteger, columnSpan: +PositiveInteger)"}}}},"selection":{"Abstract":{"!proto":"qx.ui.core.selection.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Abstract base class for selection manager, which manage selectable items\nrendered in a virtual {@link qx.ui.virtual.core.Pane}.</p>","!type":"fn()","prototype":{"_capture":{"!type":"fn()"},"_getDimension":{"!type":"fn()"},"_getLocation":{"!type":"fn()"},"_getScroll":{"!type":"fn()"},"_isSelectable":{"!type":"fn(item: +undefined)"},"_releaseCapture":{"!type":"fn()"},"_scrollBy":{"!type":"fn(xoff: +undefined, yoff: +undefined)"},"_styleSelectable":{"!type":"fn(item: +undefined, type: +undefined, enabled: +undefined)"},"attachKeyEvents":{"!doc":"<p>Attach key events to manipulate the selection using the keyboard. The\nevent target doesn&#8217;t need to be the pane itself. It can be an widget,\nwhich received key events. Usually the key event target is the\n{@link qx.ui.virtual.core.Scroller}.</p>","!type":"fn(target: +qx.core.Object)"},"attachListEvents":{"!doc":"<p>Attach list events. The selection mode <code>one</code> need to know,\nwhen selectable items are added or removed. If this mode is used the\n<code>list</code> parameter must fire <code>addItem</code> and\n<code>removeItem</code> events.</p>","!type":"fn(list: +qx.core.Object)"},"attachPointerEvents":{"!doc":"<p>Attach pointer events to the managed pane.</p>","!type":"fn()"},"detachKeyEvents":{"!doc":"<p>Detach key events.</p>","!type":"fn(target: +qx.core.Object)"},"detachListEvents":{"!doc":"<p>Detach list events.</p>","!type":"fn(list: +qx.core.Object)"},"detatchPointerEvents":{"!doc":"<p>Detach pointer events from the managed pane.</p>","!type":"fn()"}}},"CellLines":{"!proto":"qx.ui.virtual.selection.CellRectangle","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Cell selection manager</p>","prototype":{"_getSelectableRange":{"!type":"fn(item1: +undefined, item2: +undefined)"}}},"CellRectangle":{"!proto":"qx.ui.virtual.selection.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Cell selection manager</p>","prototype":{"_getFirstSelectable":{"!type":"fn()"},"_getItemCount":{"!doc":"<p>Returns the number of all items in the pane. This number may contain\nunselectable items as well.</p>","!type":"fn() -> +Integer"},"_getLastSelectable":{"!type":"fn()"},"_getPage":{"!type":"fn(lead: +undefined, up: +undefined)"},"_getRelatedSelectable":{"!type":"fn(item: +undefined, relation: +undefined)"},"_getSelectableFromPointerEvent":{"!type":"fn(event: +undefined)"},"_getSelectableLocationX":{"!type":"fn(item: +undefined)"},"_getSelectableLocationY":{"!type":"fn(item: +undefined)"},"_getSelectableRange":{"!type":"fn(item1: +undefined, item2: +undefined)"},"_scrollItemIntoView":{"!type":"fn(item: +undefined)"},"_selectableToHashCode":{"!type":"fn(item: +undefined)"},"getSelectables":{"!type":"fn(all: +undefined)"}}},"Column":{"!proto":"qx.ui.virtual.selection.Row","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Column selection manager</p>","prototype":{"_getItemCount":{"!doc":"<p>Returns the number of all items in the pane. This number may contain\nunselectable items as well.</p>","!type":"fn() -> +Integer"},"_getRelatedSelectable":{"!type":"fn(item: +undefined, relation: +undefined)"},"_getSelectableFromPointerEvent":{"!type":"fn(event: +undefined)"},"_getSelectableLocationX":{"!type":"fn(item: +undefined)"},"_getSelectableLocationY":{"!type":"fn(item: +undefined)"},"_scrollItemIntoView":{"!type":"fn(item: +undefined)"}}},"ISelectionDelegate":{"!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Objects, which are used as delegates for a virtual selection manager may\nimplement any of the methods described in this interface. The delegate does\nnot need implement all of the methods of this interface. If a method is not\nimplemented the selection manager provides a default implementation.</p>\n\n<p>Note: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nreally implemented.</p>","prototype":{"isItemSelectable":{"!doc":"<p>Returns whether the given item is selectable. The type of the item\ndepends on the concrete selection manager implementation. The\n{@link Row} and {@link Column} selection manager use row/column indexes\nas items. The {@link qx.ui.virtual.cell.Cell} uses cells as items. Cells are represented by\na map containing <code>row</code> and <code>column</code> keys.</p>\n\n<p>If this method is not implemented by the delegate all items are selectable.</p>","!type":"fn(item: Object) -> bool"},"styleSelectable":{"!doc":"<p>Update the style (appearance) of the given item.</p>","!type":"fn(item: Object, type: string, wasAdded: bool)"}}},"MModel":{"!doc":"<p>Implements the different selection modes single, multi, additive and one\nselection with there drag and quick selection.</p>\n\n<p>Example how to use selection:</p>\n\n<pre class=\"javascript\">\nvar rawData = [];\nfor (var i = 0; i < 2500; i++) {\n rawData[i] = \"Item No \" + i;\n}\n\nvar model = qx.data.marshal.Json.createModel(rawData);\nvar list = new qx.ui.list.List(model);\n\n// Pre-Select \"Item No 20\"\nlist.getSelection().push(model.getItem(20));\n\n// log change selection\nlist.getSelection().addListener(\"change\", function(e) {\n  this.debug(\"Selection: \" + list.getSelection().getItem(0));\n}, this);\n</pre>","!type":"fn()","prototype":{"__isSelectionEquals":{"!doc":"<p>Checks whether the local and the manager selection are equal.</p>","!type":"fn() -> bool"},"__replaceSelection":{"!doc":"<p>Replace the current selection with the passed selection Array.</p>","!type":"fn(newSelection: +qx.data.Array)"},"__synchronizeSelection":{"!doc":"<p>Synchronized the selection form the manager with the local one.</p>","!type":"fn()"},"_applyDefaultSelection":{"!doc":"<p>Helper Method to select default item.</p>","!type":"fn()"},"_applyDragSelection":{"!doc":"<p>Applies changes of the property value of the property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn(value: bool, old: bool)"},"_applyQuickSelection":{"!doc":"<p>Applies changes of the property value of the property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn(value: bool, old: bool)"},"_applySelection":{"!doc":"<p>Applies changes of the property value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: +qx.data.Array, old: +qx.data.Array)"},"_applySelectionMode":{"!doc":"<p>Applies changes of the property value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object, old: Object)"},"_initSelectionManager":{"!doc":"<p>Initialize the selection manager with his delegate.</p>","!type":"fn()"},"_onChangeSelection":{"!doc":"<p>Event handler for the internal selection change {@link #selection}.</p>","!type":"fn(e: +qx.event.type.Data)"},"_onManagerChangeSelection":{"!doc":"<p>Event handler for the selection change from the <code>_manager</code>.</p>","!type":"fn(e: +qx.event.type.Data)"},"_updateSelection":{"!doc":"<p>Method to update the selection, this method can be used when the model has\nchanges.</p>","!type":"fn()"},"getDragSelection":{"!doc":"<p>Returns the (computed) value of the property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn() -> Object"},"getQuickSelection":{"!doc":"<p>Returns the (computed) value of the property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn() -> Object"},"getSelection":{"!doc":"<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn() -> Object"},"getSelectionMode":{"!doc":"<p>Returns the (computed) value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn() -> Object"},"initDragSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>dragSelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn(value: Object) -> Object"},"initQuickSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>quickSelection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn(value: Object) -> Object"},"initSelection":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"initSelectionMode":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>selectionMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object) -> Object"},"isDragSelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>dragSelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn() -> bool"},"isQuickSelection":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>quickSelection</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn() -> bool"},"resetDragSelection":{"!doc":"<p>Resets the user value of the property <code>dragSelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn()"},"resetQuickSelection":{"!doc":"<p>Resets the user value of the property <code>quickSelection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn()"},"resetSelection":{"!doc":"<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn()"},"resetSelectionMode":{"!doc":"<p>Resets the user value of the property <code>selectionMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn()"},"setDragSelection":{"!doc":"<p>Sets the user value of the property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn(value: Object) -> Object"},"setQuickSelection":{"!doc":"<p>Sets the user value of the property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn(value: Object) -> Object"},"setSelection":{"!doc":"<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>","!type":"fn(value: Object) -> Object"},"setSelectionMode":{"!doc":"<p>Sets the user value of the property <code>selectionMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selectionMode}.</p>","!type":"fn(value: Object) -> Object"},"toggleDragSelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>dragSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #dragSelection}.</p>","!type":"fn() -> bool"},"toggleQuickSelection":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>quickSelection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #quickSelection}.</p>","!type":"fn() -> bool"}}},"Row":{"!proto":"qx.ui.virtual.selection.Abstract","!doc":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Row selection manager</p>","prototype":{"_getFirstSelectable":{"!type":"fn()"},"_getItemCount":{"!doc":"<p>Returns the number of all items in the pane. This number may contain\nunselectable items as well.</p>","!type":"fn() -> +Integer"},"_getLastSelectable":{"!type":"fn()"},"_getPage":{"!type":"fn(lead: +undefined, up: +undefined)"},"_getRelatedSelectable":{"!type":"fn(item: +undefined, relation: +undefined)"},"_getSelectableFromPointerEvent":{"!type":"fn(event: +undefined)"},"_getSelectableLocationX":{"!type":"fn(item: +undefined)"},"_getSelectableLocationY":{"!type":"fn(item: +undefined)"},"_getSelectableRange":{"!type":"fn(item1: +undefined, item2: +undefined)"},"_scrollItemIntoView":{"!type":"fn(item: +undefined)"},"_selectableToHashCode":{"!type":"fn(item: +undefined)"},"getSelectables":{"!type":"fn(all: +undefined)"}}}}},"website":{"Accordion":{"!proto":"qx.ui.website.Tabs","!doc":"<p>The Accordion is a group of vertically stacked panels (here called pages),\neach with a header.\nBy default, only one page is visible while the others are collapsed.\nClicking or tapping a collapsed page&#8217;s header will expand it while collapsing the\npreviously expanded page.</p>\n\n<h2>Markup</h2>\nThe Accordion contains an unordered list element (<code>ul</code>), which\nwill be created if not already present.\nHeaders and pages are list items (<code>li</code>). Each header must contain\na button with an <code>accordionPage</code> data attribute where the value is a\nCSS selector string identifying the corresponding page. Headers and pages\nwill not be created automatically. They can be predefined in the DOM before\nthe <code>q().accordion()</code> factory method is called, or added programmatically.\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-accordion</code></td>\n      <td>Container element</td>\n      <td>Identifies the Accordion widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-accordion-button</code></td>\n      <td>Page header (<code>li</code>)</td>\n      <td>Identifies and styles the page headers</td>\n    </tr>\n    <tr>\n      <td><code>qx-accordion-button-active</code></td>\n      <td>Page header (<code>li</code>)</td>\n      <td>Identifies and styles the header of the currently expanded page. Applied in addition to <code>qx-accordion-button</code></td>\n    </tr>\n    <tr>\n      <td><code>qx-accordion-page</code></td>\n      <td>Page (<code>li</code>)</td>\n      <td>Identifies and styles the pages</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"widget-markup\">Generated DOM Structure</h2>","accordion":{"!doc":"<p>Factory method which converts the current collection into a collection of\naccordion widgets.</p>","!type":"fn(preselected?: +Integer) -> +qx.ui.website.Accordion"},"!type":"fn()","prototype":{"__activateTransition":{"!doc":"<p>Restores an element&#8217;s transition styles</p>","!type":"fn(elem: +qxWeb)"},"__deactivateTransition":{"!doc":"<p>Stores an element&#8217;s <span class=\"caps\">CSS</span> transition styles in a property\nand removes them from the style declaration</p>","!type":"fn(elem: +qxWeb)"},"__toggleTransitions":{"!doc":"<p>Activates or deactivates the <span class=\"caps\">CSS</span> transition styles on all\npages</p>","!type":"fn(on?: bool)"},"_applyAlignment":{"!type":"fn(tabs: +undefined)"},"_onKeyDown":{"!doc":"<p>Allows content selection using the up and down arrow keys</p>","!type":"fn(e: +Event)"},"_onTap":{"!type":"fn(e: +undefined)"},"_showPage":{"!type":"fn(newButton: +undefined, oldButton: +undefined)"},"_storePageHeight":{"!doc":"<p>Stores the page&#8217;s height in both opened and closed states\nfor the page switch</p>","!type":"fn(page: +qxWeb)"},"_switchPages":{"!type":"fn(oldPage: +undefined, newPage: +undefined)"},"init":{"!type":"fn()"},"render":{"!type":"fn()"}}},"Button":{"!proto":"qx.ui.website.Widget","!doc":"<p>This is a simple button widget which takes care of setting the label\nand icon of a button.</p>\n\n<h2>Markup</h2>\nThe Button can contain a <code>span</code> element for the label and/or\nan <code>img</code> element for the icon.\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-button</code></td>\n      <td>Container element</td>\n      <td>Identifies the Button widget</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"widget-markup\">Generated DOM Structure</h2>","button":{"!doc":"<p>Factory method for the button widget which converts a standard\ncollection into a collection of buttons.</p>","!type":"fn(label?: string, icon?: string) -> +qx.ui.website.Button"},"!type":"fn()","prototype":{"getIcon":{"!doc":"<p>Returns the <span class=\"caps\">URI</span> of the button&#8217;s icon</p>","!type":"fn() -> string"},"getLabel":{"!doc":"<p>Returns the button&#8217;s label text</p>","!type":"fn() -> string"},"init":{"!type":"fn()"},"setIcon":{"!doc":"<p>Sets the source of the button&#8217;s icon</p>","!type":"fn(src: string) -> +qxWeb"},"setLabel":{"!doc":"<p>Sets the button&#8217;s label text</p>","!type":"fn(value: string) -> +qxWeb"},"setMenu":{"!doc":"<p>Sets the menu to be shown when the button is clicked or tapped</p>","!type":"fn(menu: +qxWeb) -> +qxWeb"}}},"Calendar":{"!proto":"qx.ui.website.Widget","!doc":"<p>This is a calendar widget used to select a date. It contain a set of\nbuttons to switch to the next or previous month as well as a button for\neach day in the month.</p>\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-calendar</code></td>\n      <td>Container element</td>\n      <td>Identifies the Calendar widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-container</code></td>\n      <td>Container element (<code>table</code>)</td>\n      <td>Identifies the table container of the Calendar widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-prev</code></td>\n      <td><code>button</code></td>\n      <td>Identifies and styles the \"previous month\" button</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-prev-container</code></td>\n      <td>Container element (<code>td</code>)</td>\n      <td>Identifies and styles the \"previous month\" container</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-next</code></td>\n      <td><code>button</code></td>\n      <td>Identifies and styles the \"next month\" button</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-next-container</code></td>\n      <td>Container element (<code>td</code>)</td>\n      <td>Identifies and styles the \"next month\" container</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-othermonth</code></td>\n      <td>Day cell (<code>td</code>)</td>\n      <td>Identifies and styles calendar cells for days from the previous or following month</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-dayname</code></td>\n      <td>Day name (<code>td</code>)</td>\n      <td>Identifies and styles the day name cell</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-day</code></td>\n      <td>Day (<code>button</code>)</td>\n      <td>Identifies and styles the day buttons</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-weekday</code></td>\n      <td>Day cell (<code>td</code>)</td>\n      <td>Identifies and styles the weekday cells</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-weekend</code></td>\n      <td>Day cell (<code>td</code>)</td>\n      <td>Identifies and styles the weekend cells</td>\n    </tr>\n    <tr>\n      <td><code>qx-calendar-selected</code></td>\n      <td>Day cell (<code>td</code>)</td>\n      <td>Identifies and styles the cell containing the selected day's button</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"widget-markup\">Generated DOM Structure</h2>","calendar":{"!doc":"<p>Factory method which converts the current collection into a collection of\nCalendar widgets. Therefore, an initialization process needs to be done which\ncan be configured with some parameter.</p>","!type":"fn(date?: +Date) -> +qx.ui.website.Calendar"},"!type":"fn()","prototype":{"_focusNextDay":{"!doc":"<p>Focuses the day button following the given one.</p>","!type":"fn(currentDay: +qxWeb)"},"_focusPrevDay":{"!doc":"<p>Focuses the day button preceding the given one.</p>","!type":"fn(currentDay: +qxWeb)"},"_generateRange":{"!doc":"<p>Generates a date list depending on the given range</p>","!type":"fn(range: +Array) -> +Array"},"_getControlsData":{"!doc":"<p>Returns the month and year to be displayed in the calendar controls.</p>","!type":"fn(date: +Date) -> +Map"},"_getDayRowData":{"!doc":"<p>Returns the week day names to be displayed in the calendar.</p>","!type":"fn() -> string"},"_getHelpDate":{"!doc":"<p>Returns a date instance for the first visible day to be displayed</p>","!type":"fn(date: +Date) -> +Date"},"_getTable":{"!doc":"<p>Renders the calendar for the given date.</p>","!type":"fn(date: +Date) -> string"},"_getWeekRows":{"!doc":"<p>Returns the table rows displaying the days of the month.</p>","!type":"fn(date: +Date) -> string"},"_nextMonth":{"!doc":"<p>Displays the next month</p>","!type":"fn()"},"_normalizeDate":{"!doc":"<p>Sets the hours, minutes and seconds of a date object to 0\nto facilitate date comparisons.</p>","!type":"fn(date: +Date)"},"_onBlur":{"!doc":"<p>Removes the keydown listener if the focus moves outside of the calendar.</p>","!type":"fn(e: +Event)"},"_onFocus":{"!doc":"<p>Attaches the keydown listener.</p>","!type":"fn(e: +Event)"},"_onKeyDown":{"!doc":"<p>Keyboard handling.</p>","!type":"fn(e: +Event)"},"_prevMonth":{"!doc":"<p>Displays the previous month</p>","!type":"fn()"},"_selectDay":{"!doc":"<p>Sets the current value to the day selected by the user</p>","!type":"fn(e: +Event)"},"dispose":{"!type":"fn()"},"getValue":{"!doc":"<p>Returns the currently selected date of the first\ncalendar widget in the collection.</p>","!type":"fn() -> +qx.ui.website.Calendar"},"init":{"!type":"fn()"},"render":{"!type":"fn()"},"setValue":{"!doc":"<p>Sets the given date as the current value displays it</p>","!type":"fn(value: +Date) -> +qx.ui.website.Calendar"},"showValue":{"!doc":"<p>Displays the given date</p>","!type":"fn(value: +Date) -> +qx.ui.website.Calendar"}}},"DatePicker":{"!proto":"qx.ui.website.Widget","!doc":"<p>This is a date picker widget used to combine an input element with a calendar widget\nto select a date. The calendar itself is opened as popup to save visual space.</p>\n\n<h2>Markup</h2>\nEach Date Picker widget is connected to an existing input element.\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-datepicker</code></td>\n      <td>Input element</td>\n      <td>Identifies the date picker widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-datepicker-icon</code></td>\n      <td>Icon element</td>\n      <td>Identifies the (if configured) image element to open the date picker</td>\n    </tr>\n  </tbody>\n</table>","datepicker":{"!doc":"<p>Factory method which converts the current collection into a collection of\nDate Picker widgets. Therefore, an initialization process needs to be done which\ncan be configured with some parameter.</p>","!type":"fn(date?: +Date) -> +qx.ui.website.DatePicker"},"!type":"fn()","prototype":{"__addInputListener":{"!doc":"<p>Helper method to add a listener to the connected input element\nif the configured mode is set.</p>","!type":"fn(collection: +qxWeb)"},"__setIcon":{"!doc":"<p>Helper method to add / remove an icon next to the input element</p>","!type":"fn(collection: +qxWeb)"},"__setReadOnly":{"!doc":"<p>Helper method to set the readonly status on the input element</p>","!type":"fn(collection: +qxWeb)"},"_calendarChangeValue":{"!doc":"<p>Listens to value selection of the calendar, Whenever the user selected a day\nwe write it back to the input element and hide the calendar.</p>\n\n<p>The format of the date can be controlled with the &#8216;format&#8217; config function</p>","!type":"fn(e: +Event)"},"_onBodyTap":{"!doc":"<p>Listener to the body element to be able to hide the calendar if the user clicks\nor taps outside the calendar.</p>","!type":"fn(e: +Event)"},"_onCalendarTap":{"!doc":"<p>Stop tap events from reaching the body so the calendar won&#8217;t close</p>","!type":"fn(e: +Event)"},"_onTap":{"!doc":"<p>Listener which handles clicks/taps on the associated input element and\nopens / hides the calendar.</p>","!type":"fn(e: +Event)"},"dispose":{"!type":"fn()"},"getCalendar":{"!doc":"<p>Get the associated calendar widget</p>","!type":"fn() -> +qx.ui.website.Calendar"},"init":{"!doc":"<p>Initializes the date picker widget</p>","!type":"fn(date: +Date) -> bool"},"render":{"!type":"fn()"}}},"Rating":{"!proto":"qx.ui.website.Widget","!doc":"<p>This is a simple rating widget which can be used to display a predefined\nnumber of symbols which the user can click or tap to give a rating e.g.\n3 out of 5 stars.</p>\n\n<h2>Markup</h2>\nEach rating item is a span element. Span elements already existing within\nthe Rating's container will be used, otherwise new elements will be added or\nremoved according to the <code>length</code> config option.\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-rating</code></td>\n      <td>Container element</td>\n      <td>Identifies the Rating widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-rating-item</code></td>\n      <td>Rating item (span)</td>\n      <td>Identifies and styles an active Rating item</td>\n    </tr>\n    <tr>\n      <td><code>qx-rating-item-off</code></td>\n      <td>Rating item (span)</td>\n      <td>Identifies and styles an inactive Rating item. Applied in addition to <code>qx-rating-item</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"widget-markup\">Generated DOM Structure</h2>","rating":{"!doc":"<p>Factory method which converts the current collection into a collection of\nrating widgets. Therefore, an initialization process needs to be done which\ncan be configured with some parameter.</p>","!type":"fn(initValue?: number, symbol?: string, length?: number) -> +qx.ui.website.Rating"},"!type":"fn()","prototype":{"_onBlur":{"!doc":"<p>Removes the keydown listener if the widget loses focus.</p>","!type":"fn(e: +Event)"},"_onFocus":{"!doc":"<p>Attaches the keydown listener.</p>","!type":"fn(e: +Event)"},"_onKeyDown":{"!doc":"<p>Changes the value if the left or right arrow key is pressed.</p>","!type":"fn(e: +Event)"},"_onTap":{"!doc":"<p>Tap handler which updates the value depending on the selected element.</p>","!type":"fn(e: +Event)"},"_updateSymbolLength":{"!doc":"<p>Checks the set length and adds / removes spans containing the rating symbol.</p>","!type":"fn() -> +qx.ui.website.Rating"},"dispose":{"!type":"fn()"},"getValue":{"!doc":"<p>Reads the current value of the first rating widget in the collection\nfrom the <span class=\"caps\">DOM</span> and returns it.</p>","!type":"fn() -> number"},"init":{"!type":"fn()"},"render":{"!type":"fn()"},"setValue":{"!doc":"<p>Sets the given value of the raining widget&#8217;s in the collection. The value will be\nconverted to the maximum or minimum if our of range.</p>","!type":"fn(value: number) -> +qx.ui.website.Rating"}}},"Slider":{"!proto":"qx.ui.website.Widget","!doc":"<p>The Slider control is used to select a numerical value from a given range.\nIt supports custom minimum/maximum values, step sizes and offsets (which limit\nthe knob&#8217;s range).</p>\n\n<h2>Markup</h2>\nThe Slider contains a single button element (the knob), which will be\ncreated if it's not already present.\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-slider</code></td>\n      <td>Container element</td>\n      <td>Identifies the Slider widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-slider-knob</code></td>\n      <td>Slider knob (button)</td>\n      <td>Identifies and styles the Slider's draggable knob</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"widget-markup\">Generated DOM Structure</h2>","slider":{"!doc":"<p>Factory method which converts the current collection into a collection of\nslider widgets.</p>","!type":"fn(value?: number, step?: number) -> +qx.ui.website.Slider"},"!type":"fn()","prototype":{"__valueToPosition":{"!doc":"<p>Positions the slider knob to the given value and fires the &#8220;changePosition&#8221;\nevent with the current position as integer.</p>","!type":"fn(value: +Integer)"},"_getDragBoundaries":{"!doc":"<p>Returns the boundaries (in pixels) of the slider&#8217;s range of motion</p>","!type":"fn() -> +Map"},"_getHalfKnobWidth":{"!doc":"<p>Returns half of the slider knob&#8217;s width, used for positioning</p>","!type":"fn() -> +Integer"},"_getKnobContent":{"!doc":"<p>Returns the content that should be displayed in the knob</p>","!type":"fn() -> string"},"_getNearestValue":{"!doc":"<p>Returns the nearest existing slider value according to he position of the knob element.</p>","!type":"fn(position: +Integer) -> +Integer"},"_getPixels":{"!doc":"<p>Creates a lookup table to get the pixel values for each slider step\nand computes the &#8220;breakpoint&#8221; between two steps in pixel.</p>","!type":"fn() -> +Integer"},"_onDocPointerUp":{"!doc":"<p>Listener for the pointerup event. Used for cleanup of previously\ninitialized modes.</p>","!type":"fn(e: +qx.event.Emitter)"},"_onDragStart":{"!doc":"<p>Prevents drag event propagation</p>","!type":"fn(e: +Event)"},"_onKeyDown":{"!doc":"<p>Moves the knob if the left or right arrow key is pressed</p>","!type":"fn(e: +Event)"},"_onKnobBlur":{"!doc":"<p>Removes the event listener for keyboard support from the knob on blur</p>","!type":"fn(e: +Event)"},"_onKnobFocus":{"!doc":"<p>Attaches the event listener for keyboard support to the knob on focus</p>","!type":"fn(e: +Event)"},"_onPointerDown":{"!doc":"<p>Listener for the pointerdown event. Initializes drag or tracking mode.</p>","!type":"fn(e: +qx.event.Emitter)"},"_onPointerMove":{"!doc":"<p>Listener for the pointermove event for the knob. Only used in drag mode.</p>","!type":"fn(e: +qx.event.Emitter)"},"_onSliderFocus":{"!doc":"<p>Delegates the Slider&#8217;s focus to the knob</p>","!type":"fn(e: +Event)"},"_onSliderPointerUp":{"!doc":"<p>Reads the pointer&#8217;s position and sets slider value to the nearest step.</p>","!type":"fn(e: +qx.event.Emitter)"},"_onWindowResize":{"!doc":"<p>Listener for window resize events. This listener method resets the\ncalculated values which are used to position the slider knob.</p>","!type":"fn()"},"_setKnobPosition":{"!doc":"<p>Applies the horizontal position</p>","!type":"fn(x: +Integer)"},"dispose":{"!type":"fn()"},"getValue":{"!doc":"<p>Returns the current value of the slider</p>","!type":"fn() -> +Integer"},"init":{"!type":"fn()"},"render":{"!type":"fn()"},"setValue":{"!doc":"<p>Sets the current value of the slider.</p>","!type":"fn(value: +Integer) -> +qx.ui.website.Slider"}}},"Table":{"!proto":"qx.ui.website.Widget","!doc":"<p>This is a widget that enhances an <span class=\"caps\">HTML</span> table with some basic features like\nSorting.</p>\n\n<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>","!type":"fn()","__getIndex":{"!doc":"<p>Gets the index of an HTMLElement inside of an HTMLCollection</p>","!type":"fn(htmlCollection: +HTMLCollection, htmlElement: +HTMLElement) -> +Integer"},"__getUID":{"!doc":"<p>Generates an unique id</p>","!type":"fn() -> string"},"__isDate":{"!doc":"<p>Checks if a given string is a Date</p>","!type":"fn(val: string) -> bool"},"__isNumber":{"!doc":"<p>Checks if a given string is a number</p>","!type":"fn(n: string) -> bool"},"table":{"!doc":"<p>Factory method which converts the current collection into a collection of\ntable widgets.</p>","!type":"fn(model: +Array) -> +qx.ui.website.Table"},"prototype":{"__addClassToHeaderAndFooter":{"!doc":"<p>Adds the internal css class to the header and footer cells</p>","!type":"fn(footOrHead: +HTMLElement) -> +qx.ui.website.Table"},"__addSortingClassToCol":{"!doc":"<p>Adds a class to the head or footer of the current sorted column</p>","!type":"fn(HeaderOrFooter: +Node, columnName: string, dir: string)"},"__applyTemplate":{"!doc":"<p>Applies the given model to the table cells depending on\nthe mustache template specified before</p>","!type":"fn(model: +Array) -> +qx.ui.website.Table"},"__checkColumnExistance":{"!doc":"<p>Checks if a column with the specified name exists</p>","!type":"fn(columnName: string)"},"__compareDate":{"!doc":"<p>Compares two Dates</p>","!type":"fn(x: string, y: string, direction: string) -> +Integer"},"__compareNumber":{"!doc":"<p>Compares two number</p>","!type":"fn(x: string, y: string, direction: string) -> +Integer"},"__compareString":{"!doc":"<p>Compares two Strings</p>","!type":"fn(x: string, y: string, direction: string) -> +Integer"},"__createInput":{"!doc":"<p>Creates an input an input node for a specific row</p>","!type":"fn(row: +HTMLTableRowElement, type: string, nodeName: string)"},"__createInputs":{"!doc":"<p>Creates input nodes for the row selection</p>","!type":"fn(type: string) -> +qx.ui.website.Table"},"__defaultColumnFilter":{"!doc":"<p>Default column filter function</p>","!type":"fn(data: +Map) -> bool"},"__defaultColumnSort":{"!doc":"<p>Default sorting processing</p>","!type":"fn(data: +Map)"},"__deleteRows":{"!doc":"<p>Removes row from the <span class=\"caps\">DOM</span> starting from the specified index</p>","!type":"fn(rowCount: +Integer) -> +qx.ui.website.Table"},"__detectClickedCell":{"!doc":"<p>Click callbak</p>","!type":"fn(e: +Event) -> +qx.ui.website.Table"},"__filterDom":{"!doc":"<p>Filters the rendered table cells</p>","!type":"fn(keyword: string, columnName?: string) -> +qx.ui.website.Table"},"__getCellValue":{"!doc":"<p>Returns the value of the cell that will be used for sorting</p>","!type":"fn(cell: +qxWeb) -> string"},"__getColumName":{"!doc":"<p>Gets the name of the column containing the given cell</p>","!type":"fn(headerCell: +HTMLTableCellElement) -> string"},"__getColumnIndex":{"!doc":"<p>Gets the index of the column with the specified name</p>","!type":"fn(columnName: string) -> +Integer"},"__getColumnMetaData":{"!doc":"<p>Initializes columns metadata</p>","!type":"fn(model: +Array) -> +qx.ui.website.Table"},"__getDataForColumn":{"!doc":"<p>Gets the metadata of the column width the specified name</p>","!type":"fn(columName: string) -> +Map"},"__getDataRows":{"!doc":"<p>Gets the table&#8217;s data rows from the <span class=\"caps\">DOM</span></p>","!type":"fn() -> +Array"},"__getHeaderRow":{"!doc":"<p>Returns the row containing the cells with the column names</p>","!type":"fn() -> +HTMLTableRowElement"},"__getRoot":{"!doc":"<p>Gets the Root element contening the data rows</p>","!type":"fn() -> +HTMLElement"},"__isCellRendered":{"!doc":"<p>Checks if the cell with the given row and column indexes is rendered</p>","!type":"fn(rowIndex: +Integer, colIndex: +Integer) -> bool"},"__isRowRendered":{"!doc":"<p>Checks if the row with the given index is rendered</p>","!type":"fn(index: +Integer) -> bool"},"__processSelection":{"!doc":"<p>Handles clicks that happen on the selection inputs</p>","!type":"fn(cell: +qxWeb) -> +qx.ui.website.Table"},"__processSelectionInputs":{"!doc":"<p>Renders or removes the selection inputs according to the specified widget selection mode</p>","!type":"fn(rowSelection: string) -> +qx.ui.website.Table"},"__registerEvents":{"!doc":"<p>registers global events</p>","!type":"fn() -> +qx.ui.website.Table"},"__selectionRendered":{"!doc":"<p>Checks if the selection inputs are already rendered</p>","!type":"fn() -> bool"},"__setSortingClass":{"!doc":"<p>Adds a class to the head and footer of the current sorted column</p>","!type":"fn(columnName: string, dir: string)"},"__sort":{"!doc":"<p>Sorts the table rows for the given row and direction</p>","!type":"fn(columnName: string, direction: string) -> +Array"},"__sortDOM":{"!doc":"<p>Sorts the rows of the table widget</p>","!type":"fn(dataRows: +Array) -> +qx.ui.website.Table"},"filter":{"!doc":"<p>Filters rows or columns according to the given parameters</p>","!type":"fn(keyword: string, columnName?: string) -> +qx.ui.website.Table"},"getCell":{"!doc":"<p>Returns the cell at the given position for the first widget in the collection</p>","!type":"fn(row: +Integer, col: +Integer) -> +qxWeb"},"getColumnFilter":{"!doc":"<p>Returns the filter function set on a specific column</p>","!type":"fn(columnName: string) -> fn()"},"getColumnType":{"!doc":"<p>Returns the type of the specified column</p>","!type":"fn(columnName: string) -> string"},"getCompareFunction":{"!doc":"<p>Returns the comparison function for the given type</p>","!type":"fn(type: string) -> fn()"},"getRowFilter":{"!doc":"<p>Returns the filter function set on a specific column</p>","!type":"fn() -> fn()"},"getSortingData":{"!doc":"<p>Get the current column sorting information for the first widget in the collection</p>","!type":"fn() -> +Map"},"init":{"!type":"fn()"},"render":{"!type":"fn()"},"resetFilter":{"!doc":"<p>Resets the filter apllied on a specific column</p>","!type":"fn(columnName?: string) -> +qx.ui.website.Table"},"setColumnFilter":{"!doc":"<p>Set the filter function to use to filter a specific column</p>","!type":"fn(columnName: string, func: fn())"},"setColumnType":{"!doc":"<p>Set the column types for the table widgets in the collection</p>","!type":"fn(columnName: string, type: string) -> +qx.ui.website.Table"},"setCompareFunction":{"!doc":"<p>Defines the comparison function to use to sort columns of the given type</p>","!type":"fn(type: string, compareFunc: fn()) -> +qx.ui.website.Table"},"setFilterFunction":{"!doc":"<p>Set the function that will be used to process the column filtering</p>","!type":"fn(func: fn()) -> +qx.ui.website.Table"},"setItemTemplate":{"!doc":"<p>Set the mustache template of the specified column for the widgets\nin the collection</p>","!type":"fn(columnName: string, template: string) -> +qx.ui.website.Table"},"setItemTemplates":{"!doc":"<p>Sets the mustache template for all the collumns of the widgets\nin the collection</p>","!type":"fn(template: string) -> +qx.ui.website.Table"},"setModel":{"!doc":"<p>Sets the given model to the widgets in the collection</p>","!type":"fn(model: +Array) -> +qx.ui.website.Table"},"setRowFilter":{"!doc":"<p>Set the filter function to use to filter the table rows</p>","!type":"fn(func: fn())"},"setSortingFunction":{"!doc":"<p>Set the function that control the sorting process</p>","!type":"fn(func: fn()) -> +qx.ui.website.Table"},"sort":{"!doc":"<p>Sort the column with the given name according to the specified direction</p>","!type":"fn(columnName: string, dir: string) -> +qx.ui.website.Table"},"unsetCompareFunction":{"!doc":"<p>Unset the compare function for the given type</p>","!type":"fn(type: string) -> +qx.ui.website.Table"},"unsetFilterFunction":{"!doc":"<p>Unset the filter function</p>","!type":"fn() -> +qx.ui.website.Table"},"unsetSortingFunction":{"!doc":"<p>Unset the function that control the sorting process</p>","!type":"fn() -> +qx.ui.website.Table"}}},"Tabs":{"!proto":"qx.ui.website.Widget","!doc":"<p>A row of buttons used to switch between connected pages. The buttons can be\nright- or left-aligned, or they can be justified, i.e. they will be stretched\nto fill the available width.</p>\n\n<h2>Markup</h2>\nEach Tabs widget contains an unordered list element (<code>ul</code>), which\nwill be created if not already present.\nThe tabs are list items (<code>li</code>). Each tab can contain\na button with a <code>tabsPage</code> data attribute where the value is a\nCSS selector string identifying the corresponding page. Headers and pages\nwill not be created automatically. They can be predefined in the DOM before\nthe <code>q().tabs()</code> factory method is called, or added programmatically.\n\n<h2>CSS Classes</h2>\n<table>\n  <thead>\n    <tr>\n      <td>Class Name</td>\n      <td>Applied to</td>\n      <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>qx-tabs</code></td>\n      <td>Container element</td>\n      <td>Identifies the Tabs widget</td>\n    </tr>\n    <tr>\n      <td><code>qx-flex-justify-end</code></td>\n      <td>Tab container (<code>ul</code>)</td>\n      <td>Browsers with flexbox support only: Styles the tab buttons when they are right-aligned</td>\n    </tr>\n    <tr>\n      <td><code>qx-tabs-justify</code></td>\n      <td>Container element</td>\n      <td>Internet Explorer < 10 only: Styles the tab buttons when they are stretched to fill out the available width</td>\n    </tr>\n    <tr>\n      <td><code>qx-tabs-right</code></td>\n      <td>Container element</td>\n      <td>Internet Explorer < 10 only: Styles the tab buttons when they are right-aligned</td>\n    </tr>\n    <tr>\n      <td><code>qx-tabs-button</code></td>\n      <td>Tab (<code>li</code>)</td>\n      <td>Identifies and styles the tabs</td>\n    </tr>\n    <tr>\n      <td><code>qx-tabs-button-active</code></td>\n      <td>Tab (<code>li</code>)</td>\n      <td>Identifies and styles the currently selected tab. Applied in addition to <code>qx-tabs-button</code></td>\n    </tr>\n    <tr>\n      <td><code>qx-flex-1</code></td>\n      <td>Tab (<code>li</code>)</td>\n      <td>Browsers with flexbox support only: Styles the tab buttons when they are stretched to fill out the available width</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"widget-markup\">Generated DOM Structure</h2>","tabs":{"!doc":"<p>Factory method which converts the current collection into a collection of\ntabs widgets.</p>","!type":"fn(align?: string, preselected?: +Integer) -> +qx.ui.website.Tabs"},"!type":"fn()","prototype":{"_applyAlignment":{"!doc":"<p>Apply the <span class=\"caps\">CSS</span> classes for the alignment</p>","!type":"fn(tabs: +qx.ui.website.Tabs)"},"_getPage":{"!doc":"<p>Returns the tab page associated with the given button</p>","!type":"fn(button: +qxWeb) -> +qxWeb"},"_onKeyDown":{"!doc":"<p>Allows tab selection using the left and right arrow keys</p>","!type":"fn(e: +Event)"},"_onTap":{"!doc":"<p>Initiates the page switch when a button was clicked/tapped</p>","!type":"fn(e: +Event)"},"_showPage":{"!doc":"<p>Initiates the page switch if a tab button is selected</p>","!type":"fn(newButton: +qxWeb, oldButton: +qxWeb)"},"_switchPages":{"!doc":"<p>Executes a page switch</p>","!type":"fn(oldPage: +qxWeb, newPage: +qxWeb)"},"addButton":{"!doc":"<p>Adds a new tab button</p>","!type":"fn(label: string, pageSelector: string) -> +qx.ui.website.Tabs"},"dispose":{"!type":"fn()"},"init":{"!type":"fn()"},"render":{"!type":"fn()"},"select":{"!doc":"<p>Selects a tab button</p>","!type":"fn(index: +Integer) -> +qx.ui.website.Tabs"}}},"Widget":{"!proto":"qxWeb","!doc":"<p>This is the base collection for all widgets and offers a good foundation\nfor all widgets including enabled state handling, config and template storage\nand event handling to name a few key features.</p>","$offFirstCollection":{"!doc":"<p>Removes a listener added with {@link #$onFirstCollection}.</p>","!type":"fn(type: string, listener: fn(), ctx?: Object, useCapture?: bool) -> +qxWeb"},"$onFirstCollection":{"!doc":"<p>Special &#8216;on&#8217; method for qx.Website widgets that prevents memory\nleaks and duplicate listeners.</p>\n\n<p>During the lifetime of a widget, multiple collection instances can\nbe created for the same <span class=\"caps\">DOM</span> element. In the initialization of each\nof these widget collections, listeners can be attached using this method\nto prevent memory leaks and duplicate listeners.</p>\n\n<p>This is done by storing a reference to the collection the first time a\nlistener is attached. For subsequent listeners, this stored collection\nis used as the context. If the context object already has the new listener,\nit is not attached again. This means that new collections don&#8217;t create\nreferences to <span class=\"caps\">DOM</span> elements and don&#8217;t need to be disposed manually.</p>","!type":"fn(type: string, listener: fn(), ctx?: Object, useCapture?: bool) -> +qxWeb"},"create":{"!doc":"<p>Creates a new collection from the given argument. This can either be an\n<span class=\"caps\">HTML</span> string, a single <span class=\"caps\">DOM</span> element or an array of elements</p>","!type":"fn(html: string) -> +qxWeb"},"initWidgets":{"!doc":"<p>Fetches elements with a data attribute named <code>data-qx-class</code>\ncontaining the class name of the desired widget and initializes them as\nwidgets.</p>","!type":"fn(selector?: string)"},"widget":{"!doc":"<p>Factory method for the widget which converts a standard\ncollection into a collection of widgets.</p>","!type":"fn() -> +qx.ui.website.Widget"},"!type":"fn()","prototype":{"_getData":{"!doc":"<p>Internal helper for querying the values for templates and configs. In the\ncase of a config value, the method also reads the corresponding data-attribute\nfor possible values.</p>","!type":"fn(type: string, name: string) -> Object"},"_setData":{"!doc":"<p>Helper to set either config or template values.</p>","!type":"fn(type: string, name: string, data: Object) -> +qx.ui.website.Widget"},"dispose":{"!doc":"<p>Dispose the widget, making sure all objects are ready for\ngarbage collection. This mainly means deleting connections to the\n<span class=\"caps\">DOM</span> including event listeners.</p>","!type":"fn() -> +qxWeb"},"getConfig":{"!doc":"<p>Returns the config setting currently in use for the given widget.\nThis can either be the user set config value, the value set in\nthe markup via data-attribute, the widgets default config value or\n<code>undefined</code>, if non is set.</p>","!type":"fn(name: string) -> Object"},"getCssPrefix":{"!doc":"<p>Return the proper <span class=\"caps\">CSS</span> prefix for the current widget. This prefix is\nbased on the current classname.</p>","!type":"fn() -> string"},"getEnabled":{"!doc":"<p>Returns weather the first widget in the collection is enabled or not.</p>","!type":"fn() -> bool"},"getTemplate":{"!doc":"<p>Returns the used template. This includes custom templates\nas the default templates defined by the widgets.</p>","!type":"fn(name: string) -> string"},"init":{"!doc":"<p>Responsible for initializing of the widget. This checks for the data attribute\nnamed <code>data-qx-class</code> and initializes the widget if necessary.</p>","!type":"fn() -> bool"},"render":{"!doc":"<p>The render method is responsible for applying changed config\nand template settings. This method is usually overridden and specified\nby the subclassing widgets like the slider or tabs.</p>","!type":"fn() -> +qx.ui.website.Widget"},"setConfig":{"!doc":"<p>Setter for the widget-specific config. The available config settings can\nbe found in the documentation of the corresponding widget. Each config\nsetting can be set in the markup as data-attribute, prefixed with\n<code>data-qx</code> e.g. <code>data-qx-length=&#8220;5&#8221;</code>.</p>\n\n<p>Please keep in mind to call {@link #render} after you change any\ntemplate or config setting.</p>","!type":"fn(name: string, config: Object) -> +qx.ui.website.Widget"},"setEnabled":{"!doc":"<p>Changes the enabled state of the current collection, which means all\nwidgets in the collection. This sets the disabled attribute on the\nelements and all its children.</p>","!type":"fn(value: bool) -> +qx.ui.website.Widget"},"setTemplate":{"!doc":"<p>Setter for the widget-specific templates. The available templates can\nbe found in the documentation of the corresponding widget. The templates\nwill be rendered using\n<a href=\"https://github.com/janl/mustache.js/\">mustache.js</a>.</p>\n\n<p>Please keep in mind to call {@link #render} after you change any\ntemplate or config setting.</p>","!type":"fn(name: string, template: string) -> +qx.ui.website.Widget"}}}},"window":{"Desktop":{"!proto":"qx.ui.core.Widget","!doc":"<p>The desktop is a widget, which can act as container for windows. It can be\nused to define a clipping region for internal windows e.g. to create\nan <span class=\"caps\">MDI</span> like application.</p>","!type":"fn()"},"IDesktop":{"!doc":"<p>All parent widgets of windows must implement this interface.</p>","prototype":{"blockContent":{"!doc":"<p>Block direct child widgets with a zIndex below <code>zIndex</code></p>","!type":"fn(zIndex: +Integer)"},"getWindows":{"!doc":"<p>Get a list of all windows added to the desktop (including hidden windows)</p>","!type":"fn() -> +qx.ui.window.Window"},"isBlocked":{"!doc":"<p>Whether the widget is currently blocked</p>","!type":"fn() -> bool"},"setWindowManager":{"!doc":"<p>Sets the desktop&#8217;s window manager</p>","!type":"fn(manager: +qx.ui.window.IWindowManager)"},"supportsMaximize":{"!doc":"<p>Whether the configured layout supports a maximized window\ne.g. is a Canvas.</p>","!type":"fn() -> bool"},"unblock":{"!doc":"<p>Remove the blocker.</p>","!type":"fn()"}}},"IWindowManager":{"!doc":"<p>Required interface for all window manager.</p>\n\n<p>Window manager handle the z-order and modality blocking of windows managed\nby the connected desktop {@link IDesktop}.</p>","prototype":{"bringToFront":{"!doc":"<p>Ask the manager to bring a window to the front.</p>","!type":"fn(win: +Window)"},"changeActiveWindow":{"!doc":"<p>Inform the window manager about a new active window</p>","!type":"fn(active: +Window, oldActive: +Window)"},"sendToBack":{"!doc":"<p>Ask the manager to send a window to the back.</p>","!type":"fn(win: +Window)"},"setDesktop":{"!doc":"<p>Connect the window manager to the window desktop</p>","!type":"fn(desktop: +IDesktop)"},"updateStack":{"!doc":"<p>Update the window order and modality blocker</p>","!type":"fn()"}}},"Manager":{"!proto":"qx.core.Object","!doc":"<p>The default window manager implementation</p>","prototype":{"bringToFront":{"!type":"fn(win: +undefined)"},"changeActiveWindow":{"!type":"fn(active: +undefined, oldActive: +undefined)"},"getDesktop":{"!doc":"<p>Returns the connected desktop</p>","!type":"fn() -> +qx.ui.window.IDesktop"},"sendToBack":{"!type":"fn(win: +undefined)"},"setDesktop":{"!type":"fn(desktop: +undefined)"},"syncWidget":{"!doc":"<p>This method is called during the flush of the\n{@link qx.ui.core.queue.Widget widget queue}.</p>","!type":"fn()"},"updateStack":{"!type":"fn()"}}},"MDesktop":{"!doc":"<p>This mixin implements the key methods of the {@link qx.ui.window.IDesktop}.</p>","prototype":{"_addWindow":{"!doc":"<p>Handles the case, when a window is added to the desktop.</p>","!type":"fn(win: +qx.ui.window.Window)"},"_afterAddChild":{"!doc":"<p>Overrides the method {@link qx.ui.core.Widget#_afterAddChild}</p>","!type":"fn(win: +qx.ui.core.Widget)"},"_afterRemoveChild":{"!doc":"<p>Overrides the method {@link qx.ui.core.Widget#_afterRemoveChild}</p>","!type":"fn(win: +qx.ui.core.Widget)"},"_applyActiveWindow":{"!doc":"<p>Applies changes of the property value of the property <code>activeWindow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activeWindow}.</p>","!type":"fn(value: +qx.ui.window.Window, old: +qx.ui.window.Window)"},"_onChangeActive":{"!doc":"<p>Event handler. Called if one of the managed windows changes its active\nstate.</p>","!type":"fn(e: +qx.event.type.Event)"},"_onChangeModal":{"!doc":"<p>Event handler. Called if one of the managed windows changes its modality</p>","!type":"fn(e: +qx.event.type.Event)"},"_onChangeVisibility":{"!doc":"<p>Event handler. Called if one of the managed windows changes its visibility\nstate.</p>","!type":"fn()"},"_removeWindow":{"!doc":"<p>Handles the case, when a window is removed from the desktop.</p>","!type":"fn(win: +qx.ui.window.Window)"},"getActiveWindow":{"!doc":"<p>Returns the (computed) value of the property <code>activeWindow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activeWindow}.</p>","!type":"fn() -> Object"},"getWindowManager":{"!doc":"<p>Get the desktop&#8217;s window manager. Each desktop must have a window manager.\nIf none is configured the default window manager {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS}\nis used.</p>","!type":"fn() -> +qx.ui.window.IWindowManager"},"getWindows":{"!doc":"<p>Get a list of all windows added to the desktop (including hidden windows)</p>","!type":"fn() -> +qx.ui.window.Window"},"initActiveWindow":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>activeWindow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #activeWindow}.</p>","!type":"fn(value: Object) -> Object"},"resetActiveWindow":{"!doc":"<p>Resets the user value of the property <code>activeWindow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #activeWindow}.</p>","!type":"fn()"},"setActiveWindow":{"!doc":"<p>Sets the user value of the property <code>activeWindow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #activeWindow}.</p>","!type":"fn(value: Object) -> Object"},"setWindowManager":{"!doc":"<p>Sets the desktop&#8217;s window manager</p>","!type":"fn(manager: +qx.ui.window.IWindowManager)"},"supportsMaximize":{"!doc":"<p>Whether the configured layout supports a maximized window\ne.g. is a Canvas.</p>","!type":"fn() -> bool"}}},"Window":{"!proto":"qx.ui.core.Widget","!doc":"<p>A window widget</p>\n\n<p>More information can be found in the package description {@link qx.ui.window}.</p>","!type":"fn()","prototype":{"_applyActive":{"!doc":"<p>Applies changes of the property value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn(value: bool, old: bool)"},"_applyCaptionBarChange":{"!doc":"<p>Applies changes of the property value of the properties <code>allowClose</code>, <code>allowMaximize</code>, <code>allowMinimize</code>, <code>caption</code>, <code>icon</code>, <code>showClose</code>, <code>showMaximize</code> and <code>showMinimize</code>.</p>\n\n<p>For further details take a look at the property definitions: {@link #allowClose}, {@link #allowMaximize}, {@link #allowMinimize}, {@link #caption}, {@link #icon}, {@link #showClose}, {@link #showMaximize} and {@link #showMinimize}.</p>","!type":"fn(value: Object, old: Object)"},"_applyFocusable":{"!doc":"<p>Applies changes of the property value of the property <code>focusable</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focusable}.</p>","!type":"fn(value: bool, old: bool)"},"_applyModal":{"!doc":"<p>Applies changes of the property value of the property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn(value: bool, old: bool)"},"_applyShowStatusbar":{"!doc":"<p>Applies changes of the property value of the property <code>showStatusbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn(value: bool, old: bool)"},"_applyStatus":{"!doc":"<p>Applies changes of the property value of the property <code>status</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #status}.</p>","!type":"fn(value: string, old: string)"},"_createChildControlImpl":{"!type":"fn(id: +undefined, hash: +undefined)"},"_getContentPaddingTarget":{"!doc":"<p>Returns the element, to which the content padding should be applied.</p>","!type":"fn() -> +qx.ui.core.Widget"},"_onCaptionPointerDblTap":{"!doc":"<p>Maximizes the window or restores it if it is already\nmaximized.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onCloseButtonTap":{"!doc":"<p>Closes the window, removes all states from the close button and\nstops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onMaximizeButtonTap":{"!doc":"<p>Maximizes the window, removes all states from the maximize button and\nstops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onMinimizeButtonTap":{"!doc":"<p>Minimizes the window, removes all states from the minimize button and\nstops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onRestoreButtonTap":{"!doc":"<p>Restores the window, removes all states from the restore button and\nstops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_onWindowEventStop":{"!doc":"<p>Stops every event</p>","!type":"fn(e: +qx.event.type.Event)"},"_onWindowFocusOut":{"!doc":"<p>Listens to the &#8220;focusout&#8221; event to deactivate the window (if the\ncurrently focused widget is not a child of the window)</p>","!type":"fn(e: +qx.event.type.Focus)"},"_onWindowPointerDown":{"!doc":"<p>Focuses the window instance.</p>","!type":"fn(e: +qx.event.type.Pointer)"},"_updateCaptionBar":{"!doc":"<p>Updates the status and the visibility of each element of the captionbar.</p>","!type":"fn()"},"center":{"!doc":"<p>Centers the window to the parent.</p>\n\n<p>This call works with the size of the parent widget and the size of\nthe window as calculated in the last layout flush. It is best to call\nthis method just after rendering the window in the &#8220;resize&#8221; event:</p>\n\n<pre class=\"javascript\">\n  win.addListenerOnce(\"resize\", this.center, this);\n</pre>","!type":"fn()"},"close":{"!doc":"<p>Closes the current window instance.\nTechnically calls the {@link qx.ui.core.Widget#hide} method.</p>","!type":"fn()"},"getActive":{"!doc":"<p>Returns the (computed) value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn() -> Object"},"getAllowClose":{"!doc":"<p>Returns the (computed) value of the property <code>allowClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowClose}.</p>","!type":"fn() -> Object"},"getAllowMaximize":{"!doc":"<p>Returns the (computed) value of the property <code>allowMaximize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMaximize}.</p>","!type":"fn() -> Object"},"getAllowMinimize":{"!doc":"<p>Returns the (computed) value of the property <code>allowMinimize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMinimize}.</p>","!type":"fn() -> Object"},"getAlwaysOnTop":{"!doc":"<p>Returns the (computed) value of the property <code>alwaysOnTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysOnTop}.</p>","!type":"fn() -> Object"},"getCaption":{"!doc":"<p>Returns the (computed) value of the property <code>caption</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #caption}.</p>","!type":"fn() -> Object"},"getChildrenContainer":{"!doc":"<p>The children container needed by the {@link qx.ui.core.MRemoteChildrenHandling}\nmixin</p>","!type":"fn() -> +qx.ui.container.Composite"},"getIcon":{"!doc":"<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn() -> Object"},"getModal":{"!doc":"<p>Returns the (computed) value of the property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn() -> Object"},"getMode":{"!doc":"<p>Return the window mode as <code>String</code>:\n<code>&#8220;maximized&#8221;</code>, <code>&#8220;normal&#8221;</code> or <code>&#8220;minimized&#8221;</code>.</p>","!type":"fn() -> string"},"getShowClose":{"!doc":"<p>Returns the (computed) value of the property <code>showClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showClose}.</p>","!type":"fn() -> Object"},"getShowMaximize":{"!doc":"<p>Returns the (computed) value of the property <code>showMaximize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMaximize}.</p>","!type":"fn() -> Object"},"getShowMinimize":{"!doc":"<p>Returns the (computed) value of the property <code>showMinimize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMinimize}.</p>","!type":"fn() -> Object"},"getShowStatusbar":{"!doc":"<p>Returns the (computed) value of the property <code>showStatusbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn() -> Object"},"getStatus":{"!doc":"<p>Returns the (computed) value of the property <code>status</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #status}.</p>","!type":"fn() -> Object"},"initActive":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>active</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn(value: Object) -> Object"},"initAllowClose":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowClose</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowClose}.</p>","!type":"fn(value: Object) -> Object"},"initAllowMaximize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowMaximize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMaximize}.</p>","!type":"fn(value: Object) -> Object"},"initAllowMinimize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>allowMinimize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMinimize}.</p>","!type":"fn(value: Object) -> Object"},"initAlwaysOnTop":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>alwaysOnTop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysOnTop}.</p>","!type":"fn(value: Object) -> Object"},"initCaption":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>caption</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #caption}.</p>","!type":"fn(value: Object) -> Object"},"initIcon":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"initModal":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>modal</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn(value: Object) -> Object"},"initShowClose":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showClose</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showClose}.</p>","!type":"fn(value: Object) -> Object"},"initShowMaximize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showMaximize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showMaximize}.</p>","!type":"fn(value: Object) -> Object"},"initShowMinimize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showMinimize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showMinimize}.</p>","!type":"fn(value: Object) -> Object"},"initShowStatusbar":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>showStatusbar</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn(value: Object) -> Object"},"initStatus":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>status</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #status}.</p>","!type":"fn(value: Object) -> Object"},"isActive":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>active</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn() -> bool"},"isAllowClose":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowClose</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowClose}.</p>","!type":"fn() -> bool"},"isAllowMaximize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowMaximize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMaximize}.</p>","!type":"fn() -> bool"},"isAllowMinimize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>allowMinimize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMinimize}.</p>","!type":"fn() -> bool"},"isAlwaysOnTop":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>alwaysOnTop</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysOnTop}.</p>","!type":"fn() -> bool"},"isMaximized":{"!doc":"<p>Return <code>true</code> if the window is in maximized state,\nbut note that the window in maximized state could also be invisible, this\nis equivalent to minimized. So use the {@link qx.ui.window.Window#getMode}\nto get the window mode.</p>","!type":"fn() -> bool"},"isModal":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>modal</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn() -> bool"},"isShowClose":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showClose</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showClose}.</p>","!type":"fn() -> bool"},"isShowMaximize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showMaximize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMaximize}.</p>","!type":"fn() -> bool"},"isShowMinimize":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showMinimize</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMinimize}.</p>","!type":"fn() -> bool"},"isShowStatusbar":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>showStatusbar</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn() -> bool"},"maximize":{"!doc":"<p>Maximize the window.</p>","!type":"fn()"},"minimize":{"!doc":"<p>Minimized the window.</p>","!type":"fn()"},"moveTo":{"!doc":"<p>Set the window&#8217;s position relative to its parent</p>","!type":"fn(left: +Integer, top: +Integer)"},"open":{"!doc":"<p>Opens the window.</p>","!type":"fn()"},"resetActive":{"!doc":"<p>Resets the user value of the property <code>active</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn()"},"resetAllowClose":{"!doc":"<p>Resets the user value of the property <code>allowClose</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowClose}.</p>","!type":"fn()"},"resetAllowMaximize":{"!doc":"<p>Resets the user value of the property <code>allowMaximize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMaximize}.</p>","!type":"fn()"},"resetAllowMinimize":{"!doc":"<p>Resets the user value of the property <code>allowMinimize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMinimize}.</p>","!type":"fn()"},"resetAlwaysOnTop":{"!doc":"<p>Resets the user value of the property <code>alwaysOnTop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysOnTop}.</p>","!type":"fn()"},"resetCaption":{"!doc":"<p>Resets the user value of the property <code>caption</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #caption}.</p>","!type":"fn()"},"resetIcon":{"!doc":"<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn()"},"resetModal":{"!doc":"<p>Resets the user value of the property <code>modal</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn()"},"resetShowClose":{"!doc":"<p>Resets the user value of the property <code>showClose</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showClose}.</p>","!type":"fn()"},"resetShowMaximize":{"!doc":"<p>Resets the user value of the property <code>showMaximize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showMaximize}.</p>","!type":"fn()"},"resetShowMinimize":{"!doc":"<p>Resets the user value of the property <code>showMinimize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showMinimize}.</p>","!type":"fn()"},"resetShowStatusbar":{"!doc":"<p>Resets the user value of the property <code>showStatusbar</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn()"},"resetStatus":{"!doc":"<p>Resets the user value of the property <code>status</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #status}.</p>","!type":"fn()"},"restore":{"!doc":"<p>Restore the window to <code>&#8220;normal&#8221;</code>, if it is\n<code>&#8220;maximized&#8221;</code> or <code>&#8220;minimized&#8221;</code>.</p>","!type":"fn()"},"setActive":{"!doc":"<p>Sets the user value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn(value: Object) -> Object"},"setAllowClose":{"!doc":"<p>Sets the user value of the property <code>allowClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowClose}.</p>","!type":"fn(value: Object) -> Object"},"setAllowMaximize":{"!doc":"<p>Sets the user value of the property <code>allowMaximize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMaximize}.</p>","!type":"fn(value: Object) -> Object"},"setAllowMinimize":{"!doc":"<p>Sets the user value of the property <code>allowMinimize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMinimize}.</p>","!type":"fn(value: Object) -> Object"},"setAlwaysOnTop":{"!doc":"<p>Sets the user value of the property <code>alwaysOnTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysOnTop}.</p>","!type":"fn(value: Object) -> Object"},"setCaption":{"!doc":"<p>Sets the user value of the property <code>caption</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #caption}.</p>","!type":"fn(value: Object) -> Object"},"setIcon":{"!doc":"<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>","!type":"fn(value: Object) -> Object"},"setLayoutParent":{"!type":"fn(parent: +undefined)"},"setModal":{"!doc":"<p>Sets the user value of the property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn(value: Object) -> Object"},"setShowClose":{"!doc":"<p>Sets the user value of the property <code>showClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showClose}.</p>","!type":"fn(value: Object) -> Object"},"setShowMaximize":{"!doc":"<p>Sets the user value of the property <code>showMaximize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMaximize}.</p>","!type":"fn(value: Object) -> Object"},"setShowMinimize":{"!doc":"<p>Sets the user value of the property <code>showMinimize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMinimize}.</p>","!type":"fn(value: Object) -> Object"},"setShowStatusbar":{"!doc":"<p>Sets the user value of the property <code>showStatusbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn(value: Object) -> Object"},"setStatus":{"!doc":"<p>Sets the user value of the property <code>status</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #status}.</p>","!type":"fn(value: Object) -> Object"},"toggleActive":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>","!type":"fn() -> bool"},"toggleAllowClose":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowClose}.</p>","!type":"fn() -> bool"},"toggleAllowMaximize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowMaximize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMaximize}.</p>","!type":"fn() -> bool"},"toggleAllowMinimize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>allowMinimize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #allowMinimize}.</p>","!type":"fn() -> bool"},"toggleAlwaysOnTop":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>alwaysOnTop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysOnTop}.</p>","!type":"fn() -> bool"},"toggleModal":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>modal</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #modal}.</p>","!type":"fn() -> bool"},"toggleShowClose":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showClose</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showClose}.</p>","!type":"fn() -> bool"},"toggleShowMaximize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showMaximize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMaximize}.</p>","!type":"fn() -> bool"},"toggleShowMinimize":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showMinimize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showMinimize}.</p>","!type":"fn() -> bool"},"toggleShowStatusbar":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>showStatusbar</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #showStatusbar}.</p>","!type":"fn() -> bool"}}}}},"util":{"AliasManager":{"!proto":"qx.util.ValueManager","!doc":"<p>This singleton manages global resource aliases.</p>\n\n<p>The AliasManager supports simple prefix replacement on strings. There are\nsome pre-defined aliases, and you can register your own with {@link #add}.\nThe AliasManager is automatically invoked in various situations, e.g. when\nresolving the icon image for a button, so it is common to register aliases for\n<a href=\"http://manual.qooxdoo.org/4.1/pages/desktop/ui_resources.html\">resource id&#8217;s</a>.\nYou can of course call the AliasManager&#8217;s {@link #resolve}\nexplicitly to get an alias resolution in any situation, but keep that\nautomatic invocation of the AliasManager in mind when defining new aliases as\nthey will be applied globally in many classes, not only your own.</p>\n\n<p>Examples:\n<ul>\n <li> <code>foo</code> -> <code>bar/16pt/baz</code>  (resolves e.g. <i>&#8220;foo/a/b/c.png&#8221;</i> to\n   <i>&#8220;bar/16pt/baz/a/b/c.png&#8221;</i>)\n <li> <code>imgserver</code> -> <code>http&#058;&#047;&#047;imgs03.myserver.com/my/app/</code>\n   (resolves e.g. <i>&#8220;imgserver/a/b/c.png&#8221;</i> to\n   <i>&#8220;http&#058;&#047;&#047;imgs03.myserver.com/my/app/a/b/c.png&#8221;</i>)\n</ul></p>\n\n<p>For resources, only aliases that resolve to proper resource id&#8217;s can be <i>managed</i>\nresources, and will be considered <i>unmanaged</i> resources otherwise.</p>","!type":"fn()","prototype":{"_preprocess":{"!doc":"<p>pre-process incoming dynamic value</p>","!type":"fn(value: string) -> string"},"add":{"!doc":"<p>Define an alias to a resource path</p>","!type":"fn(alias: string, base: string)"},"getAliases":{"!doc":"<p>Get registered aliases</p>","!type":"fn() -> +Map"},"remove":{"!doc":"<p>Remove a previously defined alias</p>","!type":"fn(alias: string)"},"resolve":{"!doc":"<p>Resolves a given path</p>","!type":"fn(path: string) -> string"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.util.AliasManager"}},"Animation":{"!doc":"<p>Contains property maps for the usage with qx.bom.element.Animation {@link qx.bom.element.Animation}.\nThese animations can be used for page transitions for example.</p>"},"Base64":{"!doc":"<p>Base64 encoder</p>","__getUTF8StringFromBytes":{"!doc":"<p>Returns a String from an array of bytes, with special treatment\nif the bytes are <span class=\"caps\">UTF</span>-8 bytes (<a href=\"http://en.wikipedia.org/wiki/UTF8\">http://en.wikipedia.org/wiki/UTF8</a>)</p>","!type":"fn(bytes: +Array, is8bit: bool) -> string"},"__translateUTF8":{"!doc":"<p>Adds to output array the <span class=\"caps\">UTF</span>-8 bytes needed to represent the character (<a href=\"http://en.wikipedia.org/wiki/UTF8\">http://en.wikipedia.org/wiki/UTF8</a>)</p>","!type":"fn(characterCode: +Integer, output: +Array, is8bit: bool)"},"decode":{"!doc":"<p>Decode a base64 string (<a href=\"http://en.wikipedia.org/wiki/Base64\">http://en.wikipedia.org/wiki/Base64</a>).</p>","!type":"fn(input: string, is8bit?: bool) -> string"},"encode":{"!doc":"<p>Encode a string using base64 encoding (<a href=\"http://en.wikipedia.org/wiki/Base64\">http://en.wikipedia.org/wiki/Base64</a>).</p>","!type":"fn(input: string, is8bit?: bool) -> string"}},"ColorUtil":{"!doc":"<p>Methods to convert colors between different color spaces.</p>","__hex3StringToRgb":{"!doc":"<p>Converts a regexp object match of a hex3 string to an <span class=\"caps\">RGB</span> array.</p>","!type":"fn() -> +Array"},"__hex6StringToRgb":{"!doc":"<p>Converts a regexp object match of a hex6 string to an <span class=\"caps\">RGB</span> array.</p>","!type":"fn() -> +Array"},"__rgbaStringToRgb":{"!doc":"<p>Converts a regexp object match of a rgba string to an <span class=\"caps\">RGB</span> array.</p>","!type":"fn() -> +Array"},"__rgbStringToRgb":{"!doc":"<p>Converts a regexp object match of a rgb string to an <span class=\"caps\">RGB</span> array.</p>","!type":"fn() -> +Array"},"cssStringToRgb":{"!doc":"<p>Try to convert an incoming string to an <span class=\"caps\">RGB</span> array.\nSupport named colors, <span class=\"caps\">RGB</span> strings, hex3 and hex6 values.</p>","!type":"fn(str: string) -> +Array"},"hex3StringToHex6String":{"!doc":"<p>Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.</p>","!type":"fn(value: string) -> string"},"hex3StringToRgb":{"!doc":"<p>Converts a hex3 string to an <span class=\"caps\">RGB</span> array</p>","!type":"fn(value: string) -> +Array"},"hex6StringToRgb":{"!doc":"<p>Converts a hex6 string to an <span class=\"caps\">RGB</span> array</p>","!type":"fn(value: string) -> +Array"},"hexStringToRgb":{"!doc":"<p>Converts a hex string to an <span class=\"caps\">RGB</span> array</p>","!type":"fn(value: string) -> +Array"},"hsbToRgb":{"!doc":"<p>Convert <span class=\"caps\">HSB</span> colors to <span class=\"caps\">RGB</span></p>","!type":"fn(hsb: number) -> +Integer"},"isCssString":{"!doc":"<p>Detects if a string is a valid <span class=\"caps\">CSS</span> color string</p>","!type":"fn(str: string) -> bool"},"isHex3String":{"!doc":"<p>Detects if a string is a valid hex3 string</p>","!type":"fn(str: string) -> bool"},"isHex6String":{"!doc":"<p>Detects if a string is a valid hex6 string</p>","!type":"fn(str: string) -> bool"},"isNamedColor":{"!doc":"<p>Whether the incoming value is a named color.</p>","!type":"fn(value: string) -> bool"},"isRgbaString":{"!doc":"<p>Detects if a string is a valid <span class=\"caps\">RGBA</span> string</p>","!type":"fn(str: string) -> bool"},"isRgbString":{"!doc":"<p>Detects if a string is a valid <span class=\"caps\">RGB</span> string</p>","!type":"fn(str: string) -> bool"},"isSystemColor":{"!doc":"<p>Whether the incoming value is a system color.</p>","!type":"fn(value: string) -> bool"},"isThemedColor":{"!doc":"<p>Whether the incoming value is a themed color.</p>","!type":"fn(value: string) -> bool"},"isValidPropertyValue":{"!doc":"<p>Detects if a string is a valid qooxdoo color</p>","!type":"fn(str: string) -> bool"},"randomColor":{"!doc":"<p>Creates a random color.</p>","!type":"fn() -> string"},"rgbToHexString":{"!doc":"<p>Converts a <span class=\"caps\">RGB</span> array to an hex6 string</p>","!type":"fn(rgb: +Array) -> string"},"rgbToHsb":{"!doc":"<p>Convert <span class=\"caps\">RGB</span> colors to <span class=\"caps\">HSB</span></p>","!type":"fn(rgb: number) -> +Array"},"rgbToRgbString":{"!doc":"<p>Converts a <span class=\"caps\">RGB</span> array to an <span class=\"caps\">RGB</span> string</p>","!type":"fn(rgb: +Array) -> string"},"stringToRgb":{"!doc":"<p>Try to convert an incoming string to an <span class=\"caps\">RGB</span> array.\nSupports themed, named and system colors, but also <span class=\"caps\">RGB</span> strings,\nhex3 and hex6 values.</p>","!type":"fn(str: string) -> +Array"},"stringToRgbString":{"!doc":"<p>Try to convert an incoming string to an <span class=\"caps\">RGB</span> string, which can be used\nfor all color properties.\nSupports themed, named and system colors, but also <span class=\"caps\">RGB</span> strings,\nhex3 and hex6 values.</p>","!type":"fn(str: string) -> string"},"supportsThemes":{"!doc":"<p>Whether the color theme manager is loaded. Generally\npart of the <span class=\"caps\">GUI</span> of qooxdoo.</p>","!type":"fn() -> bool"}},"DeferredCall":{"!proto":"qx.core.Object","!doc":"<p>This class represents a wrapper for functions, which should be called after\nthe current thread of JavaScript has finished and the control is returned to\nthe browser. The wrapped function will at most be called once after the control\nhas been given back to the browser, independent of the number of {@link #call}\ncalls.</p>","!type":"fn()","prototype":{"call":{"!doc":"<p>Calls the callback directly.</p>","!type":"fn()"},"cancel":{"!doc":"<p>Prevent the callback from being called.</p>","!type":"fn()"},"schedule":{"!doc":"<p>Issue a deferred call of the callback.</p>","!type":"fn()"}}},"DeferredCallManager":{"!proto":"qx.core.Object","!doc":"<p>This class manages the timer used for deferred calls. All\n{@link qx.util.DeferredCall} instances use the single timer from this class.</p>","!type":"fn()","prototype":{"__timeout":{"!doc":"<p>Helper function for the timer.</p>","!type":"fn()"},"cancel":{"!doc":"<p>Cancel a scheduled deferred call</p>","!type":"fn(deferredCall: +qx.util.DeferredCall)"},"schedule":{"!doc":"<p>Schedule a deferred call</p>","!type":"fn(deferredCall: +qx.util.DeferredCall)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.util.DeferredCallManager"}},"Delegate":{"!doc":"<p>Methods to work with the delegate pattern.</p>","containsMethod":{"!doc":"<p>Checks, if the given delegate is valid or if a specific method is given.</p>","!type":"fn(delegate: Object, specificMethod: string) -> bool"},"getMethod":{"!doc":"<p>Returns the delegate method given my its name.</p>","!type":"fn(delegate: Object, specificMethod: string) -> fn()"}},"DisposeUtil":{"!doc":"<p>Methods to cleanup fields from maps/objects.</p>","__isChildrenContainer":{"!doc":"<p>Checks if the given object is a qx container widget</p>","!type":"fn(obj: Object) -> bool"},"_collectContainerChildren":{"!doc":"<p>Helper function to collect all children widgets of an container recursivly.</p>","!type":"fn(container: +qx.ui.container.Composite, arr: +Array)"},"destroyContainer":{"!doc":"<p>Destroys a container and all of its children recursivly.</p>","!type":"fn(container: +qx.ui.container.Composite)"},"disposeArray":{"!doc":"<p>Disposes all members of the given array and deletes\nthe field which refers to the array afterwards.</p>","!type":"fn(obj: Object, field: string)"},"disposeMap":{"!doc":"<p>Disposes all members of the given map and deletes\nthe field which refers to the map afterwards.</p>","!type":"fn(obj: Object, field: string)"},"disposeObjects":{"!doc":"<p>Disconnects and disposes given objects from instance.\nOnly works with qx.core.Object based objects e.g. Widgets.</p>","!type":"fn(obj: Object, arr: +Array, disposeSingletons?: bool)"},"disposeTriggeredBy":{"!doc":"<p>Disposes a given object when another object is disposed</p>","!type":"fn(disposeMe: Object, trigger: Object)"}},"EditDistance":{"!doc":"<p>Class to implement different edit distance ideas.</p>\n\n<a href=\"http://en.wikipedia.org/wiki/Edit_distance\">Edit distance on Wikipedia</a>\n<a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance on Wikipedia</a>","__computeEditOperations":{"!doc":"<p>Computes the operations needed to transform dataA to dataB.</p>","!type":"fn(distance: +Integer, dataA: +Array, dataB: +Array) -> +Map"},"__computeLevenshteinDistance":{"!doc":"<p>Returns a distant matrix following a concept\nnamed Levenshtein distance for two data structures</p>","!type":"fn(dataA: +Array, dataB: +Array) -> +Integer"},"getEditOperations":{"!doc":"<p>Returns the operations needed to transform dataA to dataB.</p>","!type":"fn(dataA: +Array, dataB: +Array) -> +Map"}},"ExtendedColor":{"!doc":"<p>Support for extended <span class=\"caps\">CSS</span> color names</p>","isExtendedColor":{"!doc":"<p>Whether the incoming value is an extended named color.</p>","!type":"fn(value: string) -> bool"},"toRgb":{"!doc":"<p>Converts an extended color to the <span class=\"caps\">RGB</span> value</p>","!type":"fn(value: string) -> +Array"},"toRgbString":{"!doc":"<p>Converts an extended color to a <span class=\"caps\">CSS</span> <span class=\"caps\">RGB</span> string</p>","!type":"fn(value: string) -> string"}},"format":{"DateFormat":{"!proto":"qx.core.Object","!doc":"<p>A formatter and parser for dates, see\n<a href=\"http://www.unicode.org/reports/tr35/#Date_Format_Patterns\">http://www.unicode.org/reports/tr35/#Date_Format_Patterns</a></p>\n\n<p>Here is a quick overview of the format pattern keys:\n<table>\n<tr><th>Key &nbsp;<th>Description\n<tr><td><code> G </code><td> era, e.g. &#8220;AD&#8221;\n<tr><td><code> y </code><td> year\n<tr><td><code> Y </code><td> week year\n<tr><td><code> u </code><td> extended year [Not supported yet]\n<tr><td><code> Q </code><td> quarter\n<tr><td><code> q </code><td> stand-alone quarter\n<tr><td><code> M </code><td> month\n<tr><td><code> L </code><td> stand-alone month\n<tr><td><code> I </code><td> chinese leap month [Not supported yet]\n<tr><td><code> w </code><td> week of year\n<tr><td><code> W </code><td> week of month\n<tr><td><code> d </code><td> day of month\n<tr><td><code> D </code><td> day of year\n<tr><td><code> F </code><td> day of week in month [Not supported yet]\n<tr><td><code> g </code><td> modified Julian day [Not supported yet]\n<tr><td><code> E </code><td> day of week\n<tr><td><code> e </code><td> local day of week\n<tr><td><code> c </code><td> stand-alone local day of week\n<tr><td><code> a </code><td> period of day (am or pm)\n<tr><td><code> h </code><td> 12-hour hour\n<tr><td><code> H </code><td> 24-hour hour\n<tr><td><code> K </code><td> hour [0-11]\n<tr><td><code> k </code><td> hour [1-24]\n<tr><td><code> j </code><td> special symbol [Not supported yet]\n<tr><td><code> m </code><td> minute\n<tr><td><code> s </code><td> second\n<tr><td><code> S </code><td> fractional second\n<tr><td><code> A </code><td> millisecond in day [Not supported yet]\n<tr><td><code> z </code><td> time zone, specific non-location format\n<tr><td><code> Z </code><td> time zone, rfc822/gmt format\n<tr><td><code> v </code><td> time zone, generic non-location format [Not supported yet]\n<tr><td><code> V </code><td> time zone, like z except metazone abbreviations [Not supported yet]\n</table></p>\n\n<p>(This list is preliminary, not all format keys might be implemented). Most\nkeys support repetitions that influence the meaning of the format. Parts of the\nformat string that should not be interpreted as format keys have to be\nsingle-quoted.</p>\n\n<p>The same format patterns will be used for both parsing and output formatting.</p>","!type":"fn()","prototype":{"__fillNumber":{"!doc":"<p>Fills a number with leading zeros (&#8220;25&#8221; -> &#8220;0025&#8221;).</p>","!type":"fn(number: +Integer, minSize: +Integer) -> string"},"__getDayInYear":{"!doc":"<p>Returns the day in year of a date.</p>","!type":"fn(date: +Date) -> +Integer"},"__getMonthAndDayFromDayOfYear":{"!doc":"<p>Returns a json object with month and day as keys.</p>","!type":"fn(dayOfYear: +Integer, year: +Integer) -> Object"},"__getWeekInMonth":{"!doc":"<p>Returns the week in month of a date.</p>","!type":"fn(date: +Date) -> +Integer"},"__getWeekInYear":{"!doc":"<p>Returns the week in year of a date.</p>","!type":"fn(date: +Date) -> +Integer"},"__getWeekYear":{"!doc":"<p>Returns the week year of a date. (that is the year of the week where this date happens to be)\nFor a week in the middle of the summer, the year is easily obtained, but for a week\nwhen New Year&#8217;s Eve takes place, the year of that week is ambigous.\nThe thursday day of that week is used to determine the year.</p>","!type":"fn(date: +Date) -> +Integer"},"__getYearFromWeekYearAndMonth":{"!doc":"<p>Returns the year of a date when we know the week year</p>","!type":"fn(weekYear: +Integer, month: +Integer, dayOfMonth: +Integer) -> +Integer"},"__initFormatTree":{"!doc":"<p>Helper method for {@link #format()} and {@link #parse()}.\nParses the date format.</p>","!type":"fn()"},"__initParseFeed":{"!doc":"<p>Initializes the parse feed.</p>\n\n<p>The parse contains everything needed for parsing: The regular expression\n(in compiled and uncompiled form) and the used rules.</p>","!type":"fn()"},"__initParseRules":{"!doc":"<p>Initializes the static parse rules.</p>","!type":"fn()"},"__isLeapYear":{"!doc":"<p>Returns true if the year is a leap one.</p>","!type":"fn(year: +Integer) -> bool"},"__isRuleForWildcard":{"!doc":"<p>Checks wether the rule matches the wildcard or not.</p>","!type":"fn(rule: Object, wildcardChar: string, wildcardSize: +Integer) -> bool"},"__thursdayOfSameWeek":{"!doc":"<p>Returns the thursday in the same week as the date.</p>","!type":"fn(date: +Date) -> +Date"},"_applyLocale":{"!doc":"<p>Applies the new value for locale property</p>","!type":"fn(value: string, old: string)"},"format":{"!doc":"<p>Formats a date.</p>","!type":"fn(date: +Date) -> string"},"getLocale":{"!doc":"<p>Returns the (computed) value of the property <code>locale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn() -> Object"},"initLocale":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>locale</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn(value: Object) -> Object"},"parse":{"!doc":"<p>Parses a date.</p>","!type":"fn(dateStr: string) -> +Date"},"resetLocale":{"!doc":"<p>Resets the user value of the property <code>locale</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn()"},"setLocale":{"!doc":"<p>Sets the user value of the property <code>locale</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #locale}.</p>","!type":"fn(value: Object) -> Object"}},"getDateInstance":{"!doc":"<p>Convenience factory that returns a <code>DateFomat</code> instance that\nuses a short date-only format. Beware that the overall layout of the\ndate/time format string is that of the locale in effect when the factory\nfunction is called.</p>\n\n<p>Implemented as a quasi-singleton, so beware of side effects.</p>","!type":"fn() -> +DateFormat"},"getDateTimeInstance":{"!doc":"<p>Convenience factory that returns a <code>DateFomat</code> instance that\nuses a long date/time format. Beware that the overall layout of the\ndate/time format string is that of the locale in effect when the factory\nfunction is called.</p>\n\n<p>Implemented as a quasi-singleton, so beware of side effects.</p>","!type":"fn() -> +DateFormat"}},"IFormat":{"!doc":"<p>Superclass for formatters and parsers.</p>","prototype":{"format":{"!doc":"<p>Formats an object.</p>","!type":"fn(obj: Object) -> string"},"parse":{"!doc":"<p>Parses an object.</p>","!type":"fn(str: string) -> Object"}}},"NumberFormat":{"!proto":"qx.core.Object","!doc":"<p>A formatter and parser for numbers.</p>","!type":"fn()","prototype":{"format":{"!doc":"<p>Formats a number.</p>","!type":"fn(num: number) -> string"},"getGroupingUsed":{"!doc":"<p>Returns the (computed) value of the property <code>groupingUsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupingUsed}.</p>","!type":"fn() -> Object"},"getMaximumFractionDigits":{"!doc":"<p>Returns the (computed) value of the property <code>maximumFractionDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumFractionDigits}.</p>","!type":"fn() -> Object"},"getMaximumIntegerDigits":{"!doc":"<p>Returns the (computed) value of the property <code>maximumIntegerDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumIntegerDigits}.</p>","!type":"fn() -> Object"},"getMinimumFractionDigits":{"!doc":"<p>Returns the (computed) value of the property <code>minimumFractionDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumFractionDigits}.</p>","!type":"fn() -> Object"},"getMinimumIntegerDigits":{"!doc":"<p>Returns the (computed) value of the property <code>minimumIntegerDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumIntegerDigits}.</p>","!type":"fn() -> Object"},"getPostfix":{"!doc":"<p>Returns the (computed) value of the property <code>postfix</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #postfix}.</p>","!type":"fn() -> Object"},"getPrefix":{"!doc":"<p>Returns the (computed) value of the property <code>prefix</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #prefix}.</p>","!type":"fn() -> Object"},"initGroupingUsed":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>groupingUsed</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #groupingUsed}.</p>","!type":"fn(value: Object) -> Object"},"initMaximumFractionDigits":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximumFractionDigits</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumFractionDigits}.</p>","!type":"fn(value: Object) -> Object"},"initMaximumIntegerDigits":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maximumIntegerDigits</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumIntegerDigits}.</p>","!type":"fn(value: Object) -> Object"},"initMinimumFractionDigits":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimumFractionDigits</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumFractionDigits}.</p>","!type":"fn(value: Object) -> Object"},"initMinimumIntegerDigits":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>minimumIntegerDigits</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumIntegerDigits}.</p>","!type":"fn(value: Object) -> Object"},"initPostfix":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>postfix</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #postfix}.</p>","!type":"fn(value: Object) -> Object"},"initPrefix":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>prefix</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #prefix}.</p>","!type":"fn(value: Object) -> Object"},"isGroupingUsed":{"!doc":"<p>Check whether the (computed) value of the boolean property <code>groupingUsed</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupingUsed}.</p>","!type":"fn() -> bool"},"parse":{"!doc":"<p>Parses a number.</p>","!type":"fn(str: string) -> +Double"},"resetGroupingUsed":{"!doc":"<p>Resets the user value of the property <code>groupingUsed</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #groupingUsed}.</p>","!type":"fn()"},"resetMaximumFractionDigits":{"!doc":"<p>Resets the user value of the property <code>maximumFractionDigits</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumFractionDigits}.</p>","!type":"fn()"},"resetMaximumIntegerDigits":{"!doc":"<p>Resets the user value of the property <code>maximumIntegerDigits</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumIntegerDigits}.</p>","!type":"fn()"},"resetMinimumFractionDigits":{"!doc":"<p>Resets the user value of the property <code>minimumFractionDigits</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumFractionDigits}.</p>","!type":"fn()"},"resetMinimumIntegerDigits":{"!doc":"<p>Resets the user value of the property <code>minimumIntegerDigits</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumIntegerDigits}.</p>","!type":"fn()"},"resetPostfix":{"!doc":"<p>Resets the user value of the property <code>postfix</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #postfix}.</p>","!type":"fn()"},"resetPrefix":{"!doc":"<p>Resets the user value of the property <code>prefix</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #prefix}.</p>","!type":"fn()"},"setGroupingUsed":{"!doc":"<p>Sets the user value of the property <code>groupingUsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupingUsed}.</p>","!type":"fn(value: Object) -> Object"},"setMaximumFractionDigits":{"!doc":"<p>Sets the user value of the property <code>maximumFractionDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumFractionDigits}.</p>","!type":"fn(value: Object) -> Object"},"setMaximumIntegerDigits":{"!doc":"<p>Sets the user value of the property <code>maximumIntegerDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maximumIntegerDigits}.</p>","!type":"fn(value: Object) -> Object"},"setMinimumFractionDigits":{"!doc":"<p>Sets the user value of the property <code>minimumFractionDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumFractionDigits}.</p>","!type":"fn(value: Object) -> Object"},"setMinimumIntegerDigits":{"!doc":"<p>Sets the user value of the property <code>minimumIntegerDigits</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #minimumIntegerDigits}.</p>","!type":"fn(value: Object) -> Object"},"setPostfix":{"!doc":"<p>Sets the user value of the property <code>postfix</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #postfix}.</p>","!type":"fn(value: Object) -> Object"},"setPrefix":{"!doc":"<p>Sets the user value of the property <code>prefix</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #prefix}.</p>","!type":"fn(value: Object) -> Object"},"toggleGroupingUsed":{"!doc":"<p>Toggles the (computed) value of the boolean property <code>groupingUsed</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #groupingUsed}.</p>","!type":"fn() -> bool"}}}},"fsm":{"FiniteStateMachine":{"!proto":"qx.core.Object","!doc":"<p>A finite state machine.</p>\n\n<p>See {@link qx.util.fsm.State} for details on creating States,\nand {@link qx.util.fsm.Transition} for details on creating\ntransitions between states.</p>","!type":"fn()","prototype":{"__processEvents":{"!doc":"<p>Process all of the events on the event queue.</p>","!type":"fn()"},"__run":{"!doc":"<p>Run the finite state machine to process a single event.</p>","!type":"fn(event: +qx.event.type.Event) -> bool"},"_getInternalData":{"!doc":"<p>Get internal data for debugging</p>","!type":"fn() -> +Map"},"addObject":{"!doc":"<p>Add an object (typically a widget) that is to be accessed during state\ntransitions, to the finite state machine.</p>","!type":"fn(friendlyName: string, obj: Object, groupNames: +Array)"},"addState":{"!doc":"<p>Add a state to the finite state machine.</p>","!type":"fn(state: +qx.util.fsm.State)"},"displayAllObjects":{"!doc":"<p>Display all of the saved objects and their reverse mappings.</p>","!type":"fn()"},"enqueueEvent":{"!doc":"<p>Enqueue an event for processing</p>","!type":"fn(event: +qx.event.type.Event, bAddAtHead: bool)"},"eventListener":{"!doc":"<p>Event listener for all event types in the finite state machine</p>","!type":"fn(event: +qx.event.type.Event)"},"fireImmediateEvent":{"!doc":"<p>Create an event and send it immediately to the finite state machine.</p>","!type":"fn(type: string, target: +qx.core.Object, data: Object)"},"getDebugFlags":{"!doc":"<p>Returns the (computed) value of the property <code>debugFlags</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #debugFlags}.</p>","!type":"fn() -> Object"},"getFriendlyName":{"!doc":"<p>Get the friendly name of an object.</p>","!type":"fn(obj: Object) -> string"},"getGroupObjects":{"!doc":"<p>Retrieve the list of objects which have registered, via {@link #addObject}\nas being members of the specified group.</p>","!type":"fn(groupName: string) -> +Array"},"getMaxSavedStates":{"!doc":"<p>Returns the (computed) value of the property <code>maxSavedStates</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxSavedStates}.</p>","!type":"fn() -> Object"},"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"getNextState":{"!doc":"<p>Returns the (computed) value of the property <code>nextState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn() -> Object"},"getObject":{"!doc":"<p>Retrieve an object previously saved via {@link #addObject}, using its\nFriendly Name.</p>","!type":"fn(friendlyName: string) -> Object"},"getPreviousState":{"!doc":"<p>Returns the (computed) value of the property <code>previousState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #previousState}.</p>","!type":"fn() -> Object"},"getState":{"!doc":"<p>Returns the (computed) value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn() -> Object"},"initDebugFlags":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>debugFlags</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #debugFlags}.</p>","!type":"fn(value: Object) -> Object"},"initMaxSavedStates":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>maxSavedStates</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxSavedStates}.</p>","!type":"fn(value: Object) -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"initNextState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nextState</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn(value: Object) -> Object"},"initPreviousState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>previousState</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #previousState}.</p>","!type":"fn(value: Object) -> Object"},"initState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>state</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"popState":{"!doc":"<p>Pop the saved state stack.</p>","!type":"fn() -> string"},"postponeEvent":{"!doc":"<p>Add the specified event to a list of events to be passed to the next\nstate following state transition.</p>","!type":"fn(event: +qx.event.type.Event)"},"pushState":{"!doc":"<p>Save the current or previous state on the saved-state stack.  A future\ntransition can then provide, as its nextState value, the class\nconstant:</p>\n\n<code>\n  qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK\n  </code>\n\n<p>which will cause the next state to be whatever is at the top of the\nsaved-state stack, and remove that top element from the saved-state\nstack.</p>","!type":"fn(state: bool)"},"removeObject":{"!doc":"<p>Remove an object which had previously been added by {@link #addObject}.</p>","!type":"fn(friendlyName: string)"},"replaceState":{"!doc":"<p>Replace a state in the finite state machine.  This is useful if\ninitially &#8220;dummy&#8221; states are created which load the real state table\nfor a series of operations (and possibly also load the gui associated\nwith the new states at the same time).  Having portions of the finite\nstate machine and their associated gui pages loaded at run time can\nhelp prevent long delays at application start-up time.</p>","!type":"fn(state: +qx.util.fsm.State, bDispose: bool) -> Object"},"resetDebugFlags":{"!doc":"<p>Resets the user value of the property <code>debugFlags</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #debugFlags}.</p>","!type":"fn()"},"resetMaxSavedStates":{"!doc":"<p>Resets the user value of the property <code>maxSavedStates</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxSavedStates}.</p>","!type":"fn()"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"resetNextState":{"!doc":"<p>Resets the user value of the property <code>nextState</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn()"},"resetPreviousState":{"!doc":"<p>Resets the user value of the property <code>previousState</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #previousState}.</p>","!type":"fn()"},"resetState":{"!doc":"<p>Resets the user value of the property <code>state</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn()"},"scheduleEvent":{"!doc":"<p>Create and schedule an event to be sent to the finite state machine\n&#8220;shortly&#8221;.  This allows such things as letting a progress cursor\ndisplay prior to handling the event.</p>","!type":"fn(type: string, target: +qx.core.Object, data: Object, timeout: +Integer)"},"setDebugFlags":{"!doc":"<p>Sets the user value of the property <code>debugFlags</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #debugFlags}.</p>","!type":"fn(value: Object) -> Object"},"setMaxSavedStates":{"!doc":"<p>Sets the user value of the property <code>maxSavedStates</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxSavedStates}.</p>","!type":"fn(value: Object) -> Object"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"setNextState":{"!doc":"<p>Sets the user value of the property <code>nextState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn(value: Object) -> Object"},"setPreviousState":{"!doc":"<p>Sets the user value of the property <code>previousState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #previousState}.</p>","!type":"fn(value: Object) -> Object"},"setState":{"!doc":"<p>Sets the user value of the property <code>state</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #state}.</p>","!type":"fn(value: Object) -> Object"},"start":{"!doc":"<p>Start (or restart, after it has terminated) the finite state machine\nfrom the starting state.  The starting state is defined as the first\nstate added to the finite state machine.</p>","!type":"fn()"}}},"State":{"!proto":"qx.core.Object","!doc":"<p>Create a new state which may be added to a finite state machine.</p>","!type":"fn()","_commonTransformAutoActions":{"!doc":"<p>Common function for checking the value provided for\nauto actions.</p>\n\n<p>Auto-action property values passed to us look akin to:</p>\n\n<pre class=\"javascript\">\n    {\n      // The name of a function.\n      \"setEnabled\" :\n      [\n        {\n          // The parameter value(s), thus \"setEnabled(true);\"\n          \"parameters\"   : [ true ],\n\n          // The function would be called on each object:\n          //  this.getObject(\"obj1\").setEnabled(true);\n          //  this.getObject(\"obj2\").setEnabled(true);\n          \"objects\" : [ \"obj1\", \"obj2\" ]\n\n          // And similarly for each object in each specified group.\n          \"groups\"  : [ \"group1\", \"group2\" ],\n        }\n      ];\n\n      \"setTextColor\" :\n      [\n        {\n          \"parameters\" : [ \"blue\" ]\n          \"groups\"     : [ \"group3\", \"group4\" ],\n          \"objects\"    : [ \"obj3\", \"obj4\" ]\n        }\n      ];\n    };\n    </pre>","!type":"fn(actionType: string, value: Object, context: Object) -> fn()"},"prototype":{"__bindIfFunction":{"!doc":"<p>If given a function, bind it to a specified context.</p>","!type":"fn(f: fn(), context: Object) -> fn()"},"__transformAutoActionsAfterOnentry":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformAutoActionsAfterOnexit":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformAutoActionsBeforeOnentry":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformAutoActionsBeforeOnexit":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformEvents":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformName":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformOnentry":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"__transformOnexit":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> Object"},"addTransition":{"!doc":"<p>Add a transition to a state</p>","!type":"fn(trans: +qx.util.fsm.Transition)"},"getAutoActionsAfterOnentry":{"!doc":"<p>Returns the (computed) value of the property <code>autoActionsAfterOnentry</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnentry}.</p>","!type":"fn() -> Object"},"getAutoActionsAfterOnexit":{"!doc":"<p>Returns the (computed) value of the property <code>autoActionsAfterOnexit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnexit}.</p>","!type":"fn() -> Object"},"getAutoActionsBeforeOnentry":{"!doc":"<p>Returns the (computed) value of the property <code>autoActionsBeforeOnentry</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnentry}.</p>","!type":"fn() -> Object"},"getAutoActionsBeforeOnexit":{"!doc":"<p>Returns the (computed) value of the property <code>autoActionsBeforeOnexit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnexit}.</p>","!type":"fn() -> Object"},"getEvents":{"!doc":"<p>Returns the (computed) value of the property <code>events</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #events}.</p>","!type":"fn() -> Object"},"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"getOnentry":{"!doc":"<p>Returns the (computed) value of the property <code>onentry</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #onentry}.</p>","!type":"fn() -> Object"},"getOnexit":{"!doc":"<p>Returns the (computed) value of the property <code>onexit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #onexit}.</p>","!type":"fn() -> Object"},"initAutoActionsAfterOnentry":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoActionsAfterOnentry</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnentry}.</p>","!type":"fn(value: Object) -> Object"},"initAutoActionsAfterOnexit":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoActionsAfterOnexit</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnexit}.</p>","!type":"fn(value: Object) -> Object"},"initAutoActionsBeforeOnentry":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoActionsBeforeOnentry</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnentry}.</p>","!type":"fn(value: Object) -> Object"},"initAutoActionsBeforeOnexit":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoActionsBeforeOnexit</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnexit}.</p>","!type":"fn(value: Object) -> Object"},"initEvents":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>events</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #events}.</p>","!type":"fn(value: Object) -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"initOnentry":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>onentry</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #onentry}.</p>","!type":"fn(value: Object) -> Object"},"initOnexit":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>onexit</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #onexit}.</p>","!type":"fn(value: Object) -> Object"},"resetAutoActionsAfterOnentry":{"!doc":"<p>Resets the user value of the property <code>autoActionsAfterOnentry</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnentry}.</p>","!type":"fn()"},"resetAutoActionsAfterOnexit":{"!doc":"<p>Resets the user value of the property <code>autoActionsAfterOnexit</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnexit}.</p>","!type":"fn()"},"resetAutoActionsBeforeOnentry":{"!doc":"<p>Resets the user value of the property <code>autoActionsBeforeOnentry</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnentry}.</p>","!type":"fn()"},"resetAutoActionsBeforeOnexit":{"!doc":"<p>Resets the user value of the property <code>autoActionsBeforeOnexit</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnexit}.</p>","!type":"fn()"},"resetEvents":{"!doc":"<p>Resets the user value of the property <code>events</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #events}.</p>","!type":"fn()"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"resetOnentry":{"!doc":"<p>Resets the user value of the property <code>onentry</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #onentry}.</p>","!type":"fn()"},"resetOnexit":{"!doc":"<p>Resets the user value of the property <code>onexit</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #onexit}.</p>","!type":"fn()"},"setAutoActionsAfterOnentry":{"!doc":"<p>Sets the user value of the property <code>autoActionsAfterOnentry</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnentry}.</p>","!type":"fn(value: Object) -> Object"},"setAutoActionsAfterOnexit":{"!doc":"<p>Sets the user value of the property <code>autoActionsAfterOnexit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOnexit}.</p>","!type":"fn(value: Object) -> Object"},"setAutoActionsBeforeOnentry":{"!doc":"<p>Sets the user value of the property <code>autoActionsBeforeOnentry</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnentry}.</p>","!type":"fn(value: Object) -> Object"},"setAutoActionsBeforeOnexit":{"!doc":"<p>Sets the user value of the property <code>autoActionsBeforeOnexit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOnexit}.</p>","!type":"fn(value: Object) -> Object"},"setEvents":{"!doc":"<p>Sets the user value of the property <code>events</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #events}.</p>","!type":"fn(value: Object) -> Object"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"setOnentry":{"!doc":"<p>Sets the user value of the property <code>onentry</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #onentry}.</p>","!type":"fn(value: Object) -> Object"},"setOnexit":{"!doc":"<p>Sets the user value of the property <code>onexit</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #onexit}.</p>","!type":"fn(value: Object) -> Object"}}},"Transition":{"!proto":"qx.core.Object","!doc":"<p>Create a new possible transition from one state to another.</p>","!type":"fn()","prototype":{"__bindIfFunction":{"!doc":"<p>If given a function, bind it to a specified context.</p>","!type":"fn(f: fn(), context: Object) -> fn()"},"__transformAutoActionsAfterOntransition":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> fn()"},"__transformAutoActionsBeforeOntransition":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> fn()"},"__transformNextState":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> fn()"},"__transformOntransition":{"!doc":"<p>Internal transform method</p>","!type":"fn(value: Object) -> fn()"},"__transformPredicate":{"!doc":"<p>Validate the predicate. Converts all incoming values to functions.</p>","!type":"fn(value: Object) -> fn()"},"getAutoActionsAfterOntransition":{"!doc":"<p>Returns the (computed) value of the property <code>autoActionsAfterOntransition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOntransition}.</p>","!type":"fn() -> Object"},"getAutoActionsBeforeOntransition":{"!doc":"<p>Returns the (computed) value of the property <code>autoActionsBeforeOntransition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOntransition}.</p>","!type":"fn() -> Object"},"getName":{"!doc":"<p>Returns the (computed) value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn() -> Object"},"getNextState":{"!doc":"<p>Returns the (computed) value of the property <code>nextState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn() -> Object"},"getOntransition":{"!doc":"<p>Returns the (computed) value of the property <code>ontransition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #ontransition}.</p>","!type":"fn() -> Object"},"getPredicate":{"!doc":"<p>Returns the (computed) value of the property <code>predicate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #predicate}.</p>","!type":"fn() -> Object"},"initAutoActionsAfterOntransition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoActionsAfterOntransition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOntransition}.</p>","!type":"fn(value: Object) -> Object"},"initAutoActionsBeforeOntransition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>autoActionsBeforeOntransition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOntransition}.</p>","!type":"fn(value: Object) -> Object"},"initName":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>name</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"initNextState":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>nextState</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn(value: Object) -> Object"},"initOntransition":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>ontransition</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #ontransition}.</p>","!type":"fn(value: Object) -> Object"},"initPredicate":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>predicate</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #predicate}.</p>","!type":"fn(value: Object) -> Object"},"resetAutoActionsAfterOntransition":{"!doc":"<p>Resets the user value of the property <code>autoActionsAfterOntransition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOntransition}.</p>","!type":"fn()"},"resetAutoActionsBeforeOntransition":{"!doc":"<p>Resets the user value of the property <code>autoActionsBeforeOntransition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOntransition}.</p>","!type":"fn()"},"resetName":{"!doc":"<p>Resets the user value of the property <code>name</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn()"},"resetNextState":{"!doc":"<p>Resets the user value of the property <code>nextState</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn()"},"resetOntransition":{"!doc":"<p>Resets the user value of the property <code>ontransition</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #ontransition}.</p>","!type":"fn()"},"resetPredicate":{"!doc":"<p>Resets the user value of the property <code>predicate</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #predicate}.</p>","!type":"fn()"},"setAutoActionsAfterOntransition":{"!doc":"<p>Sets the user value of the property <code>autoActionsAfterOntransition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsAfterOntransition}.</p>","!type":"fn(value: Object) -> Object"},"setAutoActionsBeforeOntransition":{"!doc":"<p>Sets the user value of the property <code>autoActionsBeforeOntransition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #autoActionsBeforeOntransition}.</p>","!type":"fn(value: Object) -> Object"},"setName":{"!doc":"<p>Sets the user value of the property <code>name</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #name}.</p>","!type":"fn(value: Object) -> Object"},"setNextState":{"!doc":"<p>Sets the user value of the property <code>nextState</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #nextState}.</p>","!type":"fn(value: Object) -> Object"},"setOntransition":{"!doc":"<p>Sets the user value of the property <code>ontransition</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #ontransition}.</p>","!type":"fn(value: Object) -> Object"},"setPredicate":{"!doc":"<p>Sets the user value of the property <code>predicate</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #predicate}.</p>","!type":"fn(value: Object) -> Object"}}}},"LibraryManager":{"!proto":"qx.core.Object","!doc":"<p>Provides read/write access to library-specific information such as\nsource/resource URIs.</p>","prototype":{"get":{"!doc":"<p>Returns the value of an attribute of the given library</p>","!type":"fn(namespace: string, key: string) -> Object"},"has":{"!doc":"<p>Checks whether the library with the given namespace is known to the\napplication.</p>","!type":"fn(namespace: string) -> bool"},"set":{"!doc":"<p>Sets an attribute on the given library.</p>","!type":"fn(namespace: string, key: string, value: Object)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.util.LibraryManager"}},"ObjectPool":{"!proto":"qx.core.Object","!doc":"<p>This class manages pooled Object instances.</p>\n\n<p>It exists mainly to minimise the amount of browser memory usage by reusing\nwindow instances after they have been closed.  However, it could equally be\nused to pool instances of any type of Object (expect singletons).</p>\n\n<p>It is the client&#8217;s responsibility to ensure that pooled objects are not\nreferenced or used from anywhere else in the application.</p>","!type":"fn()","prototype":{"getObject":{"!doc":"<p>This method finds and returns an instance of a requested type in the pool,\nif there is one.  Note that the pool determines which instance (if any) to\nreturn to the client.  The client cannot get a specific instance from the\npool.</p>","!type":"fn(clazz: +Class) -> Object"},"getSize":{"!doc":"<p>Returns the (computed) value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn() -> Object"},"initSize":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>size</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: Object) -> Object"},"poolObject":{"!doc":"<p>This method places an Object in a pool of Objects of its type. Note that\nonce an instance has been pooled, there is no means to get that exact\ninstance back. The instance may be discarded for garbage collection if\nthe pool of its type is already full.</p>\n\n<p>It is assumed that no other references exist to this Object, and that it will\nnot be used at all while it is pooled.</p>","!type":"fn(obj: Object)"},"resetSize":{"!doc":"<p>Resets the user value of the property <code>size</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn()"},"setSize":{"!doc":"<p>Sets the user value of the property <code>size</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #size}.</p>","!type":"fn(value: Object) -> Object"}}},"OOUtil":{"!doc":"<p>This class is a base class for the OO system defined by Class, Mixin\nand Interface. It contains helper which are basically needed to create the\nClasses which define the OO system.</p>","classIsDefined":{"!doc":"<p>Whether the given class exists</p>","!type":"fn(name: string) -> bool"},"getByInterface":{"!doc":"<p>Returns the class or one of its super classes which contains the\ndeclaration of the given interface. Returns null if the interface is not\nspecified anywhere.</p>","!type":"fn(clazz: +Class, iface: +Interface) -> +Class"},"getEventType":{"!doc":"<p>Returns the event type of the given event. Returns null if\nthe event does not exist.</p>","!type":"fn(clazz: +Class, name: string) -> string"},"getMixins":{"!doc":"<p>Returns a list of all mixins available in a given class.</p>","!type":"fn(clazz: +Class) -> +Mixin"},"getPropertyDefinition":{"!doc":"<p>Returns the definition of the given property, if not redefined.\nReturns null if the property does not exist.</p>","!type":"fn(clazz: +Class, name: string) -> +Map"},"hasInterface":{"!doc":"<p>Whether a given class or any of its super classes includes a given interface.</p>\n\n<p>This function will return &#8220;true&#8221; if the interface was defined\nin the class declaration ({@link qx.Class#define}) of the class\nor any of its super classes using the &#8220;implement&#8221;\nkey.</p>","!type":"fn(clazz: +Class, iface: +Interface) -> bool"},"hasProperty":{"!doc":"<p>Whether a class has the given property</p>","!type":"fn(clazz: +Class, name: string) -> bool"},"supportsEvent":{"!doc":"<p>Whether a class supports the given event type</p>","!type":"fn(clazz: +Class, name: string) -> bool"}},"Permutation":{"!doc":"<p>Generate permutations of a map.</p>","permute":{"!doc":"<p>The first parameter is a map with array values. This function computes\nall combinations of the array values and call the callback for each\ncombination.</p>\n\n<p>e.g. a value of</p>\n\n<pre class=\"javascript\">\n  {\n    a: [1, 2],\n    b: [\"a\", \"b\"]\n  }\n</pre>\n\n<p>would call the callback for each of these maps:</p>\n\n<pre class=\"javascript\">\n { a: 1, b: \"a\" },\n { a: 1, b: \"b\" },\n { a: 2, b: \"a\" },\n { a: 2, b: \"b\" }\n</pre>","!type":"fn(options: +Map, callback: fn(), context: Object)"}},"placement":{"AbstractAxis":{"!proto":"Object","!doc":"<p>Abstract class to compute the position of an object on one axis.</p>","_isInRange":{"!doc":"<p>Whether the object specified by <code>start</code> and <code>size</code>\nis completely inside of the axis&#8217; range..</p>","!type":"fn(start: +Integer, size: +Integer, areaSize: +Integer) -> bool"},"_moveToEdgeAndAlign":{"!doc":"<p>Computes the start of the object by taking only the attachment and\nalignment into account. The object by be not fully visible.</p>","!type":"fn(size: +Integer, target: +Map, offsets: +Map, position: string) -> +Integer"},"computeStart":{"!doc":"<p>Computes the start of the object on the axis</p>","!type":"fn(size: +Integer, target: +Map, offsets: +Map, areaSize: +Integer, position: string) -> +Integer"}},"BestFitAxis":{"!doc":"<p>Places the object according to the target. If parts of the object are outside\nof the axis&#8217; range the object&#8217;s start is adjusted so that the overlap between\nthe object and the axis is maximized.</p>","computeStart":{"!doc":"<p>Computes the start of the object on the axis</p>","!type":"fn(size: +Integer, target: +Map, offsets: +Map, areaSize: +Integer, position: string) -> +Integer"}},"DirectAxis":{"!doc":"<p>Places the object directly at the specified position. It is not moved if\nparts of the object are outside of the axis&#8217; range.</p>","computeStart":{"!doc":"<p>Computes the start of the object on the axis</p>","!type":"fn(size: +Integer, target: +Map, offsets: +Map, areaSize: +Integer, position: string) -> +Integer"}},"KeepAlignAxis":{"!doc":"<p>Places the object to the target. If parts of the object are outside of the\nrange this class places the object at the best &#8220;edge&#8221;, &#8220;alignment&#8221;\ncombination so that the overlap between object and range is maximized.</p>","computeStart":{"!doc":"<p>Computes the start of the object on the axis</p>","!type":"fn(size: +Integer, target: +Map, offsets: +Map, areaSize: +Integer, position: string) -> +Integer"}},"Placement":{"!proto":"qx.core.Object","!doc":"<p>Contains methods to compute a position for any object which should\nbe positioned relative to another object.</p>","!type":"fn()","prototype":{"__getPositionX":{"!doc":"<p>Get the position value for the horizontal axis</p>","!type":"fn() -> string"},"__getPositionY":{"!doc":"<p>Get the position value for the vertical axis</p>","!type":"fn() -> string"},"compute":{"!doc":"<p><span class=\"caps\">DOM</span> and widget independent method to compute the location\nof an object to make it relative to any other object.</p>","!type":"fn(size: +Map, area: +Map, target: +Map, offsets: +Map) -> +Map"},"getAlign":{"!doc":"<p>Returns the (computed) value of the property <code>align</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #align}.</p>","!type":"fn() -> Object"},"getAxisX":{"!doc":"<p>Returns the (computed) value of the property <code>axisX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #axisX}.</p>","!type":"fn() -> Object"},"getAxisY":{"!doc":"<p>Returns the (computed) value of the property <code>axisY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #axisY}.</p>","!type":"fn() -> Object"},"getEdge":{"!doc":"<p>Returns the (computed) value of the property <code>edge</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #edge}.</p>","!type":"fn() -> Object"},"initAlign":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>align</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #align}.</p>","!type":"fn(value: Object) -> Object"},"initAxisX":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>axisX</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #axisX}.</p>","!type":"fn(value: Object) -> Object"},"initAxisY":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>axisY</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #axisY}.</p>","!type":"fn(value: Object) -> Object"},"initEdge":{"!doc":"<p>Calls the apply method and dispatches the change event of the property <code>edge</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #edge}.</p>","!type":"fn(value: Object) -> Object"},"resetAlign":{"!doc":"<p>Resets the user value of the property <code>align</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #align}.</p>","!type":"fn()"},"resetAxisX":{"!doc":"<p>Resets the user value of the property <code>axisX</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #axisX}.</p>","!type":"fn()"},"resetAxisY":{"!doc":"<p>Resets the user value of the property <code>axisY</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #axisY}.</p>","!type":"fn()"},"resetEdge":{"!doc":"<p>Resets the user value of the property <code>edge</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #edge}.</p>","!type":"fn()"},"setAlign":{"!doc":"<p>Sets the user value of the property <code>align</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #align}.</p>","!type":"fn(value: Object) -> Object"},"setAxisX":{"!doc":"<p>Sets the user value of the property <code>axisX</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #axisX}.</p>","!type":"fn(value: Object) -> Object"},"setAxisY":{"!doc":"<p>Sets the user value of the property <code>axisY</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #axisY}.</p>","!type":"fn(value: Object) -> Object"},"setEdge":{"!doc":"<p>Sets the user value of the property <code>edge</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #edge}.</p>","!type":"fn(value: Object) -> Object"}},"__getAxis":{"!doc":"<p>Get the axis implementation for the given mode</p>","!type":"fn(mode: string) -> +qx.util.placement.AbstractAxis"},"compute":{"!doc":"<p><span class=\"caps\">DOM</span> and widget independent method to compute the location\nof an object to make it relative to any other object.</p>","!type":"fn(size: +Map, area: +Map, target: +Map, offsets: +Map, position: string, modeX: string, modeY: string) -> +Map"}}},"PropertyUtil":{"!doc":"<p>A helper class for accessing the property system directly.</p>\n\n<p>This class is rather to be used internally. For all regular usage of the\nproperty system the default <span class=\"caps\">API</span> should be sufficient.</p>","deleteInitValue":{"!doc":"<p>Deletes the init value of the given property</p>","!type":"fn(object: Object, propertyName: string)"},"deleteThemeValue":{"!doc":"<p>Deletes the theme value of the given property</p>","!type":"fn(object: Object, propertyName: string)"},"deleteUserValue":{"!doc":"<p>Deletes the user value of the given property</p>","!type":"fn(object: Object, propertyName: string)"},"getAllProperties":{"!doc":"<p>Get the property map of the given class including the properties of all\nsuperclasses!</p>","!type":"fn(clazz: +Class) -> +Map"},"getInitValue":{"!doc":"<p>Returns the init value of the given property</p>","!type":"fn(object: Object, propertyName: string) -> Object"},"getProperties":{"!doc":"<p>Get the property map of the given class</p>","!type":"fn(clazz: +Class) -> +Map"},"getThemeValue":{"!doc":"<p>Returns the theme value of the given property</p>","!type":"fn(object: Object, propertyName: string) -> Object"},"getUserValue":{"!doc":"<p>Returns the user value of the given property</p>","!type":"fn(object: Object, propertyName: string) -> Object"},"resetThemed":{"!doc":"<p>Resets a themed property</p>","!type":"fn(object: Object, propertyName: string)"},"setInitValue":{"!doc":"<p>Sets the init value of the given property</p>","!type":"fn(object: Object, propertyName: string, value: Object)"},"setThemed":{"!doc":"<p>Sets a themed property</p>","!type":"fn(object: Object, propertyName: string, value: Object)"},"setThemeValue":{"!doc":"<p>Sets the theme value of the given property</p>","!type":"fn(object: Object, propertyName: string, value: Object)"},"setUserValue":{"!doc":"<p>Sets the user value of the given property</p>","!type":"fn(object: Object, propertyName: string, value: Object)"}},"Request":{"!doc":"<p>Static helpers for handling <span class=\"caps\">HTTP</span> requests.</p>","isCrossDomain":{"!doc":"<p>Whether <span class=\"caps\">URL</span> given points to resource that is cross-domain,\ni.e. not of same origin.</p>","!type":"fn(url: string) -> bool"},"isMethod":{"!doc":"<p>Determine if given <span class=\"caps\">HTTP</span> method is valid.</p>","!type":"fn(method: string) -> bool"},"isSuccessful":{"!doc":"<p>Determine if given <span class=\"caps\">HTTP</span> status is considered successful.</p>","!type":"fn(status: number) -> bool"},"methodAllowsRequestBody":{"!doc":"<p>Request body is ignored for <span class=\"caps\">HTTP</span> method <span class=\"caps\">GET</span> and <span class=\"caps\">HEAD</span>.</p>\n\n<p>See <a href=\"http://www.w3.org/TR/XMLHttpRequest2/#the-send-method\">http://www.w3.org/TR/XMLHttpRequest2/#the-send-method</a>.</p>","!type":"fn(method: string) -> bool"}},"ResourceManager":{"!proto":"qx.core.Object","!doc":"<p>Contains information about images (size, format, clipping, ...) and\nother resources like <span class=\"caps\">CSS</span> files, local data, ...</p>","!type":"fn()","prototype":{"getCombinedFormat":{"!doc":"<p>Returns the format of the combined image (png, gif, ...), if the given\nresource identifier is an image contained in one, or the empty string\notherwise.</p>","!type":"fn(id: string) -> string"},"getData":{"!doc":"<p>Get information about an resource.</p>","!type":"fn(id: string) -> +Array"},"getImageFormat":{"!doc":"<p>Returns the format of the given resource ID,\nwhen it is not a known image <code>null</code>\nis returned.</p>","!type":"fn(id: string) -> string"},"getImageHeight":{"!doc":"<p>Returns the height of the given resource ID,\nwhen it is not a known image <code>0</code> is\nreturned.</p>","!type":"fn(id: string) -> +Integer"},"getImageWidth":{"!doc":"<p>Returns the width of the given resource ID,\nwhen it is not a known image <code>0</code> is\nreturned.</p>","!type":"fn(id: string) -> +Integer"},"has":{"!doc":"<p>Whether the registry has information about the given resource.</p>","!type":"fn(id: string) -> bool"},"toDataUri":{"!doc":"<p>Construct a data: <span class=\"caps\">URI</span> for an image resource.</p>\n\n<p>Constructs a data: <span class=\"caps\">URI</span> for a given resource id, if this resource is\ncontained in a base64 combined image. If this is not the case (e.g.\nbecause the combined image has not been loaded yet), returns the direct\n<span class=\"caps\">URI</span> to the image file itself.</p>","!type":"fn(resid: string) -> string"},"toUri":{"!doc":"<p>Converts the given resource ID to a full qualified <span class=\"caps\">URI</span></p>","!type":"fn(id: string) -> string"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.util.ResourceManager"}},"ResponseParser":{"!doc":"<p>Parsers for parsing response strings (especially for <span class=\"caps\">XHR</span>).</p>\n\n<p>Known parsers are: <code>&#8220;json&#8221;</code> and <code>&#8220;xml&#8221;</code>.</p>","!type":"fn()","prototype":{"_getParser":{"!doc":"<p>Gets the parser.</p>\n\n<p>If not defined explicitly using {@link #setParser},\nthe parser is inferred from the content type.</p>\n\n<p>Override this method to extend the list of content types\nbeing handled.</p>","!type":"fn(contentType: string) -> fn()"},"parse":{"!doc":"<p>Returns given response parsed with parser\ndetermined by {@link #_getParser}.</p>","!type":"fn(response: string, contentType: string) -> string"},"setParser":{"!doc":"<p>Set parser used to parse response once request has\ncompleted successfully.</p>\n\n<p>Usually, the parser is correctly inferred from the\ncontent type of the response. This method allows to force the\nparser being used, e.g. if the content type returned from\nthe backend is wrong or the response needs special parsing.</p>\n\n<p>Parser most typically used can be referenced symbolically.\nTo cover edge cases, a function can be given. When parsing\nthe response, this function is called with the raw response as\nfirst argument.</p>","!type":"fn(parser: string) -> fn()"}}},"RingBuffer":{"!proto":"Object","!doc":"<p>An memory container which stores arbitrary data up to a maximum number of\nentries. When new entries come in an the maximum is reached, the oldest\nentries are deleted.</p>\n\n<p>A mark feature also exists which can be used to remember a point in time.\nWhen retrieving entriues, it is possible to get only those entries\nafter the marked time. This is useful if data from the buffer is extracted\nand processed. Whenever this happens, a mark() call can be used so that the\nnext extraction will only get new data.</p>","!type":"fn()","prototype":{"__addToIndex":{"!doc":"<p>Adds a number to an ringbuffer index. Does a modulus calculation,\ni. e. if the index leaves the ringbuffer space it will wrap around to\nthe other end of the ringbuffer.</p>","!type":"fn(idx: number, addMe: number) -> number"},"addEntry":{"!doc":"<p>Adds a single entry</p>","!type":"fn(entry: Object)"},"clear":{"!doc":"<p>Clears all entries</p>","!type":"fn()"},"clearMark":{"!doc":"<p>Removes the current mark position</p>","!type":"fn()"},"getAllEntries":{"!doc":"<p>Returns all stored entries. Mark is ignored.</p>","!type":"fn() -> +Array"},"getEntries":{"!doc":"<p>Returns entries which have been added previously.</p>","!type":"fn(count: +Integer, startingFromMark?: bool) -> +Array"},"getMaxEntries":{"!doc":"<p>Get the maximum number of entries to hold</p>","!type":"fn() -> +Integer"},"mark":{"!doc":"<p>Remembers the current position in the ring buffer</p>","!type":"fn()"},"setMaxEntries":{"!doc":"<p>Set the maximum number of messages to hold. If null the number of\nmessages is not limited.</p>\n\n<p>Warning: Changing this property will clear the events logged so far.</p>","!type":"fn(maxEntries: +Integer)"}}},"Serializer":{"!doc":"<p>This is an util class responsible for serializing qooxdoo objects.</p>","__toUriParameter":{"!doc":"<p>Helper method for {@link #toUriParameter}. Check for qooxdoo objects\nand returns the serialized name value pair for the given parameter.</p>","!type":"fn(name: string, value: Object, qxSerializer: fn()) -> string"},"toJson":{"!doc":"<p>Serializes the properties of the given qooxdoo object into a json object.</p>","!type":"fn(object: +qx.core.Object, qxSerializer?: fn(), dateFormat?: +qx.util.format.DateFormat) -> string"},"toNativeObject":{"!doc":"<p>Serializes the properties of the given qooxdoo object into a native\nobject.</p>","!type":"fn(object: +qx.core.Object, qxSerializer: fn(), dateFormat: +qx.util.format.DateFormat) -> string"},"toUriParameter":{"!doc":"<p>Serializes the properties of the given qooxdoo object. To get the\nserialization working, every property needs to have a string\nrepresentation because the value of the property will be concatenated to the\nserialized string.</p>","!type":"fn(object: +qx.core.Object, qxSerializer: fn(), dateFormat: +qx.util.format.DateFormat) -> string"}},"StringBuilder":{"!proto":"qx.type.BaseArray","!doc":"<p>A string builder class</p>\n\n<p>+= operator is faster in Firefox and Opera.\nArray push/join is faster in Internet Explorer</p>\n\n<p>Even with this wrapper, which costs some time, this is\nfaster in Firefox than the alternative Array concat in\nall browsers (which is in relation to IE&#8217;s performance issues\nonly marginal). The IE performance loss caused by this\nwrapper is not relevant.</p>\n\n<p>So this class seems to be the best compromise to handle\nstring concatenation.</p>","!type":"fn()","prototype":{"add":{"!doc":"<p>Adds new strings. Supports multiple arguments.</p>","!type":"fn(varargs: string)"},"clear":{"!doc":"<p>Removes all content</p>","!type":"fn()"},"get":{"!doc":"<p>Returns the concatted strings.</p>","!type":"fn() -> string"},"isEmpty":{"!doc":"<p>Whether the string builder is empty</p>","!type":"fn() -> bool"},"size":{"!doc":"<p>Returns the size of the strings</p>","!type":"fn() -> +Integer"}}},"StringEscape":{"!doc":"<p>Generic escaping and unescaping of <span class=\"caps\">DOM</span> strings.</p>\n\n<p>{@link qx.bom.String} for (un)escaping of <span class=\"caps\">HTML</span> strings.\n{@link qx.xml.String} for (un)escaping of <span class=\"caps\">XML</span> strings.</p>","escape":{"!doc":"<p>generic escaping method</p>","!type":"fn(str: string, charCodeToEntities: +Map) -> string"},"unescape":{"!doc":"<p>generic unescaping method</p>","!type":"fn(str: string, entitiesToCharCode: +Map) -> string"}},"StringSplit":{"!doc":"<p>Implements an <span class=\"caps\">ECMA</span>-compliant, uniform cross-browser split method</p>","split":{"!doc":"<p><span class=\"caps\">ECMA</span>-compliant, uniform cross-browser split method</p>","!type":"fn(str: string, separator: +RegExp, limit?: +Integer) -> string"}},"TimerManager":{"!proto":"qx.core.Object","!doc":"<p>Timer manipulation for handling multiple timed callbacks with the use of\nonly a single native timer object.</p>\n\n<p>Use of these timers is via the methods start() and stop().  Examples:</p>\n\n<pre class=\"javascript\">\nvar timer = qx.util.TimerManager.getInstance();\n\n// Start a 5-second recurrent timer.\n// Note that the first expiration is after 3 seconds\n// (last parameter is 3000) but each subsequent expiration is\n// at 5 second intervals.\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"Recurrent 5-second timer: \" + timerId);\n            },\n            5000,\n            this,\n            null,\n            3000);\n\n// Start a 1-second one-shot timer\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"One-shot 1-second timer: \" + timerId);\n            },\n            0,\n            this,\n            null,\n            1000);\n\n// Start a 2-second recurrent timer that stops itself after\n// three iterations\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"Recurrent 2-second timer with limit 3:\" +\n                         timerId);\n              if (++userData.count == 3)\n              {\n                this.debug(\"Stopping recurrent 2-second timer\");\n                timer.stop(timerId);\n              }\n            },\n            2000,\n            this,\n            { count : 0 });\n\n// Start an immediate one-shot timer\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"Immediate one-shot timer: \" + timerId);\n            });\n</pre>","prototype":{"__insertNewTimer":{"!doc":"<p>Insert a timer on the time-ordered list of active timers.</p>","!type":"fn(expireAt: +Integer, timerId: +Integer)"},"__processQueue":{"!doc":"<p>Process the queue of timers.  Call the registered callback function for\nany timer which has expired.  If the timer is marked as recurrent, the\ntimer is restarted with the recurrent timeout following completion of\nthe callback function.</p>","!type":"fn()"},"start":{"!doc":"<p>Start a new timer</p>","!type":"fn(callback: fn(), recurTime: +Integer, context: +qx.core.Object, userData: Object, initialTime: +Integer) -> +Integer"},"stop":{"!doc":"<p>Stop a running timer</p>","!type":"fn(timerId: +Integer)"}},"getInstance":{"!doc":"<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>","!type":"fn() -> +qx.util.TimerManager"}},"Uri":{"!doc":"<p>Static helpers for parsing and modifying URIs.</p>","__toParameterPair":{"!doc":"<p>Encodes key/value to <span class=\"caps\">URI</span> safe string and pushes to given array.</p>","!type":"fn(key: string, value: string, parts: +Array, post: bool)"},"appendParamsToUrl":{"!doc":"<p>Append string to query part of <span class=\"caps\">URL</span>. Respects existing query.</p>","!type":"fn(url: string, params: string) -> string"},"getAbsolute":{"!doc":"<p>Takes a relative <span class=\"caps\">URI</span> and returns an absolute one.</p>","!type":"fn(uri: string) -> string"},"parseUri":{"!doc":"<p>Split <span class=\"caps\">URL</span></p>\n\n<p>Code taken from:\n  parseUri 1.2.2\n  (c) Steven Levithan \n  <span class=\"caps\">MIT</span> License</p>","!type":"fn(str: string, strict: bool) -> Object"},"toParameter":{"!doc":"<p>Serializes an object to <span class=\"caps\">URI</span> parameters (also known as query string).</p>\n\n<p>Escapes characters that have a special meaning in URIs as well as\numlauts. Uses the global function encodeURIComponent, see\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent</a></p>\n\n<p>Note: For <span class=\"caps\">URI</span> parameters that are to be sent as\napplication/x-www-form-urlencoded (POST), spaces should be encoded\nwith &#8221;+&#8221;.</p>","!type":"fn(obj: Object, post: bool) -> string"}},"Validate":{"!doc":"<p>This static class contains a set of default validators.\nThese validators are listed twice\n<ul>\n  <li>number</li>\n  <li>email</li>\n  <li>string</li>\n  <li>url</li>\n  <li>color</li>\n</ul>\nAll these validators don&#8217;t need an input so the listed function just return a\nmethod fitting for the use in the property system.\nThe methods with the check prefix are the returned methods and can be used in\nother contexts without the property system.</p>\n\n<p>There are three more validators\n<ul>\n  <li>range</li>\n  <li>inArray</li>\n  <li>regExp</li>\n</ul>\nThese methods do need some addition parameters to specify the validator. So\nthere is no check function which you can use in other contexts because the\ncheck function for the validation is created based on the given parameter.</p>\n\n<p><strong>Example usage for a property</strong></p>\n\n<code>validate: qx.util.Validate.number()</code>\n\n<code>validate: qx.util.Validate.range(0, 100)</code>\n\n<p>Because the methods without the check prefix return a validation method,\nthe function must be called at the property definition. So don&#8217;t forget the\nending brackets for those methods without parameters!\nFor the correct usage, take an additional look at the documentation of the\n{@link qx.core.Property} class.</p>","checkColor":{"!doc":"<p>The function checks the incoming value to see if it is a color.\nIf not, an ValidationError will be thrown. The check itself will be\ndelegated to the {@link qx.util.ColorUtil#stringToRgb} method.\nIf you want to use the color check in a property definition,\nuse the {@link #color} method.</p>","!type":"fn(value: Object, formItem: +qx.ui.form.IForm, errorMessage?: string)"},"checkEmail":{"!doc":"<p>The function checks the incoming value to see if it is an email address.\nIf not, an ValidationError will be thrown.\nIf you want to use the email check in a property definition,\nuse the {@link #email} method.</p>","!type":"fn(value: Object, formItem: +qx.ui.form.IForm, errorMessage?: string)"},"checkNumber":{"!doc":"<p>The function checks the incoming value to see if it is a number.\nIf not, an ValidationError will be thrown.\nIf you want to use the number check in a property definition,\nuse the {@link #number} method.</p>","!type":"fn(value: Object, formItem: +qx.ui.form.IForm, errorMessage?: string)"},"checkString":{"!doc":"<p>The function checks the incoming value to see if it is a string.\nIf not, an ValidationError will be thrown.\nIf you want to use the string check in a property definition,\nuse the {@link #string} method.</p>","!type":"fn(value: Object, formItem: +qx.ui.form.IForm, errorMessage?: string)"},"checkUrl":{"!doc":"<p>The function checks the incoming value to see if it is an url.\nIf not, an ValidationError will be thrown.\nIf you want to use the url check in a property definition,\nuse the {@link #url} method.</p>","!type":"fn(value: Object, formItem: +qx.ui.form.IForm, errorMessage?: string)"},"color":{"!doc":"<p>Returns the function that checks for a color.</p>","!type":"fn(errorMessage?: string) -> fn()"},"email":{"!doc":"<p>Returns the function that checks for an email address.</p>","!type":"fn(errorMessage?: string) -> fn()"},"inArray":{"!doc":"<p>Returns a function that checks if the given value is in the array.\nIf the value given to the returned function is not in the array, a\nValidationError will be thrown.</p>","!type":"fn(array: +Array, errorMessage?: string) -> fn()"},"number":{"!doc":"<p>Returns the function that checks for a number.</p>","!type":"fn(errorMessage?: string) -> fn()"},"range":{"!doc":"<p>Returns a function that checks if the number is in the given range.\nThe range includes the border values.\nA range from 1 to 2 accepts the values 1 equally as everything up to 2\nincluding the 2.\nIf the value given to the returned function is out of the range, a\nValidationError will be thrown.</p>","!type":"fn(from: number, to: number, errorMessage?: string) -> fn()"},"regExp":{"!doc":"<p>Returns a function that checks if the given value fits the RegExp.\nFor testing, the function uses the RegExp.test function.\nIf the value given to the returned function does not fit the RegExp, a\nValidationError will be thrown.\nincoming</p>","!type":"fn(reg: +RegExp, errorMessage?: string) -> fn()"},"string":{"!doc":"<p>Returns the function that checks for a string.</p>","!type":"fn(errorMessage?: string) -> fn()"},"url":{"!doc":"<p>Returns the function that checks for an url.</p>","!type":"fn(errorMessage?: string) -> fn()"}},"ValueManager":{"!proto":"qx.core.Object","!doc":"<p>Abstract base class for all managers of themed values.</p>","!type":"fn()","prototype":{"_getDynamic":{"!doc":"<p>Returns the dynamics map.</p>","!type":"fn() -> +Map"},"_setDynamic":{"!doc":"<p>Sets the dynamics map.</p>","!type":"fn(value: +Map)"},"isDynamic":{"!doc":"<p>Whether a value is interpreted dynamically</p>","!type":"fn(value: string) -> bool"},"resolve":{"!doc":"<p>Returns the dynamically interpreted result for the incoming value,\n(if available), otherwise returns the original value</p>","!type":"fn(value: string) -> Object"},"resolveDynamic":{"!doc":"<p>Returns the dynamically interpreted result for the incoming value</p>","!type":"fn(value: string) -> Object"}}},"Wheel":{"!doc":"<p>Util for mouse wheel normalization.</p>","__normalize":{"!doc":"<p>Normalizer for the mouse wheel data.</p>","!type":"fn(delta: number) -> number"},"__recalculateMultiplicator":{"!doc":"<p>Recalculates the factor with which the calculated delta is normalized.</p>","!type":"fn()"},"getDelta":{"!doc":"<p>Get the amount the wheel has been scrolled</p>","!type":"fn(domEvent: +Event, axis?: string) -> +Integer"}}},"xml":{"Document":{"!doc":"<p>Cross browser <span class=\"caps\">XML</span> document creation <span class=\"caps\">API</span></p>\n\n<p>The main purpose of this class is to allow you to create <span class=\"caps\">XML</span> document objects in a\ncross-browser fashion. Use <code>create</code> to create an empty document,\n<code>fromString</code> to create one from an existing <span class=\"caps\">XML</span> text. Both methods\nreturn a <strong>native <span class=\"caps\">DOM</span> object</strong>. That means you use standard <span class=\"caps\">DOM</span> methods on such\nan object (e.g. <code>createElement</code>).</p>\n\n<p>The following links provide further information on <span class=\"caps\">XML</span> documents:</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document\">W3C Interface Specification</a></li>\n<li><a href=\"http://msdn2.microsoft.com/en-us/library/ms535918.aspx\">MS xml Object</a></li>\n<li><a href=\"http://msdn2.microsoft.com/en-us/library/ms764622.aspx\"><span class=\"caps\">MSXML</span> GUIDs and ProgIDs</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Parsing_and_serializing_XML\"><span class=\"caps\">MDN</span> Parsing and Serializing <span class=\"caps\">XML</span></a></li>\n</ul>","create":{"!doc":"<p>Create an <span class=\"caps\">XML</span> document.</p>\n\n<p>Returns a native <span class=\"caps\">DOM</span> document object, set up for <span class=\"caps\">XML</span>.</p>","!type":"fn(namespaceUri?: string, qualifiedName?: string) -> +Document"},"fromString":{"!doc":"<p>The string passed in is parsed into a <span class=\"caps\">DOM</span> document.</p>","!type":"fn(str: string) -> +Document"},"isXmlDocument":{"!doc":"<p>Whether the given element is a <span class=\"caps\">XML</span> document or element\nwhich is part of a <span class=\"caps\">XML</span> document.</p>","!type":"fn(elem: +Document) -> bool"}},"Element":{"!doc":"<p>Cross browser <span class=\"caps\">XML</span> Element <span class=\"caps\">API</span></p>\n\n<p><span class=\"caps\">API</span> to select, query and serialize <span class=\"caps\">XML</span> elements.</p>\n\n<p>Further information:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Parsing_and_serializing_XML\"><span class=\"caps\">MDN</span> Parsing and Serializing <span class=\"caps\">XML</span></a></li>\n</ul>\n\n<p>Please note that nodes selected using the <code>selectSingleNode()</code> and\n<code>selectNodes()</code> methods remain in their document context so\n<code>qx.xml.Element.selectNodes(foo, &#8221;//bar&#8221;);</code>\nwill search the entire document for any nodes named &#8220;bar&#8221;, not just the\n<code>foo</code> node.</p>","createSubElementNS":{"!doc":"<p>Creates an element with the given namespace and appends it to an existing\nelement</p>","!type":"fn(document: +Document, parent: +Element, name: string, namespaceUri: string) -> +Element"},"getAttributeNS":{"!doc":"<p>Get the value of the attribute with the given namespace and name</p>","!type":"fn(element: +Element, namespaceUri: string, name: string) -> string"},"getElementsByTagNameNS":{"!doc":"<p>Returns a list of elements with the given tag name belonging to the given namespace</p>\n\n<p>(See\n<a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagNameNS\"><span class=\"caps\">MDN</span>\nReference</a>).</p>","!type":"fn(element: +Element, namespaceURI: Object, tagname: string) -> +Element"},"getSingleNodeText":{"!doc":"<p>Selects the first XmlNode that matches the XPath expression and returns the text content of the element</p>","!type":"fn(element: +Element, query: string) -> string"},"selectNodes":{"!doc":"<p>Selects a list of nodes matching the XPath expression.</p>","!type":"fn(element: +Element, query: string, namespaces: +Map) -> +Element"},"selectSingleNode":{"!doc":"<p>Selects the first XmlNode that matches the XPath expression.</p>","!type":"fn(element: +Element, query: string, namespaces: +Map) -> +Element"},"serialize":{"!doc":"<p>The subtree rooted by the specified element or document is serialized to a string.</p>","!type":"fn(element: +Element) -> string"},"setAttributeNS":{"!doc":"<p>Adds or sets an attribute with the given namespace on a node</p>","!type":"fn(document: +Document, element: +Element, namespaceUri: string, name: string, value: string)"}},"String":{"!doc":"<p>Escaping and unescaping of <span class=\"caps\">XML</span> strings.</p>","escape":{"!doc":"<p>Escapes the characters in a <code>String</code> using <span class=\"caps\">XML</span> entities.</p>\n\n<p>For example: <tt>&#8220;bread&#8221; &amp; &#8220;butter&#8221;</tt> =>\n<tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.</p>\n\n<p>Supports only the four basic <span class=\"caps\">XML</span> entities (gt, lt, quot, amp).\nDoes not support DTDs or external entities.\nNote that unicode characters greater than 0&#215;7f are currently escaped to their numerical \\\\u equivalent.</p>","!type":"fn(str: string) -> string"},"unescape":{"!doc":"<p>Unescapes a string containing <span class=\"caps\">XML</span> entity escapes to a string\ncontaining the actual Unicode characters corresponding to the\nescapes.</p>\n\n<p>Supports only the four basic <span class=\"caps\">XML</span> entities (gt, lt, quot, amp).\nDoes not support DTDs or external entities.</p>","!type":"fn(str: string) -> string"}}}},"qxWeb":{"!proto":"qx.type.BaseArray","!doc":"<p>The Core module&#8217;s responsibility is to query the <span class=\"caps\">DOM</span> for elements and offer\nthese elements as a collection. The Core module itself does not offer any methods to\nwork with the collection. These methods are added by the other included modules,\nsuch as Manipulating or Attributes.</p>\n\n<p>Core also provides the plugin <span class=\"caps\">API</span> which allows modules to attach either\nstatic functions to the global <code>q</code> object or define methods on the\ncollection it returns.</p>\n\n<p>By default, the core module is assigned to a global module named <code>q</code>.\nIn case <code>q</code> is already defined, the name <code>qxWeb</code>\nis used instead.</p>\n\n<p>For further details, take a look at the documentation in the\n<a href=\"http://manual.qooxdoo.org/4.1/pages/website.html\" target=\"_blank\">user manual</a>.</p>","$attach":{"!doc":"<p>This is an <span class=\"caps\">API</span> for module development and can be used to attach new methods\nto {@link q}.</p>","!type":"fn(module: +Map)"},"$attachInit":{"!doc":"<p>This is an <span class=\"caps\">API</span> for module development and can be used to attach new initialization\nmethods to {@link q} which will be called when a new collection is\ncreated.</p>","!type":"fn(init: fn())"},"$attachStatic":{"!doc":"<p>This is an <span class=\"caps\">API</span> for module development and can be used to attach new methods\nto {@link q}.</p>","!type":"fn(module: +Map)"},"$init":{"!doc":"<p>Internal helper to initialize collections.</p>","!type":"fn(arg: Object, clazz: +Class) -> +q"},"define":{"!doc":"<p>Define a new class using the qooxdoo class system.</p>","!type":"fn(name?: string, config?: +Map) -> fn()"},"set":{"!doc":"<p>Sets the string value of a cookie.</p>","!type":"fn(key: string, value: string, expires?: number, path?: string, domain?: string, secure?: bool)"},"removeAll":{"!doc":"<p>Remove all elements from the array</p>","!type":"fn(arr: +Array) -> +Array"},"$getRegistry":{"!doc":"<p>Returns all registered event normalizers</p>","!type":"fn() -> +Map"},"unique":{"!doc":"<p>Recreates an array which is free of all duplicate elements from the original.\nThis method do not modifies the original array!\nKeep in mind that this methods deletes undefined indexes.</p>","!type":"fn(arr: +Array) -> +Array"},"startsWith":{"!doc":"<p>Check whether the string starts with the given substring.</p>","!type":"fn(fullstr: string, substr: string) -> bool"},"get":{"!doc":"<p>Helper method which provides direct access to templates stored as <span class=\"caps\">HTML</span> in\nthe <span class=\"caps\">DOM</span>. The <span class=\"caps\">DOM</span> node with the given ID will be treated as a template,\nparsed and a new <span class=\"caps\">DOM</span> element will be returned containing the parsed data.\nKeep in mind that templates can only have one root element.\nAdditionally, you should not put the template into a regular, hidden\n<span class=\"caps\">DOM</span> element because the template may not be valid <span class=\"caps\">HTML</span> due to the containing\nmustache tags. We suggest to put it into a script tag with the type\n<code>text/template</code>.</p>","!type":"fn(id: string, view: Object, partials: Object) -> +qxWeb"},"initWidgets":{"!doc":"<p>Fetches elements with a data attribute named <code>data-qx-class</code>\ncontaining the class name of the desired widget and initializes them as\nwidgets.</p>","!type":"fn(selector?: string)"},"escapeHtml":{"!doc":"<p>Escapes the characters in a <code>String</code> using <span class=\"caps\">HTML</span> entities.</p>\n\n<p>For example: <tt>&#8220;bread&#8221; &amp; &#8220;butter&#8221;</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\nSupports all known <span class=\"caps\">HTML</span> 4.0 entities, including funky accents.</p>","!type":"fn(str: string) -> string"},"isNode":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> node</p>","!type":"fn(selector: +Node) -> bool"},"remove":{"!doc":"<p>Removes a registered listener by the given id.</p>","!type":"fn(id: string)"},"removeResponse":{"!doc":"<p>Removes a response that was configured with {@link #configure}</p>","!type":"fn(method: string, url: string)"},"addFilter":{"!doc":"<p>Adds a <span class=\"caps\">URL</span> filtering function to decide whether a request should be handled\nby the FakeServer or passed to the regular XMLHttp implementation.\nSee <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\nfor details.</p>","!type":"fn(filter: fn())"},"forEachSession":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"throttle":{"!doc":"<p>Returns a throttled version of the given callback. The execution of the callback\nis throttled which means it is only executed in the given interval.\nThis mechanism is very useful for event handling: only in specified intervals\nthe event should be handled (e.g. at resize of the browser window) to prevent flooding\nthe handler with a large amounts of events.\nAs default the <code>leading</code> and <code>trailing</code> calls are executed.</p>","!type":"fn(callback: fn(), interval: number, options: +Map) -> fn()"},"removeLocalItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"getFakeServer":{"!doc":"<p>Creates and configures a FakeServer if necessary and returns it.</p>","!type":"fn() -> Object"},"removeSessionItem":{"!doc":"<p>Removes an item form the storage.</p>","!type":"fn(key: string)"},"hyphenate":{"!doc":"<p>Converts a camelcased string to a hyphenated (separated by &#8217;-&#8217;) string.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">q.string.hyphenate(\"weLikeCookies\"); //returns \"we-like-cookies\"</pre>","!type":"fn(str: string) -> string"},"getSessionItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"fromArguments":{"!doc":"<p>Convert an arguments object into an array.</p>","!type":"fn(args: +arguments, offset?: number) -> +Array"},"insertBefore":{"!doc":"<p>Insert an element into the array before a given second element.</p>","!type":"fn(arr: +Array, obj: Object, obj2: Object) -> +Array"},"$registerNormalization":{"!doc":"<p>Registers a normalization function for the given event types. Listener\ncallbacks for these types will be called with the return value of the\nnormalization function instead of the regular event object.</p>\n\n<p>The normalizer will be called with two arguments: The original event\nobject and the element on which the event was triggered</p>","!type":"fn(types: string, normalizer: fn())"},"clone":{"!doc":"<p>Return a copy of an Object</p>","!type":"fn(source: Object, deep: bool) -> Object"},"equalNodes":{"!doc":"<p>Determines if two <span class=\"caps\">DOM</span> nodes are equal as defined in the\n<a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode\"><span class=\"caps\">DOM</span> Level 3 isEqualNode spec</a>.\nAlso works in legacy browsers without native <em>isEqualNode</em> support.</p>","!type":"fn(node1: string, node2: string) -> bool"},"includeStylesheet":{"!doc":"<p>Includes a Stylesheet file</p>","!type":"fn(uri: string, doc?: +Document)"},"getWindow":{"!doc":"<p>Returns the DOM2 <code>defaultView</code> (window) for the given node.</p>","!type":"fn(selector: +Node) -> +Window"},"render":{"!doc":"<p>Original and only template method of mustache.js. For further\ndocumentation, please visit <a href=\"https://github.com/janl/mustache.js\">mustache.js</a>.</p>","!type":"fn(template: string, view: Object, partials: Object) -> string"},"renderToNode":{"!doc":"<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\nand output is equal to {@link #get}. The advantage over {@link #get}\nis that you don&#8217;t need a <span class=\"caps\">HTML</span> template but can use a template\nstring and still get a collection. Keep in mind that templates\ncan only have one root element.</p>","!type":"fn(template: string, view: Object, partials: Object) -> +qxWeb"},"endsWith":{"!doc":"<p>Check whether the string ends with the given substring.</p>","!type":"fn(fullstr: string, substr: string) -> bool"},"isDocument":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> document object</p>","!type":"fn(node: Object) -> bool"},"setSessionItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"},"getSessionLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> number"},"script":{"!doc":"<p>Returns a predefined script tag wrapper which can be used to load data\nfrom cross-domain origins.</p>","!type":"fn(url: string) -> +qx.bom.request.Script"},"isTextNode":{"!doc":"<p>Checks whether the given object is a <span class=\"caps\">DOM</span> text node</p>","!type":"fn(obj: Object) -> bool"},"forEachLocal":{"!doc":"<p>Helper to access every stored item.</p>","!type":"fn(callback: fn(), scope: Object)"},"getValues":{"!doc":"<p>Get the values of a map as array</p>","!type":"fn(map: Object) -> +Array"},"contains":{"!doc":"<p>Whether the map contains the given value.</p>","!type":"fn(map: Object, value: Object) -> bool"},"update":{"!doc":"<p>Queries for all input and textarea elements on the page and updates\ntheir placeholder.</p>","!type":"fn()"},"insertAfter":{"!doc":"<p>Insert an element into the array after a given second element.</p>","!type":"fn(arr: +Array, obj: Object, obj2: Object) -> +Array"},"$getHookRegistry":{"!doc":"<p>Returns all registered event hooks</p>","!type":"fn() -> +Map"},"firstUp":{"!doc":"<p>Convert the first character of the string to upper case.</p>","!type":"fn(str: string) -> string"},"getDocument":{"!doc":"<p>Returns the owner document of the given node</p>","!type":"fn(selector: +Node) -> +Document"},"camelCase":{"!doc":"<p>Converts a hyphenated string (separated by &#8217;-&#8217;) to camel case.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">q.string.camelCase(\"I-like-cookies\"); //returns \"ILikeCookies\"</pre>","!type":"fn(str: string) -> string"},"getLocalKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: number) -> string"},"jsonp":{"!doc":"<p>Returns a predefined script tag wrapper which can be used to load data\nfrom cross-domain origins via <span class=\"caps\">JSONP</span>.</p>","!type":"fn(url: string, settings?: +Map) -> +qx.bom.request.Jsonp"},"restore":{"!doc":"<p>Stops the FakeServer and removes all configured responses and/or filters.</p>","!type":"fn()"},"$registerEventHook":{"!doc":"<p>Registers an event hook for the given event types.</p>","!type":"fn(types: string, registerHook: fn(), unregisterHook?: fn())"},"on":{"!doc":"<p>Adds a route handler for the given channel. The route is called\nif the {@link #emit} method finds a match.</p>","!type":"fn(channel: string, type: string, handler: fn(), scope?: Object) -> string"},"onAny":{"!doc":"<p>Adds a handler for the &#8220;any&#8221; channel. The &#8220;any&#8221; channel is called\nbefore all other channels.</p>","!type":"fn(type: string, handler: fn(), scope?: Object) -> string"},"firstLow":{"!doc":"<p>Convert the first character of the string to lower case.</p>","!type":"fn(str: string) -> string"},"create":{"!doc":"<p>Creates a new collection from the given argument. This can either be an\n<span class=\"caps\">HTML</span> string, a single <span class=\"caps\">DOM</span> element or an array of elements</p>\n\n<p>When no <code>context</code> is given the global document is used to\ncreate new <span class=\"caps\">DOM</span> elements.</p>\n\n<strong>Note:</strong> When a complex HTML string is provided the <code>innerHTML</code>\nmechanism of the browser is used. Some browsers do filter out elements like <code>&lt;html&gt;</code>,\n<code>&lt;head&gt;</code> or <code>&lt;body&gt;</code>. The better approach is to create\na single element and the appending the child nodes like in the example below.","!type":"fn(html: string, context?: +Document) -> +qxWeb"},"isElement":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> element</p>","!type":"fn(selector: Object) -> bool"},"escapeRegexpChars":{"!doc":"<p>Escapes all chars that have a special meaning in regular expressions.</p>","!type":"fn(str: string) -> string"},"del":{"!doc":"<p>Deletes the string value of a cookie.</p>","!type":"fn(key: string, path?: string, domain?: string)"},"clearSession":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"getNodeName":{"!doc":"<p>Get the <span class=\"caps\">DOM</span> node&#8217;s name as a lowercase string</p>","!type":"fn(selector: +Node) -> string"},"getNodeText":{"!doc":"<p>Returns the text content of a node where the node type may be one of\nNODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT, NODE_CDATA</p>","!type":"fn(selector: +Node) -> string"},"cast":{"!doc":"<p>Converts an array like object to any other array like\nobject.</p>\n\n<p>Attention: The returned array may be same\ninstance as the incoming one if the constructor is identical!</p>","!type":"fn(object: Object, constructor: fn(), offset?: number) -> +Array"},"resource":{"!type":"fn(description?: +Map) -> +qx.bom.rest.Resource"},"isDocumentFragment":{"!doc":"<p>Checks if the given object is a <span class=\"caps\">DOM</span> document fragment object</p>","!type":"fn(node: Object) -> bool"},"add":{"!doc":"<p>Adds a new environment setting which can be queried via {@link #get}.</p>","!type":"fn(key: string, value: Object) -> +qxWeb"},"min":{"!doc":"<p>Returns the lowest value in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: +Array) -> number"},"isWindow":{"!doc":"<p>Check whether the given object is a browser window object.</p>","!type":"fn(obj: Object) -> bool"},"emit":{"!doc":"<p>Sends a message on the given channel and informs all matching route handlers.</p>","!type":"fn(channel: string, path: string, params: +Map, customData: Object)"},"invert":{"!doc":"<p>Inverts a map by exchanging the keys with the values.</p>","!type":"fn(map: Object) -> Object"},"ready":{"!doc":"<p>Executes the given function once the document is ready.</p>","!type":"fn(callback: fn())"},"clearLocal":{"!doc":"<p>Deletes every stored item in the storage.</p>","!type":"fn()"},"configure":{"!doc":"<p>Configures a set of fake <span class=\"caps\">HTTP</span> responses. Each response is defined as a map\nthat must provide the following keys:\n<ul>\n  <li><code>method</code> <span class=\"caps\">HTTP</span> method to respond to, e.g. <code><span class=\"caps\">PUT</span></code></li>\n  <li><code>url</code> <span class=\"caps\">URL</span> used to match requests to fake responses. Can be\n  a RegExp or a String. <span class=\"caps\">REST</span>-style parameter placeholders in curly braces\n  will be replaced with wildcards, e.g. the string &#8221;/resource/{resourceId}&#8221;\n  is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n  <li><code>response</code> This can be either:\n    <ul>\n      <li>a string: This will be the response body, status code will be 200</li>\n      <li>an array containing the status code, a map of response headers and\n        the response text, e.g. <code>[200, { &#8220;Content-Type&#8221;: &#8220;text/html&#8221; }, &#8220;OK&#8221;]</code>\n      </li>\n      <li>a function: This will be called with a FakeXMLHttpRequest object as\n      the only argument. Its <code>respond</code> method must be called to send a response.\n      See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n      </li>\n    </ul>\n  </li>\n</ul></p>","!type":"fn(responseData: +Map)"},"getSessionKey":{"!doc":"<p>Returns the named key at the given index.</p>","!type":"fn(index: number) -> string"},"max":{"!doc":"<p>Returns the highest value in the given array. Supports\nnumeric values only.</p>","!type":"fn(arr: +Array) -> number"},"getLocalItem":{"!doc":"<p>Returns the stored item.</p>","!type":"fn(key: string) -> Object"},"$unregisterNormalization":{"!doc":"<p>Unregisters a normalization function from the given event types.</p>","!type":"fn(types: string, normalizer: fn())"},"removeFilter":{"!doc":"<p>Remove a filter that was added with {@link #addFilter}</p>","!type":"fn(filter: fn())"},"isBlockNode":{"!doc":"<p>Checks if the given node is a block node</p>","!type":"fn(selector: +Node) -> bool"},"equals":{"!doc":"<p>Check whether the two arrays have the same content. Checks only the\nequality of the arrays&#8217; content.</p>","!type":"fn(arr1: +Array, arr2: +Array) -> bool"},"respondWith":{"!doc":"<p>Defines a fake <span class=\"caps\">XHR</span> response to a matching request.</p>","!type":"fn(method: string, urlRegExp: +RegExp, response: fn())"},"setLocalItem":{"!doc":"<p>Store an item in the storage.</p>","!type":"fn(key: string, value: Object)"},"exclude":{"!doc":"<p>Modifies the first array as it removes all elements\nwhich are listed in the second array as well.</p>","!type":"fn(arr1: +Array, arr2: +Array) -> +Array"},"debounce":{"!doc":"<p>Returns a debounced version of the given callback. The execution of the callback\nis delayed by the given delay and after no events were triggered anymore.\nThis mechanism is very useful for event handling: only after a specified delay\nthe event should be handled (e.g. at keyboard input by the user) to prevent flooding\nthe handler with a large amounts of events.</p>","!type":"fn(callback: fn(), delay: number, immediate: bool) -> fn()"},"getLocalLength":{"!doc":"<p>Returns the amount of key-value pairs stored.</p>","!type":"fn() -> number"},"matchMedia":{"!doc":"<p>Evaluates the specified mediaquery list</p>","!type":"fn(query: string, ctxWindow?: Object) -> +qx.bom.MediaQuery"},"xhr":{"!doc":"<p>Returns a configured XMLHttpRequest object. Using the send method will\nfinally send the request.</p>","!type":"fn(url: string, settings?: +Map) -> +qx.bom.request.Xhr"},"$unregisterEventHook":{"!doc":"<p>Unregisters a hook from the given event types.</p>","!type":"fn(types: string, registerHook: fn(), unregisterHook?: fn())"},"isNodeName":{"!doc":"<p>Whether the node has the given node name</p>","!type":"fn(selector: +Node, nodeName: string) -> bool"},"!type":"fn()","prototype":{"_forEachElement":{"!doc":"<p>Calls a function for each <span class=\"caps\">DOM</span> element  or document fragment in the\ncollection. This is used for <span class=\"caps\">DOM</span> manipulations which can&#8217;t be\napplied to document nodes or window objects.</p>","!type":"fn(func: fn(), ctx: Object) -> +q"},"_forEachElementWrapped":{"!doc":"<p>Calls a function for each <span class=\"caps\">DOM</span> element node in the collection. Each node is wrapped\nin a collection before the function is called.</p>","!type":"fn(func: fn(), ctx: Object) -> +q"},"concat":{"!doc":"<p>Returns a copy of the collection including the given elements.</p>","!type":"fn(varargs: Object) -> +q"},"debug":{"!doc":"<p>Calls the browser&#8217;s native debugger to easily allow debugging within\nchained calls.</p>","!type":"fn() -> +q"},"filter":{"!doc":"<p>Gets a new collection containing only those elements that passed the\ngiven filter. This can be either a selector expression or a filter\nfunction.</p>","!type":"fn(selector: string) -> +q"},"indexOf":{"!doc":"<p>Returns the index of the given element within the current\ncollection or -1 if the element is not in the collection</p>","!type":"fn(elem: +Element) -> number"},"map":{"!doc":"<p>Returns a new collection containing the modified elements. For more details, check out the\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\"><span class=\"caps\">MDN</span> documentation</a>.</p>","!type":"fn(callback: fn(), thisarg: Object) -> +q"},"slice":{"!doc":"<p>Returns a copy of the collection within the given range.</p>","!type":"fn(begin: number, end?: number) -> +q"},"splice":{"!doc":"<p>Removes the given number of items and returns the removed items as a new collection.\nThis method can also add items. Take a look at the\n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\">documentation of <span class=\"caps\">MDN</span></a> for more details.</p>","!type":"fn(index: number, howMany: number, varargs: Object) -> +q"},"unique":{"!doc":"<p>Recreates a collection which is free of all duplicate elements from the original.</p>","!type":"fn() -> +q"},"rating":{"!doc":"<p>Factory method which converts the current collection into a collection of\nrating widgets. Therefore, an initialization process needs to be done which\ncan be configured with some parameter.</p>","!type":"fn(initValue?: number, symbol?: string, length?: number) -> +qx.ui.website.Rating"},"getOffsetParent":{"!doc":"<p>Gets a new collection containing the offset parent of each item in the\ncurrent set.</p>","!type":"fn() -> +qxWeb"},"show":{"!doc":"<p>Shows any elements with &#8220;display: none&#8221; in the collection. If an element\nwas hidden by using the {@link #hide} method, its previous\n&#8220;display&#8221; style value will be re-applied. Otherwise, the\ndefault &#8220;display&#8221; value for the element type will be applied.</p>","!type":"fn() -> +qxWeb"},"setTransformStyle":{"!doc":"<p>Sets the transform-style property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</a></p>","!type":"fn(value: string) -> +qxWeb"},"updatePlaceholder":{"!doc":"<p>Updates the placeholders for input&#8217;s and textarea&#8217;s in the collection.\nThis includes positioning, styles and <span class=\"caps\">DOM</span> positioning.\nIn case the browser supports native placeholders, this methods simply\ndoes nothing.</p>","!type":"fn() -> +qxWeb"},"focus":{"!doc":"<p>Focuses the first element in the collection</p>","!type":"fn() -> +qxWeb"},"setStyle":{"!doc":"<p>Modifies the given style property on all elements in the collection.</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"getChildren":{"!doc":"<p>Gets a set of elements containing all of the unique immediate children of\neach of the matched set of elements.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"unblock":{"!doc":"<p>Removes the blockers from all items in the collection</p>","!type":"fn() -> +qxWeb"},"getNextUntil":{"!doc":"<p>Gets a collection containing the following sibling elements of each\nitem in the current set up to but not including any element that matches\nthe given selector.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getTransformBackfaceVisibility":{"!doc":"<p>Returns the backface-visibility property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>","!type":"fn() -> bool"},"find":{"!doc":"<p>Searches the child elements of each item in the collection and returns\na new collection containing the children that match the provided selector</p>","!type":"fn(selector: string) -> +qxWeb"},"before":{"!doc":"<p>Inserts content before each element in the collection. This can either\nbe an <span class=\"caps\">HTML</span> string, an array of <span class=\"caps\">HTML</span> strings, a single <span class=\"caps\">DOM</span> element or an\narray of elements.</p>","!type":"fn(content: string) -> +qxWeb"},"pause":{"!doc":"<p>Manipulates the play state of the animation.\nThis can be used to pause an animation when running.</p>","!type":"fn() -> +qxWeb"},"getPrevUntil":{"!doc":"<p>Gets a collection containing the preceding sibling elements of each\nitem in the current set up to but not including any element that matches\nthe given selector.</p>","!type":"fn(selector?: string) -> +qxWeb"},"allOff":{"!doc":"<p>Removes all event listeners (or all listeners for a given type) from the\ncollection.</p>","!type":"fn(type?: string) -> +qxWeb"},"accordion":{"!doc":"<p>Factory method which converts the current collection into a collection of\naccordion widgets.</p>","!type":"fn(preselected?: +Integer) -> +qx.ui.website.Accordion"},"getContentHeight":{"!doc":"<p>Returns the content height of the first element in the collection.\nThis is the maximum height the element can use, excluding borders,\nmargins, padding or scroll bars.</p>","!type":"fn(force?: bool) -> number"},"getStyles":{"!doc":"<p>Returns the values of multiple style properties for each item in the\ncollection</p>","!type":"fn(names: string) -> +Map"},"replaceClass":{"!doc":"<p>Replaces a class name on each element in the collection</p>","!type":"fn(oldName: string, newName: string) -> +qxWeb"},"getTextSelectionStart":{"!doc":"<p>Get the start of the text selection of the first element.</p>","!type":"fn() -> +Integer"},"__getElementArray":{"!doc":"<p>Returns an array from a selector expression or a single element</p>","!type":"fn(arg: string) -> +Element"},"getAncestors":{"!doc":"<p>Gets a set of elements containing all ancestors of each element in the\ncollection.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(filter?: string) -> +qxWeb"},"has":{"!doc":"<p>Gets a collection containing only the elements that have descendants\nmatching the given selector</p>","!type":"fn(selector: string) -> +qxWeb"},"addClass":{"!doc":"<p>Adds a class name to each element in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"clearTextSelection":{"!doc":"<p>Clears the text selection of all elements.</p>","!type":"fn() -> +qxWeb"},"hover":{"!doc":"<p>Bind one or two callbacks to the collection.\nIf only the first callback is defined the collection\ndoes react on &#8216;pointerover&#8217; only.</p>","!type":"fn(callbackIn: fn(), callbackOut?: fn()) -> +qxWeb"},"fadeOut":{"!doc":"<p>Fades out all elements in the collection.</p>","!type":"fn(duration?: number) -> +qxWeb"},"removeClass":{"!doc":"<p>Removes a class name from each element in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"stop":{"!doc":"<p>Stops a running animation.</p>","!type":"fn() -> +qxWeb"},"getScrollLeft":{"!doc":"<p>Returns the left scroll position of the first element in the collection.</p>","!type":"fn() -> number"},"setTransformPerspectiveOrigin":{"!doc":"<p>Sets the perspective-origin property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</a></p>","!type":"fn(value: string) -> +qxWeb"},"forEach":{"!doc":"<p>Executes the provided callback function once for each item in the\ncollection.</p>","!type":"fn(fn: fn(), ctx: Object) -> +qxWeb"},"not":{"!doc":"<p>Remove elements from the collection that do not pass the given filter.\nThis can be either a selector expression or a filter function</p>","!type":"fn(selector: string) -> +qxWeb"},"getOffset":{"!doc":"<p>Returns the computed location of the given element in the context of the\ndocument dimensions.</p>\n\n<p>Supported modes:</p>\n\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).</li>\n</ul>","!type":"fn(mode?: string) -> +Map"},"setAttributes":{"!doc":"<p>Sets multiple attributes for each item in the collection.</p>","!type":"fn(attributes: +Map) -> +qxWeb"},"animateReverse":{"!doc":"<p>Starts an animation in reversed order. For further details, take a look at\nthe {@link #animate} method.</p>","!type":"fn(desc: +Map, duration?: number) -> +qxWeb"},"rotate":{"!doc":"<p>Rotates by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: string) -> +qxWeb"},"button":{"!doc":"<p>Factory method for the button widget which converts a standard\ncollection into a collection of buttons.</p>","!type":"fn(label?: string, icon?: string) -> +qx.ui.website.Button"},"isChildOf":{"!doc":"<p>Checks if any element of the current collection is child of any element of a given\nparent collection.</p>","!type":"fn(parent: +qxWeb) -> bool"},"remove":{"!doc":"<p>Removes each element in the current collection from the <span class=\"caps\">DOM</span></p>","!type":"fn() -> +qxWeb"},"getAllData":{"!doc":"<p>Returns a map containing all the <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attributes of the specified element</p>","!type":"fn() -> +Map"},"getTransformPerspective":{"!doc":"<p>Returns the perspective property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-property</a></p>","!type":"fn() -> string"},"getAttributes":{"!doc":"<p>Returns the values of multiple attributes for the first item in the collection</p>","!type":"fn(names: string) -> +Map"},"getPrev":{"!doc":"<p>Gets a collection containing the previous sibling element of each item in\nthe current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"addClasses":{"!doc":"<p>Adds multiple class names to each element in the collection</p>","!type":"fn(names: string) -> +qxWeb"},"getContentWidth":{"!doc":"<p>Returns the content width of the first element in the collection.\nThis is the maximum width the element can use, excluding borders,\nmargins, padding or scroll bars.</p>","!type":"fn(force?: bool) -> number"},"getClass":{"!doc":"<p>Returns the class name of the first element in the collection</p>","!type":"fn() -> string"},"removeData":{"!doc":"<p>Remove an <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute from the given <span class=\"caps\">DOM</span> element</p>","!type":"fn(name: string) -> +qxWeb"},"setHtml":{"!doc":"<p>Sets the <span class=\"caps\">HTML</span> content of each item in the collection</p>","!type":"fn(html: string) -> +qxWeb"},"$offFirstCollection":{"!doc":"<p>Removes a listener added with {@link #$onFirstCollection}.</p>","!type":"fn(type: string, listener: fn(), ctx?: Object, useCapture?: bool) -> +qxWeb"},"animate":{"!doc":"<p>Starts the animation with the given description.\nThe description should be a map, which could look like this:</p>\n\n<pre class=\"javascript\">\n{\n  \"duration\": 1000,\n  \"keep\": 100,\n  \"keyFrames\": {\n    0 : {\"opacity\": 1, \"scale\": 1},\n    100 : {\"opacity\": 0, \"scale\": 0}\n  },\n  \"origin\": \"50% 50%\",\n  \"repeat\": 1,\n  \"timing\": \"ease-out\",\n  \"alternate\": false,\n  \"delay\": 2000\n}\n</pre>\n\n<p><strong>duration</strong> is the time in milliseconds one animation cycle should take.</p>\n\n<p><strong>keep</strong> is the key frame to apply at the end of the animation. (optional)</p>\n\n<p><strong>keyFrames</strong> is a map of separate frames. Each frame is defined by a\n  number which is the percentage value of time in the animation. The value\n  is a map itself which holds css properties or transforms\n  (Transforms only for <span class=\"caps\">CSS</span> Animations).</p>\n\n<p><strong>origin</strong> maps to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\">transform origin</a>\n(Only for <span class=\"caps\">CSS</span> animations).</p>\n\n<p><strong>repeat</strong> is the amount of time the animation should be run in\n  sequence. You can also use &#8220;infinite&#8221;.</p>\n\n<p><strong>timing</strong> takes one of these predefined values:\n  <code>ease</code> | <code>linear</code> | <code>ease-in</code>\n  | <code>ease-out</code> | <code>ease-in-out</code> |\n  <code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n  (cubic-bezier only available for <span class=\"caps\">CSS</span> animations)</p>\n\n<p><strong>alternate</strong> defines if every other animation should be run in reverse order.</p>\n\n<p><strong>delay</strong> is the time in milliseconds the animation should wait before start.</p>","!type":"fn(desc: +Map, duration?: number) -> +qxWeb"},"setScrollTop":{"!doc":"<p>Scrolls the elements of the collection to the given coordinate.</p>","!type":"fn(value: number, duration?: number) -> +qxWeb"},"append":{"!doc":"<p>Appends content to each element in the current set. Accepts an <span class=\"caps\">HTML</span> string,\na single <span class=\"caps\">DOM</span> element or an array of elements</p>","!type":"fn(html: string) -> +qxWeb"},"getContents":{"!doc":"<p>Gets a new set of elements containing the child nodes of each item in the\ncurrent set.</p>","!type":"fn() -> +qxWeb"},"scale":{"!doc":"<p>Scales by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: number) -> +qxWeb"},"hide":{"!doc":"<p>Hides all elements in the collection by setting their &#8220;display&#8221;\nstyle to &#8220;none&#8221;. The previous value is stored so it can be re-applied\nwhen {@link #show} is called.</p>","!type":"fn() -> +qxWeb"},"setTransformBackfaceVisibility":{"!doc":"<p>Sets the backface-visibility property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\">http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</a></p>","!type":"fn(value: bool) -> +qxWeb"},"blur":{"!doc":"<p>Blurs each element in the collection</p>","!type":"fn() -> +qxWeb"},"widget":{"!doc":"<p>Factory method for the widget which converts a standard\ncollection into a collection of widgets.</p>","!type":"fn() -> +qx.ui.website.Widget"},"setValue":{"!doc":"<p>Applies the given value to each element in the collection.\nNormally the value is given as a string/number value and applied to the\nfield content (textfield, textarea) or used to detect whether the field\nis checked (checkbox, radiobutton).\nSupports array values for selectboxes (multiple selection) and checkboxes\nor radiobuttons (for convenience).\nPlease note: To modify the value attribute of a checkbox or radiobutton\nuse @link{#set} instead.</p>","!type":"fn(value: string) -> +qxWeb"},"getSiblings":{"!doc":"<p>Gets a collection containing all sibling elements of the items in the\ncurrent set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"toggleClasses":{"!doc":"<p>Toggles the given list of class names on each item in the collection</p>","!type":"fn(names: string) -> +qxWeb"},"add":{"!doc":"<p>Adds an element to the collection</p>","!type":"fn(el: +Element) -> +qxWeb"},"isPlaying":{"!doc":"<p>Returns whether an animation is running or not.</p>","!type":"fn() -> bool"},"on":{"!doc":"<p>Registers a listener for the given event type on each item in the\ncollection. This can be either native or custom events.</p>","!type":"fn(type: string, listener: fn(), context?: Object, useCapture?: bool) -> +qxWeb"},"__isInput":{"!doc":"<p>Checks if the given <span class=\"caps\">DOM</span> node is a text input field or textarea</p>","!type":"fn(el: +Element) -> bool"},"getClosest":{"!doc":"<p>Gets a set containing the closest matching ancestor for each item in\nthe collection.\nIf the item itself matches, it is added to the new set. Otherwise, the\nitem&#8217;s parent chain will be traversed until a match is found.</p>","!type":"fn(selector: string) -> +qxWeb"},"block":{"!doc":"<p>Adds an overlay to all items in the collection that intercepts mouse\nevents.</p>","!type":"fn(color?: string, opacity?: number, zIndex?: number) -> +qxWeb"},"datepicker":{"!doc":"<p>Factory method which converts the current collection into a collection of\nDate Picker widgets. Therefore, an initialization process needs to be done which\ncan be configured with some parameter.</p>","!type":"fn(date?: +Date) -> +qx.ui.website.DatePicker"},"getTextSelectionLength":{"!doc":"<p>Get the length of the text selection of the first element.</p>","!type":"fn() -> +Integer"},"setTransformPerspective":{"!doc":"<p>Sets the perspective property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-property</a></p>","!type":"fn(value: number) -> +qxWeb"},"removeAttribute":{"!doc":"<p>Removes the given attribute from all elements in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"getAttribute":{"!doc":"<p>Returns the value of the given attribute for the first item in the\ncollection.</p>","!type":"fn(name: string) -> Object"},"hasListener":{"!doc":"<p>Checks if one or more listeners for the given event type are attached to\nthe first element in the collection</p>","!type":"fn(type: string, listener?: fn(), context?: Object) -> bool"},"getWidth":{"!doc":"<p>Returns the rendered width of the first element in the collection</p>","!type":"fn(force?: bool) -> number"},"wrap":{"!doc":"<p>Wraps each element in the collection in a copy of an <span class=\"caps\">HTML</span> structure.\nElements will be appended to the deepest nested element in the structure\nas determined by a depth-first search.</p>","!type":"fn(wrapper: string) -> +qxWeb"},"table":{"!doc":"<p>Factory method which converts the current collection into a collection of\ntable widgets.</p>","!type":"fn(model: +Array) -> +qx.ui.website.Table"},"getTextSelectionEnd":{"!doc":"<p>Get the end of the text selection of the first element.</p>","!type":"fn() -> +Integer"},"skew":{"!doc":"<p>Skews by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: string) -> +qxWeb"},"contains":{"!doc":"<p>Returns a new collection containing only those nodes that\ncontain the given element. Also accepts a qxWeb\ncollection or an Array of elements. In those cases, the first element\nin the list is used.</p>","!type":"fn(element: +Element) -> +qxWeb"},"transform":{"!doc":"<p>Method to apply multiple transforms at once to the given element. It\ntakes a map containing the transforms you want to apply plus the values\ne.g.<code>{scale: 2, rotate: &#8220;5deg&#8221;}</code>.\nThe values can be either singular, which means a single value will\nbe added to the <span class=\"caps\">CSS</span>. If you give an array, the values will be split up\nand each array entry will be used for the X, Y or Z dimension in that\norder e.g. <code>{scale: [2, 0.5]}</code> will result in a element\ndouble the size in X direction and half the size in Y direction.\nMake sure your browser supports all transformations you apply.</p>","!type":"fn(transforms: +Map) -> +qxWeb"},"getTransformStyle":{"!doc":"<p>Returns the transform-style property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</a></p>","!type":"fn() -> string"},"setTextSelection":{"!doc":"<p>Set the text selection of the first element in the collection\nwith the given start and end value.\nIf no end value is passed the selection will extend to the end.</p>","!type":"fn(start: +Integer, end: +Integer) -> +qxWeb"},"__getTextNode":{"!doc":"<p>Returns the first text child node of the given element</p>","!type":"fn(el: +Element) -> +Node"},"toggleClass":{"!doc":"<p>Toggles the given class name on each item in the collection</p>","!type":"fn(name: string) -> +qxWeb"},"insertAfter":{"!doc":"<p>Inserts the current collection after each target item. The collection\nitems are moved after the first target. For subsequent targets,\nclones of the collection items are created and inserted.</p>","!type":"fn(target: string) -> +qxWeb"},"translate":{"!doc":"<p>Translates by the given value. For further details, take\na look at the {@link #transform} method.</p>","!type":"fn(value: string) -> +qxWeb"},"getTransformOrigin":{"!doc":"<p>Returns the transform-origin property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</a></p>","!type":"fn() -> string"},"getParents":{"!doc":"<p>Gets a set of elements containing the parent of each element in the\ncollection.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"empty":{"!doc":"<p>Removes all content from the elements in the collection</p>","!type":"fn() -> +qxWeb"},"__getAncestors":{"!doc":"<p>Internal helper for getAncestors and getAncestorsUntil</p>","!type":"fn(selector: string, filter?: string) -> +qxWeb"},"getPrevAll":{"!doc":"<p>Gets a collection containing all preceding sibling elements of each\nitem in the current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"setTransformOrigin":{"!doc":"<p>Sets the transform-origin property.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</a></p>","!type":"fn(value: string) -> +qxWeb"},"removeClasses":{"!doc":"<p>Removes multiple class names from each element in the collection.\nUse {@link qx.module.Attribute#removeAttribute} to remove all classes.</p>","!type":"fn(names: string) -> +qxWeb"},"setProperty":{"!doc":"<p>Sets a property on each item in the collection</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"getPosition":{"!doc":"<p>Returns the distance between the first element in the collection and its\noffset parent</p>","!type":"fn() -> +Map"},"getProperty":{"!doc":"<p>Returns the value of the given property for the first item in the\ncollection</p>","!type":"fn(name: string) -> Object"},"setScrollLeft":{"!doc":"<p>Scrolls the elements of the collection to the given coordinate.</p>","!type":"fn(value: number, duration?: number) -> +qxWeb"},"setAttribute":{"!doc":"<p>Sets an <span class=\"caps\">HTML</span> attribute on each item in the collection</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"getValue":{"!doc":"<p>Returns the currently configured value for the first item in the collection.\nWorks with simple input fields as well as with select boxes or option\nelements. Returns an array for select boxes with multi selection. In all\nother cases, a string is returned.</p>","!type":"fn() -> string"},"getTransformPerspectiveOrigin":{"!doc":"<p>Returns the perspective-origin property of the first element.</p>\n\n<p>Spec: <a href=\"http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\">http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</a></p>","!type":"fn() -> string"},"__hierarchyHelper":{"!doc":"<p>Helper function that iterates over a set of items and applies the given\nqx.dom.Hierarchy method to each entry, storing the results in a new Array.\nDuplicates are removed and the items are filtered if a selector is\nprovided.</p>","!type":"fn(collection: +Array, method: string, selector?: string) -> +Array"},"getProperties":{"!doc":"<p>Returns the values of multiple properties for the first item in the collection</p>","!type":"fn(names: string) -> +Map"},"removeAttributes":{"!doc":"<p>Removes multiple attributes from each item in the collection.</p>","!type":"fn(attributes: string) -> +qxWeb"},"emit":{"!doc":"<p>Fire an event of the given type.</p>","!type":"fn(type: string, data?: Object) -> +qxWeb"},"getAncestorsUntil":{"!doc":"<p>Gets a set of elements containing all ancestors of each element in the\ncollection, up to (but not including) the element matched by the provided\nselector.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector: string, filter?: string) -> +qxWeb"},"getNext":{"!doc":"<p>Gets a collection containing the next sibling element of each item in\nthe current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"getScrollTop":{"!doc":"<p>Returns the top scroll position of the first element in the collection.</p>","!type":"fn() -> number"},"is":{"!doc":"<p>Checks if at least one element in the collection passes the provided\nfilter. This can be either a selector expression or a filter\nfunction</p>","!type":"fn(selector: string) -> bool"},"getBlocker":{"!doc":"<p>Returns all blocker elements as collection.</p>\n\n<strong>Note:</strong> This will only return elements if\nthe <code>block</code> method was called at least once,\nsince the blocker elements are created on-demand.","!type":"fn() -> +qxWeb"},"getNextAll":{"!doc":"<p>Gets a collection containing all following sibling elements of each\nitem in the current set.\nThis set can be filtered with an optional expression that will cause only\nelements matching the selector to be collected.</p>","!type":"fn(selector?: string) -> +qxWeb"},"calendar":{"!doc":"<p>Factory method which converts the current collection into a collection of\nCalendar widgets. Therefore, an initialization process needs to be done which\ncan be configured with some parameter.</p>","!type":"fn(date?: +Date) -> +qx.ui.website.Calendar"},"getHtml":{"!doc":"<p>Returns the <span class=\"caps\">HTML</span> content of the first item in the collection</p>","!type":"fn() -> string"},"eq":{"!doc":"<p>Reduce the set of matched elements to a single element.</p>","!type":"fn(index: number) -> +qxWeb"},"getHeight":{"!doc":"<p>Returns the rendered height of the first element in the collection.</p>","!type":"fn(force?: bool) -> number"},"setStyles":{"!doc":"<p>Sets multiple style properties for each item in the collection.</p>","!type":"fn(styles: +Map) -> +qxWeb"},"appendTo":{"!doc":"<p>Appends all items in the collection to the specified parents. If multiple\nparents are given, the items will be moved to the first parent, while\nclones of the items will be appended to subsequent parents.</p>","!type":"fn(parent: string) -> +qxWeb"},"fadeIn":{"!doc":"<p>Fades in all elements in the collection.</p>","!type":"fn(duration?: number) -> +qxWeb"},"setProperties":{"!doc":"<p>Sets multiple properties for each item in the collection.</p>","!type":"fn(properties: +Map) -> +qxWeb"},"getData":{"!doc":"<p>Returns the value of the given <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute for the first item in the collection</p>","!type":"fn(name: string) -> Object"},"setData":{"!doc":"<p>Sets an <span class=\"caps\">HTML</span> &#8220;data-*&#8221; attribute on each item in the collection</p>","!type":"fn(name: string, value: Object) -> +qxWeb"},"play":{"!doc":"<p>Manipulates the play state of the animation.\nThis can be used to continue an animation when paused.</p>","!type":"fn() -> +qxWeb"},"getLast":{"!doc":"<p>Reduces the collection to the last element.</p>","!type":"fn() -> +qxWeb"},"$onFirstCollection":{"!doc":"<p>Special &#8216;on&#8217; method for qx.Website widgets that prevents memory\nleaks and duplicate listeners.</p>\n\n<p>During the lifetime of a widget, multiple collection instances can\nbe created for the same <span class=\"caps\">DOM</span> element. In the initialization of each\nof these widget collections, listeners can be attached using this method\nto prevent memory leaks and duplicate listeners.</p>\n\n<p>This is done by storing a reference to the collection the first time a\nlistener is attached. For subsequent listeners, this stored collection\nis used as the context. If the context object already has the new listener,\nit is not attached again. This means that new collections don&#8217;t create\nreferences to <span class=\"caps\">DOM</span> elements and don&#8217;t need to be disposed manually.</p>","!type":"fn(type: string, listener: fn(), ctx?: Object, useCapture?: bool) -> +qxWeb"},"insertBefore":{"!doc":"<p>Inserts the current collection before each target item. The collection\nitems are moved before the first target. For subsequent targets,\nclones of the collection items are created and inserted.</p>","!type":"fn(target: string) -> +qxWeb"},"clone":{"!doc":"<p>Clones the items in the current collection and returns them in a new set.\nEvent listeners can also be cloned.</p>","!type":"fn(events: bool) -> +qxWeb"},"after":{"!doc":"<p>Inserts content after each element in the collection. This can either\nbe an <span class=\"caps\">HTML</span> string, an array of <span class=\"caps\">HTML</span> strings, a single <span class=\"caps\">DOM</span> element or an\narray of elements.</p>","!type":"fn(content: string) -> +qxWeb"},"tabs":{"!doc":"<p>Factory method which converts the current collection into a collection of\ntabs widgets.</p>","!type":"fn(align?: string, preselected?: +Integer) -> +qx.ui.website.Tabs"},"getStyle":{"!doc":"<p>Returns the value of the given style property for the first item in the\ncollection.</p>","!type":"fn(name: string) -> Object"},"getFirst":{"!doc":"<p>Reduces the collection to the first element.</p>","!type":"fn() -> +qxWeb"},"off":{"!doc":"<p>Unregisters event listeners for the given type from each element in the\ncollection.</p>","!type":"fn(type: string, listener: fn(), context?: Object, useCapture?: bool) -> +qxWeb"},"slider":{"!doc":"<p>Factory method which converts the current collection into a collection of\nslider widgets.</p>","!type":"fn(value?: number, step?: number) -> +qx.ui.website.Slider"},"isRendered":{"!doc":"<p>Whether the first element in the collection is inserted into\nthe document for which it was created.</p>","!type":"fn() -> bool"},"hasClass":{"!doc":"<p>Checks if the first element in the collection has the given class name</p>","!type":"fn(name: string) -> bool"},"isEnded":{"!doc":"<p>Returns whether an animation has ended or not.</p>","!type":"fn() -> bool"},"placeTo":{"!doc":"<p>Moves the first element in the collection, aligning it with the given\ntarget.</p>\n\n<div>\n<strong>NOTE:</strong> The <code>placeTo</code> method also works for hidden\nelements. However, the visibility / display styles are only manipulated during\nthe placement operation. As a result a previously hidden element <strong>stays hidden</strong>\n</div>\n\n<div>\n<strong>NOTE:</strong> If the target is changing its position due e.g. a DOM manipulation the\nplaced element <strong>is not</strong> updated automatically. You have to call <code>placeTo</code>\nagain to place the element to the target. The element is <strong>always</strong> positioned by using\n<code>position:absolute</code> independently on the chosen <code>position</code> and <code>mode</code>.\n</div>","!type":"fn(target: +Element, position: string, offsets?: +Map, modeX?: string, modeY?: string) -> +qxWeb"},"once":{"!doc":"<p>Attaches a listener for the given event that will be executed only once.</p>","!type":"fn(type: string, listener: fn(), context?: Object) -> +qxWeb"}}}}

});  
