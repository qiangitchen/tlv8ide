{"charts.Charts":{"name":"Charts","kind":"class","global":true,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/charts","doc":"Charts Entry point for creating Charts in scripts. This example creates a basic data table, populates an area chart with the data, and adds it into a UiApp: function doGet() { var data = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Month\") .addColumn(Charts.ColumnType.NUMBER, \"In Store\") .addColumn(Charts.ColumnType.NUMBER, \"Online\") .addRow([\"January\", 10, 1]) .addRow([\"February\", 12, 1]) .addRow([\"March\", 20, 2]) .addRow([\"April\", 25, 3]) .addRow([\"May\", 30, 4]) .build(); var chart = Charts.newAreaChart() .setDataTable(data) .setStacked() .setRange(0, 40) .setTitle(\"Sales per Month\") .build(); var uiApp = UiApp.createApplication().setTitle(\"My Chart\"); uiApp.add(chart); return uiApp; }","property":[{"name":"ChartType","type":"charts.ChartType","doc":"An enumeration of chart types supported by the Charts service."},{"name":"ColumnType","type":"charts.ColumnType","doc":"An enumeration of the valid data types for columns in a DataTable."},{"name":"CurveStyle","type":"charts.CurveStyle","doc":"An enumeration of the styles for curves in a chart."},{"name":"MatchType","type":"charts.MatchType","doc":"An enumeration of how a string value should be matched."},{"name":"Orientation","type":"charts.Orientation","doc":"An enumeration of the orientation of an object."},{"name":"PickerValuesLayout","type":"charts.PickerValuesLayout","doc":"An enumeration of how to display selected values in a picker widget."},{"name":"PointStyle","type":"charts.PointStyle","doc":"An enumeration of the styles of points in a line."},{"name":"Position","type":"charts.Position","doc":"An enumeration of legend positions within a chart."}],"method":[{"name":"newAreaChart","signature":"newAreaChart()","return":"charts.AreaChartBuilder","doc":"Starts building an area chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newAreaChart()","argument":[]},{"name":"newBarChart","signature":"newBarChart()","return":"charts.BarChartBuilder","doc":"Starts building a bar chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newBarChart()","argument":[]},{"name":"newCategoryFilter","signature":"newCategoryFilter()","return":"charts.CategoryFilterBuilder","doc":"Starts building a category filter control, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newCategoryFilter()","argument":[]},{"name":"newColumnChart","signature":"newColumnChart()","return":"charts.ColumnChartBuilder","doc":"Starts building a column chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newColumnChart()","argument":[]},{"name":"newDashboardPanel","signature":"newDashboardPanel()","return":"charts.DashboardPanelBuilder","doc":"Starts building a dashboard panel, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newDashboardPanel()","argument":[]},{"name":"newDataTable","signature":"newDataTable()","return":"charts.DataTableBuilder","doc":"Creates an empty data table, which can have its values set manually.","url":"http://developers.google.com/apps-script/reference/charts/#newDataTable()","argument":[]},{"name":"newDataViewDefinition","signature":"newDataViewDefinition()","return":"charts.DataViewDefinitionBuilder","doc":"Creates a new data view definition.","url":"http://developers.google.com/apps-script/reference/charts/#newDataViewDefinition()","argument":[]},{"name":"newLineChart","signature":"newLineChart()","return":"charts.LineChartBuilder","doc":"Starts building a line chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newLineChart()","argument":[]},{"name":"newNumberRangeFilter","signature":"newNumberRangeFilter()","return":"charts.NumberRangeFilterBuilder","doc":"Starts building a number range filter control, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newNumberRangeFilter()","argument":[]},{"name":"newPieChart","signature":"newPieChart()","return":"charts.PieChartBuilder","doc":"Starts building a pie chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newPieChart()","argument":[]},{"name":"newScatterChart","signature":"newScatterChart()","return":"charts.ScatterChartBuilder","doc":"Starts building a scatter chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newScatterChart()","argument":[]},{"name":"newStringFilter","signature":"newStringFilter()","return":"charts.StringFilterBuilder","doc":"Starts building a string filter control, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newStringFilter()","argument":[]},{"name":"newTableChart","signature":"newTableChart()","return":"charts.TableChartBuilder","doc":"Starts building a table chart, as described in the Google Chart Tools documentation.","url":"http://developers.google.com/apps-script/reference/charts/#newTableChart()","argument":[]},{"name":"newTextStyle","signature":"newTextStyle()","return":"charts.TextStyleBuilder","doc":"Creates a new text style builder.","url":"http://developers.google.com/apps-script/reference/charts/#newTextStyle()","argument":[]}]},"charts.AreaChartBuilder":{"name":"AreaChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/area-chart-builder","doc":"AreaChartBuilder Builder for area charts. For more details, see the Google Charts documentation. Here is an example that shows how to build an area chart. function doGet() { // Create a data table with some sample data. var sampleData = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Month\") .addColumn(Charts.ColumnType.NUMBER, \"Dining\") .addColumn(Charts.ColumnType.NUMBER, \"Total\") .addRow([\"Jan\", 60, 520]) .addRow([\"Feb\", 50, 430]) .addRow([\"Mar\", 53, 440]) .addRow([\"Apr\", 70, 410]) .addRow([\"May\", 80, 390]) .addRow([\"Jun\", 60, 500]) .addRow([\"Jul\", 100, 450]) .addRow([\"Aug\", 140, 431]) .addRow([\"Sep\", 75, 488]) .addRow([\"Oct\", 70, 521]) .addRow([\"Nov\", 58, 388]) .addRow([\"Dec\", 63, 400]) .build(); var chart = Charts.newAreaChart() .setTitle('Yearly Spending') .setXAxisTitle('Month') .setYAxisTitle('Spending (USD)') .setDimensions(600, 500) .setStacked() .setColors(['red', 'green']) .setDataTable(sampleData) .build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"reverseCategories","signature":"reverseCategories()","return":"charts.AreaChartBuilder","doc":"Reverses the drawing of series in the domain axis.","url":"http://developers.google.com/apps-script/reference/charts/#reverseCategories()","argument":[]},{"name":"setBackgroundColor","signature":"setBackgroundColor(cssValue)","return":"charts.AreaChartBuilder","doc":"Sets the background color for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setBackgroundColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")"}]},{"name":"setColors","signature":"setColors(cssValues)","return":"charts.AreaChartBuilder","doc":"Sets the colors for the lines in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setColors(String)","argument":[{"name":"cssValues","type":"String[]","doc":"an array of color CSS values, such as [\"red\", \"#acf\"]. The nth element in the array represents the color of the nth line in the chart."}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.AreaChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.AreaChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.AreaChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.AreaChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.AreaChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setLegendPosition","signature":"setLegendPosition(position)","return":"charts.AreaChartBuilder","doc":"Sets the position of the legend with respect to the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendPosition(Position)","argument":[{"name":"position","type":"charts.Position","doc":"the position of the legend"}]},{"name":"setLegendTextStyle","signature":"setLegendTextStyle(textStyle)","return":"charts.AreaChartBuilder","doc":"Sets the text style of the chart legend.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart legend."}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.AreaChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"setPointStyle","signature":"setPointStyle(style)","return":"charts.AreaChartBuilder","doc":"Sets the style for points in the line.","url":"http://developers.google.com/apps-script/reference/charts/#setPointStyle(PointStyle)","argument":[{"name":"style","type":"charts.PointStyle","doc":"the style to use for points in the line"}]},{"name":"setRange","signature":"setRange(start, end)","return":"charts.AreaChartBuilder","doc":"Sets the range for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setRange(Number,Number)","argument":[{"name":"start","type":"Number","doc":"value for the lowest grid line of the range axis"},{"name":"end","type":"Number","doc":"value for the highest grid line of the range axis"}]},{"name":"setStacked","signature":"setStacked()","return":"charts.AreaChartBuilder","doc":"Uses stacked lines, meaning that line and bar values are stacked (accumulated).","url":"http://developers.google.com/apps-script/reference/charts/#setStacked()","argument":[]},{"name":"setTitle","signature":"setTitle(chartTitle)","return":"charts.AreaChartBuilder","doc":"Sets the title of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setTitle(String)","argument":[{"name":"chartTitle","type":"String","doc":"the chart title."}]},{"name":"setTitleTextStyle","signature":"setTitleTextStyle(textStyle)","return":"charts.AreaChartBuilder","doc":"Sets the text style of the chart title.","url":"http://developers.google.com/apps-script/reference/charts/#setTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTextStyle","signature":"setXAxisTextStyle(textStyle)","return":"charts.AreaChartBuilder","doc":"Sets the horizontal axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTitle","signature":"setXAxisTitle(title)","return":"charts.AreaChartBuilder","doc":"Adds a title to the horizontal axis.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the X-axis"}]},{"name":"setXAxisTitleTextStyle","signature":"setXAxisTitleTextStyle(textStyle)","return":"charts.AreaChartBuilder","doc":"Sets the horizontal axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTextStyle","signature":"setYAxisTextStyle(textStyle)","return":"charts.AreaChartBuilder","doc":"Sets the vertical axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTitle","signature":"setYAxisTitle(title)","return":"charts.AreaChartBuilder","doc":"Adds a title to the vertical axis.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the Y-axis"}]},{"name":"setYAxisTitleTextStyle","signature":"setYAxisTitleTextStyle(textStyle)","return":"charts.AreaChartBuilder","doc":"Sets the vertical axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"useLogScale","signature":"useLogScale()","return":"charts.AreaChartBuilder","doc":"Makes the range axis into a logarithmic scale (requires all values to be positive).","url":"http://developers.google.com/apps-script/reference/charts/#useLogScale()","argument":[]}]},"charts.BarChartBuilder":{"name":"BarChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/bar-chart-builder","doc":"BarChartBuilder Builder for bar charts. For more details, see the Google Charts documentation. Here is an example that shows how to build a bar chart. The data is imported from a Google spreadsheet. function doGet() { // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=B1%3AC11' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=0&headers=-1'; var chartBuilder = Charts.newBarChart() .setTitle('Top Grossing Films in US and Canada') .setXAxisTitle('USD') .setYAxisTitle('Film') .setDimensions(600, 500) .setLegendPosition(Charts.Position.BOTTOM) .setDataSourceUrl(dataSourceUrl); var chart = chartBuilder.build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"reverseCategories","signature":"reverseCategories()","return":"charts.BarChartBuilder","doc":"Reverses the drawing of series in the domain axis.","url":"http://developers.google.com/apps-script/reference/charts/#reverseCategories()","argument":[]},{"name":"reverseDirection","signature":"reverseDirection()","return":"charts.BarChartBuilder","doc":"Reverses the direction in which the bars grow along the horizontal axis.","url":"http://developers.google.com/apps-script/reference/charts/#reverseDirection()","argument":[]},{"name":"setBackgroundColor","signature":"setBackgroundColor(cssValue)","return":"charts.BarChartBuilder","doc":"Sets the background color for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setBackgroundColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")"}]},{"name":"setColors","signature":"setColors(cssValues)","return":"charts.BarChartBuilder","doc":"Sets the colors for the lines in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setColors(String)","argument":[{"name":"cssValues","type":"String[]","doc":"an array of color CSS values, such as [\"red\", \"#acf\"]. The nth element in the array represents the color of the nth line in the chart."}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.BarChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.BarChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.BarChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.BarChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.BarChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setLegendPosition","signature":"setLegendPosition(position)","return":"charts.BarChartBuilder","doc":"Sets the position of the legend with respect to the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendPosition(Position)","argument":[{"name":"position","type":"charts.Position","doc":"the position of the legend"}]},{"name":"setLegendTextStyle","signature":"setLegendTextStyle(textStyle)","return":"charts.BarChartBuilder","doc":"Sets the text style of the chart legend.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart legend."}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.BarChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"setRange","signature":"setRange(start, end)","return":"charts.BarChartBuilder","doc":"Sets the range for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setRange(Number,Number)","argument":[{"name":"start","type":"Number","doc":"value for the lowest grid line of the range axis"},{"name":"end","type":"Number","doc":"value for the highest grid line of the range axis"}]},{"name":"setStacked","signature":"setStacked()","return":"charts.BarChartBuilder","doc":"Uses stacked lines, meaning that line and bar values are stacked (accumulated).","url":"http://developers.google.com/apps-script/reference/charts/#setStacked()","argument":[]},{"name":"setTitle","signature":"setTitle(chartTitle)","return":"charts.BarChartBuilder","doc":"Sets the title of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setTitle(String)","argument":[{"name":"chartTitle","type":"String","doc":"the chart title."}]},{"name":"setTitleTextStyle","signature":"setTitleTextStyle(textStyle)","return":"charts.BarChartBuilder","doc":"Sets the text style of the chart title.","url":"http://developers.google.com/apps-script/reference/charts/#setTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTextStyle","signature":"setXAxisTextStyle(textStyle)","return":"charts.BarChartBuilder","doc":"Sets the horizontal axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTitle","signature":"setXAxisTitle(title)","return":"charts.BarChartBuilder","doc":"Adds a title to the horizontal axis.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the X-axis"}]},{"name":"setXAxisTitleTextStyle","signature":"setXAxisTitleTextStyle(textStyle)","return":"charts.BarChartBuilder","doc":"Sets the horizontal axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTextStyle","signature":"setYAxisTextStyle(textStyle)","return":"charts.BarChartBuilder","doc":"Sets the vertical axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTitle","signature":"setYAxisTitle(title)","return":"charts.BarChartBuilder","doc":"Adds a title to the vertical axis.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the Y-axis"}]},{"name":"setYAxisTitleTextStyle","signature":"setYAxisTitleTextStyle(textStyle)","return":"charts.BarChartBuilder","doc":"Sets the vertical axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"useLogScale","signature":"useLogScale()","return":"charts.BarChartBuilder","doc":"Makes the range axis into a logarithmic scale (requires all values to be positive).","url":"http://developers.google.com/apps-script/reference/charts/#useLogScale()","argument":[]}]},"charts.CategoryFilterBuilder":{"name":"CategoryFilterBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/category-filter-builder","doc":"CategoryFilterBuilder A builder for category filter controls. A category filter is a picker to choose one or more between a set of defined values. Given a column of type string, this control will filter out the rows that don't match any of the picked values. Here is an example that creates a table chart a binds a category filter to it. This allows the user to filter the data the table displays. function doGet() { var app = UiApp.createApplication(); var sampleData = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Month\") .addColumn(Charts.ColumnType.NUMBER, \"Dining\") .addColumn(Charts.ColumnType.NUMBER, \"Total\") .addRow([\"Jan\", 60, 520]) .addRow([\"Feb\", 50, 430]) .addRow([\"Mar\", 53, 440]) .addRow([\"Apr\", 70, 410]) .addRow([\"May\", 80, 390]) .addRow([\"Jun\", 60, 500]) .addRow([\"Jul\", 100, 450]) .addRow([\"Aug\", 140, 431]) .addRow([\"Sep\", 75, 488]) .addRow([\"Oct\", 70, 521]) .addRow([\"Nov\", 58, 388]) .addRow([\"Dec\", 63, 400]) .build(); var chart = Charts.newTableChart() .setDimensions(600, 500) .build(); var categoryFilter = Charts.newCategoryFilter() .setFilterColumnLabel(\"Month\") .setAllowMultiple(true) .setSortValues(true) .setLabelStacking(Charts.Orientation.VERTICAL) .setCaption('Choose categories...') .setSortValues(true) .build(); var panel = app.createVerticalPanel().setSpacing(10); panel.add(categoryFilter).add(chart); var dashboard = Charts.newDashboardPanel() .setDataTable(sampleData) .bind(categoryFilter, chart) .build(); dashboard.add(panel); app.add(dashboard); return app; } For more details, see the Gviz documentation","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Control","doc":"Builds a control.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setAllowMultiple","signature":"setAllowMultiple(allowMultiple)","return":"charts.CategoryFilterBuilder","doc":"Sets whether multiple values can be selected, rather than just one.","url":"http://developers.google.com/apps-script/reference/charts/#setAllowMultiple(Boolean)","argument":[{"name":"allowMultiple","type":"Boolean","doc":"if false, the user will not be able to select multiple values"}]},{"name":"setAllowNone","signature":"setAllowNone(allowNone)","return":"charts.CategoryFilterBuilder","doc":"Sets whether the user is allowed not to choose any value.","url":"http://developers.google.com/apps-script/reference/charts/#setAllowNone(Boolean)","argument":[{"name":"allowNone","type":"Boolean","doc":"if false, the user must choose at least one value"}]},{"name":"setAllowTyping","signature":"setAllowTyping(allowTyping)","return":"charts.CategoryFilterBuilder","doc":"Sets whether the user is allowed to type in a text field to narrow down the list of possible choices (via an autocompleter), or not.","url":"http://developers.google.com/apps-script/reference/charts/#setAllowTyping(Boolean)","argument":[{"name":"allowTyping","type":"Boolean","doc":"if false, the user will not be allowed to type in a text field to narrow down the list of possible choices"}]},{"name":"setCaption","signature":"setCaption(caption)","return":"charts.CategoryFilterBuilder","doc":"Sets the caption to display inside the value picker widget when no item is selected.","url":"http://developers.google.com/apps-script/reference/charts/#setCaption(String)","argument":[{"name":"caption","type":"String","doc":"the caption to display inside the value picker widget when no item is selected"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.CategoryFilterBuilder","doc":"Sets the data table to use for the control using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the control."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.CategoryFilterBuilder","doc":"Sets the control data table, which will be the control's underlying data model.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the control"}]},{"name":"setFilterColumnIndex","signature":"setFilterColumnIndex(columnIndex)","return":"charts.CategoryFilterBuilder","doc":"Sets the index of the data table column to filter on.","url":"http://developers.google.com/apps-script/reference/charts/#setFilterColumnIndex(Integer)","argument":[{"name":"columnIndex","type":"Integer","doc":"the index of the data table column the filter should operate upon"}]},{"name":"setFilterColumnLabel","signature":"setFilterColumnLabel(columnLabel)","return":"charts.CategoryFilterBuilder","doc":"Sets the label of the data table column to filter on.","url":"http://developers.google.com/apps-script/reference/charts/#setFilterColumnLabel(String)","argument":[{"name":"columnLabel","type":"String","doc":"the label of the column to filter on"}]},{"name":"setLabel","signature":"setLabel(label)","return":"charts.CategoryFilterBuilder","doc":"Sets the label to display next to the slider.","url":"http://developers.google.com/apps-script/reference/charts/#setLabel(String)","argument":[{"name":"label","type":"String","doc":"the label to display next to the slider"}]},{"name":"setLabelSeparator","signature":"setLabelSeparator(labelSeparator)","return":"charts.CategoryFilterBuilder","doc":"Sets a separator string appended to the label, to visually separate the label from the category picker.","url":"http://developers.google.com/apps-script/reference/charts/#setLabelSeparator(String)","argument":[{"name":"labelSeparator","type":"String","doc":"the string to use to separate the label from the category picker"}]},{"name":"setLabelStacking","signature":"setLabelStacking(orientation)","return":"charts.CategoryFilterBuilder","doc":"Sets whether the label should display above (vertical stacking) or beside (horizontal stacking) the input field.","url":"http://developers.google.com/apps-script/reference/charts/#setLabelStacking(Orientation)","argument":[{"name":"orientation","type":"charts.Orientation","doc":"the orientation of the stacking"}]},{"name":"setSelectedValuesLayout","signature":"setSelectedValuesLayout(layout)","return":"charts.CategoryFilterBuilder","doc":"Sets how to display selected values, when multiple selection is allowed.","url":"http://developers.google.com/apps-script/reference/charts/#setSelectedValuesLayout(PickerValuesLayout)","argument":[{"name":"layout","type":"charts.PickerValuesLayout","doc":"the layout in which to display the selected values"}]},{"name":"setSortValues","signature":"setSortValues(sortValues)","return":"charts.CategoryFilterBuilder","doc":"Sets whether the values to choose from should be sorted.","url":"http://developers.google.com/apps-script/reference/charts/#setSortValues(Boolean)","argument":[{"name":"sortValues","type":"Boolean","doc":"if true, sorts the values displayed in the widget alphabetically"}]},{"name":"setValues","signature":"setValues(values)","return":"charts.CategoryFilterBuilder","doc":"Sets the list of values (categories) the user can choose from.","url":"http://developers.google.com/apps-script/reference/charts/#setValues(String)","argument":[{"name":"values","type":"String[]","doc":"list of values the user can choose from"}]}]},"charts.Chart":{"name":"Chart","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/chart","doc":"Chart A Chart object, which can be embedded into documents, UI elements, or used as a static image. For charts embedded in spreadsheets, see EmbeddedChart.","property":[],"method":[{"name":"getAs","signature":"getAs(contentType)","return":"base.Blob","doc":"Return the data inside this object as a blob converted to the specified content type.","url":"http://developers.google.com/apps-script/reference/charts/#getAs(String)","argument":[{"name":"contentType","type":"String","doc":"the MIME type to convert to. For most blobs, 'application/pdf' is the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of 'image/bmp', 'image/gif', 'image/jpeg', or 'image/png' are also valid."}]},{"name":"getBlob","signature":"getBlob()","return":"base.Blob","doc":"Return the data inside this object as a blob.","url":"http://developers.google.com/apps-script/reference/charts/#getBlob()","argument":[]},{"name":"getId","signature":"getId()","return":"String","doc":"Returns the id that has been assigned to this object.","url":"http://developers.google.com/apps-script/reference/charts/#getId()","argument":[]},{"name":"getOptions","signature":"getOptions()","return":"charts.ChartOptions","doc":"Returns the options for this chart, such as height, colors, axes, etc.","url":"http://developers.google.com/apps-script/reference/charts/#getOptions()","argument":[]},{"name":"getType","signature":"getType()","return":"String","doc":"Gets the type of this object.","url":"http://developers.google.com/apps-script/reference/charts/#getType()","argument":[]},{"name":"setId","signature":"setId(id)","return":"charts.Chart","doc":"Sets the id of this Chart to be used with UiApp.","url":"http://developers.google.com/apps-script/reference/charts/#setId(String)","argument":[{"name":"id","type":"String","doc":"the new id, which can be used to retrieve the Chart from app.getElementById(id)."}]}]},"charts.ChartOptions":{"name":"ChartOptions","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/chart-options","doc":"ChartOptions Exposes options currently configured for a Chart, such as height, color, etc. Please see the visualization reference documentation for information on what options are available. Specific options for each chart can be found by clicking on the specific chart in the chart gallery. These options are immutable.","property":[],"method":[{"name":"get","signature":"get(option)","return":"Object","doc":"Returns a configured option for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#get(String)","argument":[{"name":"option","type":"String","doc":"string representing the desired option"}]}]},"charts.ColumnChartBuilder":{"name":"ColumnChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/column-chart-builder","doc":"ColumnChartBuilder Builder for column charts. For more details, see the Google Charts documentation. This example shows how to create a column chart with data from a data table. function doGet() { var sampleData = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Year\") .addColumn(Charts.ColumnType.NUMBER, \"Sales\") .addColumn(Charts.ColumnType.NUMBER, \"Expenses\") .addRow([\"2004\", 1000, 400]) .addRow([\"2005\", 1170, 460]) .addRow([\"2006\", 660, 1120]) .addRow([\"2007\", 1030, 540]) .addRow([\"2008\", 800, 600]) .addRow([\"2009\", 943, 678]) .addRow([\"2010\", 1020, 550]) .addRow([\"2011\", 910, 700]) .addRow([\"2012\", 1230, 840]) .build(); var chart = Charts.newColumnChart() .setTitle('Sales vs. Expenses') .setXAxisTitle('Year') .setYAxisTitle('Amount (USD)') .setDimensions(600, 500) .setDataTable(sampleData) .build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"reverseCategories","signature":"reverseCategories()","return":"charts.ColumnChartBuilder","doc":"Reverses the drawing of series in the domain axis.","url":"http://developers.google.com/apps-script/reference/charts/#reverseCategories()","argument":[]},{"name":"setBackgroundColor","signature":"setBackgroundColor(cssValue)","return":"charts.ColumnChartBuilder","doc":"Sets the background color for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setBackgroundColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")"}]},{"name":"setColors","signature":"setColors(cssValues)","return":"charts.ColumnChartBuilder","doc":"Sets the colors for the lines in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setColors(String)","argument":[{"name":"cssValues","type":"String[]","doc":"an array of color CSS values, such as [\"red\", \"#acf\"]. The nth element in the array represents the color of the nth line in the chart."}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.ColumnChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.ColumnChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.ColumnChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.ColumnChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.ColumnChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setLegendPosition","signature":"setLegendPosition(position)","return":"charts.ColumnChartBuilder","doc":"Sets the position of the legend with respect to the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendPosition(Position)","argument":[{"name":"position","type":"charts.Position","doc":"the position of the legend"}]},{"name":"setLegendTextStyle","signature":"setLegendTextStyle(textStyle)","return":"charts.ColumnChartBuilder","doc":"Sets the text style of the chart legend.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart legend."}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.ColumnChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"setRange","signature":"setRange(start, end)","return":"charts.ColumnChartBuilder","doc":"Sets the range for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setRange(Number,Number)","argument":[{"name":"start","type":"Number","doc":"value for the lowest grid line of the range axis"},{"name":"end","type":"Number","doc":"value for the highest grid line of the range axis"}]},{"name":"setStacked","signature":"setStacked()","return":"charts.ColumnChartBuilder","doc":"Uses stacked lines, meaning that line and bar values are stacked (accumulated).","url":"http://developers.google.com/apps-script/reference/charts/#setStacked()","argument":[]},{"name":"setTitle","signature":"setTitle(chartTitle)","return":"charts.ColumnChartBuilder","doc":"Sets the title of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setTitle(String)","argument":[{"name":"chartTitle","type":"String","doc":"the chart title."}]},{"name":"setTitleTextStyle","signature":"setTitleTextStyle(textStyle)","return":"charts.ColumnChartBuilder","doc":"Sets the text style of the chart title.","url":"http://developers.google.com/apps-script/reference/charts/#setTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTextStyle","signature":"setXAxisTextStyle(textStyle)","return":"charts.ColumnChartBuilder","doc":"Sets the horizontal axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTitle","signature":"setXAxisTitle(title)","return":"charts.ColumnChartBuilder","doc":"Adds a title to the horizontal axis.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the X-axis"}]},{"name":"setXAxisTitleTextStyle","signature":"setXAxisTitleTextStyle(textStyle)","return":"charts.ColumnChartBuilder","doc":"Sets the horizontal axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTextStyle","signature":"setYAxisTextStyle(textStyle)","return":"charts.ColumnChartBuilder","doc":"Sets the vertical axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTitle","signature":"setYAxisTitle(title)","return":"charts.ColumnChartBuilder","doc":"Adds a title to the vertical axis.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the Y-axis"}]},{"name":"setYAxisTitleTextStyle","signature":"setYAxisTitleTextStyle(textStyle)","return":"charts.ColumnChartBuilder","doc":"Sets the vertical axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"useLogScale","signature":"useLogScale()","return":"charts.ColumnChartBuilder","doc":"Makes the range axis into a logarithmic scale (requires all values to be positive).","url":"http://developers.google.com/apps-script/reference/charts/#useLogScale()","argument":[]}]},"charts.Control":{"name":"Control","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/control","doc":"Control A user interface control object, that drives the data displayed by a DashboardPanel. A control can be embedded in a UI application. Controls are user interface widgets (category pickers, range sliders, autocompleters, etc.) users interact with in order to drive the data managed by a dashboard and the charts that are part of it. Controls collect user input and use the information to decide which of the data the dashboard is managing should be made available to the charts that are part of it. Given a data table, a control will filter out the data that doesn't comply with the conditions implied by its current state, and will expose the filtered data table as an output. For more details, see the Gviz documentation.","property":[],"method":[{"name":"getId","signature":"getId()","return":"String","doc":"Returns the id that has been assigned to this object.","url":"http://developers.google.com/apps-script/reference/charts/#getId()","argument":[]},{"name":"getType","signature":"getType()","return":"String","doc":"Gets the type of this object.","url":"http://developers.google.com/apps-script/reference/charts/#getType()","argument":[]},{"name":"setId","signature":"setId(id)","return":"charts.Control","doc":"Sets the id of this Control to be used with UiApp.","url":"http://developers.google.com/apps-script/reference/charts/#setId(String)","argument":[{"name":"id","type":"String","doc":"the new id, which can be used to retrieve the Control from app.getElementById(id)."}]}]},"charts.DashboardPanel":{"name":"DashboardPanel","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/dashboard-panel","doc":"DashboardPanel A dashboard is a visual structure that enables the organization and management of multiple charts that share the same underlying data. Controls are user interface widgets (category pickers, range sliders, autocompleters, etc.) users interact with in order to drive the data managed by a dashboard and the charts that are part of it. For example, a string filter control is a simple text input field that lets the user filter data via string matching. Given a column and matching options, the control will filter out the rows that don't match the term that's in the input field. The Gviz API defines a dashboard as a set of charts and controls bound together. The bindings between the different components define the data flow, the state of the controls filters views of the data which propagate in the dashboard and are eventually visualized with charts. For more details, see the Gviz documentation. The dashboard panel has two purposes, one is being a container for the charts and controls objects that compose the dashboard, and the other is holding the data and use as an interface for binding controls to charts. Here's an example of creating a dashboard and showing it in a UI app: function doGet() { // Create a data table with some sample data. var data = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Name\") .addColumn(Charts.ColumnType.NUMBER, \"Age\") .addRow([\"Michael\", 18]) .addRow([\"Elisa\", 12]) .addRow([\"John\", 20]) .addRow([\"Jessica\", 25]) .addRow([\"Aaron\", 14]) .addRow([\"Margareth\", 19]) .addRow([\"Miranda\", 22]) .addRow([\"May\", 20]) .build(); var chart = Charts.newBarChart() .setTitle(\"Ages\") .build(); var control = Charts.newStringFilter() .setFilterColumnLabel(\"Name\") .build(); // Bind the control to the chart in a dashboard panel. var dashboard = Charts.newDashboardPanel() .setDataTable(data) .bind(control, chart) .build(); var uiApp = UiApp.createApplication().setTitle(\"My Dashboard\"); var panel = uiApp.createHorizontalPanel() .setVerticalAlignment(UiApp.VerticalAlignment.MIDDLE) .setSpacing(50); panel.add(control); panel.add(chart); dashboard.add(panel); uiApp.add(dashboard); return uiApp; }","property":[],"method":[{"name":"add","signature":"add(widget)","return":"charts.DashboardPanel","doc":"Add a widget to the DashboardPanel.","url":"http://developers.google.com/apps-script/reference/charts/#add(Widget)","argument":[{"name":"widget","type":"ui.Widget","doc":"the widget to add"}]},{"name":"getId","signature":"getId()","return":"String","doc":"Returns the id that has been assigned to this object.","url":"http://developers.google.com/apps-script/reference/charts/#getId()","argument":[]},{"name":"getType","signature":"getType()","return":"String","doc":"Gets the type of this object.","url":"http://developers.google.com/apps-script/reference/charts/#getType()","argument":[]},{"name":"setId","signature":"setId(id)","return":"charts.DashboardPanel","doc":"Sets the id of this DashboardPanel to be used with UiApp.","url":"http://developers.google.com/apps-script/reference/charts/#setId(String)","argument":[{"name":"id","type":"String","doc":"the new id, which can be used to retrieve the DashboardPanel from app.getElementById(id)."}]}]},"charts.DashboardPanelBuilder":{"name":"DashboardPanelBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/dashboard-panel-builder","doc":"DashboardPanelBuilder A builder for a dashboard panel object. For an example of how to use DashboardPanelBuilder, refer to DashboardPanel. For more details, see the Gviz documentation.","property":[],"method":[{"name":"bind","signature":"bind(control, chart)","return":"charts.DashboardPanelBuilder","doc":"Binds a control to a chart, so that the chart is redrawn whenever the control collects a user interaction that affects the data managed by the dashboard.","url":"http://developers.google.com/apps-script/reference/charts/#bind(Control,Chart)","argument":[{"name":"control","type":"charts.Control","doc":"a control to bind"},{"name":"chart","type":"charts.Chart","doc":"a chart to bind"}]},{"name":"bind","signature":"bind(controls, charts)","return":"charts.DashboardPanelBuilder","doc":"Binds multiple controls to multiple charts, so that the charts are redrawn whenever the controls collect a user interaction that affects the data managed by the dashboard.","url":"http://developers.google.com/apps-script/reference/charts/#bind(Control,Chart)","argument":[{"name":"controls","type":"charts.Control[]","doc":"an array of controls to bind"},{"name":"charts","type":"charts.Chart[]","doc":"an array charts to bind"}]},{"name":"build","signature":"build()","return":"charts.DashboardPanel","doc":"Builds a dashboard.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.DashboardPanelBuilder","doc":"Sets the data table to use for the dashboard using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the dashboard."}]},{"name":"setDataTable","signature":"setDataTable(source)","return":"charts.DashboardPanelBuilder","doc":"Sets the dashboard's data table, which will be the control's underlying data model.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"source","type":"charts.DataTableSource","doc":"the data source to use for the dashboard"}]}]},"charts.DataTable":{"name":"DataTable","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/data-table","doc":"DataTable A Data Table to be used in charts. A DataTable can come from sources such as Google Sheets or specified data-table URLs, or can be filled in by hand. This class intentionally has no methods: a DataTable can be passed around, but not manipulated directly.","property":[],"method":[]},"charts.DataTableBuilder":{"name":"DataTableBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/data-table-builder","doc":"DataTableBuilder Builder of DataTable objects. Building a data table consists of first specifying its columns, and then adding its rows, one at a time. Example: var data = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Month\") .addColumn(Charts.ColumnType.NUMBER, \"In Store\") .addColumn(Charts.ColumnType.NUMBER, \"Online\") .addRow([\"January\", 10, 1]) .addRow([\"February\", 12, 1]) .addRow([\"March\", 20, 2]) .addRow([\"April\", 25, 3]) .addRow([\"May\", 30, 4]) .build();","property":[],"method":[{"name":"addColumn","signature":"addColumn(type, label)","return":"charts.DataTableBuilder","doc":"Adds a column to the data table.","url":"http://developers.google.com/apps-script/reference/charts/#addColumn(ColumnType,String)","argument":[{"name":"type","type":"charts.ColumnType","doc":"type of data in the column (number, string, or date)"},{"name":"label","type":"String","doc":"label of the column (it's used for chart legends)."}]},{"name":"addRow","signature":"addRow(values)","return":"charts.DataTableBuilder","doc":"Adds a row to the data table.","url":"http://developers.google.com/apps-script/reference/charts/#addRow(Object)","argument":[{"name":"values","type":"Object[]","doc":"values for the row, specified in the same order that the columns are entered."}]},{"name":"build","signature":"build()","return":"charts.DataTable","doc":"Builds and returns a data table.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setValue","signature":"setValue(row, column, value)","return":"charts.DataTableBuilder","doc":"Sets a specific value in the table.","url":"http://developers.google.com/apps-script/reference/charts/#setValue(Integer,Integer,Object)","argument":[{"name":"row","type":"Integer","doc":"the row index (the first row has index 0)"},{"name":"column","type":"Integer","doc":"the column index (the first column has index 0)"},{"name":"value","type":"Object","doc":"the value of the table cell (should have the right type for the column)."}]}]},"charts.DataViewDefinition":{"name":"DataViewDefinition","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/data-view-definition","doc":"DataViewDefinition A data view definition for visualizing chart data. Data view definition can be set for charts to visualize a view derived from the given data table and not the data table itself. For example if the view definition of a chart states that the view columns are [0, 3], only the first and the third columns of the data table will be taken into consideration when drawing the chart. See DataViewDefinitionBuilder for an example on how to define and use a DataViewDefinition.","property":[],"method":[]},"charts.DataViewDefinitionBuilder":{"name":"DataViewDefinitionBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/data-view-definition-builder","doc":"DataViewDefinitionBuilder Builder for DataViewDefinition objects. Here's an example of using the builder. The data is imported from a Google spreadsheet. function doGet() { // This example creates two table charts side by side. One uses a data view definition to // restrict the number of displayed columns. var app = UiApp.createApplication(); // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=A1%3AF' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=4&headers=-1'; // Create a chart to display all of the data. var originalChart = Charts.newTableChart() .setDimensions(600, 500) .setDataSourceUrl(dataSourceUrl) .build(); // Create another chart to display a subset of the data (only columns 1 and 4). var dataViewDefinition = Charts.newDataViewDefinition().setColumns([0, 3]); var limitedChart = Charts.newTableChart() .setDimensions(200, 500) .setDataSourceUrl(dataSourceUrl) .setDataViewDefinition(dataViewDefinition) .build(); var panel = app.createHorizontalPanel().setSpacing(15); panel.add(originalChart).add(limitedChart); return app.add(panel); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.DataViewDefinition","doc":"Builds and returns the data view definition object that was built using this builder.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setColumns","signature":"setColumns(columns)","return":"charts.DataViewDefinitionBuilder","doc":"Sets the indexes of the column to include in the data view.","url":"http://developers.google.com/apps-script/reference/charts/#setColumns(Integer)","argument":[{"name":"columns","type":"Integer[]","doc":"an array of column indexes to include in the data view. The data table and the enumeration for data view columns are zero-based."}]}]},"charts.LineChartBuilder":{"name":"LineChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/line-chart-builder","doc":"LineChartBuilder Builder for line charts. For more details, see the Google Charts documentation. Here is an example that shows how to build a line chart. The data is imported from a Google spreadsheet. function doGet() { // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=A1%3AG5' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=2&headers=-1'; var chartBuilder = Charts.newLineChart() .setTitle('Yearly Rainfall') .setXAxisTitle('Month') .setYAxisTitle('Rainfall (in)') .setDimensions(600, 500) .setCurveStyle(Charts.CurveStyle.SMOOTH) .setPointStyle(Charts.PointStyle.MEDIUM) .setDataSourceUrl(dataSourceUrl); var chart = chartBuilder.build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"reverseCategories","signature":"reverseCategories()","return":"charts.LineChartBuilder","doc":"Reverses the drawing of series in the domain axis.","url":"http://developers.google.com/apps-script/reference/charts/#reverseCategories()","argument":[]},{"name":"setBackgroundColor","signature":"setBackgroundColor(cssValue)","return":"charts.LineChartBuilder","doc":"Sets the background color for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setBackgroundColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")"}]},{"name":"setColors","signature":"setColors(cssValues)","return":"charts.LineChartBuilder","doc":"Sets the colors for the lines in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setColors(String)","argument":[{"name":"cssValues","type":"String[]","doc":"an array of color CSS values, such as [\"red\", \"#acf\"]. The nth element in the array represents the color of the nth line in the chart."}]},{"name":"setCurveStyle","signature":"setCurveStyle(style)","return":"charts.LineChartBuilder","doc":"Sets the style to use for curves in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setCurveStyle(CurveStyle)","argument":[{"name":"style","type":"charts.CurveStyle","doc":"the style for curves in the chart"}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.LineChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.LineChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.LineChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.LineChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.LineChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setLegendPosition","signature":"setLegendPosition(position)","return":"charts.LineChartBuilder","doc":"Sets the position of the legend with respect to the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendPosition(Position)","argument":[{"name":"position","type":"charts.Position","doc":"the position of the legend"}]},{"name":"setLegendTextStyle","signature":"setLegendTextStyle(textStyle)","return":"charts.LineChartBuilder","doc":"Sets the text style of the chart legend.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart legend."}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.LineChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"setPointStyle","signature":"setPointStyle(style)","return":"charts.LineChartBuilder","doc":"Sets the style for points in the line.","url":"http://developers.google.com/apps-script/reference/charts/#setPointStyle(PointStyle)","argument":[{"name":"style","type":"charts.PointStyle","doc":"the style to use for points in the line"}]},{"name":"setRange","signature":"setRange(start, end)","return":"charts.LineChartBuilder","doc":"Sets the range for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setRange(Number,Number)","argument":[{"name":"start","type":"Number","doc":"value for the lowest grid line of the range axis"},{"name":"end","type":"Number","doc":"value for the highest grid line of the range axis"}]},{"name":"setTitle","signature":"setTitle(chartTitle)","return":"charts.LineChartBuilder","doc":"Sets the title of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setTitle(String)","argument":[{"name":"chartTitle","type":"String","doc":"the chart title."}]},{"name":"setTitleTextStyle","signature":"setTitleTextStyle(textStyle)","return":"charts.LineChartBuilder","doc":"Sets the text style of the chart title.","url":"http://developers.google.com/apps-script/reference/charts/#setTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTextStyle","signature":"setXAxisTextStyle(textStyle)","return":"charts.LineChartBuilder","doc":"Sets the horizontal axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTitle","signature":"setXAxisTitle(title)","return":"charts.LineChartBuilder","doc":"Adds a title to the horizontal axis.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the X-axis"}]},{"name":"setXAxisTitleTextStyle","signature":"setXAxisTitleTextStyle(textStyle)","return":"charts.LineChartBuilder","doc":"Sets the horizontal axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTextStyle","signature":"setYAxisTextStyle(textStyle)","return":"charts.LineChartBuilder","doc":"Sets the vertical axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTitle","signature":"setYAxisTitle(title)","return":"charts.LineChartBuilder","doc":"Adds a title to the vertical axis.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the Y-axis"}]},{"name":"setYAxisTitleTextStyle","signature":"setYAxisTitleTextStyle(textStyle)","return":"charts.LineChartBuilder","doc":"Sets the vertical axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"useLogScale","signature":"useLogScale()","return":"charts.LineChartBuilder","doc":"Makes the range axis into a logarithmic scale (requires all values to be positive).","url":"http://developers.google.com/apps-script/reference/charts/#useLogScale()","argument":[]}]},"charts.NumberRangeFilterBuilder":{"name":"NumberRangeFilterBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/number-range-filter-builder","doc":"NumberRangeFilterBuilder A builder for number range filter controls. A number range filter is a slider with two thumbs that lets the user select ranges of numeric values. Given a column of type number and matching options, this control will filter out the rows that don't match the range that was selected. This example creates a table chart bound to a number range filter: function doGet() { var app = UiApp.createApplication(); // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=A1%3AF' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=4&headers=-1'; var data = SpreadsheetApp.openByUrl(dataSourceUrl).getSheetByName('US_GDP').getRange(\"A1:F\"); var chart = Charts.newTableChart() .setDimensions(600, 500) .build(); var numberRangeFilter = Charts.newNumberRangeFilter() .setFilterColumnLabel(\"Year\") .setShowRangeValues(true) .setLabel(\"Restrict year range\") .build(); var panel = app.createVerticalPanel().setSpacing(10); panel.add(numberRangeFilter).add(chart); // Create a new dashboard panel to bind the filter and chart together. var dashboard = Charts.newDashboardPanel() .setDataTable(data) .bind(numberRangeFilter, chart) .build(); dashboard.add(panel); app.add(dashboard); return app; } For more details, see the Gviz documentation","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Control","doc":"Builds a control.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the data table to use for the control using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the control."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the control data table, which will be the control's underlying data model.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the control"}]},{"name":"setFilterColumnIndex","signature":"setFilterColumnIndex(columnIndex)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the index of the data table column to filter on.","url":"http://developers.google.com/apps-script/reference/charts/#setFilterColumnIndex(Integer)","argument":[{"name":"columnIndex","type":"Integer","doc":"the index of the data table column the filter should operate upon"}]},{"name":"setFilterColumnLabel","signature":"setFilterColumnLabel(columnLabel)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the label of the data table column to filter on.","url":"http://developers.google.com/apps-script/reference/charts/#setFilterColumnLabel(String)","argument":[{"name":"columnLabel","type":"String","doc":"the label of the column to filter on"}]},{"name":"setLabel","signature":"setLabel(label)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the label to display next to the slider.","url":"http://developers.google.com/apps-script/reference/charts/#setLabel(String)","argument":[{"name":"label","type":"String","doc":"the label to display next to the slider"}]},{"name":"setLabelSeparator","signature":"setLabelSeparator(labelSeparator)","return":"charts.NumberRangeFilterBuilder","doc":"Sets a separator string appended to the label, to visually separate the label from the category picker.","url":"http://developers.google.com/apps-script/reference/charts/#setLabelSeparator(String)","argument":[{"name":"labelSeparator","type":"String","doc":"the string to use to separate the label from the category picker"}]},{"name":"setLabelStacking","signature":"setLabelStacking(orientation)","return":"charts.NumberRangeFilterBuilder","doc":"Sets whether the label should display above (vertical stacking) or beside (horizontal stacking) the input field.","url":"http://developers.google.com/apps-script/reference/charts/#setLabelStacking(Orientation)","argument":[{"name":"orientation","type":"charts.Orientation","doc":"the orientation of the stacking"}]},{"name":"setMaxValue","signature":"setMaxValue(maxValue)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the maximum allowed value for the range lower extent.","url":"http://developers.google.com/apps-script/reference/charts/#setMaxValue(Integer)","argument":[{"name":"maxValue","type":"Integer","doc":"the maximum value of the slider"}]},{"name":"setMinValue","signature":"setMinValue(minValue)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the minimum allowed value for the range lower extent.","url":"http://developers.google.com/apps-script/reference/charts/#setMinValue(Integer)","argument":[{"name":"minValue","type":"Integer","doc":"the minimum value of the slider"}]},{"name":"setOrientation","signature":"setOrientation(orientation)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the slider orientation.","url":"http://developers.google.com/apps-script/reference/charts/#setOrientation(Orientation)","argument":[{"name":"orientation","type":"charts.Orientation","doc":"the slider orientation"}]},{"name":"setShowRangeValues","signature":"setShowRangeValues(showRangeValues)","return":"charts.NumberRangeFilterBuilder","doc":"Sets whether to have labels next to the slider displaying extents of the selected range.","url":"http://developers.google.com/apps-script/reference/charts/#setShowRangeValues(Boolean)","argument":[{"name":"showRangeValues","type":"Boolean","doc":"if true, enables showing of labels next to the slider"}]},{"name":"setTicks","signature":"setTicks(ticks)","return":"charts.NumberRangeFilterBuilder","doc":"Sets the number of ticks (fixed positions in a range bar) a number range filter slider thumbs can fall in.","url":"http://developers.google.com/apps-script/reference/charts/#setTicks(Integer)","argument":[{"name":"ticks","type":"Integer","doc":"the number of ticks on the slider"}]}]},"charts.PieChartBuilder":{"name":"PieChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/pie-chart-builder","doc":"PieChartBuilder A builder for pie charts. For more details, see the Google Charts documentation. Here is an example that shows how to build a pie chart. The data is imported from a Google spreadsheet. function doGet() { // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=A1%3AB8' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=3&headers=-1'; var chartBuilder = Charts.newPieChart() .setTitle('World Population by Continent') .setDimensions(600, 500) .set3D() .setDataSourceUrl(dataSourceUrl); var chart = chartBuilder.build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"reverseCategories","signature":"reverseCategories()","return":"charts.PieChartBuilder","doc":"Reverses the drawing of series in the domain axis.","url":"http://developers.google.com/apps-script/reference/charts/#reverseCategories()","argument":[]},{"name":"set3D","signature":"set3D()","return":"charts.PieChartBuilder","doc":"Sets the chart to be three-dimensional.","url":"http://developers.google.com/apps-script/reference/charts/#set3D()","argument":[]},{"name":"setBackgroundColor","signature":"setBackgroundColor(cssValue)","return":"charts.PieChartBuilder","doc":"Sets the background color for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setBackgroundColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")"}]},{"name":"setColors","signature":"setColors(cssValues)","return":"charts.PieChartBuilder","doc":"Sets the colors for the lines in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setColors(String)","argument":[{"name":"cssValues","type":"String[]","doc":"an array of color CSS values, such as [\"red\", \"#acf\"]. The nth element in the array represents the color of the nth line in the chart."}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.PieChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.PieChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.PieChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.PieChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.PieChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setLegendPosition","signature":"setLegendPosition(position)","return":"charts.PieChartBuilder","doc":"Sets the position of the legend with respect to the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendPosition(Position)","argument":[{"name":"position","type":"charts.Position","doc":"the position of the legend"}]},{"name":"setLegendTextStyle","signature":"setLegendTextStyle(textStyle)","return":"charts.PieChartBuilder","doc":"Sets the text style of the chart legend.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart legend."}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.PieChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"setTitle","signature":"setTitle(chartTitle)","return":"charts.PieChartBuilder","doc":"Sets the title of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setTitle(String)","argument":[{"name":"chartTitle","type":"String","doc":"the chart title."}]},{"name":"setTitleTextStyle","signature":"setTitleTextStyle(textStyle)","return":"charts.PieChartBuilder","doc":"Sets the text style of the chart title.","url":"http://developers.google.com/apps-script/reference/charts/#setTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]}]},"charts.ScatterChartBuilder":{"name":"ScatterChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/scatter-chart-builder","doc":"ScatterChartBuilder Builder for scatter charts. For more details, see the Google Charts documentation. Here is an example that shows how to build a scatter chart. The data is imported from a Google spreadsheet. function doGet() { // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=C1%3AD' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=4&headers=-1'; var chartBuilder = Charts.newScatterChart() .setTitle('Adjusted GDP vs. U.S. Population') .setXAxisTitle('U.S. Population (millions)') .setYAxisTitle('Adjusted GDP ($ billions)') .setDimensions(600, 500) .setLegendPosition(Charts.Position.NONE) .setDataSourceUrl(dataSourceUrl); var chart = chartBuilder.build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setBackgroundColor","signature":"setBackgroundColor(cssValue)","return":"charts.ScatterChartBuilder","doc":"Sets the background color for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setBackgroundColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")"}]},{"name":"setColors","signature":"setColors(cssValues)","return":"charts.ScatterChartBuilder","doc":"Sets the colors for the lines in the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setColors(String)","argument":[{"name":"cssValues","type":"String[]","doc":"an array of color CSS values, such as [\"red\", \"#acf\"]. The nth element in the array represents the color of the nth line in the chart."}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.ScatterChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.ScatterChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.ScatterChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.ScatterChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.ScatterChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setLegendPosition","signature":"setLegendPosition(position)","return":"charts.ScatterChartBuilder","doc":"Sets the position of the legend with respect to the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendPosition(Position)","argument":[{"name":"position","type":"charts.Position","doc":"the position of the legend"}]},{"name":"setLegendTextStyle","signature":"setLegendTextStyle(textStyle)","return":"charts.ScatterChartBuilder","doc":"Sets the text style of the chart legend.","url":"http://developers.google.com/apps-script/reference/charts/#setLegendTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart legend."}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.ScatterChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"setPointStyle","signature":"setPointStyle(style)","return":"charts.ScatterChartBuilder","doc":"Sets the style for points in the line.","url":"http://developers.google.com/apps-script/reference/charts/#setPointStyle(PointStyle)","argument":[{"name":"style","type":"charts.PointStyle","doc":"the style to use for points in the line"}]},{"name":"setTitle","signature":"setTitle(chartTitle)","return":"charts.ScatterChartBuilder","doc":"Sets the title of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setTitle(String)","argument":[{"name":"chartTitle","type":"String","doc":"the chart title."}]},{"name":"setTitleTextStyle","signature":"setTitleTextStyle(textStyle)","return":"charts.ScatterChartBuilder","doc":"Sets the text style of the chart title.","url":"http://developers.google.com/apps-script/reference/charts/#setTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the chart title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisLogScale","signature":"setXAxisLogScale()","return":"charts.ScatterChartBuilder","doc":"Makes the horizontal axis into a logarithmic scale (requires all values to be positive).","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisLogScale()","argument":[]},{"name":"setXAxisRange","signature":"setXAxisRange(start, end)","return":"charts.ScatterChartBuilder","doc":"Sets the range for the horizontal axis of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisRange(Number,Number)","argument":[{"name":"start","type":"Number","doc":"value for the lowest grid line of the horizontal axis"},{"name":"end","type":"Number","doc":"value for the highest grid line of the horizontal axis"}]},{"name":"setXAxisTextStyle","signature":"setXAxisTextStyle(textStyle)","return":"charts.ScatterChartBuilder","doc":"Sets the horizontal axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setXAxisTitle","signature":"setXAxisTitle(title)","return":"charts.ScatterChartBuilder","doc":"Adds a title to the horizontal axis.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the X-axis"}]},{"name":"setXAxisTitleTextStyle","signature":"setXAxisTitleTextStyle(textStyle)","return":"charts.ScatterChartBuilder","doc":"Sets the horizontal axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setXAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisLogScale","signature":"setYAxisLogScale()","return":"charts.ScatterChartBuilder","doc":"Makes the vertical axis into a logarithmic scale (requires all values to be positive).","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisLogScale()","argument":[]},{"name":"setYAxisRange","signature":"setYAxisRange(start, end)","return":"charts.ScatterChartBuilder","doc":"Sets the range for the vertical axis of the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisRange(Number,Number)","argument":[{"name":"start","type":"Number","doc":"value for the lowest grid line of the vertical axis"},{"name":"end","type":"Number","doc":"value for the highest grid line of the vertical axis"}]},{"name":"setYAxisTextStyle","signature":"setYAxisTextStyle(textStyle)","return":"charts.ScatterChartBuilder","doc":"Sets the vertical axis text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]},{"name":"setYAxisTitle","signature":"setYAxisTitle(title)","return":"charts.ScatterChartBuilder","doc":"Adds a title to the vertical axis.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitle(String)","argument":[{"name":"title","type":"String","doc":"the title for the Y-axis"}]},{"name":"setYAxisTitleTextStyle","signature":"setYAxisTitleTextStyle(textStyle)","return":"charts.ScatterChartBuilder","doc":"Sets the vertical axis title text style.","url":"http://developers.google.com/apps-script/reference/charts/#setYAxisTitleTextStyle(TextStyle)","argument":[{"name":"textStyle","type":"charts.TextStyle","doc":"the text style to use for the horizontal axis title. TextStyleBuilder object can be created by calling Charts.newTextStyle()."}]}]},"charts.StringFilterBuilder":{"name":"StringFilterBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/string-filter-builder","doc":"StringFilterBuilder A builder for string filter controls. A string filter is a simple text input field that lets the user filter data via string matching. Given a column of type string and matching options, this control will filter out the rows that don't match the term that's in the input field. This example creates a table chart and binds it to a string filter. Using the filter, it is possible to change the table chart to display a subset of its data. function doGet() { var app = UiApp.createApplication(); var sampleData = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Month\") .addColumn(Charts.ColumnType.NUMBER, \"Dining\") .addColumn(Charts.ColumnType.NUMBER, \"Total\") .addRow([\"Jan\", 60, 520]) .addRow([\"Feb\", 50, 430]) .addRow([\"Mar\", 53, 440]) .addRow([\"Apr\", 70, 410]) .addRow([\"May\", 80, 390]) .addRow([\"Jun\", 60, 500]) .addRow([\"Jul\", 100, 450]) .addRow([\"Aug\", 140, 431]) .addRow([\"Sep\", 75, 488]) .addRow([\"Oct\", 70, 521]) .addRow([\"Nov\", 58, 388]) .addRow([\"Dec\", 63, 400]) .build(); var chart = Charts.newTableChart() .setDimensions(600, 500) .build(); var stringFilter = Charts.newStringFilter() .setFilterColumnLabel(\"Month\") .setRealtimeTrigger(true) .setCaseSensitive(true) .setLabel(\"Filter months shown\") .build(); var panel = app.createVerticalPanel().setSpacing(10); panel.add(stringFilter).add(chart); // Create a dashboard panel to bind the filter and the chart together. var dashboard = Charts.newDashboardPanel() .setDataTable(sampleData) .bind(stringFilter, chart) .build(); dashboard.add(panel); app.add(dashboard); return app; } For more details, see the Gviz documentation.","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Control","doc":"Builds a control.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setCaseSensitive","signature":"setCaseSensitive(caseSensitive)","return":"charts.StringFilterBuilder","doc":"Sets whether matching should be case sensitive or not.","url":"http://developers.google.com/apps-script/reference/charts/#setCaseSensitive(Boolean)","argument":[{"name":"caseSensitive","type":"Boolean","doc":"if true, enables string matching case sensitivity"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.StringFilterBuilder","doc":"Sets the data table to use for the control using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the control."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.StringFilterBuilder","doc":"Sets the control data table, which will be the control's underlying data model.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the control"}]},{"name":"setFilterColumnIndex","signature":"setFilterColumnIndex(columnIndex)","return":"charts.StringFilterBuilder","doc":"Sets the index of the data table column to filter on.","url":"http://developers.google.com/apps-script/reference/charts/#setFilterColumnIndex(Integer)","argument":[{"name":"columnIndex","type":"Integer","doc":"the index of the data table column the filter should operate upon"}]},{"name":"setFilterColumnLabel","signature":"setFilterColumnLabel(columnLabel)","return":"charts.StringFilterBuilder","doc":"Sets the label of the data table column to filter on.","url":"http://developers.google.com/apps-script/reference/charts/#setFilterColumnLabel(String)","argument":[{"name":"columnLabel","type":"String","doc":"the label of the column to filter on"}]},{"name":"setLabel","signature":"setLabel(label)","return":"charts.StringFilterBuilder","doc":"Sets the label to display next to the slider.","url":"http://developers.google.com/apps-script/reference/charts/#setLabel(String)","argument":[{"name":"label","type":"String","doc":"the label to display next to the slider"}]},{"name":"setLabelSeparator","signature":"setLabelSeparator(labelSeparator)","return":"charts.StringFilterBuilder","doc":"Sets a separator string appended to the label, to visually separate the label from the category picker.","url":"http://developers.google.com/apps-script/reference/charts/#setLabelSeparator(String)","argument":[{"name":"labelSeparator","type":"String","doc":"the string to use to separate the label from the category picker"}]},{"name":"setLabelStacking","signature":"setLabelStacking(orientation)","return":"charts.StringFilterBuilder","doc":"Sets whether the label should display above (vertical stacking) or beside (horizontal stacking) the input field.","url":"http://developers.google.com/apps-script/reference/charts/#setLabelStacking(Orientation)","argument":[{"name":"orientation","type":"charts.Orientation","doc":"the orientation of the stacking"}]},{"name":"setMatchType","signature":"setMatchType(matchType)","return":"charts.StringFilterBuilder","doc":"Sets whether the control should match exact values only (MatchType.EXACT), prefixes starting from the beginning of the value (MatchType.PREFIX), or any substring (MatchType.ANY).","url":"http://developers.google.com/apps-script/reference/charts/#setMatchType(MatchType)","argument":[{"name":"matchType","type":"charts.MatchType","doc":"the string matching type"}]},{"name":"setRealtimeTrigger","signature":"setRealtimeTrigger(realtimeTrigger)","return":"charts.StringFilterBuilder","doc":"Sets whether the control should match any time a key is pressed or only when the input field 'changes' (loss of focus or pressing the Enter key).","url":"http://developers.google.com/apps-script/reference/charts/#setRealtimeTrigger(Boolean)","argument":[{"name":"realtimeTrigger","type":"Boolean","doc":"if true, sets events to be triggered at real time (when a key is pressed)"}]}]},"charts.TableChartBuilder":{"name":"TableChartBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/table-chart-builder","doc":"TableChartBuilder A builder for table charts. For more details, see the Google Charts documentation. Here is an example that shows how to build a table chart. The data is imported from a Google spreadsheet. function doGet() { // Get sample data from a spreadsheet. var dataSourceUrl = 'https://docs.google.com/spreadsheet/tq?range=A1%3AF' + '&key=0Aq4s9w_HxMs7dHpfX05JdmVSb1FpT21sbXd4NVE3UEE&gid=4&headers=-1'; var chartBuilder = Charts.newTableChart() .setDimensions(600, 500) .enablePaging(20) .setDataSourceUrl(dataSourceUrl); var chart = chartBuilder.build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"build","signature":"build()","return":"charts.Chart","doc":"Builds the chart.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"enablePaging","signature":"enablePaging(enablePaging)","return":"charts.TableChartBuilder","doc":"Sets whether to enable paging through the data.","url":"http://developers.google.com/apps-script/reference/charts/#enablePaging(Boolean)","argument":[{"name":"enablePaging","type":"Boolean","doc":"true if paging should be enabled, false otherwise"}]},{"name":"enablePaging","signature":"enablePaging(pageSize)","return":"charts.TableChartBuilder","doc":"Enables paging and sets the number of rows in each page.","url":"http://developers.google.com/apps-script/reference/charts/#enablePaging(Integer)","argument":[{"name":"pageSize","type":"Integer","doc":"the number of rows in each page of the table"}]},{"name":"enablePaging","signature":"enablePaging(pageSize, startPage)","return":"charts.TableChartBuilder","doc":"Enables paging, sets the number of rows in each page and the first table page to display (page numbers are zero based).","url":"http://developers.google.com/apps-script/reference/charts/#enablePaging(Integer,Integer)","argument":[{"name":"pageSize","type":"Integer","doc":"the number of rows in each page of the table"},{"name":"startPage","type":"Integer","doc":"the first table page to display (page numbers are zero based)"}]},{"name":"enableRtlTable","signature":"enableRtlTable(rtlEnabled)","return":"charts.TableChartBuilder","doc":"Adds basic support for right-to-left languages (such as Arabic or Hebrew) by reversing the column order of the table, so that column zero is the right-most column, and the last column is the left-most column.","url":"http://developers.google.com/apps-script/reference/charts/#enableRtlTable(Boolean)","argument":[{"name":"rtlEnabled","type":"Boolean","doc":"true if right-to-left support should be enabled, false otherwise"}]},{"name":"enableSorting","signature":"enableSorting(enableSorting)","return":"charts.TableChartBuilder","doc":"Sets whether to sort columns when the user clicks a column heading.","url":"http://developers.google.com/apps-script/reference/charts/#enableSorting(Boolean)","argument":[{"name":"enableSorting","type":"Boolean","doc":"true if to enable sorting by clicking on column headers, false otherwise"}]},{"name":"setDataSourceUrl","signature":"setDataSourceUrl(url)","return":"charts.TableChartBuilder","doc":"Sets the data source URL that will be used to pull data in from an external source, such as Google Sheets.","url":"http://developers.google.com/apps-script/reference/charts/#setDataSourceUrl(String)","argument":[{"name":"url","type":"String","doc":"the data source URL, including any query parameters"}]},{"name":"setDataTable","signature":"setDataTable(tableBuilder)","return":"charts.TableChartBuilder","doc":"Sets the data table to use for the chart using a DataTableBuilder.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableBuilder)","argument":[{"name":"tableBuilder","type":"charts.DataTableBuilder","doc":"a data table builder. A new data table will be created instantly as part of this call, so any further updates to the builder won't be reflected in the chart."}]},{"name":"setDataTable","signature":"setDataTable(table)","return":"charts.TableChartBuilder","doc":"Sets the data table which contains the lines for the chart, as well as the X-axis labels.","url":"http://developers.google.com/apps-script/reference/charts/#setDataTable(DataTableSource)","argument":[{"name":"table","type":"charts.DataTableSource","doc":"the data table to use for the chart"}]},{"name":"setDataViewDefinition","signature":"setDataViewDefinition(dataViewDefinition)","return":"charts.TableChartBuilder","doc":"Sets the data view definition to use for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDataViewDefinition(DataViewDefinition)","argument":[{"name":"dataViewDefinition","type":"charts.DataViewDefinition","doc":"a data view definition object that defines the view that should be derived from the given data source for the chart drawing"}]},{"name":"setDimensions","signature":"setDimensions(width, height)","return":"charts.TableChartBuilder","doc":"Sets the dimensions for the chart.","url":"http://developers.google.com/apps-script/reference/charts/#setDimensions(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the chart, in pixels"},{"name":"height","type":"Integer","doc":"the height of the chart, in pixels"}]},{"name":"setFirstRowNumber","signature":"setFirstRowNumber(number)","return":"charts.TableChartBuilder","doc":"Sets the row number for the first row in the data table.","url":"http://developers.google.com/apps-script/reference/charts/#setFirstRowNumber(Integer)","argument":[{"name":"number","type":"Integer","doc":"the row number for the first row in the data table"}]},{"name":"setInitialSortingAscending","signature":"setInitialSortingAscending(column)","return":"charts.TableChartBuilder","doc":"Sets the index of the column according to which the table should be initially sorted (ascending).","url":"http://developers.google.com/apps-script/reference/charts/#setInitialSortingAscending(Integer)","argument":[{"name":"column","type":"Integer","doc":"the number of the column according to which the table should be initially sorted"}]},{"name":"setInitialSortingDescending","signature":"setInitialSortingDescending(column)","return":"charts.TableChartBuilder","doc":"Sets the index of the column according to which the table should be initially sorted (descending).","url":"http://developers.google.com/apps-script/reference/charts/#setInitialSortingDescending(Integer)","argument":[{"name":"column","type":"Integer","doc":"the number of the column according to which the table should be initially sorted"}]},{"name":"setOption","signature":"setOption(option, value)","return":"charts.TableChartBuilder","doc":"Sets advanced options for this chart.","url":"http://developers.google.com/apps-script/reference/charts/#setOption(String,Object)","argument":[{"name":"option","type":"String","doc":"the option to set"},{"name":"value","type":"Object","doc":"the value to set"}]},{"name":"showRowNumberColumn","signature":"showRowNumberColumn(showRowNumber)","return":"charts.TableChartBuilder","doc":"Sets whether to show the row number as the first column of the table.","url":"http://developers.google.com/apps-script/reference/charts/#showRowNumberColumn(Boolean)","argument":[{"name":"showRowNumber","type":"Boolean","doc":"true if the first column of the table should show the row number, false otherwise"}]},{"name":"useAlternatingRowStyle","signature":"useAlternatingRowStyle(alternate)","return":"charts.TableChartBuilder","doc":"Sets whether alternating color style will be assigned to odd and even rows of a table chart.","url":"http://developers.google.com/apps-script/reference/charts/#useAlternatingRowStyle(Boolean)","argument":[{"name":"alternate","type":"Boolean","doc":"true if color styles should be alternating, false otherwise"}]}]},"charts.TextStyle":{"name":"TextStyle","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/text-style","doc":"TextStyle A text style configuration object. Used in charts options to configure text style for elements that accepts it, such as title, horizontal axis, vertical axis, legend and tooltip. // This example creates a chart specifying different text styles for the title and axes. function doGet() { var sampleData = Charts.newDataTable() .addColumn(Charts.ColumnType.STRING, \"Seasons\") .addColumn(Charts.ColumnType.NUMBER, \"Rainy Days\") .addRow([\"Winter\", 5]) .addRow([\"Spring\", 12]) .addRow([\"Summer\", 8]) .addRow([\"Fall\", 8]) .build(); var titleTextStyleBuilder = Charts.newTextStyle() .setColor('#0000FF').setFontSize(26).setFontName('Ariel'); var axisTextStyleBuilder = Charts.newTextStyle() .setColor('#3A3A3A').setFontSize(20).setFontName('Ariel'); var titleTextStyle = titleTextStyleBuilder.build(); var axisTextStyle = axisTextStyleBuilder.build(); var chart = Charts.newLineChart() .setTitleTextStyle(titleTextStyle) .setXAxisTitleTextStyle(axisTextStyle) .setYAxisTitleTextStyle(axisTextStyle) .setTitle('Rainy Days Per Season') .setXAxisTitle('Season') .setYAxisTitle('Number of Rainy Days') .setDataTable(sampleData) .build(); return UiApp.createApplication().add(chart); }","property":[],"method":[{"name":"getColor","signature":"getColor()","return":"String","doc":"Gets the color of the text style.","url":"http://developers.google.com/apps-script/reference/charts/#getColor()","argument":[]},{"name":"getFontName","signature":"getFontName()","return":"String","doc":"Gets the font name of the text style.","url":"http://developers.google.com/apps-script/reference/charts/#getFontName()","argument":[]},{"name":"getFontSize","signature":"getFontSize()","return":"Number","doc":"Gets the font size of the text style.","url":"http://developers.google.com/apps-script/reference/charts/#getFontSize()","argument":[]}]},"charts.TextStyleBuilder":{"name":"TextStyleBuilder","kind":"class","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/text-style-builder","doc":"TextStyleBuilder A builder used to create TextStyle objects. It allows configuration of the text's properties such as name, color, and size. The following example shows how to create a text style using the builder. For a more complete example, refer to the documentation for TextStyle. // Creates a new text style that uses 26-point, blue, Ariel font. var textStyleBuilder = Charts.newTextStyle() .setColor('#0000FF').setFontName('Ariel').setFontSize(26); var style = textStyleBuilder.build();","property":[],"method":[{"name":"build","signature":"build()","return":"charts.TextStyle","doc":"Builds and returns a text style configuration object that was built using this builder.","url":"http://developers.google.com/apps-script/reference/charts/#build()","argument":[]},{"name":"setColor","signature":"setColor(cssValue)","return":"charts.TextStyleBuilder","doc":"Sets the color of the text style.","url":"http://developers.google.com/apps-script/reference/charts/#setColor(String)","argument":[{"name":"cssValue","type":"String","doc":"the CSS value for the color (such as \"blue\" or \"#00f\")."}]},{"name":"setFontName","signature":"setFontName(fontName)","return":"charts.TextStyleBuilder","doc":"Sets the font name of the text style","url":"http://developers.google.com/apps-script/reference/charts/#setFontName(String)","argument":[{"name":"fontName","type":"String","doc":"the font name to use for the text style"}]},{"name":"setFontSize","signature":"setFontSize(fontSize)","return":"charts.TextStyleBuilder","doc":"Sets the font size of the text style.","url":"http://developers.google.com/apps-script/reference/charts/#setFontSize(Number)","argument":[{"name":"fontSize","type":"Number","doc":"the font size in pixels to use for the text style"}]}]},"charts.DataTableSource":{"name":"DataTableSource","kind":"interface","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/data-table-source","doc":"DataTableSource Interface for objects that can represent their data as a DataTable. Implementing classes NameBrief description DataTableA Data Table to be used in charts. RangeAccess and modify spreadsheet ranges.","property":[],"method":[{"name":"getDataTable","signature":"getDataTable()","return":"charts.DataTable","doc":"Return the data inside this object as a DataTable.","url":"http://developers.google.com/apps-script/reference/charts/#getDataTable()","argument":[]}]},"charts.ChartType":{"name":"ChartType","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/chart-type","doc":"ChartType Chart types supported by the Charts service.","property":[{"name":"AREA","type":"Enum","doc":"Area chart"},{"name":"BAR","type":"Enum","doc":"Bar chart"},{"name":"COLUMN","type":"Enum","doc":"Column chart"},{"name":"LINE","type":"Enum","doc":"Line chart"},{"name":"PIE","type":"Enum","doc":"Pie chart"},{"name":"SCATTER","type":"Enum","doc":"Scatter chart"},{"name":"TABLE","type":"Enum","doc":"Table chart"}],"method":[]},"charts.ColumnType":{"name":"ColumnType","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/column-type","doc":"ColumnType An enumeration of the valid data types for columns in a DataTable.","property":[{"name":"DATE","type":"Enum","doc":"Corresponds to date values."},{"name":"NUMBER","type":"Enum","doc":"Corresponds to number values."},{"name":"STRING","type":"Enum","doc":"Corresponds to string values."}],"method":[]},"charts.CurveStyle":{"name":"CurveStyle","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/curve-style","doc":"CurveStyle An enumeration of the styles for curves in a chart.","property":[{"name":"NORMAL","type":"Enum","doc":"Straight lines without curve"},{"name":"SMOOTH","type":"Enum","doc":"The angles of the line will be smoothed"}],"method":[]},"charts.MatchType":{"name":"MatchType","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/match-type","doc":"MatchType An enumeration of how a string value should be matched. Matching a string is a boolean operation. Given a string, a match term (string), and a match type, the operation will output true in the following cases: If the match type equals EXACT and the match term equals the string. If the match type equals PREFIX and the match term is a prefix of the string. If the match type equals ANY and the match term is a substring of the string. This enumeration can be used in by a string filter control to decide which rows to filter out of the data table. Given a column to filter on, leave only the rows that match the value entered in the filter input box, using one of the above matching types.","property":[{"name":"EXACT","type":"Enum","doc":"Match exact values only"},{"name":"PREFIX","type":"Enum","doc":"Match prefixes starting from the beginning of the value"},{"name":"ANY","type":"Enum","doc":"Match any substring"}],"method":[{"name":"getName","signature":"getName()","return":"String","doc":"Returns the name of the MatchType to be used in the options JSON.","url":"http://developers.google.com/apps-script/reference/charts/#getName()","argument":[]}]},"charts.Orientation":{"name":"Orientation","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/orientation","doc":"Orientation An enumeration of the orientation of an object.","property":[{"name":"HORIZONTAL","type":"Enum","doc":"Horizontal orientation"},{"name":"VERTICAL","type":"Enum","doc":"Vertical orientation"}],"method":[]},"charts.PickerValuesLayout":{"name":"PickerValuesLayout","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/picker-values-layout","doc":"PickerValuesLayout An enumeration of how to display selected values in picker widget.","property":[{"name":"ASIDE","type":"Enum","doc":"Selected values will display in a single text line next to the value picker widget"},{"name":"BELOW","type":"Enum","doc":"Selected values will display in a single text line below the widget"},{"name":"BELOW_WRAPPING","type":"Enum","doc":"Similar to below, but entries that cannot fit in the picker will wrap to a new line"},{"name":"BELOW_STACKED","type":"Enum","doc":"Selected values will be displayed in a column below the widget"}],"method":[]},"charts.PointStyle":{"name":"PointStyle","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/point-style","doc":"PointStyle An enumeration of the styles of points in a line.","property":[{"name":"NONE","type":"Enum","doc":"Do not display line points"},{"name":"TINY","type":"Enum","doc":"Use tiny line points"},{"name":"MEDIUM","type":"Enum","doc":"Use medium sized line points"},{"name":"LARGE","type":"Enum","doc":"Use large sized line points"},{"name":"HUGE","type":"Enum","doc":"Use largest sized line points"}],"method":[]},"charts.Position":{"name":"Position","kind":"enum","global":false,"category":"charts","url":"http://developers.google.com/apps-script/reference/charts/position","doc":"Position An enumeration of legend positions within a chart.","property":[{"name":"TOP","type":"Enum","doc":"Above the chart."},{"name":"RIGHT","type":"Enum","doc":"To the right of the chart."},{"name":"BOTTOM","type":"Enum","doc":"Below the chart."},{"name":"NONE","type":"Enum","doc":"No legend is displayed."}],"method":[]}}