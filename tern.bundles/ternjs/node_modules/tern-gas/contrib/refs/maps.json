{"maps.Maps":{"name":"Maps","kind":"class","global":true,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/maps","doc":"Maps Allows for direction finding, geocoding, elevation sampling and the creation of static map images.","property":[{"name":"DirectionFinder","type":"maps.DirectionFinderEnums","doc":""},{"name":"StaticMap","type":"maps.StaticMapEnums","doc":""}],"method":[{"name":"decodePolyline","signature":"decodePolyline(polyline)","return":"Number[]","doc":"Decodes an encoded polyline string back into an array of points.","url":"http://developers.google.com/apps-script/reference/maps/#decodePolyline(String)","argument":[{"name":"polyline","type":"String","doc":"an encoded polyline"}]},{"name":"encodePolyline","signature":"encodePolyline(points)","return":"String","doc":"Encodes an array of points into a string.","url":"http://developers.google.com/apps-script/reference/maps/#encodePolyline(Number)","argument":[{"name":"points","type":"Number[]","doc":"an array of latitude/longitude pairs to encode"}]},{"name":"newDirectionFinder","signature":"newDirectionFinder()","return":"maps.DirectionFinder","doc":"Creates a new DirectionFinder object.","url":"http://developers.google.com/apps-script/reference/maps/#newDirectionFinder()","argument":[]},{"name":"newElevationSampler","signature":"newElevationSampler()","return":"maps.ElevationSampler","doc":"Creates an ElevationSampler object.","url":"http://developers.google.com/apps-script/reference/maps/#newElevationSampler()","argument":[]},{"name":"newGeocoder","signature":"newGeocoder()","return":"maps.Geocoder","doc":"Creates a new Geocoder object.","url":"http://developers.google.com/apps-script/reference/maps/#newGeocoder()","argument":[]},{"name":"newStaticMap","signature":"newStaticMap()","return":"maps.StaticMap","doc":"Creates a new StaticMap object.","url":"http://developers.google.com/apps-script/reference/maps/#newStaticMap()","argument":[]},{"name":"setAuthentication","signature":"setAuthentication(clientId, signingKey)","return":"void","doc":"Enables the use of an externally established Maps API for Business account, to leverage additional quota allowances.","url":"http://developers.google.com/apps-script/reference/maps/#setAuthentication(String,String)","argument":[{"name":"clientId","type":"String","doc":"client identifier"},{"name":"signingKey","type":"String","doc":"private signing key"}]}]},"maps.DirectionFinder":{"name":"DirectionFinder","kind":"class","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/direction-finder","doc":"DirectionFinder Allows for the retrieval of directions between locations. The example below shows how you can use this class to get the directions from Times Square to Central Park, stopping first at Lincoln Center, plot the locations and path on a map, and send the map in an email. // Get the directions. var directions = Maps.newDirectionFinder() .setOrigin('Times Square, New York, NY') .addWaypoint('Lincoln Center, New York, NY') .setDestination('Central Park, New York, NY') .setMode(Maps.DirectionFinder.Mode.DRIVING) .getDirections(); var route = directions.routes[0]; // Set up marker styles. var markerSize = Maps.StaticMap.MarkerSize.MID; var markerColor = Maps.StaticMap.Color.GREEN var markerLetterCode = 'A'.charCodeAt(); // Add markers to the map. var map = Maps.newStaticMap(); for (var i = 0; i < route.legs.length; i++) { var leg = route.legs[i]; if (i == 0) { // Add a marker for the start location of the first leg only. map.setMarkerStyle(markerSize, markerColor, String.fromCharCode(markerLetterCode)); map.addMarker(leg.start_location.lat, leg.start_location.lng); markerLetterCode++; } map.setMarkerStyle(markerSize, markerColor, String.fromCharCode(markerLetterCode)); map.addMarker(leg.end_location.lat, leg.end_location.lng); markerLetterCode++; } // Add a path for the entire route. map.addPath(route.overview_polyline.points); // Send the map in an email. var toAddress = Session.getActiveUser().getEmail(); MailApp.sendEmail(toAddress, 'Directions', 'Please open: ' + map.getMapUrl(), { htmlBody: 'See below.<br/><img src=\"cid:mapImage\">', inlineImages: { mapImage: Utilities.newBlob(map.getMapImage(), 'image/png') } }); See also Google Directions API","property":[],"method":[{"name":"addWaypoint","signature":"addWaypoint(latitude, longitude)","return":"maps.DirectionFinder","doc":"Adds a waypoint that the route must pass through, using a point (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#addWaypoint(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"Latitude of the waypoint."},{"name":"longitude","type":"Number","doc":"Longitude of the waypoint."}]},{"name":"addWaypoint","signature":"addWaypoint(address)","return":"maps.DirectionFinder","doc":"Adds a waypoint that the route must pass through, using an address.","url":"http://developers.google.com/apps-script/reference/maps/#addWaypoint(String)","argument":[{"name":"address","type":"String","doc":"An address."}]},{"name":"clearWaypoints","signature":"clearWaypoints()","return":"maps.DirectionFinder","doc":"Clears the current set of waypoints.","url":"http://developers.google.com/apps-script/reference/maps/#clearWaypoints()","argument":[]},{"name":"getDirections","signature":"getDirections()","return":"Object","doc":"Gets the directions using the origin, destination, and other options that were set.","url":"http://developers.google.com/apps-script/reference/maps/#getDirections()","argument":[]},{"name":"setAlternatives","signature":"setAlternatives(useAlternatives)","return":"maps.DirectionFinder","doc":"Sets whether or not alternative routes should be returned, instead of just the highest ranked route (defaults to false).","url":"http://developers.google.com/apps-script/reference/maps/#setAlternatives(Boolean)","argument":[{"name":"useAlternatives","type":"Boolean","doc":"true to return alternative routes, false otherwise"}]},{"name":"setArrive","signature":"setArrive(time)","return":"maps.DirectionFinder","doc":"Sets the desired time of arrival (when applicable).","url":"http://developers.google.com/apps-script/reference/maps/#setArrive(Date)","argument":[{"name":"time","type":"Date","doc":"the time of arrival"}]},{"name":"setAvoid","signature":"setAvoid(avoid)","return":"maps.DirectionFinder","doc":"Sets whether to avoid certain types of restrictions.","url":"http://developers.google.com/apps-script/reference/maps/#setAvoid(String)","argument":[{"name":"avoid","type":"String","doc":"a constant value from Avoid"}]},{"name":"setDepart","signature":"setDepart(time)","return":"maps.DirectionFinder","doc":"Sets the desired time of departure (when applicable).","url":"http://developers.google.com/apps-script/reference/maps/#setDepart(Date)","argument":[{"name":"time","type":"Date","doc":"the time of departure"}]},{"name":"setDestination","signature":"setDestination(latitude, longitude)","return":"maps.DirectionFinder","doc":"Sets the ending location for which to calculate directions to, using a point (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#setDestination(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the ending location"},{"name":"longitude","type":"Number","doc":"the longitude of the ending location"}]},{"name":"setDestination","signature":"setDestination(address)","return":"maps.DirectionFinder","doc":"Sets the ending location for which to calculate directions to, using an address.","url":"http://developers.google.com/apps-script/reference/maps/#setDestination(String)","argument":[{"name":"address","type":"String","doc":"the ending address"}]},{"name":"setLanguage","signature":"setLanguage(language)","return":"maps.DirectionFinder","doc":"Sets the language to be used for the directions.","url":"http://developers.google.com/apps-script/reference/maps/#setLanguage(String)","argument":[{"name":"language","type":"String","doc":"a BCP-47 language identifier"}]},{"name":"setMode","signature":"setMode(mode)","return":"maps.DirectionFinder","doc":"Sets the mode of travel (defaults to driving).","url":"http://developers.google.com/apps-script/reference/maps/#setMode(String)","argument":[{"name":"mode","type":"String","doc":"a constant value from Mode"}]},{"name":"setOptimizeWaypoints","signature":"setOptimizeWaypoints(optimizeOrder)","return":"maps.DirectionFinder","doc":"Sets whether or not to optimize the provided route by rearranging the waypoints in a more efficient order (defaults to false).","url":"http://developers.google.com/apps-script/reference/maps/#setOptimizeWaypoints(Boolean)","argument":[{"name":"optimizeOrder","type":"Boolean","doc":"true to optimize the order, or false otherwise"}]},{"name":"setOrigin","signature":"setOrigin(latitude, longitude)","return":"maps.DirectionFinder","doc":"Sets the starting location from which to calculate directions, using a point (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#setOrigin(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the starting location"},{"name":"longitude","type":"Number","doc":"the longitude of the starting location"}]},{"name":"setOrigin","signature":"setOrigin(address)","return":"maps.DirectionFinder","doc":"Sets the starting location from which to calculate directions, using an address.","url":"http://developers.google.com/apps-script/reference/maps/#setOrigin(String)","argument":[{"name":"address","type":"String","doc":"the starting address"}]},{"name":"setRegion","signature":"setRegion(region)","return":"maps.DirectionFinder","doc":"Sets a region to use when interpreting location names.","url":"http://developers.google.com/apps-script/reference/maps/#setRegion(String)","argument":[{"name":"region","type":"String","doc":"the region code to use"}]}]},"maps.DirectionFinderEnums":{"name":"DirectionFinderEnums","kind":"class","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/direction-finder-enums","doc":"DirectionFinderEnums A collection of enums used by DirectionFinder.","property":[{"name":"Avoid","type":"maps.Avoid","doc":""},{"name":"Mode","type":"maps.Mode","doc":""}],"method":[]},"maps.ElevationSampler":{"name":"ElevationSampler","kind":"class","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/elevation-sampler","doc":"ElevationSampler Allows for the sampling of elevations at particular locations. The example below shows how you can use this class to determine the highest point along the route from Denver to Grand Junction in Colorado, plot it on a map, and save the map to Google Drive. // Get directions from Denver to Grand Junction. var directions = Maps.newDirectionFinder() .setOrigin('Denver, CO') .setDestination('Grand Junction, CO') .setMode(Maps.DirectionFinder.Mode.DRIVING) .getDirections(); var route = directions.routes[0]; // Get elevation samples along the route. var numberOfSamples = 30; var response = Maps.newElevationSampler() .samplePath(route.overview_polyline.points, numberOfSamples) // Determine highest point. var maxElevation = Number.MIN_VALUE; var highestPoint = null; for (var i = 0; i < response.results.length; i++) { var sample = response.results[i]; if (sample.elevation > maxElevation) { maxElevation = sample.elevation; highestPoint = sample.location; } } // Add the path and marker to a map. var map = Maps.newStaticMap() .addPath(route.overview_polyline.points) .addMarker(highestPoint.lat, highestPoint.lng); // Save the map to your drive DocsList.createFile(Utilities.newBlob(map.getMapImage(), 'image/png', 'map.png')); See also Google Elevation API","property":[],"method":[{"name":"sampleLocation","signature":"sampleLocation(latitude, longitude)","return":"Object","doc":"Returns elevation data for a single point (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#sampleLocation(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the point to sample"},{"name":"longitude","type":"Number","doc":"the longitude of the point to sample"}]},{"name":"sampleLocations","signature":"sampleLocations(points)","return":"Object","doc":"Returns elevation data for a series of points (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#sampleLocations(Number)","argument":[{"name":"points","type":"Number[]","doc":"an array of latitude/longitude pairs"}]},{"name":"sampleLocations","signature":"sampleLocations(encodedPolyline)","return":"Object","doc":"Returns elevation data for the points in an encoded polyline.","url":"http://developers.google.com/apps-script/reference/maps/#sampleLocations(String)","argument":[{"name":"encodedPolyline","type":"String","doc":"an encoded polyline of points to sample"}]},{"name":"samplePath","signature":"samplePath(points, numSamples)","return":"Object","doc":"Returns elevation data for a number of samples along a line, defined using a series of points.","url":"http://developers.google.com/apps-script/reference/maps/#samplePath(Number,Integer)","argument":[{"name":"points","type":"Number[]","doc":"an array of latitude/longitude pairs defining a path to sample over"},{"name":"numSamples","type":"Integer","doc":"the number of points to sample along the path of points"}]},{"name":"samplePath","signature":"samplePath(encodedPolyline, numSamples)","return":"Object","doc":"Returns elevation data for a number of samples along a line, defined using an encoded polyline.","url":"http://developers.google.com/apps-script/reference/maps/#samplePath(String,Integer)","argument":[{"name":"encodedPolyline","type":"String","doc":"an encoded polyline of points defining a path to sample over"},{"name":"numSamples","type":"Integer","doc":"the number of points to sample along the path of points"}]}]},"maps.Geocoder":{"name":"Geocoder","kind":"class","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/geocoder","doc":"Geocoder Allows for the conversion between an address and geographical coordinates. The example below shows how you can use this class find the top nine matches for the location \"Main St\" in Colorado, add them to a map, and then embed it in a new Google Doc. // Find the best matches for \"Main St\" in Colorado. var response = Maps.newGeocoder() // The latitudes and longitudes of southwest and northeast corners of Colorado, respectively. .setBounds(36.998166, -109.045486, 41.001666,-102.052002) .geocode('Main St'); // Create a Google Doc and map. var doc = DocumentApp.create('My Map'); var map = Maps.newStaticMap(); // Add each result to the map and doc. for (var i = 0; i < response.results.length && i < 9; i++) { var result = response.results[i]; map.setMarkerStyle(null, null, i + 1); map.addMarker(result.geometry.location.lat, result.geometry.location.lng); doc.appendListItem(result.formatted_address); } // Add the finished map to the doc. doc.appendImage(Utilities.newBlob(map.getMapImage(), 'image/png')); See also Google Geocoding API","property":[],"method":[{"name":"geocode","signature":"geocode(address)","return":"Object","doc":"Gets the approximate geographic points for a given address.","url":"http://developers.google.com/apps-script/reference/maps/#geocode(String)","argument":[{"name":"address","type":"String","doc":"an address"}]},{"name":"reverseGeocode","signature":"reverseGeocode(latitude, longitude)","return":"Object","doc":"Gets the approximate addresses for a given geographic point.","url":"http://developers.google.com/apps-script/reference/maps/#reverseGeocode(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the point"},{"name":"longitude","type":"Number","doc":"the longitude of the point"}]},{"name":"reverseGeocode","signature":"reverseGeocode(swLatitude, swLongitude, neLatitude, neLongitude)","return":"Object","doc":"Gets the approximate addresses for a given area.","url":"http://developers.google.com/apps-script/reference/maps/#reverseGeocode(Number,Number,Number,Number)","argument":[{"name":"swLatitude","type":"Number","doc":"the latitude of the south west corner of the bounds"},{"name":"swLongitude","type":"Number","doc":"the longitude of the south west corner of the bounds"},{"name":"neLatitude","type":"Number","doc":"the latitude of the north east corner of the bounds"},{"name":"neLongitude","type":"Number","doc":"the longitude of the north east corner of the bounds"}]},{"name":"setBounds","signature":"setBounds(swLatitude, swLongitude, neLatitude, neLongitude)","return":"maps.Geocoder","doc":"Sets the bounds of an area that should be given extra preference in the results.","url":"http://developers.google.com/apps-script/reference/maps/#setBounds(Number,Number,Number,Number)","argument":[{"name":"swLatitude","type":"Number","doc":"the latitude of the south west corner of the bounds"},{"name":"swLongitude","type":"Number","doc":"the longitude of the south west corner of the bounds"},{"name":"neLatitude","type":"Number","doc":"the latitude of the north east corner of the bounds"},{"name":"neLongitude","type":"Number","doc":"the longitude of the north east corner of the bounds"}]},{"name":"setLanguage","signature":"setLanguage(language)","return":"maps.Geocoder","doc":"Sets the language to be used in the results.","url":"http://developers.google.com/apps-script/reference/maps/#setLanguage(String)","argument":[{"name":"language","type":"String","doc":"a BCP-47 language identifier"}]},{"name":"setRegion","signature":"setRegion(region)","return":"maps.Geocoder","doc":"Sets a region to use when interpreting location names.","url":"http://developers.google.com/apps-script/reference/maps/#setRegion(String)","argument":[{"name":"region","type":"String","doc":"the region code to use"}]}]},"maps.StaticMap":{"name":"StaticMap","kind":"class","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/static-map","doc":"StaticMap Allows for the creation and decoration of static map images. The example below shows how you can use this class to create a map of New York City's Theatre District, including nearby train stations, and display it in a simple web app. function doGet(event) { // Create a map centered on Times Square. var map = Maps.newStaticMap() .setSize(600, 600) .setCenter('Times Square, New York, NY'); // Add markers for the nearbye train stations. map.setMarkerStyle(Maps.StaticMap.MarkerSize.MID, Maps.StaticMap.Color.RED, 'T'); map.addMarker('Grand Central Station, New York, NY'); map.addMarker('Penn Station, New York, NY'); // Show the boundaries of the Theatre District. var corners = [ '8th Ave & 53rd St, New York, NY', '6th Ave & 53rd St, New York, NY', '6th Ave & 40th St, New York, NY', '8th Ave & 40th St, New York, NY' ]; map.setPathStyle(4, Maps.StaticMap.Color.BLACK, Maps.StaticMap.Color.BLUE); map.beginPath(); for (var i = 0; i < corners.length; i++) { map.addAddress(corners[i]); } // Create the user interface and add the map image. var app = UiApp.createApplication().setTitle('NYC Theatre District'); app.add(app.createImage(map.getMapUrl())); return app; } See also Google Static Maps API","property":[],"method":[{"name":"addAddress","signature":"addAddress(address)","return":"maps.StaticMap","doc":"Adds a new address to the current path definition.","url":"http://developers.google.com/apps-script/reference/maps/#addAddress(String)","argument":[{"name":"address","type":"String","doc":"an address"}]},{"name":"addMarker","signature":"addMarker(latitude, longitude)","return":"maps.StaticMap","doc":"Adds a marker to the map using a point (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#addMarker(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the new marker"},{"name":"longitude","type":"Number","doc":"the longitude of the new marker"}]},{"name":"addMarker","signature":"addMarker(address)","return":"maps.StaticMap","doc":"Adds a marker to the map using an address.","url":"http://developers.google.com/apps-script/reference/maps/#addMarker(String)","argument":[{"name":"address","type":"String","doc":"the address at wich to place the new marker"}]},{"name":"addPath","signature":"addPath(points)","return":"maps.StaticMap","doc":"Adds a path to the map using an array of points.","url":"http://developers.google.com/apps-script/reference/maps/#addPath(Number)","argument":[{"name":"points","type":"Number[]","doc":"an array of latitude/longitude pairs that define the path"}]},{"name":"addPath","signature":"addPath(polyline)","return":"maps.StaticMap","doc":"Adds a path to the map using an encoded polyline.","url":"http://developers.google.com/apps-script/reference/maps/#addPath(String)","argument":[{"name":"polyline","type":"String","doc":"an encoded polyline"}]},{"name":"addPoint","signature":"addPoint(latitude, longitude)","return":"maps.StaticMap","doc":"Adds a new point (lat/lng) to the current path definition.","url":"http://developers.google.com/apps-script/reference/maps/#addPoint(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the point"},{"name":"longitude","type":"Number","doc":"the longitude of the point"}]},{"name":"addVisible","signature":"addVisible(latitude, longitude)","return":"maps.StaticMap","doc":"Adds a point (lat/lng) location that must be visible in the map.","url":"http://developers.google.com/apps-script/reference/maps/#addVisible(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the point"},{"name":"longitude","type":"Number","doc":"the longitude of the point"}]},{"name":"addVisible","signature":"addVisible(address)","return":"maps.StaticMap","doc":"Adds an address location that must be visible in the map.","url":"http://developers.google.com/apps-script/reference/maps/#addVisible(String)","argument":[{"name":"address","type":"String","doc":"an address that must be visible in the map"}]},{"name":"beginPath","signature":"beginPath()","return":"maps.StaticMap","doc":"Starts a new path definition.","url":"http://developers.google.com/apps-script/reference/maps/#beginPath()","argument":[]},{"name":"clearMarkers","signature":"clearMarkers()","return":"maps.StaticMap","doc":"Clears the current set of markers.","url":"http://developers.google.com/apps-script/reference/maps/#clearMarkers()","argument":[]},{"name":"clearPaths","signature":"clearPaths()","return":"maps.StaticMap","doc":"Clear the current set of paths.","url":"http://developers.google.com/apps-script/reference/maps/#clearPaths()","argument":[]},{"name":"clearVisibles","signature":"clearVisibles()","return":"maps.StaticMap","doc":"Clears the current set of visible locations.","url":"http://developers.google.com/apps-script/reference/maps/#clearVisibles()","argument":[]},{"name":"endPath","signature":"endPath()","return":"maps.StaticMap","doc":"Completes a path definition started with beginPath().","url":"http://developers.google.com/apps-script/reference/maps/#endPath()","argument":[]},{"name":"getAs","signature":"getAs(contentType)","return":"base.Blob","doc":"Return the data inside this object as a blob converted to the specified content type.","url":"http://developers.google.com/apps-script/reference/maps/#getAs(String)","argument":[{"name":"contentType","type":"String","doc":"the MIME type to convert to. For most blobs, 'application/pdf' is the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of 'image/bmp', 'image/gif', 'image/jpeg', or 'image/png' are also valid."}]},{"name":"getBlob","signature":"getBlob()","return":"base.Blob","doc":"Gets the image data as a Blob.","url":"http://developers.google.com/apps-script/reference/maps/#getBlob()","argument":[]},{"name":"getMapImage","signature":"getMapImage()","return":"Byte[]","doc":"Gets the raw image data as a byte array.","url":"http://developers.google.com/apps-script/reference/maps/#getMapImage()","argument":[]},{"name":"getMapUrl","signature":"getMapUrl()","return":"String","doc":"Gets the URL of the map image.","url":"http://developers.google.com/apps-script/reference/maps/#getMapUrl()","argument":[]},{"name":"setCenter","signature":"setCenter(latitude, longitude)","return":"maps.StaticMap","doc":"Sets the center of the map using a point (lat/lng).","url":"http://developers.google.com/apps-script/reference/maps/#setCenter(Number,Number)","argument":[{"name":"latitude","type":"Number","doc":"the latitude of the center"},{"name":"longitude","type":"Number","doc":"the longitude of the center"}]},{"name":"setCenter","signature":"setCenter(address)","return":"maps.StaticMap","doc":"Sets the center of the map using an address.","url":"http://developers.google.com/apps-script/reference/maps/#setCenter(String)","argument":[{"name":"address","type":"String","doc":"the address of the center"}]},{"name":"setCustomMarkerStyle","signature":"setCustomMarkerStyle(imageUrl, useShadow)","return":"maps.StaticMap","doc":"Sets the custom marker image to use when creating new markers.","url":"http://developers.google.com/apps-script/reference/maps/#setCustomMarkerStyle(String,Boolean)","argument":[{"name":"imageUrl","type":"String","doc":"specifies a URL to use as the marker's custom icon. Images may be in PNG, JPEG or GIF formats, though PNG is recommended."},{"name":"useShadow","type":"Boolean","doc":"indicates that the marker should have a shadow generated, based on the image's visible region and its opacity/transparency"}]},{"name":"setFormat","signature":"setFormat(format)","return":"maps.StaticMap","doc":"Sets the format of the map image.","url":"http://developers.google.com/apps-script/reference/maps/#setFormat(String)","argument":[{"name":"format","type":"String","doc":"a constant value from Format"}]},{"name":"setLanguage","signature":"setLanguage(language)","return":"maps.StaticMap","doc":"Sets the language to be used for text on the map (where avaialbe).","url":"http://developers.google.com/apps-script/reference/maps/#setLanguage(String)","argument":[{"name":"language","type":"String","doc":"a BCP-47 language identifier"}]},{"name":"setMapType","signature":"setMapType(mapType)","return":"maps.StaticMap","doc":"Sets the type of map to be shown.","url":"http://developers.google.com/apps-script/reference/maps/#setMapType(String)","argument":[{"name":"mapType","type":"String","doc":"a constant value from Type"}]},{"name":"setMarkerStyle","signature":"setMarkerStyle(size, color, label)","return":"maps.StaticMap","doc":"Sets the marker style to use when creating new markers.","url":"http://developers.google.com/apps-script/reference/maps/#setMarkerStyle(String,String,String)","argument":[{"name":"size","type":"String","doc":"a constant value from MarkerSize"},{"name":"color","type":"String","doc":"a string in the format \"0xrrggbb\" or a constant value from Color"},{"name":"label","type":"String","doc":"a string containing a single character A-Z or 0-9"}]},{"name":"setMobile","signature":"setMobile(useMobileTiles)","return":"maps.StaticMap","doc":"Sets whether or not to use specialized tile sets for mobile devices.","url":"http://developers.google.com/apps-script/reference/maps/#setMobile(Boolean)","argument":[{"name":"useMobileTiles","type":"Boolean","doc":"whether or not to use mobile tiles"}]},{"name":"setPathStyle","signature":"setPathStyle(weight, color, fillColor)","return":"maps.StaticMap","doc":"Sets the path style to use when creating new paths.","url":"http://developers.google.com/apps-script/reference/maps/#setPathStyle(Integer,String,String)","argument":[{"name":"weight","type":"Integer","doc":"the width of lines in pixels"},{"name":"color","type":"String","doc":"the line color, as a string in the format \"0xrrggbb\" or a constant value from Color"},{"name":"fillColor","type":"String","doc":"the fill color, a string in the format \"0xrrggbb\" or a constant value from Color"}]},{"name":"setSize","signature":"setSize(width, height)","return":"maps.StaticMap","doc":"Sets the width and height of the map image in pixels.","url":"http://developers.google.com/apps-script/reference/maps/#setSize(Integer,Integer)","argument":[{"name":"width","type":"Integer","doc":"the width of the image in pixels"},{"name":"height","type":"Integer","doc":"the height of the image in pixels"}]},{"name":"setZoom","signature":"setZoom(zoom)","return":"maps.StaticMap","doc":"Sets the zoom factor, or magnification level, used for the map.","url":"http://developers.google.com/apps-script/reference/maps/#setZoom(Integer)","argument":[{"name":"zoom","type":"Integer","doc":"a value from 0 - 21+"}]}]},"maps.StaticMapEnums":{"name":"StaticMapEnums","kind":"class","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/static-map-enums","doc":"StaticMapEnums A collection of enums used by StaticMap.","property":[{"name":"Color","type":"maps.Color","doc":""},{"name":"Format","type":"maps.Format","doc":""},{"name":"MarkerSize","type":"maps.MarkerSize","doc":""},{"name":"Type","type":"maps.Type","doc":""}],"method":[]},"maps.Avoid":{"name":"Avoid","kind":"enum","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/avoid","doc":"Avoid An enum representing the types of restrictions to avoid when finding directions.","property":[{"name":"TOLLS","type":"Enum","doc":"Avoid tolls."},{"name":"HIGHWAYS","type":"Enum","doc":"Avoid highways."}],"method":[]},"maps.Color":{"name":"Color","kind":"enum","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/color","doc":"Color An enum representing the named colors available to use in map images.","property":[{"name":"BLACK","type":"Enum","doc":""},{"name":"BROWN","type":"Enum","doc":""},{"name":"GREEN","type":"Enum","doc":""},{"name":"PURPLE","type":"Enum","doc":""},{"name":"YELLOW","type":"Enum","doc":""},{"name":"BLUE","type":"Enum","doc":""},{"name":"GRAY","type":"Enum","doc":""},{"name":"ORANGE","type":"Enum","doc":""},{"name":"RED","type":"Enum","doc":""},{"name":"WHITE","type":"Enum","doc":""}],"method":[]},"maps.Format":{"name":"Format","kind":"enum","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/format","doc":"Format An enum representing the format of the map image. See also Google Static Maps API","property":[{"name":"PNG","type":"Enum","doc":"8-bit PNG format."},{"name":"PNG8","type":"Enum","doc":"8-bit PNG format."},{"name":"PNG32","type":"Enum","doc":"32-bit PNG format."},{"name":"GIF","type":"Enum","doc":"GIF format."},{"name":"JPG","type":"Enum","doc":"JPEG format."},{"name":"JPG_BASELINE","type":"Enum","doc":"Non-progressive JPEG format."}],"method":[]},"maps.MarkerSize":{"name":"MarkerSize","kind":"enum","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/marker-size","doc":"MarkerSize An enum representing the size of a marker added to a map. See also Google Static Maps API","property":[{"name":"TINY","type":"Enum","doc":"Tiny sized markets (smallest available). Labels will not be visible on markers of this size."},{"name":"MID","type":"Enum","doc":"Medium sized markers (largest available)."},{"name":"SMALL","type":"Enum","doc":"Small sized markers. Labels will not be visible on markers of this size."}],"method":[]},"maps.Mode":{"name":"Mode","kind":"enum","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/mode","doc":"Mode An enum representing the mode of travel to use when finding directions.","property":[{"name":"DRIVING","type":"Enum","doc":"Driving directions via roads."},{"name":"WALKING","type":"Enum","doc":"Walking directions via pedestrian paths and sidewalks (where available)."},{"name":"BICYCLING","type":"Enum","doc":"Bicycling directions via bicycle paths and preferred streets (where available)."},{"name":"TRANSIT","type":"Enum","doc":"Transit directions via public transit routes (where available). This mode requires that you set either the departure or arrival time. // Log all available data for a public-transit trip. var directions = Maps.newDirectionFinder() .setOrigin('The Cloisters, New York, NY') .setDestination('JFK airport, New York, NY') .setMode(Maps.DirectionFinder.Mode.TRANSIT) .setDepart(new Date()) .getDirections(); var route = directions.routes[0]; Logger.log(route);"}],"method":[]},"maps.Type":{"name":"Type","kind":"enum","global":false,"category":"maps","url":"http://developers.google.com/apps-script/reference/maps/type","doc":"Type An enum representing the type of map to render. See also Google Static Maps API","property":[{"name":"ROADMAP","type":"Enum","doc":"A standard roadmap, as is normally shown on the Google Maps website."},{"name":"SATELLITE","type":"Enum","doc":"A satellite map."},{"name":"TERRAIN","type":"Enum","doc":"A physical relief map, showing terrain and vegetation."},{"name":"HYBRID","type":"Enum","doc":"A hybrid of the satellite and roadmap maps, showing a transparent layer of major streets and place names on the satellite map."}],"method":[]}}