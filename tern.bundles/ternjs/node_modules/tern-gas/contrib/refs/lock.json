{"lock.LockService":{"name":"LockService","kind":"class","global":true,"category":"lock","url":"http://developers.google.com/apps-script/reference/lock/lock-service","doc":"Prevents concurrent access to sections of code. This can be useful when you have multiple users or processes modifying a shared resource and want to prevent collisions.","property":[],"method":[{"name":"getPrivateLock","signature":"getPrivateLock()","return":"lock.Lock","doc":"Gets a lock that prevents the current user from concurrently running a section of code.","url":"http://developers.google.com/apps-script/reference/lock/#getPrivateLock()","argument":[]},{"name":"getPublicLock","signature":"getPublicLock()","return":"lock.Lock","doc":"Gets a lock that prevents any user from concurrently running a section of code.","url":"http://developers.google.com/apps-script/reference/lock/#getPublicLock()","argument":[]}]},"lock.Lock":{"name":"Lock","kind":"class","global":false,"category":"lock","url":"http://developers.google.com/apps-script/reference/lock/lock","doc":"A representation of a mutual-exclusion lock. This class allows scripts to make sure that only one instance of the script is executing a given section of code at a time. This is particularly useful for callbacks and triggers, where a user action may cause changes to a shared resource and you want to ensure that aren't collisions. The following examples shows how to use a lock in a form submit handler. // Generates a unique ticket number for every form submission. function onFormSubmit(e) { var targetCell = e.range.offset(0, e.range.getNumColumns(), 1, 1); // Get a public lock on this script, because we're about to modify a shared resource. var lock = LockService.getPublicLock(); // Wait for up to 30 seconds for other processes to finish. lock.waitLock(30000); var ticketNumber = Number(ScriptProperties.getProperty('lastTicketNumber')) + 1; ScriptProperties.setProperty('lastTicketNumber', ticketNumber); // Release the lock so that other processes can continue. lock.releaseLock(); targetCell.setValue(ticketNumber); } Without the LockService, if two users submit the form at approximately the same time the ticket numbers could end up the same, since the lastTicketNumber property could change after it was read from the ScriptProperties but before the new value was written back.","property":[],"method":[{"name":"hasLock","signature":"hasLock()","return":"Boolean","doc":"Returns true if the lock was aquired.","url":"http://developers.google.com/apps-script/reference/lock/#hasLock()","argument":[]},{"name":"releaseLock","signature":"releaseLock()","return":"void","doc":"Releases the lock, allowing other processes waiting on the lock to continue.","url":"http://developers.google.com/apps-script/reference/lock/#releaseLock()","argument":[]},{"name":"tryLock","signature":"tryLock(timeoutInMillis)","return":"Boolean","doc":"Attempts to aquire the lock, timing out after the provided number of milliseconds.","url":"http://developers.google.com/apps-script/reference/lock/#tryLock(Integer)","argument":[{"name":"timeoutInMillis","type":"Integer","doc":"how long to wait to aquire the lock, in milliseconds"}]},{"name":"waitLock","signature":"waitLock(timeoutInMillis)","return":"void","doc":"Attempts to aquire the lock, timing out with an exception after the provided number of milliseconds.","url":"http://developers.google.com/apps-script/reference/lock/#waitLock(Integer)","argument":[{"name":"timeoutInMillis","type":"Integer","doc":"how long to wait to aquire the lock, in milliseconds"}]}]}}