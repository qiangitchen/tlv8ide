{
  "name": "carrier",
  "description": "Evented stream line reader for node.js",
  "version": "0.1.14",
  "homepage": "http://github.com/pgte/carrier",
  "author": {
    "name": "Pedro Teixeira",
    "email": "pedro.teixeira@gmail.com"
  },
  "contributors": [
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com"
    },
    {
      "name": "StÃ©phan Kochen",
      "email": "stephan@kochen.nl"
    },
    {
      "name": "Patrick Georgi",
      "url": "https://github.com/pgeorgi"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/pgte/carrier.git"
  },
  "bugs": {
    "url": "http://github.com/pgte/carrier/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.3.0"
  },
  "devDependencies": {
    "tap": "0.2"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "main": "./lib/carrier.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/pgte/carrier/raw/master/LICENSE"
    }
  ],
  "readme": "[![build status](https://secure.travis-ci.org/pgte/carrier.png)](http://travis-ci.org/pgte/carrier)\nCarrier helps you implement new-line terminated protocols over node.js.\n\nThe client can send you chunks of lines and carrier will only notify you on each completed line.\n\n## Install\n\n    $ npm install carrier\n    \n## Usage\n\n```javascript\nvar net     = require('net'),\n    carrier = require('carrier');\n\nvar server = net.createServer(function(conn) {\n  carrier.carry(conn, function(line) {\n    console.log('got one line: ' + line);\n  });\n});\nserver.listen(4001);\n```\n  \nOr, you can also listen to the \"line\" event on the returned object of carrier.carry() like this:\n\n```javascript\nvar net     = require('net'),\n    carrier = require('carrier');\n\nvar server = net.createServer(function(conn) {\n  var my_carrier = carrier.carry(conn);\n  my_carrier.on('line',  function(line) {\n    console.log('got one line: ' + line);\n  });\n});\nserver.listen(4001);\n```\ncarrier.carry accepts the following options:\n\n```javascript\n  carrier.carry(reader, listener, encoding, separator)\n```\n* reader: the stream reader\n* listener: a \"line\" event listener function\n* encoding: what encoding to assume. Default: \"utf8\"\n* separator: what line separator to use. Default: /\\r?\\n/\n\nAll are optional except for the first.",
  "readmeFilename": "README.markdown",
  "_id": "carrier@0.1.14",
  "_shasum": "7f6099bc0326e26149b052de165f9dbb3b79ec62",
  "_from": "carrier@^0.1.13",
  "_resolved": "https://registry.npmjs.org/carrier/-/carrier-0.1.14.tgz"
}
